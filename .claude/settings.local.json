{
  "permissions": {
    "allow": [
      "Bash(ssh root@164.90.207.230:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git fetch:*)",
      "Bash(curl:*)",
      "Bash(npm run build:*)",
      "WebSearch",
      "Bash(psql:*)",
      "Bash(python -m py_compile:*)",
      "Bash(find:*)",
      "Bash(git revert:*)",
      "WebFetch(domain:community.openai.com)",
      "WebFetch(domain:cookbook.openai.com)",
      "WebFetch(domain:platform.openai.com)",
      "WebFetch(domain:github.com)",
      "Bash(python -c:*)",
      "Bash(python add_invite_translations.py:*)",
      "Bash(cat:*)",
      "Bash(for lang in de es hi id it ja nl pl pt th tr vi zh)",
      "Bash(do echo \"=== $lang.json ===\")",
      "Bash(done)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(for lang in de es ar hi id it ja nl pl pt th tr vi zh)",
      "Bash(do python3 -c \"\nimport json\n\nfile_path = ''frontend/public/locales/$lang.json''\n\nwith open(file_path, ''r'', encoding=''utf-8'') as f:\n    data = json.load(f)\n\nif ''legal'' not in data:\n    data[''legal''] = {}\n\ndata[''legal''][''privacyPolicy''] = ''Privacy Policy''\ndata[''legal''][''privacyPolicyDesc''] = ''How we collect, use, and protect your personal information. Includes data retention periods and your GDPR rights.''\ndata[''legal''][''readPrivacyPolicy''] = ''Read Privacy Policy''\ndata[''legal''][''termsOfService''] = ''Terms of Service''\ndata[''legal''][''termsOfServiceDesc''] = ''Our service agreement including acceptable use, fees, your data rights, and what happens when you delete your account.''\ndata[''legal''][''readTermsOfService''] = ''Read Terms of Service''\ndata[''legal''][''lastUpdated''] = ''Last updated''\n\nwith open(file_path, ''w'', encoding=''utf-8'') as f:\n    json.dump(data, f, ensure_ascii=False, indent=2)\n\nprint(''Updated $lang.json'')\n\")",
      "Bash(OPENAI_API_KEY=\"YOUR_API_KEY_HERE\" python scripts/generate_voice_previews.py)",
      "Bash(gh run list:*)",
      "Bash(node:*)",
      "WebFetch(domain:grafana.com)",
      "WebFetch(domain:prometheus.io)",
      "WebFetch(domain:docs.digitalocean.com)",
      "Bash(git reset:*)",
      "Bash(git ls-tree:*)",
      "Bash(git checkout:*)",
      "Bash(git restore:*)",
      "WebFetch(domain:supabase.com)",
      "WebFetch(domain:docs.weaviate.io)",
      "WebFetch(domain:api.supabase.com)",
      "Bash(Module Name)",
      "Bash(Version: 1.4.1)",
      "Bash(Last modified: 2025-10-26)",
      "Bash(test:*)",
      "Bash(git mv:*)",
      "Bash(docker-compose up:*)",
      "WebFetch(domain:aviagen.com)",
      "WebFetch(domain:afs.mgcafe.uky.edu)",
      "WebFetch(domain:academic.oup.com)",
      "Read(//c/**)",
      "Bash(pip install:*)",
      "Bash(redis-cli ping:*)",
      "Bash(timeout 3 echo:*)",
      "Bash(timeout 5 echo:*)",
      "Bash(timeout 4 echo:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill /F /PID 30864)",
      "Bash(powershell -Command \"Stop-Process -Id 30864 -Force\")",
      "Bash(timeout 5 python:*)",
      "Bash(dir:*)",
      "Bash(is unsupported\" error by adding method check to skip non-GET requests.\n\nChanges:\n- Added check to skip POST/PUT/DELETE requests before caching\n- Only GET requests are now cached (as per Cache API spec)\n- Updated Service Worker version to 1.1.2 to force refresh\n\nThis resolves the console error when the SW tried to cache\nAPI POST requests like /api/v1/monitoring endpoints.\n\nGenerated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
