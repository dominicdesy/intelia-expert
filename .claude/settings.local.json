{
  "permissions": {
    "allow": [
      "Bash(git commit -m \"$(cat <<''EOF''\nQuick Win #2: Balanced RAG Prompt for LLM Fallback\n\nCHANGES:\n- generators.py lines 629-631: Removed \"database\" references\n- Line 629: \"insufficient context â†’ use general poultry expertise\"\n- Line 631: \"partial context â†’ supplement with expert knowledge\"\n- Temperature: Already optimal at 0.1 (no change needed)\n\nRATIONALE:\n- Architecture: PostgreSQL â†’ Weaviate â†’ LLM fallback\n- User shouldn''t know about \"database\" or internal systems\n- LLM should use general knowledge when Weaviate empty\n- Prevents \"I don 't know\" when LLM could help\n\nEXPECTED IMPACT:\n- Answer Relevancy: +10-15% (more helpful responses)\n- Faithfulness: Stable (temp 0.1 prevents hallucinations)\n- User Experience: Professional, no tech jargon\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(export PYTHONIOENCODING=utf-8)",
      "Bash(python scripts/run_ragas_evaluation.py:*)",
      "Bash(tee:*)",
      "Bash(timeout:*)",
      "Bash(cat:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(python -c \"import sys, json; d=json.load(sys.stdin); print(f\"\"Overall: {d[''''overall_score'''']:.2%}\\nContext Precision: {d[''''context_precision'''']:.2%}\\nContext Recall: {d[''''context_recall'''']:.2%}\\nFaithfulness: {d[''''faithfulness'''']:.2%}\\nAnswer Relevancy: {d[''''answer_relevancy'''']:.2%}\"\")\")",
      "Bash(python -c \"import sys, json; d=json.load(sys.stdin); print(f\"\"Overall: {d.get(''''metrics'''', {}).get(''''overall_score'''', 0):.2%}\\nContext Precision: {d.get(''''metrics'''', {}).get(''''context_precision'''', 0):.2%}\\nFaithfulness: {d.get(''''metrics'''', {}).get(''''faithfulness'''', 0):.2%}\"\")\")",
      "Bash(export RERANKER_TYPE=cohere)",
      "Bash(python:*)",
      "Bash(iconv:*)",
      "Bash(while true)",
      "Bash(do sleep:*)",
      "Bash(done)",
      "Bash(break)",
      "Bash(git log:*)",
      "Bash(awk:*)",
      "WebFetch(domain:www.figma.com)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint)",
      "Bash(npm run build:*)"
    ],
    "deny": [],
    "ask": []
  }
}
