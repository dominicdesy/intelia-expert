# -*- coding: utf-8 -*-
"""
main.py - Intelia Expert Backend - ARCHITECTURE MODULAIRE PURE
Point d'entr√©e minimaliste avec d√©l√©gation compl√®te aux modules
"""

import os
import asyncio
import logging
import time
from contextlib import asynccontextmanager
from pathlib import Path

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv

# === IMPORTS MODULAIRES ===
from config.config import (
    validate_config,
    BASE_PATH,
    ALLOWED_ORIGINS,
    STARTUP_TIMEOUT,
    SUPPORTED_LANGUAGES,
)
from utils.imports_and_dependencies import require_critical_dependencies
from utils.monitoring import create_health_monitor
from utils.utilities import setup_logging
from api.endpoints import create_router

# === DEBUG DEPLOYMENT - MESSAGES VISIBLES ===
print("=" * 80)
print("üî• VERSION FINALE MAIN.PY CHARG√âE - TOUS ENDPOINTS DANS ROUTER")
print("üî• VERSION: 4.0.4-translation-service-fixed")
print("üî• TIMESTAMP CHARGEMENT:", time.time())
print("=" * 80)

# Configuration
load_dotenv()
setup_logging(os.getenv("LOG_LEVEL", "INFO"))
logger = logging.getLogger(__name__)

# Message de log imm√©diat
logger.critical(
    "üö® VERSION FINALE D√âTECT√âE - main.py version 4.0.4-translation-service-fixed"
)
logger.critical("üö® Tous les endpoints sont maintenant dans le router !")
logger.critical("üö® Service de traduction initialis√© au d√©marrage !")
logger.critical("üö® TIMESTAMP LOGGER: %s", time.time())

# Services globaux (inject√©s dans les endpoints)
services = {}

# ============================================================================
# GESTION DU CYCLE DE VIE - VERSION FINALE AVEC TRADUCTION
# ============================================================================


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie avec injection correcte des services"""

    # MESSAGE CRITIQUE AU D√âMARRAGE
    logger.critical("üî•üî•üî• D√âMARRAGE VERSION FINALE - ARCHITECTURE CENTRALIS√âE üî•üî•üî•")
    logger.critical("üî•üî•üî• TIMESTAMP LIFESPAN: %s üî•üî•üî•", time.time())
    print("üî•üî•üî• LIFESPAN D√âMARR√â - VERSION FINALE üî•üî•üî•")

    logger.info("üöÄ D√©marrage Intelia Expert Backend - Architecture Modulaire")

    try:
        # 1. Validation configuration
        config_valid, config_errors = validate_config()
        if not config_valid:
            logger.error(f"Configuration invalide: {config_errors}")
            for error in config_errors:
                logger.warning(f"Config: {error}")
        else:
            logger.info("‚úÖ Configuration valid√©e")

        # 2. V√©rifier d√©pendances critiques
        logger.info("Validation des d√©pendances critiques...")
        require_critical_dependencies()
        logger.info("‚úÖ D√©pendances critiques valid√©es")

        # 3. Pr√©-chargement du mod√®le FastText pour d√©tection multilingue
        logger.info("Pr√©-chargement du mod√®le FastText...")
        try:
            from utils.utilities import _load_fasttext_model
            from config.config import FASTTEXT_MODEL_PATH

            # V√©rifier si le mod√®le existe, sinon le t√©l√©charger
            if not os.path.exists(FASTTEXT_MODEL_PATH):
                logger.info(f"T√©l√©chargement du mod√®le FastText: {FASTTEXT_MODEL_PATH}")

                # T√©l√©charger selon le type de mod√®le dans la variable d'environnement
                if "lid" in FASTTEXT_MODEL_PATH.lower() or "176" in FASTTEXT_MODEL_PATH:
                    # Mod√®le de d√©tection de langue - t√©l√©chargement direct
                    logger.info(
                        "T√©l√©chargement direct du mod√®le de d√©tection de langue..."
                    )
                    import urllib.request

                    # URL directe du mod√®le de d√©tection de langue FastText
                    model_url = "https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.ftz"
                    logger.info("T√©l√©chargement depuis l'URL officielle FastText...")

                    urllib.request.urlretrieve(model_url, FASTTEXT_MODEL_PATH)
                    logger.info(f"Mod√®le t√©l√©charg√© vers: {FASTTEXT_MODEL_PATH}")

                else:
                    # Mod√®le d'embeddings - utiliser fasttext.util
                    import fasttext.util

                    if "en" in FASTTEXT_MODEL_PATH:
                        logger.info("T√©l√©chargement du mod√®le d'embeddings anglais...")
                        fasttext.util.download_model("en", if_exists="ignore")
                        if not os.path.exists(FASTTEXT_MODEL_PATH) and os.path.exists(
                            "cc.en.300.bin"
                        ):
                            import shutil

                            shutil.copy("cc.en.300.bin", FASTTEXT_MODEL_PATH)
                            logger.info(f"Mod√®le copi√© vers: {FASTTEXT_MODEL_PATH}")

            # Maintenant essayer de charger le mod√®le
            fasttext_model = _load_fasttext_model()
            if fasttext_model:
                logger.info("‚úÖ Mod√®le FastText pr√©-charg√© avec succ√®s")
            else:
                logger.warning(
                    "‚ö†Ô∏è Mod√®le FastText non disponible - d√©tection langue d√©grad√©e"
                )

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur pr√©-chargement FastText: {e}")
            # Log plus d√©taill√© pour diagnostic
            import traceback

            logger.debug(f"Traceback FastText: {traceback.format_exc()}")

        # 4. NOUVEAU: Initialisation du service de traduction universel
        logger.info("Initialisation du service de traduction universel...")
        try:
            from utils.translation_service import init_global_translation_service

            # Chemin absolu vers les dictionnaires
            dict_path = Path(__file__).parent / "config"

            logger.info(f"Chemin dictionnaires: {dict_path}")

            # Initialiser le service global
            translation_service = init_global_translation_service(
                dict_path=str(dict_path),
                supported_languages=SUPPORTED_LANGUAGES,
                enable_google_fallback=os.getenv(
                    "ENABLE_GOOGLE_TRANSLATE", "false"
                ).lower()
                == "true",
                google_api_key=os.getenv("GOOGLE_TRANSLATE_API_KEY"),
                enable_technical_exclusion=True,
            )

            if translation_service:
                # CORRECTION: Pr√©charger les dictionnaires pour toutes les langues support√©es
                logger.info(
                    f"Pr√©chargement des dictionnaires pour {len(SUPPORTED_LANGUAGES)} langues..."
                )
                preload_results = translation_service.preload_languages(
                    list(SUPPORTED_LANGUAGES)
                )

                # Comptabiliser les succ√®s
                loaded_count = sum(1 for success in preload_results.values() if success)
                failed_langs = [
                    lang for lang, success in preload_results.items() if not success
                ]

                # V√©rifier que les dictionnaires sont bien charg√©s
                num_dicts = len(translation_service._language_dictionaries)
                logger.info(
                    f"‚úÖ Service de traduction initialis√© - {num_dicts} dictionnaires charg√©s ({loaded_count}/{len(SUPPORTED_LANGUAGES)} langues)"
                )

                if failed_langs:
                    logger.warning(f"‚ö†Ô∏è Langues non charg√©es: {', '.join(failed_langs)}")

                # V√©rifier les domaines disponibles pour debug
                try:
                    available_domains = translation_service.get_available_domains()
                    logger.info(
                        f"üìö Domaines disponibles: {len(available_domains)} domaines"
                    )
                    if available_domains:
                        logger.debug(
                            f"Domaines: {', '.join(list(available_domains)[:5])}"
                        )
                except Exception as domain_err:
                    logger.warning(f"Impossible de lister les domaines: {domain_err}")

                services["translation_service"] = translation_service
            else:
                logger.warning("‚ö†Ô∏è Service de traduction retourn√© None")

        except ImportError as e:
            logger.error(f"‚ùå Import error service traduction: {e}")
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation service traduction: {e}")
            import traceback

            logger.debug(f"Traceback traduction: {traceback.format_exc()}")

        # 5. Cr√©er health monitor
        logger.info("Initialisation SystemHealthMonitor...")
        health_monitor = await create_health_monitor()
        services["health_monitor"] = health_monitor

        # 6. Validation startup compl√®te
        logger.info("Validation startup requirements...")
        validation_result = await asyncio.wait_for(
            health_monitor.validate_startup_requirements(), timeout=STARTUP_TIMEOUT
        )

        # CHANGEMENT PRINCIPAL: Ne pas arr√™ter l'app si seul le cache √©choue
        if validation_result["overall_status"] == "failed":
            errors = validation_result.get("errors", [])
            critical_errors = [
                err
                for err in errors
                if not any(
                    keyword in err.lower()
                    for keyword in ["cache", "redis", "connexion", "timeout", "network"]
                )
            ]

            if critical_errors:
                logger.error("‚ùå Erreurs critiques d√©tect√©es - Arr√™t de l'application")
                logger.error(f"Erreurs critiques: {critical_errors}")
                raise RuntimeError(f"Critical startup errors: {critical_errors}")
            else:
                logger.warning("‚ö†Ô∏è Erreurs de services externes uniquement - Continuons")
                logger.warning(f"Services d√©grad√©s: {errors}")

        elif validation_result["overall_status"] == "degraded":
            logger.warning("‚ö†Ô∏è Application d√©marr√©e en mode d√©grad√©")
            for warning in validation_result.get("warnings", []):
                logger.warning(f"  - {warning}")
        else:
            logger.info("‚úÖ Application d√©marr√©e avec succ√®s")

        # 7. V√©rifications post-startup des services
        logger.info("V√©rification des services initialis√©s...")

        # V√©rification explicite du cache
        cache_core = health_monitor.get_service("cache_core")
        if cache_core:
            cache_initialized = getattr(cache_core, "initialized", False)
            cache_enabled = getattr(cache_core, "enabled", False)

            if cache_initialized and cache_enabled:
                logger.info("‚úÖ Cache Core op√©rationnel")
            elif cache_core:
                logger.warning("‚ö†Ô∏è Cache Core pr√©sent mais non op√©rationnel")
            else:
                logger.warning("‚ö†Ô∏è Cache Core non initialis√© - mode sans cache")
        else:
            logger.warning("‚ö†Ô∏è Cache Core non disponible - mode sans cache")

        # V√©rification RAG Engine
        rag_engine = health_monitor.get_service("rag_engine_enhanced")
        if rag_engine and getattr(rag_engine, "is_initialized", False):
            logger.info("‚úÖ RAG Engine op√©rationnel")
        else:
            logger.warning("‚ö†Ô∏è RAG Engine non disponible")

        # V√©rification service de traduction
        translation_service = services.get("translation_service")
        if translation_service:
            logger.info("‚úÖ Service de traduction op√©rationnel")
        else:
            logger.warning("‚ö†Ô∏è Service de traduction non disponible")

        # Log statut des int√©grations avanc√©es
        langsmith_status = validation_result.get("langsmith_validation", {})
        if langsmith_status.get("status") == "configured":
            logger.info(
                f"üß† LangSmith actif - Projet: {langsmith_status.get('project')}"
            )

        rrf_status = validation_result.get("rrf_validation", {})
        if rrf_status.get("status") == "configured":
            logger.info(
                f"‚ö° RRF Intelligent actif - Learning: {rrf_status.get('learning_mode')}"
            )

        # 8. CORRECTION FINALE : Re-cr√©er le router avec les services initialis√©s
        logger.critical("üîß INJECTION DES SERVICES - ARCHITECTURE CENTRALIS√âE üîß")
        logger.info("Mise √† jour du router avec services initialis√©s...")

        # Cr√©er le nouveau router avec les services maintenant disponibles
        updated_router = create_router(services)

        # Remplacer les routes existantes
        app.router.routes.clear()
        app.include_router(updated_router)

        logger.critical("‚úÖ ROUTER CENTRALIS√â MIS √Ä JOUR AVEC SERVICES INJECT√âS ‚úÖ")
        logger.info("‚úÖ Router mis √† jour avec services inject√©s")

        # 9. Application pr√™te
        logger.info(f"üåê API disponible sur {BASE_PATH}")
        logger.info("üìä Services initialis√©s:")
        for service_name, service in services.items():
            service_status = "‚úÖ OK" if service else "‚ùå FAILED"
            logger.info(
                f"  - {service_name}: {type(service).__name__} {service_status}"
            )

        # Log final du mode de fonctionnement
        if validation_result["overall_status"] == "healthy":
            logger.info("üéØ Mode: COMPLET (tous services op√©rationnels)")
        elif validation_result["overall_status"] == "degraded":
            logger.info("üì∂ Mode: D√âGRAD√â (services essentiels seulement)")
        else:
            logger.info("üì∂ Mode: MINIMAL (fonctionnalit√©s de base)")

        logger.critical(
            "üéâ APPLICATION VERSION FINALE PR√äTE - ARCHITECTURE CENTRALIS√âE üéâ"
        )
        print("üéâ APPLICATION VERSION FINALE PR√äTE üéâ")

        yield

    except asyncio.TimeoutError:
        logger.error(f"‚ùå Timeout startup apr√®s {STARTUP_TIMEOUT}s")
        logger.warning("D√©marrage en mode minimal suite au timeout")
        yield

    except Exception as e:
        logger.error(f"‚ùå Erreur au d√©marrage: {e}")
        logger.warning("Tentative de d√©marrage en mode minimal...")

        if "health_monitor" not in services:
            try:
                minimal_monitor = await create_health_monitor()
                services["health_monitor"] = minimal_monitor
                logger.info("‚úÖ Health monitor minimal cr√©√©")
            except Exception as monitor_e:
                logger.error(f"Impossible de cr√©er health monitor: {monitor_e}")

        yield

    finally:
        # Nettoyage am√©lior√©
        logger.info("üßπ Nettoyage des ressources...")
        logger.critical("üî• SHUTDOWN VERSION FINALE üî•")

        try:
            # Cleanup des services via health monitor
            health_monitor = services.get("health_monitor")
            if health_monitor:
                all_services = health_monitor.get_all_services()
                cleanup_errors = []

                # Cleanup cache avec timeout
                cache_core = all_services.get("cache_core")
                if cache_core and hasattr(cache_core, "cleanup"):
                    try:
                        await asyncio.wait_for(cache_core.cleanup(), timeout=5.0)
                        logger.info("‚úÖ Cache Core nettoy√©")
                    except Exception as e:
                        cleanup_errors.append(f"Cache cleanup: {e}")

                # Cleanup RAG engine avec timeout
                rag_engine = all_services.get("rag_engine_enhanced")
                if rag_engine and hasattr(rag_engine, "cleanup"):
                    try:
                        await asyncio.wait_for(rag_engine.cleanup(), timeout=5.0)
                        logger.info("‚úÖ RAG Engine nettoy√©")
                    except Exception as e:
                        cleanup_errors.append(f"RAG cleanup: {e}")

                # Cleanup agent RAG
                agent_rag = all_services.get("agent_rag_engine")
                if agent_rag and hasattr(agent_rag, "cleanup"):
                    try:
                        await asyncio.wait_for(agent_rag.cleanup(), timeout=3.0)
                        logger.info("‚úÖ Agent RAG nettoy√©")
                    except Exception as e:
                        cleanup_errors.append(f"Agent RAG cleanup: {e}")

                if cleanup_errors:
                    logger.warning(
                        f"Erreurs de nettoyage (non critiques): {cleanup_errors}"
                    )

            # Nettoyer les services globaux
            services.clear()

        except Exception as e:
            logger.error(f"Erreur nettoyage: {e}")

        logger.info("‚úÖ Application arr√™t√©e proprement")


# ============================================================================
# CR√âATION DE L'APPLICATION - VERSION FINALE SIMPLIFI√âE
# ============================================================================

# MESSAGE DEBUG CR√âATION APP
logger.critical("üóÇÔ∏è CR√âATION FASTAPI APP - VERSION FINALE üóÇÔ∏è")

# Cr√©er l'application FastAPI
app = FastAPI(
    title="Intelia Expert Backend",
    description="API RAG Enhanced avec LangSmith et RRF Intelligent - Architecture Centralis√©e",
    version="4.0.4-translation-service-fixed",
    lifespan=lifespan,
)

logger.critical("‚úÖ FASTAPI APP CR√â√âE AVEC ARCHITECTURE CENTRALIS√âE ‚úÖ")

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# ARCHITECTURE FINALE: Router initial vide, sera mis √† jour dans lifespan
initial_router = create_router({})  # Router vide au d√©marrage
app.include_router(initial_router)

logger.critical("üîó ROUTER INITIAL AJOUT√â - TOUS ENDPOINTS DANS LE ROUTER üîó")

# ============================================================================
# POINT D'ENTR√âE
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("PORT", "8000"))
    host = os.getenv("HOST", "0.0.0.0")

    logger.critical("üöÄ D√âMARRAGE SERVEUR VERSION FINALE SUR %s:%s", host, port)
    logger.info(f"üöÄ D√©marrage serveur sur {host}:{port}")
    logger.info("üîß Architecture modulaire centralis√©e activ√©e")
    logger.info("üõ°Ô∏è Mode d√©grad√© support√© pour cache/Redis")
    logger.info("üîß Injection des services corrig√©e")
    logger.info("üåê Service de traduction initialis√© au d√©marrage")
    logger.critical("üî• VERSION FINALE: 4.0.4-translation-service-fixed üî•")

    uvicorn.run("main:app", host=host, port=port, reload=False, log_level="info")
