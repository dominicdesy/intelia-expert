# -*- coding: utf-8 -*-

"""

main.py - Intelia Expert Backend - ARCHITECTURE MODULAIRE PURE
Point d'entr√©e minimaliste avec d√©l√©gation compl√®te aux modules

"""

import os
import asyncio
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv

# === IMPORTS MODULAIRES - CORRECTIONS ===
# AVANT (avec erreur):
# from .config.config import validate_config, BASE_PATH, ALLOWED_ORIGINS, STARTUP_TIMEOUT
# from .utils.imports_and_dependencies import require_critical_dependencies
# from .utils.monitoring import create_health_monitor
# from .utils.utilities import setup_logging
# from .api.endpoints import create_router

# APR√àS (corrig√©):
from config.config import validate_config, BASE_PATH, ALLOWED_ORIGINS, STARTUP_TIMEOUT
from utils.imports_and_dependencies import require_critical_dependencies
from utils.monitoring import create_health_monitor
from utils.utilities import setup_logging
from api.endpoints import create_router

# Configuration
load_dotenv()
setup_logging(os.getenv("LOG_LEVEL", "INFO"))
logger = logging.getLogger(__name__)

# Services globaux (inject√©s dans les endpoints)
services = {}

# ============================================================================
# GESTION DU CYCLE DE VIE
# ============================================================================


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestion du cycle de vie avec architecture modulaire"""

    logger.info("üöÄ D√©marrage Intelia Expert Backend - Architecture Modulaire")

    try:
        # 1. Validation configuration
        config_valid, config_errors = validate_config()
        if not config_valid:
            logger.error(f"Configuration invalide: {config_errors}")
            for error in config_errors:
                logger.warning(f"Config: {error}")

        # 2. V√©rifier d√©pendances critiques
        logger.info("Validation des d√©pendances critiques...")
        require_critical_dependencies()
        logger.info("‚úÖ D√©pendances critiques valid√©es")

        # 3. Cr√©er health monitor
        logger.info("Initialisation SystemHealthMonitor...")
        health_monitor = await create_health_monitor()
        services["health_monitor"] = health_monitor

        # 4. Validation startup compl√®te
        logger.info("Validation startup requirements...")
        validation_result = await asyncio.wait_for(
            health_monitor.validate_startup_requirements(), timeout=STARTUP_TIMEOUT
        )

        if validation_result["overall_status"] == "failed":
            logger.error("‚ùå Validation startup √©chou√©e - Arr√™t de l'application")
            raise RuntimeError(
                f"Startup validation failed: {validation_result['errors']}"
            )

        elif validation_result["overall_status"] == "degraded":
            logger.warning("‚ö†Ô∏è Application d√©marr√©e en mode d√©grad√©")
            for warning in validation_result.get("warnings", []):
                logger.warning(f"  - {warning}")

        else:
            logger.info("‚úÖ Application d√©marr√©e avec succ√®s")

            # Log statut des int√©grations
            langsmith_status = validation_result.get("langsmith_validation", {})
            if langsmith_status.get("status") == "configured":
                logger.info(
                    f"üß† LangSmith actif - Projet: {langsmith_status.get('project')}"
                )

            rrf_status = validation_result.get("rrf_validation", {})
            if rrf_status.get("status") == "configured":
                logger.info(
                    f"‚ö° RRF Intelligent actif - Learning: {rrf_status.get('learning_mode')}"
                )

        # 5. Application pr√™te
        logger.info(f"üåê API disponible sur {BASE_PATH}")
        logger.info("üìä Services initialis√©s:")
        for service_name, service in services.items():
            logger.info(f"  - {service_name}: {type(service).__name__}")

        yield

    except asyncio.TimeoutError:
        logger.error(f"‚ùå Timeout startup apr√®s {STARTUP_TIMEOUT}s")
        raise RuntimeError("Startup timeout")

    except Exception as e:
        logger.error(f"‚ùå Erreur critique au d√©marrage: {e}")
        raise

    finally:
        # Nettoyage
        logger.info("üßπ Nettoyage des ressources...")

        try:
            # Cleanup des services via health monitor
            health_monitor = services.get("health_monitor")
            if health_monitor:
                all_services = health_monitor.get_all_services()

                # Cleanup cache
                cache_core = all_services.get("cache_core")
                if cache_core and hasattr(cache_core, "cleanup"):
                    await cache_core.cleanup()

                # Cleanup RAG engine
                rag_engine = all_services.get("rag_engine_enhanced")
                if rag_engine and hasattr(rag_engine, "cleanup"):
                    await rag_engine.cleanup()

                # Cleanup agent RAG
                agent_rag = all_services.get("agent_rag_engine")
                if agent_rag and hasattr(agent_rag, "cleanup"):
                    await agent_rag.cleanup()

            # Nettoyer les services globaux
            services.clear()

        except Exception as e:
            logger.error(f"Erreur nettoyage: {e}")

        logger.info("‚úÖ Application arr√™t√©e")


# ============================================================================
# CR√âATION DE L'APPLICATION
# ============================================================================

# Cr√©er l'application FastAPI
app = FastAPI(
    title="Intelia Expert Backend",
    description="API RAG Enhanced avec LangSmith et RRF Intelligent - Architecture Modulaire",
    version="4.0.0-modular",
    lifespan=lifespan,
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Inclusion du router avec services inject√©s
router = create_router(services)
app.include_router(router)

# ============================================================================
# ENDPOINTS DIRECTS (pour compatibilit√©)
# ============================================================================

# ‚ùå SECTION SUPPRIM√âE - doublon de route /health retir√©


@app.get("/test-json")
async def test_json_direct():
    """Test simple de s√©rialisation JSON"""
    from utils.utilities import safe_serialize_for_json

    try:
        test_data = {
            "string": "test",
            "number": 42,
            "boolean": True,
            "list": [1, 2, 3],
            "dict": {"nested": "value"},
            "timestamp": __import__("time").time(),
        }

        # Test de s√©rialisation
        safe_data = safe_serialize_for_json(test_data)

        return {
            "status": "success",
            "original_data": test_data,
            "serialized_data": safe_data,
            "json_test": "OK",
            "architecture": "modular",
        }

    except Exception as e:
        return {"status": "error", "error": str(e), "json_test": "FAILED"}


# ============================================================================
# POINT D'ENTR√âE
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("PORT", "8000"))
    host = os.getenv("HOST", "0.0.0.0")

    logger.info(f"üöÄ D√©marrage serveur sur {host}:{port}")
    logger.info("üîß Architecture modulaire activ√©e")

    uvicorn.run("main:app", host=host, port=port, reload=False, log_level="info")
