# -*- coding: utf-8 -*-
"""
post_processor.py - Response post-processing utilities
Extracted from generators.py for better modularity and maintainability
"""

import logging
import re
from typing import List, Dict

from .veterinary_handler import VeterinaryHandler

logger = logging.getLogger(__name__)


class ResponsePostProcessor:
    """
    Post-processor for LLM-generated responses.

    This class provides methods to:
    - Clean and format responses
    - Add veterinary disclaimers when appropriate
    - Remove unwanted formatting artifacts
    """

    @staticmethod
    def post_process_response(
        response: str,
        enrichment,
        context_docs: List[Dict],
        query: str = "",
        language: str = "fr",
    ) -> str:
        """
        Post-processes response with automatic veterinary disclaimer addition.

        This method performs several operations:
        1. Cleans formatting artifacts (bold headers, orphan asterisks, etc.)
        2. Normalizes whitespace and line breaks
        3. Adds veterinary disclaimers if the query is health-related

        Args:
            response: Response generated by the LLM
            enrichment: Context enrichment data (ContextEnrichment object)
            context_docs: Context documents used for generation
            query: Original user question
            language: Response language code

        Returns:
            Post-processed response with disclaimer if necessary

        Examples:
            >>> processor = ResponsePostProcessor()
            >>> response = "**Header:** Some text\\n\\n1. First item\\n2. Second item"
            >>> processor.post_process_response(response, None, [], "", "en")
            'Some text\\n\\n- First item\\n- Second item'
        """
        response = response.strip()

        # ‚úÖ IMPROVED FORMATTING CLEANUP

        # 1. Remove markdown headers (##, ###, ####, etc.) - converts "## Title" to "Title"
        response = re.sub(r"^#{1,6}\s+", "", response, flags=re.MULTILINE)

        # 2. Remove list numbers (1., 2., etc.)
        response = re.sub(r"^\d+\.\s+", "", response, flags=re.MULTILINE)

        # 3. Clean orphan asterisks (lines with just ** or **)
        response = re.sub(r"^\*\*\s*$", "", response, flags=re.MULTILINE)

        # 4. COMPLETELY REMOVE bold headers (**Title:** or **Title**)
        # This rule replaces the old rules 3-5 that tried to "fix" headers
        response = re.sub(r"\*\*([^*]+?):\*\*\s*", "", response)
        response = re.sub(r"\*\*([^*]+?)\*\*\s*:", "", response)

        # 5. Clean orphan colons on isolated lines
        response = re.sub(r"^\s*:\s*$", "", response, flags=re.MULTILINE)

        # 6. Fix broken titles - join short lines (titles) that are split across multiple lines
        # Pattern: Short line ending with lowercase + newline + lowercase start = broken title
        # Example: "Standardisation des\nproc√©dures" -> "Standardisation des proc√©dures"
        response = re.sub(
            r"^([A-Z√Ä-√ù][^\n]{5,60}[a-z√†-√ø])\n([a-z√†-√ø])",
            r"\1 \2",
            response,
            flags=re.MULTILINE
        )

        # 7. Clean multiple empty lines (3+ ‚Üí 2)
        response = re.sub(r"\n{3,}", "\n\n", response)

        # 8. Remove trailing spaces
        response = re.sub(r" +$", "", response, flags=re.MULTILINE)

        # 9. Ensure space after bullet points
        response = re.sub(r"^-([^ ])", r"- \1", response, flags=re.MULTILINE)

        # Add veterinary disclaimer if the question concerns health/disease
        if query and VeterinaryHandler.is_veterinary_query(query, context_docs):
            disclaimer = VeterinaryHandler.get_veterinary_disclaimer(language)
            if disclaimer:  # Only if disclaimer is not empty
                response = response + disclaimer
                logger.info(f"üè• Veterinary disclaimer added (language: {language})")

        return response
