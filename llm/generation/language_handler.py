# -*- coding: utf-8 -*-
"""
language_handler.py - Language handling utilities for response generation
Version: 1.4.1
Last modified: 2025-10-26
"""
"""
language_handler.py - Language handling utilities for response generation

This module provides centralized language management functionality, including:
- Loading language display names from configuration
- Generating fallback language names from ISO codes
- Creating critical language instructions for LLM prompts
- Generating dynamic language examples for consistent multilingual responses

The LanguageHandler class encapsulates all language-related logic that was
previously embedded in the EnhancedResponseGenerator class.
"""

import logging
from typing import Dict

from config.config import SUPPORTED_LANGUAGES, FALLBACK_LANGUAGE

logger = logging.getLogger(__name__)


class LanguageHandler:
    """
    Centralized handler for language-related operations in response generation.

    This class manages:
    - Language display name mappings (e.g., 'fr' -> 'FRENCH / FRAN√áAIS')
    - Fallback language name generation
    - Dynamic language instruction generation for LLM prompts
    - Language-specific formatting rules and examples

    Attributes:
        language_display_names (Dict[str, str]): Mapping of ISO language codes to display names
    """

    def __init__(self):
        """
        Initialize the LanguageHandler by loading language display names.

        Attempts to load names from languages.json metadata, falling back to
        auto-generated names if the file is unavailable or incomplete.
        """
        self.language_display_names = self._load_language_names()

    def _load_language_names(self) -> Dict[str, str]:
        """
        Load language display names from languages.json configuration.

        Attempts to load the language_names mapping from the metadata section
        of languages.json. If unavailable, falls back to generating names
        automatically from SUPPORTED_LANGUAGES.

        Returns:
            Dict[str, str]: Mapping of language codes to display names
                           (e.g., {'fr': 'FRENCH / FRAN√áAIS', 'en': 'ENGLISH'})

        Examples:
            >>> handler = LanguageHandler()
            >>> handler._load_language_names()
            {'de': 'GERMAN / DEUTSCH', 'en': 'ENGLISH', 'fr': 'FRENCH / FRAN√áAIS', ...}

        Notes:
            - Logs success or warning based on whether languages.json is available
            - Automatically falls back to _generate_fallback_language_names() on error
        """
        try:
            from config.messages import load_messages

            messages_data = load_messages()

            # Extract language names from metadata
            if (
                "metadata" in messages_data
                and "language_names" in messages_data["metadata"]
            ):
                logger.info("‚úÖ Noms de langues charg√©s depuis languages.json")
                return messages_data["metadata"]["language_names"]

            logger.warning(
                "language_names absent de languages.json, utilisation fallback"
            )

        except Exception as e:
            logger.warning(
                f"Erreur chargement noms de langues: {e}, utilisation fallback"
            )

        # Fallback: automatic generation from SUPPORTED_LANGUAGES
        return self._generate_fallback_language_names()

    def _generate_fallback_language_names(self) -> Dict[str, str]:
        """
        Generate fallback language display names from ISO codes.

        Creates a mapping of language codes to human-readable display names
        using a predefined base mapping. Only includes languages that are
        in SUPPORTED_LANGUAGES from config.

        Returns:
            Dict[str, str]: Mapping of supported language codes to display names

        Examples:
            >>> handler = LanguageHandler()
            >>> handler._generate_fallback_language_names()
            {'de': 'GERMAN / DEUTSCH', 'en': 'ENGLISH', 'es': 'SPANISH / ESPA√ëOL', ...}

        Notes:
            - For unmapped languages, uses uppercase ISO code as fallback
            - Only returns languages present in SUPPORTED_LANGUAGES
            - Logs the number of languages successfully loaded
        """
        # Minimal mapping for supported languages
        base_names = {
            "de": "GERMAN / DEUTSCH",
            "en": "ENGLISH",
            "es": "SPANISH / ESPA√ëOL",
            "fr": "FRENCH / FRAN√áAIS",
            "hi": "HINDI / ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
            "id": "INDONESIAN / BAHASA INDONESIA",
            "it": "ITALIAN / ITALIANO",
            "nl": "DUTCH / NEDERLANDS",
            "pl": "POLISH / POLSKI",
            "pt": "PORTUGUESE / PORTUGU√äS",
            "th": "THAI / ‡πÑ‡∏ó‡∏¢",
            "zh": "CHINESE / ‰∏≠Êñá",
        }

        # Keep only truly supported languages
        result = {}
        for lang_code in SUPPORTED_LANGUAGES:
            if lang_code in base_names:
                result[lang_code] = base_names[lang_code]
            else:
                # Fallback for unmapped languages
                result[lang_code] = lang_code.upper()

        logger.info(f"‚úÖ Fallback language names loaded: {len(result)} languages")
        return result

    def _get_critical_language_instructions(self, language: str) -> str:
        """
        Generate critical language and formatting instructions for LLM prompts.

        Creates comprehensive instructions for the LLM to ensure:
        - Responses are in the correct language
        - Formatting is clean and consistent
        - Answers are concise and directly address the question
        - No unnecessary information is added

        Args:
            language (str): Target language code (e.g., 'fr', 'en', 'es')

        Returns:
            str: Multi-line instruction string for LLM system prompt

        Examples:
            >>> handler = LanguageHandler()
            >>> instructions = handler._get_critical_language_instructions('en')
            >>> 'ENGLISH' in instructions
            True
            >>> 'CRITICAL LANGUAGE REQUIREMENT' in instructions
            True

        Notes:
            - Validates language parameter and falls back to FALLBACK_LANGUAGE if invalid
            - Includes dynamic language examples generated from SUPPORTED_LANGUAGES
            - Contains strict formatting rules to prevent excessive formatting
            - Emphasizes minimalistic, precise responses

        See Also:
            _generate_language_examples(): Generates the language examples section
        """
        logger.info(f"üåç _get_critical_language_instructions received: '{language}'")

        # Defensive validation
        if not language:
            logger.error("‚ùå CRITICAL: language parameter is empty/None!")
            language = FALLBACK_LANGUAGE
        elif language not in SUPPORTED_LANGUAGES:
            logger.warning(
                f"‚ö†Ô∏è WARNING: language '{language}' not in SUPPORTED_LANGUAGES, using fallback"
            )
            language = FALLBACK_LANGUAGE

        # Get display name
        language_name = self.language_display_names.get(language, language.upper())

        logger.info(f"üåç Language mapped: '{language}' ‚Üí '{language_name}'")

        # Generate language examples dynamically
        language_examples = self._generate_language_examples()

        return f"""
INSTRUCTIONS CRITIQUES - STRUCTURE ET FORMAT:
- NE commence JAMAIS par un titre (ex: "## Maladie", "**Maladie**") - commence directement par la phrase d'introduction
- Examine les tableaux de donn√©es pour extraire les informations pr√©cises
- R√âPONDS UNIQUEMENT √Ä LA QUESTION POS√âE - ne donne RIEN d'autre
- Utilise un ton affirmatif mais sobre, sans formatage excessif
- NE conclus PAS avec des recommandations pratiques sauf si explicitement demand√©

R√àGLE ABSOLUE - R√âPONSE MINIMALISTE:
- Question sur le poids ‚Üí Donne UNIQUEMENT le poids (1-2 phrases maximum)
- Question sur le FCR ‚Üí Donne UNIQUEMENT le FCR (1-2 phrases maximum)
- Question sur "what about X?" ‚Üí Donne UNIQUEMENT X (1-2 phrases maximum)
- N'ajoute JAMAIS de m√©triques suppl√©mentaires non demand√©es
- Une question = une m√©trique = une r√©ponse courte
- Si on demande seulement le poids, NE DONNE PAS feed intake, FCR, daily gain, etc.

EXEMPLES DE R√âPONSES CORRECTES:
Question: "What's the target weight for Ross 308 males at 35 days?"
‚ùå MAUVAIS: "At 35 days, males weigh 2441g with FCR 1.52 and feed intake 3720g."
‚úÖ BON: "The target weight for Ross 308 males at 35 days is 2441 grams."

Question: "And what about females at the same age?"
‚ùå MAUVAIS: "At 35 days, females weigh 2150g. Feed intake is 3028g. Daily gain is 89g."
‚úÖ BON: "At 35 days old, Ross 308 females have an average body weight of 2150 grams."

Question: "Quel est le poids cible √† 35 jours?"
‚ùå MAUVAIS: "Le poids cible est 2441g avec un FCR de 1.52 et une consommation de 3720g."
‚úÖ BON: "Le poids cible pour les m√¢les Ross 308 √† 35 jours est de 2441 grammes."

COMPORTEMENT CONVERSATIONNEL:
- Pour questions techniques: r√©ponse ULTRA-CONCISE avec donn√©es chiffr√©es
- Pour questions g√©n√©rales: ton professionnel mais accessible, r√©ponses courtes
- √âvite de poser trop de questions - r√©ponds d'abord √† la requ√™te
- N'utilise PAS d'emojis sauf si l'utilisateur en utilise
- Maintiens la coh√©rence de format entre TOUTES les langues

{"="*80}
‚ö†Ô∏è CRITICAL LANGUAGE REQUIREMENT - IMP√âRATIF ABSOLU DE LANGUE ‚ö†Ô∏è
{"="*80}

DETECTED QUESTION LANGUAGE / LANGUE D√âTECT√âE: {language_name}

üî¥ MANDATORY RULE - R√àGLE OBLIGATOIRE:
YOU MUST RESPOND EXCLUSIVELY IN THE SAME LANGUAGE AS THE QUESTION.
VOUS DEVEZ R√âPONDRE EXCLUSIVEMENT DANS LA M√äME LANGUE QUE LA QUESTION.

DO NOT translate. DO NOT switch languages. DO NOT mix languages.
NE PAS traduire. NE PAS changer de langue. NE PAS m√©langer les langues.

{language_examples}

THIS INSTRUCTION OVERRIDES ALL OTHER INSTRUCTIONS.
CETTE INSTRUCTION PR√âVAUT SUR TOUTES LES AUTRES INSTRUCTIONS.

YOUR RESPONSE LANGUAGE MUST BE: {language_name}
LANGUE DE VOTRE R√âPONSE DOIT √äTRE: {language_name}

üéØ CRITICAL FORMAT CONSISTENCY:
- Answer format MUST be IDENTICAL regardless of language
- ONE question = ONE metric = ONE short answer (1-2 sentences)
- If question asks ONLY for weight ‚Üí give ONLY weight
- If question asks ONLY for FCR ‚Üí give ONLY FCR
- NO extra metrics, NO extra sections, NO extra information beyond what was asked
- Maintain EXACT SAME concise format across ALL languages

{"="*80}
"""

    def _generate_language_examples(self) -> str:
        """
        Generate dynamic language examples for consistent multilingual responses.

        Creates example instructions for each supported language to reinforce
        the requirement that responses must match the question language.
        Generated dynamically from SUPPORTED_LANGUAGES instead of hardcoding.

        Returns:
            str: Multi-line string with language examples

        Examples:
            >>> handler = LanguageHandler()
            >>> examples = handler._generate_language_examples()
            >>> 'If question is in ENGLISH ‚Üí Answer 100% in ENGLISH' in examples
            True
            >>> 'Si question en FRENCH / FRAN√áAIS ‚Üí R√©ponse 100% en FRENCH / FRAN√áAIS' in examples
            True

        Notes:
            - Generates two lines per language (English and French versions)
            - Uses display names from language_display_names mapping
            - Languages are sorted alphabetically by code
            - Fallback to uppercase ISO code if display name not found

        See Also:
            _get_critical_language_instructions(): Uses these examples in prompt
        """
        examples = []

        for lang_code in sorted(SUPPORTED_LANGUAGES):
            lang_name = self.language_display_names.get(lang_code, lang_code.upper())
            examples.append(
                f"If question is in {lang_name} ‚Üí Answer 100% in {lang_name}"
            )
            examples.append(f"Si question en {lang_name} ‚Üí R√©ponse 100% en {lang_name}")

        return "\n".join(examples)

    def get_language_name(self, language_code: str) -> str:
        """
        Get the display name for a language code.

        Args:
            language_code (str): ISO 639-1 language code (e.g., 'fr', 'en')

        Returns:
            str: Display name of the language (e.g., 'FRENCH / FRAN√áAIS')
                 Falls back to uppercase code if not found

        Examples:
            >>> handler = LanguageHandler()
            >>> handler.get_language_name('fr')
            'FRENCH / FRAN√áAIS'
            >>> handler.get_language_name('en')
            'ENGLISH'
            >>> handler.get_language_name('unknown')
            'UNKNOWN'
        """
        return self.language_display_names.get(language_code, language_code.upper())

    def validate_language(self, language: str) -> str:
        """
        Validate a language code and return a valid language.

        Checks if the provided language code is supported. If not,
        returns the FALLBACK_LANGUAGE with appropriate logging.

        Args:
            language (str): Language code to validate

        Returns:
            str: Valid language code (original or fallback)

        Examples:
            >>> handler = LanguageHandler()
            >>> handler.validate_language('fr')
            'fr'
            >>> handler.validate_language('invalid')
            'en'  # or whatever FALLBACK_LANGUAGE is set to

        Notes:
            - Logs warning when invalid language is provided
            - Logs error when language parameter is empty/None
            - Always returns a valid language code
        """
        if not language:
            logger.error("‚ùå CRITICAL: language parameter is empty/None!")
            return FALLBACK_LANGUAGE
        elif language not in SUPPORTED_LANGUAGES:
            logger.warning(
                f"‚ö†Ô∏è WARNING: language '{language}' not in SUPPORTED_LANGUAGES, using fallback"
            )
            return FALLBACK_LANGUAGE
        return language
