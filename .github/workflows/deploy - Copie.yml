name: Smart Selective Docker Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

# Évite les builds parallèles qui corrompent le registry
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ÉTAPE 1: Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      any-changes: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/deploy.yml'
            backend:
              - 'backend/**'
              - '.github/workflows/deploy.yml'

      - name: Show detected changes
        run: |
          echo "Changes detected:"
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"

  # ÉTAPE 2: Build Frontend (seulement si changé)
  build-frontend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          echo "Logging in to DigitalOcean Container Registry..."
          doctl registry login --expiry-seconds 3600

      - name: Build and push frontend
        run: |
          echo "Building frontend..."
          TIMESTAMP=$(date +%s)
          SHORT_SHA=${GITHUB_SHA::8}
          
          # Build avec cache et gestion d'erreur
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            --build-arg CACHE_BUST=$TIMESTAMP \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-$SHORT_SHA \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main \
            ./frontend
          
          # Push avec retry automatique
          echo "Pushing frontend images..."
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-$SHORT_SHA
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          
          echo "Frontend deployed successfully!"

  # ÉTAPE 3: Build Backend (seulement si changé)
  build-backend:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: |
          echo "Logging in to DigitalOcean Container Registry..."
          doctl registry login --expiry-seconds 3600

      - name: Build and push backend
        run: |
          echo "Building backend..."
          TIMESTAMP=$(date +%s)
          SHORT_SHA=${GITHUB_SHA::8}
          
          # Build sans cache pour éviter corruption
          docker build --no-cache \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-$SHORT_SHA \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main \
            ./backend
          
          # Push avec retry automatique
          echo "Pushing backend images..."
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-$SHORT_SHA
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          
          echo "Backend deployed successfully!"

  # ÉTAPE 4: Nettoyage post-déploiement (optionnel)
  cleanup-registry:
    needs: [detect-changes, build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    continue-on-error: true  # Ne pas faire échouer le workflow si le cleanup échoue
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images (best effort)
        run: |
          echo "Cleaning up old images (best effort)..."
          
          # Nettoyer seulement si les builds ont réussi
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "Cleaning old frontend images..."
            OLD_MANIFESTS=$(doctl registry repository list-manifests intelia-frontend --format Digest --no-header 2>/dev/null | tail -n +4 || true)
            for manifest in $OLD_MANIFESTS; do
              echo "Attempting to delete frontend manifest: $manifest"
              doctl registry repository delete-manifest intelia-frontend "$manifest" --force || echo "Failed to delete $manifest"
            done
          fi
          
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "Cleaning old backend images..."
            OLD_MANIFESTS=$(doctl registry repository list-manifests intelia-backend --format Digest --no-header 2>/dev/null | tail -n +4 || true)
            for manifest in $OLD_MANIFESTS; do
              echo "Attempting to delete backend manifest: $manifest"
              doctl registry repository delete-manifest intelia-backend "$manifest" --force || echo "Failed to delete $manifest"
            done
          fi
          
          echo "Cleanup completed (errors ignored)"

  # ÉTAPE 5: Résumé du déploiement
  deployment-summary:
    needs: [detect-changes, build-frontend, build-backend, cleanup-registry]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "Frontend: DEPLOYED successfully"
            else
              echo "Frontend: FAILED"
              exit 1
            fi
          else
            echo "Frontend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "Backend: DEPLOYED successfully" 
            else
              echo "Backend: FAILED"
              exit 1
            fi
          else
            echo "Backend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.any-changes }}" != "true" ]]; then
            echo "No changes detected - deployment skipped"
          fi
          
          echo "=================="