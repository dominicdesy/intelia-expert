name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # üéØ Build Frontend - SEULEMENT si chang√©
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # üéØ Build Backend - SEULEMENT si chang√©  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üéØ Build LLM - SEULEMENT si chang√©
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üöÄ Deploy - SEULEMENT si au moins un service a √©t√© build√©
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå ERREUR: DO_APP_ID secret n'est pas configur√©"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "üìã Deployment ID: $DEPLOYMENT_ID"
          
          echo "üëÄ Surveillance du d√©ploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "‚úÖ D√©ploiement r√©ussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "‚ùå D√©ploiement √©chou√©"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "‚ö†Ô∏è D√©ploiement annul√© ou remplac√©"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "‚è∞ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # üßπ Nettoyage automatique avec API REST
  cleanup:
    name: Cleanup old images in DOCR
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always()
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Ensure jq is available
        shell: bash
        run: |
          set -Eeuo pipefail
          command -v jq >/dev/null || { sudo apt-get update -y && sudo apt-get install -y jq; }

      - name: Cleanup DOCR tags & dangling manifests
        shell: bash
        env:
          # --- OPTIONS ---
          DRY_RUN: "false"                # "true" pour tester sans supprimer
          # DOCR_REGISTRY: "mon-registry" # d√©-commente si tu as plusieurs registries
          KEEP_LLM: "25"                  # garder N tags (hors prot√©g√©s) pour intelia-llm
          KEEP_BACKEND: "20"
          KEEP_FRONTEND: "20"
          LIMIT_LLM: "150"                # limite de suppressions max
          LIMIT_BACKEND: "120"
          LIMIT_FRONTEND: "120"
        run: |
          set -Eeuo pipefail
          shopt -s inherit_errexit || true

          # Tags/Jets √† ne JAMAIS supprimer
          PROTECTED_REGEX='^(latest|main|prod|stable|buildcache)$'
          # Option --registry si d√©fini
          REGISTRY_OPT=()
          [[ -n "${DOCR_REGISTRY:-}" ]] && REGISTRY_OPT+=(--registry "${DOCR_REGISTRY}")

          # Wrapper doctl avec retries, et retour d√©taill√© en cas d‚Äôerreur
          doctl_run() {
            # usage: doctl_run <cmd...>
            if ! out="$(doctl --http-retry-max 8 "${@}" 2>&1)"; then
              echo "      ‚õî doctl error: ${out}"
              return 1
            fi
            printf '%s\n' "${out}"
          }

          # $1 repo ; $2 KEEP ; $3 LIMIT
          cleanup_repo() {
            local repo="$1" KEEP="${2:-20}" LIMIT="${3:-100}"
            echo ""
            echo "üè∑Ô∏è Nettoyage de ${repo}‚Ä¶"
            echo "  ‚öñÔ∏è  R√®gles: garder ${KEEP} (hors prot√©g√©s), limite ${LIMIT}"

            # 1) Lister en JSON
            if ! doctl_run registry repository list-tags "${repo}" "${REGISTRY_OPT[@]}" -o json >"/tmp/${repo}.json"; then
              echo "  ‚ùå Impossible de lister les tags pour ${repo}"
              return 0
            fi

            local total
            total=$(jq 'length' "/tmp/${repo}.json")
            echo "  üì¶ Entr√©es totales (tags + dangling): ${total}"

            # 2) Construire listes: tagged (hors prot√©g√©s) tri√© par updated_at desc, et dangling (tag vide)
            jq -r --arg re "${PROTECTED_REGEX}" '
              map(.updated_at=(.updated_at // "1970-01-01T00:00:00Z")) 
              | sort_by(.updated_at) | reverse
              | .[]
              | select((.tag // "") != "")
              | select((.tag | test($re)) | not)
              | "\(.updated_at)\t\(.tag)\t\(.manifest_digest)"
            ' "/tmp/${repo}.json" >"/tmp/${repo}_tagged.tsv"

            jq -r '
              .[]
              | select((.tag // "") == "")
              | .manifest_digest
            ' "/tmp/${repo}.json" | awk 'NF' | sort -u >"/tmp/${repo}_dangling.txt"

            local tagged_total dangling_total
            tagged_total=$(wc -l <"/tmp/${repo}_tagged.tsv" | tr -d ' ')
            dangling_total=$(wc -l <"/tmp/${repo}_dangling.txt" | tr -d ' ')
            echo "  üè∑Ô∏è Tags candidats (hors prot√©g√©s): ${tagged_total}"
            echo "  üß© Manifests orphelins (dangling): ${dangling_total}"

            # 3) Conserver les KEEP plus r√©cents
            if (( KEEP > 0 )) && (( tagged_total > KEEP )); then
              tail -n +$((KEEP+1)) "/tmp/${repo}_tagged.tsv" >"/tmp/${repo}_to_delete.tsv"
            else
              cp "/tmp/${repo}_tagged.tsv" "/tmp/${repo}_to_delete.tsv"
            fi

            local deleted=0

            # Helper: renvoie "1" si le digest poss√®de au moins un tag prot√©g√©
            has_protected_tag_for_digest() {
              local digest="$1"
              jq -r --arg d "${digest}" --arg re "${PROTECTED_REGEX}" '
                .[] | select(.manifest_digest == $d and (.tag // "") != "")
                | .tag
              ' "/tmp/${repo}.json" | grep -E -q "${PROTECTED_REGEX}" && echo 1 || echo 0
            }

            # 4) Suppression par TAG (avec fallback par manifest si utile/s√ªr)
            if [[ -s "/tmp/${repo}_to_delete.tsv" ]]; then
              echo "  üî• Suppression par tag‚Ä¶"
              while IFS=$'\t' read -r updated_at raw_tag digest; do
                # trim
                tag="$(printf '%s' "${raw_tag}" | tr -d '\r' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')"
                [[ -z "${tag}" ]] && continue
                (( deleted >= LIMIT )) && { echo "  ‚õî Limite atteinte (${LIMIT})"; break; }

                echo "    üóëÔ∏è delete-tag: ${tag} (updated: ${updated_at})"
                if [[ "${DRY_RUN}" == "true" ]]; then
                  echo "      üß™ DRY_RUN ‚Üí skip"
                  ((deleted++))
                  continue
                fi

                if doctl_run registry repository delete-tag -force "${repo}" "${tag}" "${REGISTRY_OPT[@]}"; then
                  echo "      ‚úÖ OK (tag)"
                  ((deleted++))
                else
                  # Fallback: on peut supprimer le manifest si et seulement si il ne porte AUCUN tag prot√©g√©
                  if [[ -n "${digest}" && "$(has_protected_tag_for_digest "${digest}")" -eq 0 ]]; then
                    echo "      ‚Ü™Ô∏è Fallback: delete-manifest ${digest} (aucun tag prot√©g√© li√©)"
                    if doctl_run registry repository delete-manifest -force "${repo}" "${digest}" "${REGISTRY_OPT[@]}"; then
                      echo "        ‚úÖ OK (manifest) ‚Äî toutes les √©tiquettes sur ce digest disparaissent"
                      ((deleted++))
                    else
                      echo "        ‚ùå √âchec (manifest)"
                    fi
                  else
                    echo "      üîí Fallback interdit: digest avec tag prot√©g√© (ou digest vide)"
                  fi
                fi
              done <"/tmp/${repo}_to_delete.tsv"
            else
              echo "  ‚úÖ Rien √† supprimer par tag (apr√®s conservation)"
            fi

            # 5) Suppression des MANIFESTS orphelins (dangling)
            if [[ -s "/tmp/${repo}_dangling.txt" ]]; then
              echo "  üßπ Suppression des manifests orphelins‚Ä¶"
              while read -r digest; do
                [[ -z "${digest}" ]] && continue
                (( deleted >= LIMIT )) && { echo "  ‚õî Limite atteinte (${LIMIT})"; break; }

                # Par s√©curit√©, re-v√©rifie qu'il n'existe vraiment plus de tag
                if jq -e --arg d "${digest}" '.[] | select(.manifest_digest == $d and (.tag // "") != "")' "/tmp/${repo}.json" >/dev/null; then
                  echo "    ‚ö†Ô∏è Digest ${digest} a encore des tags ‚Üí skip"
                  continue
                fi

                echo "    üóëÔ∏è delete-manifest: ${digest}"
                if [[ "${DRY_RUN}" == "true" ]]; then
                  echo "      üß™ DRY_RUN ‚Üí skip"
                  ((deleted++))
                  continue
                fi

                if doctl_run registry repository delete-manifest -force "${repo}" "${digest}" "${REGISTRY_OPT[@]}"; then
                  echo "      ‚úÖ OK (manifest)"
                  ((deleted++))
                else
                  echo "      ‚ùå √âchec (manifest)"
                fi
              done <"/tmp/${repo}_dangling.txt"
            else
              echo "  ‚úÖ Aucun manifest orphelin √† supprimer"
            fi

            echo "  üìä Total supprim√© (${repo}): ${deleted}"
          }

          # --- Lance le cleanup sur tes d√©p√¥ts ---
          cleanup_repo "intelia-llm"      "${KEEP_LLM}"      "${LIMIT_LLM}"
          cleanup_repo "intelia-backend"  "${KEEP_BACKEND}"  "${LIMIT_BACKEND}"
          cleanup_repo "intelia-frontend" "${KEEP_FRONTEND}" "${LIMIT_FRONTEND}"

  # üìä R√©sum√© (bas√© sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED"
            else
              echo "‚ùå Backend: FAILED" 
            fi
          else
            echo "‚è∏Ô∏è Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "‚úÖ LLM: DEPLOYED"
            else
              echo "‚ùå LLM: FAILED"
            fi
          else
            echo "‚è∏Ô∏è LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "üìã D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"
          echo "üßπ Nettoyage: ${{ needs.cleanup.result == 'success' && '‚úÖ TERMIN√â' || '‚ö†Ô∏è PARTIEL' }}"