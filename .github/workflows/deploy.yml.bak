name: Simple Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.llm-changed == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_BASE_URL=https://expert.intelia.com/api
            NEXT_PUBLIC_API_URL=https://expert.intelia.com/api

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.llm-changed == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.llm-changed == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: ${{ always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success') }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Verify main tags availability
        run: |
          echo "Verification des tags 'main' dans le registry..."
          
          for repo in intelia-backend intelia-frontend intelia-llm; do
            echo "Verification de $repo:main..."
            if doctl registry repository list-manifests $repo --format Tag | grep -q "main"; then
              echo "OK $repo:main trouvee"
            else
              echo "ERREUR $repo:main introuvable - le deploiement va echouer"
              exit 1
            fi
          done

      - name: Trigger redeploy with detailed monitoring
        run: |
          echo "Declenchement du redeploiement..."
          echo "App ID: ${{ secrets.DO_APP_ID }}"
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "ERREUR: DO_APP_ID secret n'est pas configure"
            echo "Ajoutez le secret DO_APP_ID dans GitHub Settings > Secrets"
            exit 1
          fi
          
          echo "Attente de 30s pour la propagation du registry..."
          sleep 30
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "Deployment ID: $DEPLOYMENT_ID"
          
          echo "Surveillance du deploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "Deploiement reussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "Deploiement echoue"
                echo "Details de l'erreur :"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "Deploiement annule ou remplace"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "Timeout atteint - verification finale..."
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true

      - name: Deployment status
        run: |
          echo "Deploiement declenche avec succes"
          echo "Verifiez le statut sur: https://cloud.digitalocean.com/apps"

  cleanup:
    runs-on: ubuntu-latest
    # FORCE RELOAD - version avec --force correcte
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images (keep only 8 per repo)
        run: |
          echo "Nettoyage agressif des anciennes images..."
          
          cleanup_repo() {
            local repo=$1
            echo "Nettoyage de $repo..."
            
            local total=$(doctl registry repository list-manifests $repo --format Digest --no-header | wc -l)
            echo "  Images actuelles: $total"
            
            if [ $total -gt 8 ]; then
              local to_delete=$((total - 8))
              echo "  A supprimer: $to_delete images"
              
              doctl registry repository list-manifests $repo --format Digest,Updated --no-header | \
              sort -k2 | \
              head -n $to_delete | \
              awk '{print $1}' | \
              while read digest; do
                if [ ! -z "$digest" ] && [[ "$digest" == sha256:* ]]; then
                  echo "    Suppression: $digest"
                  doctl registry repository delete-manifest --force $repo $digest || echo "    Echec de suppression"
                fi
              done
            else
              echo "  Aucun nettoyage necessaire ($total <= 8)"
            fi
            
            local remaining=$(doctl registry repository list-manifests $repo --format Digest --no-header | wc -l)
            echo "  Images restantes: $remaining"
          }
          
          for repo in intelia-backend intelia-frontend intelia-llm; do
            if doctl registry repository list | grep -q "$repo"; then
              cleanup_repo "$repo"
            else
              echo "Repository $repo non trouve"
            fi
          done
          
          echo "Lancement du garbage collection..."
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force || echo "Garbage collection deja en cours"
          
          echo "Nettoyage termine"

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOIEMENT TERMINE"
          echo "===================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && 'DEPLOYE' || 'ECHEC' }}"
          else
            echo "Frontend: INCHANGE"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && 'DEPLOYE' || 'ECHEC' }}"
          else
            echo "Backend: INCHANGE"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && 'DEPLOYE' || 'ECHEC' }}"
          else
            echo "LLM: INCHANGE"
          fi
          
          echo ""
          echo "Deploiement: ${{ needs.deploy.result == 'success' && 'REUSSI' || 'ECHEC' }}"