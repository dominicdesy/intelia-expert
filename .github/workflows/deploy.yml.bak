name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # üéØ Build Frontend - SEULEMENT si chang√©
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # üéØ Build Backend - SEULEMENT si chang√©  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üéØ Build LLM - SEULEMENT si chang√©
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üöÄ Deploy - SEULEMENT si au moins un service a √©t√© build√©
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå ERREUR: DO_APP_ID secret n'est pas configur√©"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "üìã Deployment ID: $DEPLOYMENT_ID"
          
          echo "üëÄ Surveillance du d√©ploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "‚úÖ D√©ploiement r√©ussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "‚ùå D√©ploiement √©chou√©"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "‚ö†Ô∏è D√©ploiement annul√© ou remplac√©"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "‚è∞ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # üßπ Nettoyage automatique avec API REST
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old image tags (safe & robust)
        shell: bash
        run: |
          set -euo pipefail

          cleanup_repo() {
            local repo="$1"
            local max_delete="${2:-25}"   # limite de s√©curit√©

            echo ""
            echo "üè∑Ô∏è Nettoyage par tags de ${repo}..."
            echo "  üìã R√©cup√©ration des tags (sans en-t√™te)‚Ä¶"

            # On ne r√©cup√®re QUE la colonne Tag, sans en-t√™te ; pagination large pour √©viter les manques
            mapfile -t TAGS < <(
              doctl registry repository list-tags "${repo}" \
                --format Tag \
                --no-header \
                --page 1 --page-size 200 \
              | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' \
              | grep -v -E '^(latest|main|prod|stable|buildcache)$' \
              | grep -v '^$'
            )

            local total="${#TAGS[@]}"
            echo "  üìä Tags supprimables: ${total}"
            if (( total == 0 )); then
              echo "  ‚úÖ Rien √† supprimer"
              return 0
            fi

            local deleted=0
            for tag in "${TAGS[@]}"; do
              (( deleted >= max_delete )) && break
              echo "    üóëÔ∏è Suppression tag: ${tag}"
              if doctl registry repository delete-tag -f "${repo}" "${tag}" >/dev/null 2>&1; then
                echo "      ‚úÖ OK"
                ((deleted++))
              else
                echo "      ‚ùå √âchec suppression tag"
              fi
            done
            echo "  üìä Tags supprim√©s: ${deleted}"
          }

          # Ex√©cuter sur tes 3 d√©p√¥ts
          cleanup_repo "intelia-llm"  30
          cleanup_repo "intelia-backend" 25
          cleanup_repo "intelia-frontend" 25

          
          echo ""
          echo "üóëÔ∏è Garbage collection final..."
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null || echo "GC en cours"
          
          echo ""
          echo "üìä STATUT ACTUEL:"
          doctl registry repository list --format Name,TagCount,UpdatedAt
          
          echo ""
          echo "üìù R√âSUM√â:"
          echo "- Si TagCount reste √©lev√©: le nettoyage automatique via scripts a des limitations"
          echo "- Solution recommand√©e: nettoyage manuel via interface web DigitalOcean"
          echo "- Le garbage collection peut prendre jusqu'√† 2h pour √™tre visible"

  # üìä R√©sum√© (bas√© sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED"
            else
              echo "‚ùå Backend: FAILED" 
            fi
          else
            echo "‚è∏Ô∏è Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "‚úÖ LLM: DEPLOYED"
            else
              echo "‚ùå LLM: FAILED"
            fi
          else
            echo "‚è∏Ô∏è LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "üìã D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"
          echo "üßπ Nettoyage: ${{ needs.cleanup.result == 'success' && '‚úÖ TERMIN√â' || '‚ö†Ô∏è PARTIEL' }}"