name: Fixed Docker Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# ðŸ”§ Ã‰vite les builds parallÃ¨les qui corrompent le registry
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ðŸ§¹ Ã‰TAPE 1: Nettoyer le registry AVANT de builder
  cleanup-registry:
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images (prevent corruption)
        run: |
          echo "ðŸ§¹ Cleaning registry to prevent corruption..."
          
          # Supprimer les anciennes images (garde les 2 plus rÃ©centes)
          for repo in intelia-frontend intelia-backend; do
            echo "Cleaning $repo..."
            
            # Lister et supprimer les vieilles manifests (garde 2)
            manifests=$(doctl registry repository list-manifests "$repo" --format Digest --no-header | tail -n +3)
            
            for manifest in $manifests; do
              echo "Deleting old manifest: $manifest"
              doctl registry repository delete-manifest "$repo" "$manifest" --force || true
            done
          done
          
          # Force garbage collection
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force --include-untagged-manifests || true

  # ðŸš€ Ã‰TAPE 2: Build sÃ©quentiel (Ã©vite les conflits parallÃ¨les)
  build-and-deploy:
    needs: cleanup-registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DigitalOcean Container Registry
        run: echo "${{ secrets.DOCR_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

      # ðŸŽ¯ Build Frontend (avec timestamp unique pour Ã©viter conflits)
      - name: Build Frontend
        run: |
          echo "ðŸŽ¯ Building frontend..."
          TIMESTAMP=$(date +%s)
          
          docker build --no-cache \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:$TIMESTAMP \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main \
            ./frontend
          
          echo "âœ… Frontend built successfully"

      - name: Push Frontend
        run: |
          echo "ðŸ“¤ Pushing frontend..."
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          echo "âœ… Frontend pushed"

      # ðŸŽ¯ Build Backend (aprÃ¨s frontend pour Ã©viter parallÃ©lisme)
      - name: Build Backend  
        run: |
          echo "ðŸŽ¯ Building backend..."
          TIMESTAMP=$(date +%s)
          
          docker build --no-cache \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:$TIMESTAMP \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main \
            ./backend
          
          echo "âœ… Backend built successfully"

      - name: Push Backend
        run: |
          echo "ðŸ“¤ Pushing backend..."
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          echo "âœ… Backend pushed"

      # ðŸ§¹ Nettoyage final
      - name: Final cleanup
        run: |
          echo "ðŸ§¹ Final Docker cleanup..."
          docker system prune -f
          echo "âœ… Build completed successfully!"