name: Smart Selective Docker Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # 🧹 NETTOYAGE MASSIF - AVANT les builds
  massive-cleanup:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: 🔥 NETTOYAGE MASSIF - Garder 8 images maximum
        run: |
          echo "🔥 DÉMARRAGE NETTOYAGE MASSIF DU REGISTRY"
          echo "==========================================="
          
          # Fonction de nettoyage robuste
          cleanup_repository() {
            local repo=$1
            local max_images=8
            
            echo ""
            echo "📦 Nettoyage de $repo..."
            echo "Target: garder $max_images images maximum"
            
            # 1. Lister TOUS les manifests avec leur timestamp
            echo "Récupération de la liste des manifests..."
            manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt --no-header 2>/dev/null || true)
            
            if [ -z "$manifests" ]; then
              echo "❌ Aucun manifest trouvé pour $repo ou erreur d'accès"
              return
            fi
            
            # 2. Compter le nombre total
            total_count=$(echo "$manifests" | wc -l)
            echo "📊 Total manifests trouvés: $total_count"
            
            if [ "$total_count" -le "$max_images" ]; then
              echo "✅ $repo: $total_count images <= $max_images. Pas de nettoyage nécessaire."
              return
            fi
            
            # 3. Trier par date (plus récents en dernier) et prendre les anciens à supprimer
            to_delete=$((total_count - max_images))
            echo "🗑️  $repo: Besoin de supprimer $to_delete anciennes images"
            
            # 4. Extraire les digests à supprimer (les plus anciens)
            old_digests=$(echo "$manifests" | sort -k2,2 | head -n "$to_delete" | awk '{print $1}')
            
            if [ -z "$old_digests" ]; then
              echo "❌ Impossible d'extraire les digests à supprimer"
              return
            fi
            
            echo "🔍 Digests à supprimer:"
            echo "$old_digests" | sed 's/^/  - /'
            
            # 5. Supprimer les manifests un par un
            deleted_count=0
            failed_count=0
            
            echo "$old_digests" | while IFS= read -r digest; do
              if [ -n "$digest" ] && [ "$digest" != "null" ]; then
                echo "🗑️  Suppression: $digest..."
                
                if doctl registry repository delete-manifest "$repo" "$digest" --force; then
                  echo "✅ Supprimé: $digest"
                  deleted_count=$((deleted_count + 1))
                else
                  echo "❌ Échec suppression: $digest"
                  failed_count=$((failed_count + 1))
                fi
                
                # Petite pause pour éviter le rate limiting
                sleep 1
              fi
            done
            
            echo "📊 $repo: Suppression terminée"
            echo "  - Cibles: $to_delete"
            
            # 6. Vérification finale
            echo "🔍 Vérification post-nettoyage..."
            final_manifests=$(doctl registry repository list-manifests "$repo" --format Digest --no-header 2>/dev/null || true)
            final_count=$(echo "$final_manifests" | wc -l)
            echo "📊 $repo: Images restantes après nettoyage: $final_count"
            
            if [ "$final_count" -gt "$max_images" ]; then
              echo "⚠️  ATTENTION: $repo a encore $final_count images (> $max_images)"
            else
              echo "✅ $repo: Nettoyage réussi ($final_count <= $max_images)"
            fi
          }
          
          # Nettoyer chaque repository
          for repo in intelia-frontend intelia-backend intelia-llm; do
            cleanup_repository "$repo"
          done
          
          echo ""
          echo "🏁 NETTOYAGE MASSIF TERMINÉ"
          echo "============================="

  # 🎯 Build Frontend - SEULEMENT si changé
  build-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, massive-cleanup]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            LLM_BACKEND_URL=${{ secrets.LLM_BACKEND_URL }}
            BUILDKIT_INLINE_CACHE=1

  # 🎯 Build Backend
  build-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, massive-cleanup]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

  # 🎯 Build LLM
  build-llm:
    runs-on: ubuntu-latest
    needs: [detect-changes, massive-cleanup]
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🧹 NETTOYAGE POST-BUILD pour garantir la limite
  post-build-cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: 🔒 GARANTIE LIMITE 8 IMAGES + Garbage Collection
        run: |
          echo "🔒 GARANTIE FINALE - MAX 8 IMAGES PAR REPO"
          echo "============================================"
          
          # Fonction de nettoyage final (plus agressive)
          final_cleanup() {
            local repo=$1
            local max_images=8
            
            echo ""
            echo "🔍 Vérification finale de $repo..."
            
            # Récupérer les manifests actuels
            manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt --no-header 2>/dev/null || true)
            
            if [ -z "$manifests" ]; then
              echo "ℹ️  $repo: Aucun manifest ou repo vide"
              return
            fi
            
            current_count=$(echo "$manifests" | wc -l)
            echo "📊 $repo: $current_count images actuellement"
            
            if [ "$current_count" -le "$max_images" ]; then
              echo "✅ $repo: OK ($current_count <= $max_images)"
              return
            fi
            
            # Suppression agressive des excédents
            excess=$((current_count - max_images))
            echo "⚠️  $repo: $excess images en excès - SUPPRESSION FORCÉE"
            
            # Trier et supprimer les plus anciennes
            old_digests=$(echo "$manifests" | sort -k2,2 | head -n "$excess" | awk '{print $1}')
            
            echo "$old_digests" | while IFS= read -r digest; do
              if [ -n "$digest" ]; then
                echo "🔥 FORCE DELETE: $digest"
                doctl registry repository delete-manifest "$repo" "$digest" --force || true
                sleep 0.5
              fi
            done
            
            # Vérification finale
            final_manifests=$(doctl registry repository list-manifests "$repo" --format Digest --no-header 2>/dev/null || true)
            final_count=$(echo "$final_manifests" | wc -l)
            
            if [ "$final_count" -gt "$max_images" ]; then
              echo "🚨 ALERTE: $repo a ENCORE $final_count images (> $max_images) !"
              echo "📋 Images restantes:"
              echo "$final_manifests" | sed 's/^/  /'
            else
              echo "✅ $repo: LIMITE RESPECTÉE ($final_count images)"
            fi
          }
          
          # Nettoyer chaque repo
          for repo in intelia-frontend intelia-backend intelia-llm; do
            final_cleanup "$repo"
          done
          
          echo ""
          echo "🗑️  DÉCLENCHEMENT GARBAGE COLLECTION"
          echo "===================================="
          
          # Garbage collection pour libérer vraiment l'espace
          if doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force; then
            echo "✅ Garbage collection démarrée avec succès"
          else
            echo "⚠️  Garbage collection échouée ou déjà en cours"
          fi
          
          echo ""
          echo "🏆 NETTOYAGE POST-BUILD TERMINÉ"
          echo "💰 L'espace du registry sera libéré dans 5-30 minutes"

  # 📊 Résumé final
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, post-build-cleanup]
    if: always()
    steps:
      - name: 📋 RAPPORT FINAL DE DÉPLOIEMENT
        run: |
          echo "🚀 RAPPORT DE DÉPLOIEMENT"
          echo "========================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "✅ Frontend: DÉPLOYÉ"
            else
              echo "❌ Frontend: ÉCHEC"
            fi
          else
            echo "⏸️ Frontend: INCHANGÉ (skippé)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "✅ Backend: DÉPLOYÉ"
            else
              echo "❌ Backend: ÉCHEC" 
            fi
          else
            echo "⏸️ Backend: INCHANGÉ (skippé)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "✅ LLM: DÉPLOYÉ"
            else
              echo "❌ LLM: ÉCHEC" 
            fi
          else
            echo "⏸️ LLM: INCHANGÉ (skippé)"
          fi
          
          echo ""
          echo "🧹 OPTIMISATION REGISTRY"
          echo "========================"
          echo "🔥 Nettoyage massif: EXÉCUTÉ avant builds"
          echo "🔒 Vérification limite: EXÉCUTÉ après builds"
          echo "📦 Images max par repo: 8 (STRICT)"
          echo "🗑️ Garbage collection: DÉCLENCHÉE"
          echo "💾 Économies d'espace: ~90% vs accumulation"
          echo "⏱️ Prochaine libération: 5-30 minutes"