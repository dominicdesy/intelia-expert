name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # 🎯 Build Frontend - SEULEMENT si changé
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # 🎯 Build Backend - SEULEMENT si changé  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🎯 Build LLM - SEULEMENT si changé
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🚀 Deploy - SEULEMENT si au moins un service a été buildé
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "⏳ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "🚀 Déclenchement du redéploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "❌ ERREUR: DO_APP_ID secret n'est pas configuré"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "📋 Deployment ID: $DEPLOYMENT_ID"
          
          echo "👀 Surveillance du déploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "✅ Déploiement réussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "❌ Déploiement échoué"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "⚠️ Déploiement annulé ou remplacé"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "⏰ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # 🧹 Nettoyage automatique avec API REST
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Fixed tag parsing and cleanup
        run: |
          echo "🧹 NETTOYAGE CORRIGÉ - PARSING DES TAGS"
          echo "======================================="
          
          cleanup_fixed() {
            local repo=$1
            echo ""
            echo "🏷️ Nettoyage corrigé de $repo..."
            
            # Diagnostic du format de sortie d'abord
            echo "  🔍 Diagnostic du format des tags..."
            doctl registry repository list-tags $repo --format Tag --no-header 2>/dev/null | head -5
            
            # Récupérer seulement les tags réels (format Tag uniquement)
            local real_tags=$(doctl registry repository list-tags $repo --format Tag --no-header 2>/dev/null | grep -v -E "^(buildcache|latest|main|Tag)$" | grep -v "^$")
            
            if [ -z "$real_tags" ]; then
              echo "  ✅ Aucun tag supprimable trouvé"
              return 0
            fi
            
            local tag_count=$(echo "$real_tags" | wc -l)
            echo "  📊 Tags supprimables trouvés: $tag_count"
            echo "  📋 Premiers tags: $(echo "$real_tags" | head -3 | tr '\n' ' ')"
            
            # Limiter à 15 suppressions pour éviter les problèmes
            local max_delete=15
            if [ "$repo" = "intelia-llm" ]; then
              max_delete=20
            fi
            
            local deleted=0
            echo "$real_tags" | head -n $max_delete | while read tag_name; do
              if [ -n "$tag_name" ] && [ "$deleted" -lt "$max_delete" ]; then
                echo "    🗑️ Suppression: $tag_name"
                
                if doctl registry repository delete-tag --force $repo "$tag_name" 2>/dev/null; then
                  echo "      ✅ Succès"
                  deleted=$((deleted + 1))
                else
                  echo "      ❌ Échec"
                fi
                
                sleep 1
              fi
            done
            
            echo "  📊 Tentatives de suppression effectuées"
          }
          
          # Si les tags ne marchent pas, utiliser une approche manuelle simple
          manual_cleanup() {
            local repo=$1
            echo ""
            echo "🔧 Nettoyage manuel alternatif de $repo..."
            
            # Utiliser l'interface web DigitalOcean ou attendre le garbage collection
            echo "  💡 Alternative: Nettoyage manuel via interface web DO"
            echo "  🔗 https://cloud.digitalocean.com/images/container-registry"
            echo "  ⏳ Ou attendre le garbage collection automatique (30min-2h)"
          }
          
          echo "🚀 Tentative de nettoyage corrigé..."
          
          # Nettoyer avec la méthode corrigée
          cleanup_fixed "intelia-llm"
          cleanup_fixed "intelia-backend"
          cleanup_fixed "intelia-frontend"
          
          # Alternatives si le nettoyage automatique échoue
          manual_cleanup "intelia-llm"
          
          echo ""
          echo "🗑️ Garbage collection final..."
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null || echo "GC en cours"
          
          echo ""
          echo "📊 STATUT ACTUEL:"
          doctl registry repository list --format Name,TagCount,UpdatedAt
          
          echo ""
          echo "📝 RÉSUMÉ:"
          echo "- Si TagCount reste élevé: le nettoyage automatique via scripts a des limitations"
          echo "- Solution recommandée: nettoyage manuel via interface web DigitalOcean"
          echo "- Le garbage collection peut prendre jusqu'à 2h pour être visible"

  # 📊 Résumé (basé sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "🚀 DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "✅ Frontend: DEPLOYED"
            else
              echo "❌ Frontend: FAILED"
            fi
          else
            echo "⏸️ Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "✅ Backend: DEPLOYED"
            else
              echo "❌ Backend: FAILED" 
            fi
          else
            echo "⏸️ Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "✅ LLM: DEPLOYED"
            else
              echo "❌ LLM: FAILED"
            fi
          else
            echo "⏸️ LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "📋 Déploiement: ${{ needs.deploy.result == 'success' && '✅ RÉUSSI' || '❌ ÉCHEC' }}"
          echo "🧹 Nettoyage: ${{ needs.cleanup.result == 'success' && '✅ TERMINÉ' || '⚠️ PARTIEL' }}"