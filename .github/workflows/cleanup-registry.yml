name: Container Registry Cleanup

on:
  # Run after each deployment completes
  workflow_run:
    workflows: ["Smart Selective Build and Deploy"]
    types:
      - completed

  # Also run on schedule (daily at 2 AM)
  schedule:
    - cron: '0 2 * * *'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  cleanup:
    name: Clean old images from registry
    runs-on: ubuntu-latest

    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images
        run: |
          echo "Nettoyage du Container Registry..."
          echo "Politique: Garder 10 dernieres images par repository"

          REGISTRY_NAME="${{ secrets.DOCR_NAME }}"
          KEEP_COUNT=10

          # List of repositories
          REPOS=("intelia-frontend" "intelia-backend" "intelia-llm" "intelia-rag")

          for REPO in "${REPOS[@]}"; do
            echo ""
            echo "================================================"
            echo "Repository: $REPO"
            echo "================================================"

            # Get all tags sorted by creation date (newest first)
            echo "Recuperation des tags..."
            TAGS=$(doctl registry repository list-tags "$REPO" --format Tag,UpdatedAt --no-header | sort -k2 -r)

            # Count total tags
            TOTAL_TAGS=$(echo "$TAGS" | wc -l)
            echo "Total tags trouves: $TOTAL_TAGS"

            if [ "$TOTAL_TAGS" -le "$KEEP_COUNT" ]; then
              echo "Nombre de tags <= $KEEP_COUNT, aucun nettoyage necessaire"
              continue
            fi

            # Get tags to delete (skip first KEEP_COUNT)
            TAGS_TO_DELETE=$(echo "$TAGS" | tail -n +$((KEEP_COUNT + 1)) | awk '{print $1}')
            DELETE_COUNT=$(echo "$TAGS_TO_DELETE" | wc -l)

            echo "Tags a supprimer: $DELETE_COUNT"

            # Never delete these protected tags
            PROTECTED_TAGS=("latest" "main" "buildcache")

            for TAG in $TAGS_TO_DELETE; do
              # Skip if tag is protected
              if [[ " ${PROTECTED_TAGS[@]} " =~ " ${TAG} " ]]; then
                echo "  [SKIP] $TAG (protege)"
                continue
              fi

              # Skip if tag is empty/none
              if [ "$TAG" = "none" ] || [ -z "$TAG" ]; then
                echo "  [SKIP] (empty tag)"
                continue
              fi

              # Delete the tag
              echo "  [DELETE] $TAG"
              doctl registry repository delete-tag "$REPO" "$TAG" --force || echo "    Erreur lors de la suppression de $TAG"
            done

            echo "Nettoyage termine pour $REPO"
          done

          echo ""
          echo "================================================"
          echo "Nettoyage global termine!"
          echo "================================================"

          # Run garbage collection to free up space
          echo ""
          echo "Lancement du garbage collection..."
          doctl registry garbage-collection start --include-untagged-manifests --force || true

          echo "Garbage collection demarre (peut prendre quelques minutes)"

      - name: Summary
        run: |
          echo ""
          echo "RESUME DU NETTOYAGE"
          echo "==================="
          echo ""
          echo "Politique de retention:"
          echo "  - Garder les 10 dernieres images par repository"
          echo "  - Tags proteges: latest, main, buildcache"
          echo "  - Garbage collection active"
          echo ""
          echo "Prochaine execution:"
          echo "  - Automatique: Apres chaque deploiement"
          echo "  - Planifiee: Chaque jour a 2h00 AM"
          echo "  - Manuelle: Via workflow_dispatch"
