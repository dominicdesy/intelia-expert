name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "Declenchement du redeploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "ERREUR: DO_APP_ID secret n'est pas configure"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "Deployment ID: $DEPLOYMENT_ID"
          
          echo "Surveillance du deploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "Deploiement reussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "Deploiement echoue"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "Deploiement annule ou remplace"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  cleanup:
    name: Cleanup old DOCR images via API
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always() && needs.detect-changes.result == 'success'
    steps:
      - name: Cleanup DOCR repositories via REST API
        shell: bash
        run: |
          set +e  # Continue même en cas d'erreur
          
          KEEP_IMAGES=8
          REPOSITORIES=("intelia-frontend" "intelia-backend" "intelia-llm")
          REGISTRY_NAME="${{ secrets.DOCR_NAME }}"
          API_TOKEN="${{ secrets.DOCR_ACCESS_TOKEN }}"
          
          echo "Nettoyage via API REST DigitalOcean - garder $KEEP_IMAGES images par repo"
          
          overall_success=true
          
          for repo in "${REPOSITORIES[@]}"; do
            echo ""
            echo "=== Traitement de $repo ==="
            
            # 1. Récupérer la liste des tags via API
            echo "Récupération des tags..."
            response=$(curl -s -X GET \
              "https://api.digitalocean.com/v2/registry/${REGISTRY_NAME}/repositories/${repo}/tags" \
              -H "Authorization: Bearer ${API_TOKEN}" \
              -H "Content-Type: application/json")
            
            # Vérifier si le repository existe
            if echo "$response" | grep -q '"id":"not_found"'; then
              echo "Repository $repo non trouvé"
              continue
            fi
            
            # 2. Parser les tags et dates avec jq
            if ! tags_data=$(echo "$response" | jq -r '.tags[]? | "\(.tag) \(.updated_at)"' 2>/dev/null); then
              echo "Erreur parsing JSON pour $repo"
              continue
            fi
            
            if [ -z "$tags_data" ]; then
              echo "Aucun tag trouvé pour $repo"
              continue
            fi
            
            echo "$tags_data" > "/tmp/${repo}_tags.txt"
            total_tags=$(wc -l < "/tmp/${repo}_tags.txt")
            
            echo "Total tags: $total_tags"
            echo "Premiers tags:"
            head -5 "/tmp/${repo}_tags.txt"
            
            if [ "$total_tags" -le "$KEEP_IMAGES" ]; then
              echo "Pas de nettoyage nécessaire ($total_tags <= $KEEP_IMAGES)"
              continue
            fi
            
            # 3. Identifier les tags à supprimer (garder les plus récents)
            to_delete_count=$((total_tags - KEEP_IMAGES))
            echo "À supprimer: $to_delete_count tags"
            
            # Trier par date et prendre les plus anciens, en filtrant les protégés
            sort -k2,2 "/tmp/${repo}_tags.txt" | \
            head -n "$to_delete_count" | \
            awk '{print $1}' | \
            grep -vE "^(latest|main|buildcache|prod|stable)$" > "/tmp/${repo}_to_delete.txt"
            
            actual_to_delete=$(wc -l < "/tmp/${repo}_to_delete.txt")
            echo "Tags à supprimer (après filtrage des protégés): $actual_to_delete"
            
            if [ "$actual_to_delete" -eq 0 ]; then
              echo "Aucun tag à supprimer après filtrage"
              continue
            fi
            
            echo "Tags qui seront supprimés:"
            cat "/tmp/${repo}_to_delete.txt"
            
            # 4. Supprimer les tags via API REST
            deleted=0
            failed=0
            
            while IFS= read -r tag; do
              if [ -z "$tag" ]; then continue; fi
              
              echo "Suppression API: $tag"
              
              # Appel API DELETE avec gestion d'erreur améliorée
              http_code=$(curl -s -o /tmp/delete_response.txt -w "%{http_code}" -X DELETE \
                "https://api.digitalocean.com/v2/registry/${REGISTRY_NAME}/repositories/${repo}/tags/${tag}" \
                -H "Authorization: Bearer ${API_TOKEN}")
              
              if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
                echo "  ✓ Supprimé (HTTP $http_code)"
                ((deleted++))
              elif [ "$http_code" = "404" ]; then
                echo "  ! Tag déjà supprimé (HTTP $http_code)"
                ((deleted++))  # Compter comme succès
              else
                echo "  ✗ Échec (HTTP $http_code)"
                # Afficher la réponse d'erreur si disponible
                if [ -f /tmp/delete_response.txt ]; then
                  echo "    Réponse API: $(cat /tmp/delete_response.txt)"
                fi
                ((failed++))
              fi
              
              # Pause pour éviter rate limiting
              sleep 0.5
              
            done < "/tmp/${repo}_to_delete.txt"
            
            echo ""
            echo "Résumé $repo:"
            echo "  Supprimés: $deleted"
            echo "  Échecs: $failed"
            echo "  Restants estimés: $((total_tags - deleted))"
            
            # Marquer l'échec global si des erreurs dans ce repo
            if [ "$failed" -gt 0 ]; then
              overall_success=false
            fi
            
            # Nettoyage fichiers temporaires
            rm -f "/tmp/${repo}_tags.txt" "/tmp/${repo}_to_delete.txt" "/tmp/delete_response.txt"
            
          done
          
          echo ""
          echo "=== Nettoyage terminé ==="
          
          # Ne pas faire échouer le job entier même si quelques suppressions ont échoué
          if [ "$overall_success" = false ]; then
            echo "⚠️ Certaines suppressions ont échoué, mais le processus continue"
          fi
          
          exit 0  # Toujours sortir avec succès pour ne pas bloquer le workflow

      - name: Trigger garbage collection
        run: |
          echo "Déclenchement du garbage collection..."
          
          response=$(curl -s -X POST \
            "https://api.digitalocean.com/v2/registry/${{ secrets.DOCR_NAME }}/garbage-collection" \
            -H "Authorization: Bearer ${{ secrets.DOCR_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"type":"untagged manifests and blobs"}')
          
          if echo "$response" | grep -q '"uuid"'; then
            echo "Garbage collection démarré"
            echo "$response" | jq -r '.garbage_collection.uuid' 2>/dev/null || echo "ID non récupérable"
          else
            echo "Garbage collection déjà en cours ou erreur"
          fi

      - name: Final status check
        run: |
          echo ""
          echo "=== État final du registry ==="
          
          for repo in intelia-frontend intelia-backend intelia-llm; do
            response=$(curl -s -X GET \
              "https://api.digitalocean.com/v2/registry/${{ secrets.DOCR_NAME }}/repositories/${repo}/tags" \
              -H "Authorization: Bearer ${{ secrets.DOCR_ACCESS_TOKEN }}")
            
            count=$(echo "$response" | jq '.tags | length' 2>/dev/null || echo "?")
            echo "$repo: $count images"
          done
          
          echo ""
          echo "Nettoyage complet terminé!"

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "Frontend: DEPLOYED"
            else
              echo "Frontend: FAILED"
            fi
          else
            echo "Frontend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "Backend: DEPLOYED"
            else
              echo "Backend: FAILED" 
            fi
          else
            echo "Backend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "LLM: DEPLOYED"
            else
              echo "LLM: FAILED"
            fi
          else
            echo "LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Deploiement: REUSSI"
          else
            echo "Deploiement: ECHEC"
          fi
          
          if [[ "${{ needs.cleanup.result }}" == "success" ]]; then
            echo "Nettoyage: TERMINE"
          else
            echo "Nettoyage: PARTIEL"
          fi