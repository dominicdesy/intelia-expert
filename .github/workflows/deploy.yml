name: Ultra-Fast Selective Docker Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

# üîß √âvite les builds parall√®les
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç √âTAPE 1: D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      any-changes: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/deploy.yml'
            backend:
              - 'backend/**'
              - '.github/workflows/deploy.yml'

      - name: Show detected changes
        run: |
          echo "üîç Changes detected:"
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"

  # üß∞ √âTAPE 2: Setup Docker commun
  setup-docker:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

  # üéØ √âTAPE 3: Build Frontend (avec cache registry)
  build-frontend:
    needs: [detect-changes, setup-docker]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend with cache
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          provenance: false
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # üéØ √âTAPE 4: Build Backend (avec cache registry - ULTRA RAPIDE)
  build-backend:
    needs: [detect-changes, setup-docker]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend with cache (FAST!)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          provenance: false
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # üìä √âTAPE 5: R√©sum√© du d√©ploiement
  deployment-summary:
    needs: [detect-changes, build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED with cache optimization"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è  Frontend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED with cache optimization (FAST!)" 
            else
              echo "‚ùå Backend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è  Backend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.any-changes }}" != "true" ]]; then
            echo "üí° No changes detected - Infrastructure costs saved!"
          fi
          
          echo "===================="
          echo "üîó View your app: https://expert.intelia.com"

  # üßπ √âTAPE 6: Garbage Collection (optionnel, manuel uniquement)
  manual-cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.cleanup == 'true'
    steps:
      - name: Manual Registry Cleanup
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}
      - run: |
          echo "üßπ Manual cleanup triggered"
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force