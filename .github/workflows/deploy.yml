name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # üéØ Build Frontend - SEULEMENT si chang√©
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # üéØ Build Backend - SEULEMENT si chang√©  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üéØ Build LLM - SEULEMENT si chang√©
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üöÄ Deploy - SEULEMENT si au moins un service a √©t√© build√©
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå ERREUR: DO_APP_ID secret n'est pas configur√©"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "üìã Deployment ID: $DEPLOYMENT_ID"
          
          echo "üëÄ Surveillance du d√©ploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "‚úÖ D√©ploiement r√©ussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "‚ùå D√©ploiement √©chou√©"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "‚ö†Ô∏è D√©ploiement annul√© ou remplac√©"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "‚è∞ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # üßπ Nettoyage automatique avec API REST
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Working automatic registry cleanup
        run: |
          echo "üßπ NETTOYAGE AUTOMATIQUE - VERSION QUI FONCTIONNE"
          echo "================================================"
          
          # Fonction utilisant l'API REST au lieu de doctl probl√©matique
          cleanup_with_api() {
            local repo=$1
            local max_images=8
            
            echo ""
            echo "üîç Nettoyage API pour $repo..."
            
            # Utiliser curl avec l'API DO au lieu de doctl d√©faillant
            local registry_name="${{ secrets.DOCR_NAME }}"
            local api_url="https://api.digitalocean.com/v2/registry/$registry_name/repositories/$repo/tags"
            
            echo "  üì° R√©cup√©ration via API REST..."
            local response=$(curl -s -X GET "$api_url?per_page=100" \
              -H "Authorization: Bearer ${{ secrets.DOCR_ACCESS_TOKEN }}" \
              -H "Content-Type: application/json")
            
            # Extraire les tags et leurs informations
            local tags_info=$(echo "$response" | jq -r '.tags[] | select(.name != "buildcache" and .name != "latest") | "\(.name)|\(.updated_at)"' 2>/dev/null || echo "")
            
            if [ -z "$tags_info" ]; then
              echo "  ‚ö†Ô∏è Pas de tags r√©cup√©r√©s via API, tentative doctl..."
              
              # Fallback: Utiliser doctl avec pagination forc√©e
              local manifests=$(doctl registry repository list-manifests "$repo" --format Digest,Updated,Tags --no-header --limit 100 2>/dev/null)
              local digests_to_delete=$(echo "$manifests" | grep -v -E "(buildcache|latest|main$)" | sort -k2 | head -20 | awk '{print $1}')
              
              local count=0
              for digest in $digests_to_delete; do
                if [ $count -ge 15 ]; then break; fi
                if [[ "$digest" =~ ^sha256: ]]; then
                  echo "    üóëÔ∏è Suppression: ${digest:0:20}..."
                  doctl registry repository delete-manifest --force "$repo" "$digest" 2>/dev/null && echo "      ‚úÖ OK" || echo "      ‚ùå √âchec"
                  count=$((count + 1))
                  sleep 0.5
                fi
              done
              
              return 0
            fi
            
            # Traitement des tags r√©cup√©r√©s via API
            local total_tags=$(echo "$tags_info" | wc -l)
            echo "  üìä Tags trouv√©s (hors buildcache/latest): $total_tags"
            
            if [ "$total_tags" -le "$max_images" ]; then
              echo "  ‚úÖ Pas de nettoyage n√©cessaire ($total_tags <= $max_images)"
              return 0
            fi
            
            local to_delete=$((total_tags - max_images))
            echo "  üóëÔ∏è Tags √† supprimer: $to_delete"
            
            # Supprimer les plus anciens
            local deleted=0
            echo "$tags_info" | sort -t'|' -k2 | head -n "$to_delete" | while IFS='|' read tag_name updated_at; do
              if [ $deleted -ge 20 ]; then break; fi
              
              echo "    üóëÔ∏è Suppression tag: $tag_name ($updated_at)"
              
              # Supprimer via API REST
              local delete_url="https://api.digitalocean.com/v2/registry/$registry_name/repositories/$repo/tags/$tag_name"
              local delete_response=$(curl -s -X DELETE "$delete_url" \
                -H "Authorization: Bearer ${{ secrets.DOCR_ACCESS_TOKEN }}" \
                -w "%{http_code}")
              
              if [[ "$delete_response" =~ 20[0-9] ]]; then
                echo "      ‚úÖ Supprim√© (HTTP $delete_response)"
                deleted=$((deleted + 1))
              else
                echo "      ‚ùå √âchec (HTTP $delete_response)"
              fi
              
              sleep 1
            done
          }
          
          # Installer jq pour le parsing JSON
          echo "üì¶ Installation de jq..."
          sudo apt-get update -qq && sudo apt-get install -y jq
          
          # Nettoyer les repositories dans l'ordre de priorit√©
          cleanup_with_api "intelia-llm"     # Priorit√© (43 images)
          cleanup_with_api "intelia-backend" 
          cleanup_with_api "intelia-frontend"
          
          # Passe suppl√©mentaire pour LLM
          echo ""
          echo "üîÑ Passe suppl√©mentaire pour intelia-llm..."
          cleanup_with_api "intelia-llm"
          
          echo ""
          echo "üóëÔ∏è Garbage collection final..."
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null && echo "‚úÖ GC lanc√©" || echo "‚ö†Ô∏è GC en cours"
          
          echo ""
          echo "üìä STATUT FINAL:"
          doctl registry repository list --format Name,TagCount,UpdatedAt
          
          echo "üéâ Nettoyage automatique termin√©"

  # üìä R√©sum√© (bas√© sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED"
            else
              echo "‚ùå Backend: FAILED" 
            fi
          else
            echo "‚è∏Ô∏è Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "‚úÖ LLM: DEPLOYED"
            else
              echo "‚ùå LLM: FAILED"
            fi
          else
            echo "‚è∏Ô∏è LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "üìã D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"
          echo "üßπ Nettoyage: ${{ needs.cleanup.result == 'success' && '‚úÖ TERMIN√â' || '‚ö†Ô∏è PARTIEL' }}"