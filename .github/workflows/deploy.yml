name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
      grafana-changed: ${{ steps.changes.outputs.grafana }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'
            grafana:
              - 'grafana-service/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"
          echo "Grafana changed: ${{ steps.changes.outputs.grafana }}"

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          provenance: false
          sbom: false
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          provenance: false
          sbom: false

  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login to DOCR (native docker login)
        run: |
          echo "Login to DigitalOcean Container Registry..."
          echo "${{ secrets.DOCR_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u ${{ secrets.DOCR_NAME }} --password-stdin
          echo "✅ Login successful"

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          platforms: linux/amd64
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          provenance: false
          sbom: false

      - name: Create latest tag explicitly
        run: |
          echo "Création explicite du tag 'latest'..."
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          docker tag registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main \
                     registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
          echo "✅ Tag 'latest' créé et poussé"

  build-grafana:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.grafana-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push Grafana
        uses: docker/build-push-action@v6
        with:
          context: ./grafana-service
          push: true
          platforms: linux/amd64
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-grafana:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-grafana:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-grafana:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-grafana:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-grafana:buildcache,mode=max
          provenance: false
          sbom: false

  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, build-grafana]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success' || needs.build-grafana.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Login to registry
        run: |
          doctl registry login --expiry-seconds 3600

      - name: Wait for registry propagation and verify images
        run: |
          echo "Vérification que les images sont accessibles depuis App Platform..."

          REGISTRY="registry.digitalocean.com/${{ secrets.DOCR_NAME }}"

          # Force a fresh pull to ensure images are really available
          if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
            echo "Test pull intelia-llm:latest..."
            docker pull $REGISTRY/intelia-llm:latest
            echo "✅ intelia-llm:latest confirmed pullable"
          fi

          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "Test pull intelia-frontend:latest..."
            docker pull $REGISTRY/intelia-frontend:latest
            echo "✅ intelia-frontend:latest confirmed pullable"
          fi

          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "Test pull intelia-backend:latest..."
            docker pull $REGISTRY/intelia-backend:latest
            echo "✅ intelia-backend:latest confirmed pullable"
          fi

          if [[ "${{ needs.build-grafana.result }}" == "success" ]]; then
            echo "Test pull intelia-grafana:latest..."
            docker pull $REGISTRY/intelia-grafana:latest
            echo "✅ intelia-grafana:latest confirmed pullable"
          fi

          echo "Attente supplémentaire de 60s pour synchronisation App Platform..."
          sleep 60

      - name: Verify App Platform spec uses latest tags
        run: |
          echo "Verification de la spec de l'App Platform..."

          # Get current spec
          doctl apps spec get ${{ secrets.DO_APP_ID }} --format yaml > app-spec.yaml

          echo "Configuration actuelle des images:"
          grep -A 5 "image:" app-spec.yaml | grep -E "(repository|tag):"

          # Check if all services use 'latest' tag
          NEEDS_UPDATE=false

          if grep -q 'tag:.*latest' app-spec.yaml; then
            echo "✅ Toutes les images utilisent le tag 'latest'"
          else
            echo "⚠️ Certaines images n'utilisent pas 'latest'"
            NEEDS_UPDATE=true
          fi

          # Check for hardcoded digests
          if grep -q "digest:" app-spec.yaml; then
            echo "⚠️ Des digests sont hardcodés dans la spec"
            NEEDS_UPDATE=true
          fi

          if [ "$NEEDS_UPDATE" = true ]; then
            echo "❌ La spec doit être mise à jour manuellement:"
            echo "   1. Aller sur https://cloud.digitalocean.com/apps"
            echo "   2. Settings → Components"
            echo "   3. Pour chaque service, s'assurer que Tag = 'latest'"
            exit 1
          fi

          echo "✅ Spec correctement configurée, pas besoin de mise à jour"

      - name: Deployment via Autodeploy
        run: |
          echo "╔════════════════════════════════════════════════════════════╗"
          echo "║  AUTODEPLOY ACTIVÉ - PAS DE DÉPLOIEMENT MANUEL REQUIS    ║"
          echo "╚════════════════════════════════════════════════════════════╝"
          echo ""
          echo "✅ Images pushed avec tag 'latest'"
          echo "✅ App Platform Autodeploy activé pour tous les services"
          echo ""
          echo "App Platform va détecter automatiquement les nouvelles images"
          echo "et déclencher le déploiement dans les prochaines minutes."
          echo ""
          echo "Surveillez le déploiement sur:"
          echo "https://cloud.digitalocean.com/apps"
          echo ""
          echo "Services avec Autodeploy:"
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "  ✅ Frontend (intelia-frontend:latest)"
          fi
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "  ✅ Backend (intelia-backend:latest)"
          fi
          if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
            echo "  ✅ LLM (intelia-llm:latest)"
          fi
          if [[ "${{ needs.build-grafana.result }}" == "success" ]]; then
            echo "  ✅ Grafana (intelia-grafana:latest)"
          fi

  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, build-grafana, deploy]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="

          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "Frontend: DEPLOYED"
            else
              echo "Frontend: FAILED"
            fi
          else
            echo "Frontend: SKIPPED (no changes)"
          fi

          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "Backend: DEPLOYED"
            else
              echo "Backend: FAILED"
            fi
          else
            echo "Backend: SKIPPED (no changes)"
          fi

          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "LLM: DEPLOYED"
            else
              echo "LLM: FAILED"
            fi
          else
            echo "LLM: SKIPPED (no changes)"
          fi

          if [[ "${{ needs.detect-changes.outputs.grafana-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-grafana.result }}" == "success" ]]; then
              echo "Grafana: DEPLOYED"
            else
              echo "Grafana: FAILED"
            fi
          else
            echo "Grafana: SKIPPED (no changes)"
          fi

          echo ""
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Deploiement: REUSSI"
          else
            echo "Deploiement: ECHEC"
          fi
