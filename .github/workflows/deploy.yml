name: Ultra Fast Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  # 🔥 BUILDS PARALLÈLES + NETTOYAGE INTÉGRÉ
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ⚡ Nettoyage RAPIDE Frontend
        run: |
          echo "🔥 Nettoyage rapide intelia-frontend..."
          manifests=$(doctl registry repository list-manifests intelia-frontend --format Digest,UpdatedAt --no-header 2>/dev/null || true)
          if [ -n "$manifests" ]; then
            total=$(echo "$manifests" | wc -l)
            if [ "$total" -gt 8 ]; then
              to_delete=$((total - 8))
              echo "Suppression $to_delete anciennes images..."
              echo "$manifests" | sort -k2,2 | head -n "$to_delete" | awk '{print $1}' | while read digest; do
                doctl registry repository delete-manifest intelia-frontend "$digest" --force || true
              done
            fi
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: 🚀 Build & push frontend (OPTIMISÉ)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            LLM_BACKEND_URL=${{ secrets.LLM_BACKEND_URL }}
            BUILDKIT_INLINE_CACHE=1
          # OPTIMISATIONS SPEED
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=registry,compression=zstd,compression-level=3

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ⚡ Nettoyage RAPIDE Backend
        run: |
          echo "🔥 Nettoyage rapide intelia-backend..."
          manifests=$(doctl registry repository list-manifests intelia-backend --format Digest,UpdatedAt --no-header 2>/dev/null || true)
          if [ -n "$manifests" ]; then
            total=$(echo "$manifests" | wc -l)
            if [ "$total" -gt 8 ]; then
              to_delete=$((total - 8))
              echo "Suppression $to_delete anciennes images..."
              echo "$manifests" | sort -k2,2 | head -n "$to_delete" | awk '{print $1}' | while read digest; do
                doctl registry repository delete-manifest intelia-backend "$digest" --force || true
              done
            fi
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: 🚀 Build & push backend (ULTRA OPTIMISÉ)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PIP_CACHE_DIR=/tmp/pip-cache
            PYTHONDONTWRITEBYTECODE=1
          # OPTIMISATIONS EXTRÊMES
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=registry,compression=zstd,compression-level=1
          # Accélération BuildKit
          secret: |
            id=pip,src=/dev/null

  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ⚡ Nettoyage RAPIDE LLM
        run: |
          echo "🔥 Nettoyage rapide intelia-llm..."
          manifests=$(doctl registry repository list-manifests intelia-llm --format Digest,UpdatedAt --no-header 2>/dev/null || true)
          if [ -n "$manifests" ]; then
            total=$(echo "$manifests" | wc -l)
            if [ "$total" -gt 8 ]; then
              to_delete=$((total - 8))
              echo "Suppression $to_delete anciennes images..."
              echo "$manifests" | sort -k2,2 | head -n "$to_delete" | awk '{print $1}' | while read digest; do
                doctl registry repository delete-manifest intelia-llm "$digest" --force || true
              done
            fi
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: 🚀 Build & push LLM (RAPIDE)
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64
          provenance: false
          sbom: false

  # ⚡ NETTOYAGE FINAL ULTRA RAPIDE
  final-cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ⚡ Vérification finale + Garbage collection
        run: |
          echo "⚡ NETTOYAGE FINAL ULTRA RAPIDE"
          
          # Vérification rapide de chaque repo
          for repo in intelia-frontend intelia-backend intelia-llm; do
            count=$(doctl registry repository list-manifests "$repo" --format Digest --no-header 2>/dev/null | wc -l || echo "0")
            echo "$repo: $count images"
            
            if [ "$count" -gt 8 ]; then
              echo "⚠️  $repo dépasse 8 images - nettoyage d'urgence"
              manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt --no-header 2>/dev/null || true)
              excess=$((count - 8))
              echo "$manifests" | sort -k2,2 | head -n "$excess" | awk '{print $1}' | while read digest; do
                doctl registry repository delete-manifest "$repo" "$digest" --force || true
              done
            fi
          done
          
          # Garbage collection
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force || true
          echo "✅ Nettoyage final terminé"

  # 📊 Résumé INSTANTANÉ
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, final-cleanup]
    if: always()
    steps:
      - name: ⚡ RAPPORT ULTRA RAPIDE
        run: |
          echo "🚀 DÉPLOIEMENT ULTRA RAPIDE TERMINÉ"
          echo "==================================="
          
          # Statuts
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && '✅ DÉPLOYÉ' || '❌ ÉCHEC' }}"
          else
            echo "Frontend: ⏸️ INCHANGÉ"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && '✅ DÉPLOYÉ' || '❌ ÉCHEC' }}"
          else
            echo "Backend: ⏸️ INCHANGÉ"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && '✅ DÉPLOYÉ' || '❌ ÉCHEC' }}"
          else
            echo "LLM: ⏸️ INCHANGÉ"
          fi
          
          echo ""
          echo "⚡ OPTIMISATIONS APPLIQUÉES:"
          echo "• Builds 100% parallèles"
          echo "• Nettoyage intégré aux builds"
          echo "• Cache optimisé + compression zstd"
          echo "• Métadonnées désactivées (provenance/sbom)"
          echo "• BuildKit master + optimisations"
          echo "• Cible: 6-8 minutes total"