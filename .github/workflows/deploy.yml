name: Build and Deploy to DigitalOcean App Platform

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.filter.outputs.frontend }}
      backend-changed: ${{ steps.filter.outputs.backend }}
      rag-changed: ${{ steps.filter.outputs.rag }}
      llm-changed: ${{ steps.filter.outputs.llm }}
      prometheus-changed: ${{ steps.filter.outputs.prometheus }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect path changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            rag:
              - 'rag/**'
            llm:
              - 'llm/**'
            prometheus:
              - 'prometheus-service/**'

  # ======================================================
  # FRONTEND
  # ======================================================
  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Tag and push :latest
        run: |
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:main
          docker tag \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:main \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:latest
          docker push \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/frontend:latest

  # ======================================================
  # BACKEND
  # ======================================================
  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Tag and push :latest
        run: |
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:main
          docker tag \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:main \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:latest
          docker push \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/backend:latest

  # ======================================================
  # AI SERVICE
  # ======================================================
  build-rag:
    needs: detect-changes
    if: needs.detect-changes.outputs.rag-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push AI Service image
        uses: docker/build-push-action@v6
        with:
          context: ./rag
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Tag and push :latest
        run: |
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:main
          docker tag \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:main \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:latest
          docker push \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/rag:latest

  # ======================================================
  # LLM SERVICE
  # ======================================================
  build-llm:
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push LLM Service image
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Tag and push :latest
        run: |
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:main
          docker tag \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:main \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:latest
          docker push \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/llm:latest

  # ======================================================
  # PROMETHEUS
  # ======================================================
  build-prometheus:
    needs: detect-changes
    if: needs.detect-changes.outputs.prometheus-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Build and push Prometheus image
        uses: docker/build-push-action@v6
        with:
          context: ./prometheus-service
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:buildcache,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Tag and push :latest
        run: |
          docker pull registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:main
          docker tag \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:main \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:latest
          docker push \
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/prometheus:latest

  # ======================================================
  # DEPLOY TO DIGITALOCEAN
  # ======================================================
  # CLEANUP REGISTRY - Keep only 10 most recent tags
  # ======================================================
  cleanup-registry:
    needs:
      - build-frontend
      - build-backend
      - build-rag
      - build-llm
      - build-prometheus
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Cleanup old frontend tags
        if: needs.build-frontend.result == 'success'
        run: |
          echo "Cleaning up old frontend tags (keeping 10 most recent)..."

          # List all tags sorted by update time (newest first) in JSON format
          TAGS=$(doctl registry repository list-tags ${{ secrets.DOCR_NAME }}/frontend --output json || echo "[]")

          # Count total tags
          TAG_COUNT=$(echo "$TAGS" | jq '. | length')
          echo "Found $TAG_COUNT tags total"

          # Only cleanup if we have more than 10 tags
          if [ "$TAG_COUNT" -gt 10 ]; then
            echo "Deleting $(($TAG_COUNT - 10)) old tags..."
            echo "$TAGS" | jq -r '.[10:] | .[].tag' | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "buildcache" ]; then
                echo "Deleting tag: $tag"
                doctl registry repository delete-tag ${{ secrets.DOCR_NAME }}/frontend "$tag" --force || true
              fi
            done
          else
            echo "Only $TAG_COUNT tags found, no cleanup needed (keeping all)"
          fi

      - name: Cleanup old backend tags
        if: needs.build-backend.result == 'success'
        run: |
          echo "Cleaning up old backend tags (keeping 10 most recent)..."

          TAGS=$(doctl registry repository list-tags ${{ secrets.DOCR_NAME }}/backend --output json || echo "[]")

          TAG_COUNT=$(echo "$TAGS" | jq '. | length')
          echo "Found $TAG_COUNT tags total"

          if [ "$TAG_COUNT" -gt 10 ]; then
            echo "Deleting $(($TAG_COUNT - 10)) old tags..."
            echo "$TAGS" | jq -r '.[10:] | .[].tag' | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "buildcache" ]; then
                echo "Deleting tag: $tag"
                doctl registry repository delete-tag ${{ secrets.DOCR_NAME }}/backend "$tag" --force || true
              fi
            done
          else
            echo "Only $TAG_COUNT tags found, no cleanup needed (keeping all)"
          fi

      - name: Cleanup old ai-service tags
        if: needs.build-rag.result == 'success'
        run: |
          echo "Cleaning up old ai-service tags (keeping 10 most recent)..."

          TAGS=$(doctl registry repository list-tags ${{ secrets.DOCR_NAME }}/ai-service --output json || echo "[]")

          TAG_COUNT=$(echo "$TAGS" | jq '. | length')
          echo "Found $TAG_COUNT tags total"

          if [ "$TAG_COUNT" -gt 10 ]; then
            echo "Deleting $(($TAG_COUNT - 10)) old tags..."
            echo "$TAGS" | jq -r '.[10:] | .[].tag' | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "buildcache" ]; then
                echo "Deleting tag: $tag"
                doctl registry repository delete-tag ${{ secrets.DOCR_NAME }}/ai-service "$tag" --force || true
              fi
            done
          else
            echo "Only $TAG_COUNT tags found, no cleanup needed (keeping all)"
          fi

      - name: Cleanup old llm tags
        if: needs.build-llm.result == 'success'
        run: |
          echo "Cleaning up old llm tags (keeping 10 most recent)..."

          TAGS=$(doctl registry repository list-tags ${{ secrets.DOCR_NAME }}/llm --output json || echo "[]")

          TAG_COUNT=$(echo "$TAGS" | jq '. | length')
          echo "Found $TAG_COUNT tags total"

          if [ "$TAG_COUNT" -gt 10 ]; then
            echo "Deleting $(($TAG_COUNT - 10)) old tags..."
            echo "$TAGS" | jq -r '.[10:] | .[].tag' | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "buildcache" ]; then
                echo "Deleting tag: $tag"
                doctl registry repository delete-tag ${{ secrets.DOCR_NAME }}/llm "$tag" --force || true
              fi
            done
          else
            echo "Only $TAG_COUNT tags found, no cleanup needed (keeping all)"
          fi

      - name: Cleanup old prometheus tags
        if: needs.build-prometheus.result == 'success'
        run: |
          echo "Cleaning up old prometheus tags (keeping 10 most recent)..."

          TAGS=$(doctl registry repository list-tags ${{ secrets.DOCR_NAME }}/prometheus --output json || echo "[]")

          TAG_COUNT=$(echo "$TAGS" | jq '. | length')
          echo "Found $TAG_COUNT tags total"

          if [ "$TAG_COUNT" -gt 10 ]; then
            echo "Deleting $(($TAG_COUNT - 10)) old tags..."
            echo "$TAGS" | jq -r '.[10:] | .[].tag' | while read -r tag; do
              if [ ! -z "$tag" ] && [ "$tag" != "latest" ] && [ "$tag" != "buildcache" ]; then
                echo "Deleting tag: $tag"
                doctl registry repository delete-tag ${{ secrets.DOCR_NAME }}/prometheus "$tag" --force || true
              fi
            done
          else
            echo "Only $TAG_COUNT tags found, no cleanup needed (keeping all)"
          fi

      - name: Run garbage collection
        run: |
          echo "Running garbage collection to free up storage..."
          doctl registry garbage-collection start --include-untagged-manifests --force || true

  # ======================================================
  deploy:
    needs:
      - build-frontend
      - build-backend
      - build-rag
      - build-llm
      - build-prometheus
      - cleanup-registry
    if: >
      always() &&
      !cancelled() &&
      (
        needs.build-frontend.result == 'success' ||
        needs.build-backend.result == 'success' ||
        needs.build-rag.result == 'success' ||
        needs.build-llm.result == 'success' ||
        needs.build-prometheus.result == 'success'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Trigger App Platform deployment
        run: doctl apps create-deployment ${{ secrets.DO_APP_ID }} --wait

  # ======================================================
  # SUMMARY
  # ======================================================
  summary:
    needs:
      - detect-changes
      - build-frontend
      - build-backend
      - build-rag
      - build-llm
      - build-prometheus
      - cleanup-registry
      - deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Print deployment summary
        run: |
          echo "=== Deployment Summary ==="
          echo ""
          echo "Frontend:    changed=${{ needs.detect-changes.outputs.frontend-changed }},  result=${{ needs.build-frontend.result }}"
          echo "Backend:     changed=${{ needs.detect-changes.outputs.backend-changed }},  result=${{ needs.build-backend.result }}"
          echo "AI Service:  changed=${{ needs.detect-changes.outputs.rag-changed }},  result=${{ needs.build-rag.result }}"
          echo "LLM Service: changed=${{ needs.detect-changes.outputs.llm-changed }},  result=${{ needs.build-llm.result }}"
          echo "Prometheus:  changed=${{ needs.detect-changes.outputs.prometheus-changed }},  result=${{ needs.build-prometheus.result }}"
          echo ""
          echo "Cleanup:   result=${{ needs.cleanup-registry.result }}"
          echo ""

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Deployment: SUCCESS ✅"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "Deployment: SKIPPED (no changes)"
          else
            echo "Deployment: FAILED ❌"
          fi
