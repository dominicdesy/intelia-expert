name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # 🎯 Build Frontend - SEULEMENT si changé
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # 🎯 Build Backend - SEULEMENT si changé  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🎯 Build LLM - SEULEMENT si changé
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🚀 Deploy - SEULEMENT si au moins un service a été buildé
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "⏳ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "🚀 Déclenchement du redéploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "❌ ERREUR: DO_APP_ID secret n'est pas configuré"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "📋 Deployment ID: $DEPLOYMENT_ID"
          
          echo "👀 Surveillance du déploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "✅ Déploiement réussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "❌ Déploiement échoué"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "⚠️ Déploiement annulé ou remplacé"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "⏰ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # 🧹 Nettoyage automatique avec API REST
  cleanup:
    name: Cleanup old DOCR images
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always() && needs.detect-changes.result == 'success'
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Verify doctl authentication
        run: |
          doctl auth list
          doctl registry repository list || echo "Registry access test failed"

      - name: Cleanup DOCR repositories
        shell: bash
        run: |
          set -e
          
          # Configuration
          KEEP_TAGS=20
          REPOSITORIES=("intelia-frontend" "intelia-backend" "intelia-llm")
          PROTECTED_TAGS="latest|main|prod|stable|buildcache"
          
          echo "🧹 Démarrage du nettoyage DOCR..."
          
          for repo in "${REPOSITORIES[@]}"; do
            echo ""
            echo "📦 Nettoyage de $repo..."
            
            # Lister tous les tags avec timestamps
            echo "📋 Récupération de la liste des tags..."
            if ! doctl registry repository list-tags "$repo" --format "Tag,UpdatedAt" --no-header > "/tmp/${repo}_tags.txt" 2>/dev/null; then
              echo "❌ Impossible de lister les tags pour $repo (repository might not exist)"
              continue
            fi
            
            # Compter le total
            total_tags=$(grep -v "^$" "/tmp/${repo}_tags.txt" | wc -l)
            echo "📊 Total des tags: $total_tags"
            
            if [ "$total_tags" -le "$KEEP_TAGS" ]; then
              echo "✅ Pas de nettoyage nécessaire pour $repo ($total_tags <= $KEEP_TAGS)"
              continue
            fi
            
            # Filtrer les tags protégés et trier par date
            echo "🔍 Identification des tags à supprimer..."
            grep -v "^$" "/tmp/${repo}_tags.txt" | \
            grep -vE "^($PROTECTED_TAGS)[[:space:]]" | \
            sort -k2,2 | \
            head -n -${KEEP_TAGS} | \
            awk '{print $1}' > "/tmp/${repo}_to_delete.txt"
            
            # Compter les tags à supprimer
            to_delete=$(cat "/tmp/${repo}_to_delete.txt" | wc -l)
            echo "🗑️ Tags à supprimer: $to_delete"
            
            if [ "$to_delete" -eq 0 ]; then
              echo "✅ Aucun tag à supprimer pour $repo"
              continue
            fi
            
            # Supprimer les tags un par un avec retry
            deleted=0
            while IFS= read -r tag; do
              if [ -z "$tag" ]; then continue; fi
              
              echo "🗑️ Suppression du tag: $tag"
              
              # Tentative de suppression avec retry
              for attempt in {1..3}; do
                if doctl registry repository delete-tag "$repo" "$tag" --force; then
                  echo "   ✅ Supprimé: $tag (tentative $attempt)"
                  ((deleted++))
                  break
                else
                  echo "   ⚠️ Échec tentative $attempt pour $tag"
                  if [ $attempt -lt 3 ]; then
                    sleep 2
                  fi
                fi
              done
              
              # Limite de sécurité
              if [ $deleted -ge 50 ]; then
                echo "⚠️ Limite de sécurité atteinte (50 suppressions)"
                break
              fi
              
            done < "/tmp/${repo}_to_delete.txt"
            
            echo "📊 Résumé $repo: $deleted tags supprimés"
            
            # Nettoyage des fichiers temporaires
            rm -f "/tmp/${repo}_tags.txt" "/tmp/${repo}_to_delete.txt"
          done
          
          echo ""
          echo "✅ Nettoyage terminé pour tous les repositories"

      - name: Cleanup dangling manifests (optional)
        shell: bash
        run: |
          set -e
          
          REPOSITORIES=("intelia-frontend" "intelia-backend" "intelia-llm")
          
          echo "🧹 Nettoyage des manifests orphelins..."
          
          for repo in "${REPOSITORIES[@]}"; do
            echo "🔍 Vérification des manifests orphelins pour $repo..."
            
            # Cette commande peut échouer si pas de manifests orphelins
            if doctl registry repository list-manifests "$repo" --format "Digest,Tags" --no-header 2>/dev/null | grep -E "^[a-f0-9]+[[:space:]]*$" > "/tmp/${repo}_orphans.txt"; then
              
              orphan_count=$(wc -l < "/tmp/${repo}_orphans.txt")
              echo "🗑️ Manifests orphelins trouvés: $orphan_count"
              
              if [ "$orphan_count" -gt 0 ] && [ "$orphan_count" -lt 20 ]; then
                while IFS= read -r digest; do
                  if [ -n "$digest" ]; then
                    echo "🗑️ Suppression manifest orphelin: $digest"
                    doctl registry repository delete-manifest "$repo" "$digest" --force || echo "⚠️ Échec suppression manifest $digest"
                  fi
                done < "/tmp/${repo}_orphans.txt"
              else
                echo "⚠️ Trop de manifests orphelins ($orphan_count) - suppression manuelle recommandée"
              fi
              
              rm -f "/tmp/${repo}_orphans.txt"
            else
              echo "✅ Pas de manifests orphelins pour $repo"
            fi
          done


  # 📊 Résumé (basé sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "🚀 DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "✅ Frontend: DEPLOYED"
            else
              echo "❌ Frontend: FAILED"
            fi
          else
            echo "⏸️ Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "✅ Backend: DEPLOYED"
            else
              echo "❌ Backend: FAILED" 
            fi
          else
            echo "⏸️ Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "✅ LLM: DEPLOYED"
            else
              echo "❌ LLM: FAILED"
            fi
          else
            echo "⏸️ LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "📋 Déploiement: ${{ needs.deploy.result == 'success' && '✅ RÉUSSI' || '❌ ÉCHEC' }}"
          echo "🧹 Nettoyage: ${{ needs.cleanup.result == 'success' && '✅ TERMINÉ' || '⚠️ PARTIEL' }}"