name: Smart Selective Docker Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

# üîß √âvite les builds parall√®les qui corrompent le registry
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç √âTAPE 1: D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      any-changes: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour comparer les changements

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/deploy.yml'
            backend:
              - 'backend/**'
              - '.github/workflows/deploy.yml'

      - name: Show detected changes
        run: |
          echo "üîç Changes detected:"
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "Files changed:"
          echo "${{ steps.changes.outputs.frontend_files }}"
          echo "${{ steps.changes.outputs.backend_files }}"

  # üßπ √âTAPE 2: Nettoyer le registry (seulement si changements d√©tect√©s)
  cleanup-registry:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-changes == 'true'
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Selective registry cleanup
        run: |
          echo "üßπ Cleaning registry for changed components..."
          
          # Nettoyer seulement les composants qui ont chang√©
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Cleaning frontend images..."
            manifests=$(doctl registry repository list-manifests intelia-frontend --format Digest --no-header | tail -n +3 || true)
            for manifest in $manifests; do
              echo "Deleting frontend manifest: $manifest"
              doctl registry repository delete-manifest intelia-frontend "$manifest" --force || true
            done
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Cleaning backend images..."
            manifests=$(doctl registry repository list-manifests intelia-backend --format Digest --no-header | tail -n +3 || true)
            for manifest in $manifests; do
              echo "Deleting backend manifest: $manifest"
              doctl registry repository delete-manifest intelia-backend "$manifest" --force || true
            done
          fi
          
          # Garbage collection seulement si n√©cessaire
          echo "Running garbage collection..."
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force --include-untagged-manifests || true

  # üéØ √âTAPE 3: Build Frontend (seulement si chang√©)
  build-frontend:
    needs: [detect-changes, cleanup-registry]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DigitalOcean Container Registry
        run: echo "${{ secrets.DOCR_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

      - name: Build and push frontend
        run: |
          echo "üéØ Building frontend (changes detected in: ${{ needs.detect-changes.outputs.frontend_files }})"
          TIMESTAMP=$(date +%s)
          SHORT_SHA=${GITHUB_SHA::8}
          
          # Build avec cache intelligent
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            --build-arg CACHE_BUST=$TIMESTAMP \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-$SHORT_SHA \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main \
            ./frontend
          
          # Push avec les deux tags
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-$SHORT_SHA
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          
          echo "‚úÖ Frontend deployed successfully!"

  # üéØ √âTAPE 4: Build Backend (seulement si chang√©)
  build-backend:
    needs: [detect-changes, cleanup-registry]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DigitalOcean Container Registry
        run: echo "${{ secrets.DOCR_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin

      - name: Build and push backend
        run: |
          echo "üéØ Building backend (changes detected in: ${{ needs.detect-changes.outputs.backend_files }})"
          TIMESTAMP=$(date +%s)
          SHORT_SHA=${GITHUB_SHA::8}
          
          # Build sans cache pour √©viter corruption + timestamps uniques
          docker build --no-cache \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-$SHORT_SHA \
            -t registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main \
            ./backend
          
          # Push avec les deux tags
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-$SHORT_SHA
          docker push registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          
          echo "‚úÖ Backend deployed successfully!"

  # üìä √âTAPE 5: R√©sum√© du d√©ploiement
  deployment-summary:
    needs: [detect-changes, build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED (changes detected)"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è  Frontend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED (changes detected)" 
            else
              echo "‚ùå Backend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è  Backend: SKIPPED (no changes)"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.any-changes }}" != "true" ]]; then
            echo "üí° No changes detected - Infrastructure costs saved!"
          fi
          
          echo "===================="
          echo "üîó View your app: https://[your-app-name].ondigitalocean.app"