name: Simple Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # D√©tection des changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  # Build Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_BASE_URL=https://expert.intelia.com/api
            NEXT_PUBLIC_API_URL=https://expert.intelia.com/api

  # Build Backend
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          platforms: linux/amd64

  # Build LLM
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push LLM
        uses: docker/build-push-action@v5
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          platforms: linux/amd64

  # Nettoyage optionnel
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images
        run: |
          echo "Nettoyage des anciennes images..."
          
          # Nettoyage frontend
          if doctl registry repository list | grep -q "intelia-frontend"; then
            echo "Nettoyage frontend..."
            doctl registry repository list-manifests intelia-frontend --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-frontend {} --force || true
          fi
          
          # Nettoyage backend
          if doctl registry repository list | grep -q "intelia-backend"; then
            echo "Nettoyage backend..."
            doctl registry repository list-manifests intelia-backend --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-backend {} --force || true
          fi
          
          # Nettoyage LLM  
          if doctl registry repository list | grep -q "intelia-llm"; then
            echo "Nettoyage LLM..."
            doctl registry repository list-manifests intelia-llm --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-llm {} --force || true
          fi
          
          # Garbage collection
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force || echo "Garbage collection d√©j√† en cours"

  # R√©sum√©
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ D√âPLOIEMENT TERMIN√â"
          echo "===================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Frontend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Backend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "LLM: ‚è∏Ô∏è INCHANG√â"
          fi