name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # Build Frontend - SEULEMENT si change
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # Build Backend - SEULEMENT si change  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # Build LLM - SEULEMENT si change
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # Deploy - SEULEMENT si au moins un service a ete build
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "Declenchement du redeploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "ERREUR: DO_APP_ID secret n'est pas configure"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "Deployment ID: $DEPLOYMENT_ID"
          
          echo "Surveillance du deploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "Deploiement reussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "Deploiement echoue"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "Deploiement annule ou remplace"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # Nettoyage automatique
  cleanup:
    name: Cleanup old DOCR images
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always() && needs.detect-changes.result == 'success'
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Verify doctl authentication
        run: |
          doctl auth list
          doctl registry repository list

      - name: Simple cleanup - Keep 8 most recent images
        shell: bash
        run: |
          # Retirer set -e pour eviter echec complet du script
          
          KEEP_IMAGES=8
          REPOSITORIES=("intelia-frontend" "intelia-backend" "intelia-llm")
          
          echo "Nettoyage simple: garder les $KEEP_IMAGES plus recents par repository"
          
          for repo in "${REPOSITORIES[@]}"; do
            echo ""
            echo "Traitement de $repo..."
            
            echo "Recuperation de la liste des images..."
            # Utiliser directement JSON pour eviter les problemes de parsing
            if ! doctl registry repository list-tags "$repo" --output json > "/tmp/${repo}.json" 2>/dev/null; then
              echo "Repository $repo introuvable"
              continue
            fi
            
            # DEBUG: Voir ce qu'on a recupere
            echo "DEBUG - Contenu JSON:"
            head -10 "/tmp/${repo}.json"
            
            # Extraire tag et updated_at du JSON de maniere propre
            if command -v jq >/dev/null 2>&1; then
              # Avec jq si disponible
              cat "/tmp/${repo}.json" | jq -r '.[] | "\(.tag) \(.updated_at)"' > "/tmp/${repo}_clean.txt" 2>/dev/null
            else
              # Sans jq, parsing manuel basique
              echo "jq non disponible, utilisation parsing manuel"
              grep -o '"tag":"[^"]*"' "/tmp/${repo}.json" | cut -d'"' -f4 > "/tmp/${repo}_tags_only.txt"
              grep -o '"updated_at":"[^"]*"' "/tmp/${repo}.json" | cut -d'"' -f4 > "/tmp/${repo}_dates_only.txt"
              paste "/tmp/${repo}_tags_only.txt" "/tmp/${repo}_dates_only.txt" > "/tmp/${repo}_clean.txt"
              rm -f "/tmp/${repo}_tags_only.txt" "/tmp/${repo}_dates_only.txt"
            fi
            
            total_images=$(cat "/tmp/${repo}_clean.txt" | wc -l)
            
            echo "Total des images valides: $total_images"
            
            # DEBUG: Montrer les premieres lignes nettoyees
            echo "DEBUG - Premiers tags nettoyes:"
            head -5 "/tmp/${repo}_clean.txt"
            
            if [ "$total_images" -le "$KEEP_IMAGES" ]; then
              echo "Pas de nettoyage necessaire pour $repo ($total_images <= $KEEP_IMAGES)"
              continue
            fi
            
            # Trier par date (colonne 2) et prendre les plus anciens
            # MAIS proteger les tags importants
            PROTECTED_TAGS="latest|main|buildcache|prod|stable"
            
            sort -k2,2 "/tmp/${repo}_clean.txt" | \
            head -n $((total_images - KEEP_IMAGES)) | \
            awk '{print $1}' | \
            grep -v "^[[:space:]]*$" | \
            grep -vE "^($PROTECTED_TAGS)$" > "/tmp/${repo}_to_delete.txt"
            
            to_delete=$(cat "/tmp/${repo}_to_delete.txt" | wc -l)
            to_keep=$((total_images - to_delete))
            
            echo "A garder: $to_keep, A supprimer: $to_delete"
            
            if [ "$to_delete" -eq 0 ]; then
              echo "Rien a supprimer pour $repo"
              continue
            fi
            
            echo "Tags a supprimer:"
            cat "/tmp/${repo}_to_delete.txt"
            
            echo "Debut de la suppression..."
            deleted=0
            failed=0
            
            while IFS= read -r tag; do
              # Nettoyer et valider le tag
              tag=$(echo "$tag" | tr -d '\r\n' | xargs)
              
              # Ignorer les tags invalides
              if [ -z "$tag" ] || [ "$tag" = "Tag" ] || [ "$tag" = "tag" ] || [ "$tag" = "null" ]; then
                echo "Tag invalide ignore: '$tag'"
                continue
              fi
              
              echo "Suppression: $tag"
              
              success=false
              for attempt in {1..3}; do
                # Suppression directe sans verification prealable
                if doctl registry repository delete-tag "$repo" "$tag" --force 2>/dev/null; then
                  echo "   Supprime avec succes"
                  ((deleted++))
                  success=true
                  break
                else
                  echo "   Echec tentative $attempt - erreur:"
                  # Afficher l'erreur pour diagnostic
                  doctl registry repository delete-tag "$repo" "$tag" --force 2>&1 || true
                  sleep 2
                fi
              done
              
              if [ "$success" = false ]; then
                ((failed++))
                echo "   ECHEC FINAL pour tag: $tag"
              fi
              
              sleep 1
              
            done < "/tmp/${repo}_to_delete.txt"
            
            echo "Resume $repo:"
            echo "   Supprimes: $deleted"
            echo "   Echecs: $failed"
            echo "   Images restantes: ~$((total_images - deleted))"
            
            # Ne pas faire echouer le script si quelques suppressions ont echoue
            if [ "$failed" -gt 0 ] && [ "$deleted" -eq 0 ]; then
              echo "   ATTENTION: Aucune suppression reussie pour $repo"
            elif [ "$failed" -gt 0 ]; then
              echo "   INFO: Quelques echecs, mais $deleted suppressions reussies"
            fi
            
            # Nettoyage des fichiers temporaires
            rm -f "/tmp/${repo}"_*.txt "/tmp/${repo}.json"
            
            echo "Traitement termine pour $repo"
          done
          
          echo ""
          echo "Nettoyage termine pour tous les repositories!"

      - name: Cleanup orphaned manifests
        shell: bash
        run: |
          # Ne pas utiliser set -e pour eviter echec du job
          
          REPOSITORIES=("intelia-frontend" "intelia-backend" "intelia-llm")
          
          echo ""
          echo "Nettoyage des manifests orphelins..."
          
          for repo in "${REPOSITORIES[@]}"; do
            echo "Verification des manifests orphelins pour $repo..."
            
            if doctl registry repository list-manifests "$repo" --format "Digest,Tags" --no-header 2>/dev/null > "/tmp/${repo}_manifests.txt"; then
              
              orphan_count=$(grep -E "^sha256:[a-f0-9]+[[:space:]]*$" "/tmp/${repo}_manifests.txt" | wc -l || echo "0")
              
              if [ "$orphan_count" -gt 0 ]; then
                echo "Manifests orphelins trouves: $orphan_count"
                
                if [ "$orphan_count" -le 15 ]; then
                  grep -E "^sha256:[a-f0-9]+[[:space:]]*$" "/tmp/${repo}_manifests.txt" | \
                  awk '{print $1}' > "/tmp/${repo}_orphans.txt"
                  
                  manifest_deleted=0
                  while IFS= read -r digest; do
                    digest=$(echo "$digest" | tr -d '\r\n' | xargs)
                    if [ -z "$digest" ]; then continue; fi
                    
                    echo "Suppression manifest orphelin: ${digest:0:25}..."
                    
                    if doctl registry repository delete-manifest "$repo" "$digest" --force 2>/dev/null; then
                      echo "   Supprime"
                      ((manifest_deleted++))
                    else
                      echo "   Echec"
                    fi
                    
                    sleep 0.5
                    
                  done < "/tmp/${repo}_orphans.txt" || true
                  
                  echo "Manifests supprimes: $manifest_deleted"
                else
                  echo "Trop de manifests orphelins ($orphan_count) - suppression manuelle recommandee"
                fi
              else
                echo "Pas de manifests orphelins"
              fi
              
              rm -f "/tmp/${repo}_manifests.txt" "/tmp/${repo}_orphans.txt"
            else
              echo "Impossible de lister les manifests pour $repo"
            fi
          done || true

      - name: Final status and cleanup
        run: |
          echo ""
          echo "ETAT FINAL DU REGISTRY:"
          echo "======================"
          
          for repo in intelia-frontend intelia-backend intelia-llm; do
            count=$(doctl registry repository list-tags "$repo" --format "Tag" --no-header 2>/dev/null | wc -l || echo "?")
            echo "$repo: $count images"
          done
          
          echo ""
          echo "Declenchement du garbage collection..."
          if doctl registry garbage-collection start --include-untagged-manifests 2>/dev/null; then
            echo "Garbage collection demarre (liberation d'espace en cours)"
          else
            echo "Garbage collection deja en cours ou non necessaire"
          fi
          
          echo ""
          echo "Nettoyage complet termine!"

  # Resume
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "DEPLOYMENT SUMMARY"
          echo "=================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "Frontend: DEPLOYED"
            else
              echo "Frontend: FAILED"
            fi
          else
            echo "Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "Backend: DEPLOYED"
            else
              echo "Backend: FAILED" 
            fi
          else
            echo "Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "LLM: DEPLOYED"
            else
              echo "LLM: FAILED"
            fi
          else
            echo "LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "Deploiement: REUSSI"
          else
            echo "Deploiement: ECHEC"
          fi
          
          if [[ "${{ needs.cleanup.result }}" == "success" ]]; then
            echo "Nettoyage: TERMINE"
          else
            echo "Nettoyage: PARTIEL"
          fi