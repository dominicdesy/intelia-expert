name: Ultra Fast Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  # üî• BUILDS PARALL√àLES + NETTOYAGE INT√âGR√â
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ‚ö° Nettoyage INTELLIGENT Frontend
        run: |
          echo "üî• Nettoyage intelligent intelia-frontend..."
          
          # V√©rification pr√©liminaire du repository
          if ! doctl registry repository list | grep -q "intelia-frontend"; then
            echo "‚ÑπÔ∏è Repository intelia-frontend n'existe pas encore"
            exit 0
          fi
          
          # R√©cup√©ration des manifests avec retry
          max_retries=3
          retry_count=0
          manifests=""
          
          while [ $retry_count -lt $max_retries ]; do
            if manifests=$(doctl registry repository list-manifests intelia-frontend --format Digest,UpdatedAt,Tags --no-header 2>/dev/null); then
              break
            fi
            retry_count=$((retry_count + 1))
            echo "‚è≥ Tentative $retry_count/$max_retries..."
            sleep 2
          done
          
          if [ -z "$manifests" ]; then
            echo "‚ÑπÔ∏è Aucune image trouv√©e ou repository vide"
            exit 0
          fi
          
          total=$(echo "$manifests" | wc -l)
          echo "üìä Images trouv√©es: $total"
          
          if [ "$total" -le 8 ]; then
            echo "‚úÖ Nettoyage non n√©cessaire ($total <= 8 images)"
            exit 0
          fi
          
          # Strat√©gie de nettoyage intelligente
          to_delete=$((total - 6))  # Garder 6 images au lieu de 8 pour plus de marge
          echo "üéØ Suppression de $to_delete anciennes images (garde les 6 plus r√©centes)..."
          
          # Tri par date et suppression avec v√©rification
          deleted_count=0
          failed_count=0
          
          echo "$manifests" | sort -k2,2 | head -n "$to_delete" | while read digest date tags; do
            if [ -n "$digest" ] && [[ "$digest" == sha256:* ]]; then
              echo "üóëÔ∏è Tentative suppression: ${digest:0:20}... (${date})"
              
              # V√©rification que l'image existe encore avant suppression
              if doctl registry repository list-manifests intelia-frontend --format Digest --no-header 2>/dev/null | grep -q "$digest"; then
                if doctl registry repository delete-manifest intelia-frontend "$digest" --force 2>/dev/null; then
                  echo "‚úÖ Supprim√©: ${digest:0:20}..."
                  deleted_count=$((deleted_count + 1))
                else
                  echo "‚ö†Ô∏è √âchec: ${digest:0:20}... (en cours d'utilisation ou verrouill√©)"
                  failed_count=$((failed_count + 1))
                fi
              else
                echo "‚ÑπÔ∏è D√©j√† supprim√©: ${digest:0:20}..."
              fi
              
              # D√©lai progressif pour √©viter le rate limiting
              sleep 1
            fi
          done
          
          echo "üìà R√©sum√©: $deleted_count supprim√©s, $failed_count √©checs"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üöÄ Build & push frontend (OPTIMIS√â)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            LLM_BACKEND_URL=${{ secrets.LLM_BACKEND_URL }}
            BUILDKIT_INLINE_CACHE=1
          # OPTIMISATIONS SPEED
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=registry,compression=zstd,compression-level=3

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ‚ö° Nettoyage INTELLIGENT Backend
        run: |
          echo "üî• Nettoyage intelligent intelia-backend..."
          
          if ! doctl registry repository list | grep -q "intelia-backend"; then
            echo "‚ÑπÔ∏è Repository intelia-backend n'existe pas encore"
            exit 0
          fi
          
          max_retries=3
          retry_count=0
          manifests=""
          
          while [ $retry_count -lt $max_retries ]; do
            if manifests=$(doctl registry repository list-manifests intelia-backend --format Digest,UpdatedAt,Tags --no-header 2>/dev/null); then
              break
            fi
            retry_count=$((retry_count + 1))
            echo "‚è≥ Tentative $retry_count/$max_retries..."
            sleep 2
          done
          
          if [ -z "$manifests" ]; then
            echo "‚ÑπÔ∏è Aucune image trouv√©e ou repository vide"
            exit 0
          fi
          
          total=$(echo "$manifests" | wc -l)
          echo "üìä Images trouv√©es: $total"
          
          if [ "$total" -le 8 ]; then
            echo "‚úÖ Nettoyage non n√©cessaire ($total <= 8 images)"
            exit 0
          fi
          
          to_delete=$((total - 6))
          echo "üéØ Suppression de $to_delete anciennes images (garde les 6 plus r√©centes)..."
          
          deleted_count=0
          failed_count=0
          
          echo "$manifests" | sort -k2,2 | head -n "$to_delete" | while read digest date tags; do
            if [ -n "$digest" ] && [[ "$digest" == sha256:* ]]; then
              echo "üóëÔ∏è Tentative suppression: ${digest:0:20}... (${date})"
              
              if doctl registry repository list-manifests intelia-backend --format Digest --no-header 2>/dev/null | grep -q "$digest"; then
                if doctl registry repository delete-manifest intelia-backend "$digest" --force 2>/dev/null; then
                  echo "‚úÖ Supprim√©: ${digest:0:20}..."
                  deleted_count=$((deleted_count + 1))
                else
                  echo "‚ö†Ô∏è √âchec: ${digest:0:20}... (en cours d'utilisation ou verrouill√©)"
                  failed_count=$((failed_count + 1))
                fi
              else
                echo "‚ÑπÔ∏è D√©j√† supprim√©: ${digest:0:20}..."
              fi
              
              sleep 1
            fi
          done
          
          echo "üìà R√©sum√©: $deleted_count supprim√©s, $failed_count √©checs"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üöÄ Build & push backend (ULTRA OPTIMIS√â)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PIP_CACHE_DIR=/tmp/pip-cache
            PYTHONDONTWRITEBYTECODE=1
          # OPTIMISATIONS EXTR√äMES
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=registry,compression=zstd,compression-level=1
          # Acc√©l√©ration BuildKit
          secrets: |
            id=pip,src=/dev/null

  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ‚ö° Nettoyage INTELLIGENT LLM
        run: |
          echo "üî• Nettoyage intelligent intelia-llm..."
          
          if ! doctl registry repository list | grep -q "intelia-llm"; then
            echo "‚ÑπÔ∏è Repository intelia-llm n'existe pas encore"
            exit 0
          fi
          
          max_retries=3
          retry_count=0
          manifests=""
          
          while [ $retry_count -lt $max_retries ]; do
            if manifests=$(doctl registry repository list-manifests intelia-llm --format Digest,UpdatedAt,Tags --no-header 2>/dev/null); then
              break
            fi
            retry_count=$((retry_count + 1))
            echo "‚è≥ Tentative $retry_count/$max_retries..."
            sleep 2
          done
          
          if [ -z "$manifests" ]; then
            echo "‚ÑπÔ∏è Aucune image trouv√©e ou repository vide"
            exit 0
          fi
          
          total=$(echo "$manifests" | wc -l)
          echo "üìä Images trouv√©es: $total"
          
          if [ "$total" -le 8 ]; then
            echo "‚úÖ Nettoyage non n√©cessaire ($total <= 8 images)"
            exit 0
          fi
          
          to_delete=$((total - 6))
          echo "üéØ Suppression de $to_delete anciennes images (garde les 6 plus r√©centes)..."
          
          deleted_count=0
          failed_count=0
          
          echo "$manifests" | sort -k2,2 | head -n "$to_delete" | while read digest date tags; do
            if [ -n "$digest" ] && [[ "$digest" == sha256:* ]]; then
              echo "üóëÔ∏è Tentative suppression: ${digest:0:20}... (${date})"
              
              if doctl registry repository list-manifests intelia-llm --format Digest --no-header 2>/dev/null | grep -q "$digest"; then
                if doctl registry repository delete-manifest intelia-llm "$digest" --force 2>/dev/null; then
                  echo "‚úÖ Supprim√©: ${digest:0:20}..."
                  deleted_count=$((deleted_count + 1))
                else
                  echo "‚ö†Ô∏è √âchec: ${digest:0:20}... (en cours d'utilisation ou verrouill√©)"
                  failed_count=$((failed_count + 1))
                fi
              else
                echo "‚ÑπÔ∏è D√©j√† supprim√©: ${digest:0:20}..."
              fi
              
              sleep 1
            fi
          done
          
          echo "üìà R√©sum√©: $deleted_count supprim√©s, $failed_count √©checs"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üöÄ Build & push LLM (RAPIDE)
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64
          provenance: false
          sbom: false

  # ‚ö° NETTOYAGE FINAL ULTRA RAPIDE
  final-cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ‚ö° V√©rification finale + Garbage collection
        run: |
          echo "‚ö° NETTOYAGE FINAL ULTRA RAPIDE"
          
          # V√©rification rapide de chaque repo avec gestion d'erreur
          for repo in intelia-frontend intelia-backend intelia-llm; do
            echo "V√©rification $repo..."
            
            if manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt --no-header 2>/dev/null); then
              if [ -n "$manifests" ]; then
                count=$(echo "$manifests" | wc -l)
                echo "$repo: $count images"
                
                if [ "$count" -gt 8 ]; then
                  echo "‚ö†Ô∏è $repo d√©passe 8 images - nettoyage d'urgence"
                  excess=$((count - 8))
                  
                  echo "$manifests" | sort -k2,2 | head -n "$excess" | awk '{print $1}' | while read digest; do
                    if [ -n "$digest" ]; then
                      echo "Suppression d'urgence: $digest"
                      doctl registry repository delete-manifest "$repo" "$digest" --force 2>/dev/null || {
                        echo "‚ö†Ô∏è √âchec suppression d'urgence $digest"
                      }
                      sleep 0.3
                    fi
                  done
                fi
              else
                echo "$repo: aucune image"
              fi
            else
              echo "‚ö†Ô∏è $repo: impossible de lister les manifests"
            fi
          done
          
          # Garbage collection avec gestion d'erreur
          echo "üóëÔ∏è Lancement garbage collection..."
          if doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null; then
            echo "‚úÖ Garbage collection lanc√©e"
          else
            echo "‚ö†Ô∏è Garbage collection √©chou√©e (possiblement d√©j√† en cours)"
          fi
          
          echo "‚úÖ Nettoyage final termin√©"

  # üìä R√©sum√© INSTANTAN√â
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, final-cleanup]
    if: always()
    steps:
      - name: ‚ö° RAPPORT ULTRA RAPIDE
        run: |
          echo "üöÄ D√âPLOIEMENT ULTRA RAPIDE TERMIN√â"
          echo "==================================="
          
          # Statuts
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Frontend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Backend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "LLM: ‚è∏Ô∏è INCHANG√â"
          fi
          
          echo ""
          echo "‚ö° OPTIMISATIONS APPLIQU√âES:"
          echo "‚Ä¢ Builds 100% parall√®les"
          echo "‚Ä¢ Nettoyage int√©gr√© robuste avec gestion d'erreur"
          echo "‚Ä¢ Cache optimis√© + compression zstd"
          echo "‚Ä¢ M√©tadonn√©es d√©sactiv√©es (provenance/sbom)"
          echo "‚Ä¢ BuildKit master + optimisations"
          echo "‚Ä¢ D√©lais anti-rate-limiting"
          echo "‚Ä¢ Cible: 6-8 minutes total"