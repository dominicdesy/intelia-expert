name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # 🎯 Build Frontend - SEULEMENT si changé
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # 🎯 Build Backend - SEULEMENT si changé  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🎯 Build LLM - SEULEMENT si changé
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # 🚀 Deploy - SEULEMENT si au moins un service a été buildé
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "⏳ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "🚀 Déclenchement du redéploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "❌ ERREUR: DO_APP_ID secret n'est pas configuré"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "📋 Deployment ID: $DEPLOYMENT_ID"
          
          echo "👀 Surveillance du déploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "✅ Déploiement réussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "❌ Déploiement échoué"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "⚠️ Déploiement annulé ou remplacé"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "⏰ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # 🧹 Nettoyage automatique avec API REST
  cleanup:
    name: Cleanup old images in DOCR
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    # On veut nettoyer même si un build ou le déploiement a échoué
    if: always()
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Ensure jq is available
        shell: bash
        run: |
          set -Eeuo pipefail
          command -v jq >/dev/null || { sudo apt-get update -y && sudo apt-get install -y jq; }

      - name: Cleanup DOCR tags & dangling manifests
        shell: bash
        env:
          # Optionnel: true pour tester sans supprimer
          DRY_RUN: "false"
          # Optionnel: si tu as plusieurs registries, dé-commente et renseigne-le
          # DOCR_REGISTRY: "mon-registry"
        run: |
          set -Eeuo pipefail
          shopt -s inherit_errexit || true

          PROTECTED_REGEX='^(latest|main|prod|stable|buildcache)$'

          # $1: repo, $2: KEEP (conserver N plus récents, hors protégés), $3: LIMIT (max suppressions)
          cleanup_repo() {
            local repo="$1"
            local KEEP="${2:-20}"
            local LIMIT="${3:-100}"

            echo ""
            echo "🏷️ Nettoyage de ${repo}…"
            echo "  ⚖️  Règles: garder ${KEEP} plus récents (hors protégés), limite ${LIMIT} suppressions"

            # Récupération JSON
            if [[ -n "${DOCR_REGISTRY:-}" ]]; then
              doctl registry repository list-tags "${repo}" --registry "${DOCR_REGISTRY}" -o json > "/tmp/${repo}.json"
            else
              doctl registry repository list-tags "${repo}" -o json > "/tmp/${repo}.json"
            fi

            local total
            total=$(jq 'length' "/tmp/${repo}.json")
            echo "  📦 Entrées totales (tags + dangling): ${total}"

            # Liste triée des entries taggées (UpdatedAt desc), en TSV: updated_at \t tag \t digest
            jq -r --arg re "${PROTECTED_REGEX}" '
              map(.updated_at=(.updated_at // "1970-01-01 00:00:00 +0000 UTC"))    # fallback
              | sort_by(.updated_at) | reverse
              | .[]
              | select((.tag // "") != "")
              | select((.tag | test($re)) | not)
              | "\(.updated_at)\t\(.tag)\t\(.manifest_digest)"
            ' "/tmp/${repo}.json" > "/tmp/${repo}_tagged.tsv"

            # Liste des digests "dangling" (sans tag), unique
            jq -r '
              .[]
              | select((.tag // "") == "")
              | .manifest_digest
            ' "/tmp/${repo}.json" | awk 'NF' | sort -u > "/tmp/${repo}_dangling.txt"

            local tagged_total dangling_total
            tagged_total=$(wc -l < "/tmp/${repo}_tagged.tsv" | tr -d ' ')
            dangling_total=$(wc -l < "/tmp/${repo}_dangling.txt" | tr -d ' ')
            echo "  🏷️ Tags candidats (hors protégés): ${tagged_total}"
            echo "  🧩 Manifests orphelins (dangling): ${dangling_total}"

            # Conserver les KEEP plus récents; supprimer le reste
            if (( KEEP > 0 )) && (( tagged_total > KEEP )); then
              tail -n +$((KEEP+1)) "/tmp/${repo}_tagged.tsv" > "/tmp/${repo}_to_delete.tsv"
            else
              cp "/tmp/${repo}_tagged.tsv" "/tmp/${repo}_to_delete.tsv"
            fi

            local deleted=0

            # --- Suppression par TAG ---
            if [[ -s "/tmp/${repo}_to_delete.tsv" ]]; then
              echo "  🔥 Suppression par tag…"
              while IFS=$'\t' read -r updated_at tag digest; do
                [[ -z "${tag}" ]] && continue
                (( deleted >= LIMIT )) && { echo "  ⛔ Limite atteinte (${LIMIT})"; break; }

                echo "    🗑️ delete-tag: ${tag}  (updated: ${updated_at})"
                if [[ "${DRY_RUN}" == "true" ]]; then
                  echo "      🧪 DRY_RUN → skip"
                  ((deleted++))
                  continue
                fi

                if [[ -n "${DOCR_REGISTRY:-}" ]]; then
                  if doctl registry repository delete-tag -f "${repo}" "${tag}" --registry "${DOCR_REGISTRY}" >/dev/null 2>&1; then
                    echo "      ✅ OK"
                    ((deleted++))
                  else
                    echo "      ❌ Échec"
                  fi
                else
                  if doctl registry repository delete-tag -f "${repo}" "${tag}" >/dev/null 2>&1; then
                    echo "      ✅ OK"
                    ((deleted++))
                  else
                    echo "      ❌ Échec"
                  fi
                fi
              done < "/tmp/${repo}_to_delete.tsv"
            else
              echo "  ✅ Rien à supprimer par tag (après conservation des ${KEEP} plus récents)"
            fi

            # --- Suppression des MANIFESTS orphelins ---
            if [[ -s "/tmp/${repo}_dangling.txt" ]]; then
              echo "  🧹 Suppression des manifests orphelins…"
              while read -r digest; do
                [[ -z "${digest}" ]] && continue
                (( deleted >= LIMIT )) && { echo "  ⛔ Limite atteinte (${LIMIT})"; break; }

                echo "    🗑️ delete-manifest: ${digest}"
                if [[ "${DRY_RUN}" == "true" ]]; then
                  echo "      🧪 DRY_RUN → skip"
                  ((deleted++))
                  continue
                fi

                if [[ -n "${DOCR_REGISTRY:-}" ]]; then
                  if doctl registry repository delete-manifest -f "${repo}" "${digest}" --registry "${DOCR_REGISTRY}" >/dev/null 2>&1; then
                    echo "      ✅ OK"
                    ((deleted++))
                  else
                    echo "      ❌ Échec"
                  fi
                else
                  if doctl registry repository delete-manifest -f "${repo}" "${digest}" >/dev/null 2>&1; then
                    echo "      ✅ OK"
                    ((deleted++))
                  else
                    echo "      ❌ Échec"
                  fi
                fi
              done < "/tmp/${repo}_dangling.txt"
            else
              echo "  ✅ Aucun manifest orphelin à supprimer"
            fi

            echo "  📊 Total supprimé (${repo}): ${deleted}"
          }

          # --------- Dépôts à nettoyer (ajuste KEEP / LIMIT selon ton besoin) ----------
          cleanup_repo "intelia-llm"      25 150   # garder 25 récents, max 150 suppressions
          cleanup_repo "intelia-backend"  20 120
          cleanup_repo "intelia-frontend" 20 120

  # 📊 Résumé (basé sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "🚀 DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "✅ Frontend: DEPLOYED"
            else
              echo "❌ Frontend: FAILED"
            fi
          else
            echo "⏸️ Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "✅ Backend: DEPLOYED"
            else
              echo "❌ Backend: FAILED" 
            fi
          else
            echo "⏸️ Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "✅ LLM: DEPLOYED"
            else
              echo "❌ LLM: FAILED"
            fi
          else
            echo "⏸️ LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "📋 Déploiement: ${{ needs.deploy.result == 'success' && '✅ RÉUSSI' || '❌ ÉCHEC' }}"
          echo "🧹 Nettoyage: ${{ needs.cleanup.result == 'success' && '✅ TERMINÉ' || '⚠️ PARTIEL' }}"