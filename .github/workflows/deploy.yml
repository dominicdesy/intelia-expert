name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 🔍 Détecter les changements avec debug
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Debug changes detection
        run: |
          echo "=== CHANGEMENTS DÉTECTÉS ==="
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"
          echo ""
          echo "=== FICHIERS MODIFIÉS ==="
          git diff --name-only HEAD~1 HEAD || git diff --name-only HEAD
          echo "=========================="

  # 🎯 Build Frontend - SEULEMENT si changé
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_BASE_URL=https://expert.intelia.com/api
            NEXT_PUBLIC_API_URL=https://expert.intelia.com/api

  # 🎯 Build Backend - SEULEMENT si changé  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  # 🎯 Build LLM - SEULEMENT si changé
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  # 🚀 Deploy - SEULEMENT si au moins un service a été buildé
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "⏳ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "🚀 Déclenchement du redéploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "❌ ERREUR: DO_APP_ID secret n'est pas configuré"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "📋 Deployment ID: $DEPLOYMENT_ID"
          
          echo "👀 Surveillance du déploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "✅ Déploiement réussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "❌ Déploiement échoué"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "⚠️ Déploiement annulé ou remplacé"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "⏰ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # 🧹 Registry cleanup - Garde seulement 6 images par repo (VERSION CORRIGÉE)
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Registry cleanup - Keep only 6 images per repo
        run: |
          echo "🧹 NETTOYAGE REGISTRY - VERSION CORRIGÉE"
          echo "========================================"
          
          cleanup_repo() {
            local repo=$1
            echo ""
            echo "🔍 Traitement du repository: $repo"
            
            # Vérifier l'existence du repository avec format correct
            if ! doctl registry repository list --format Name --no-header | grep -q "^$repo$"; then
              echo "  ❌ Repository $repo non trouvé"
              return 1
            fi
            
            echo "  ✅ Repository trouvé"
            
            # Obtenir tous les manifests avec leurs métadonnées
            local manifests=$(doctl registry repository list-manifests $repo --format Digest,Updated,Tags --no-header 2>/dev/null)
            
            if [ -z "$manifests" ]; then
              echo "  📭 Aucune image dans $repo"
              return 0
            fi
            
            # Compter le nombre d'images
            local total=$(echo "$manifests" | wc -l)
            echo "  📊 Nombre d'images actuelles: $total"
            
            # Vérifier si nettoyage nécessaire
            if [ $total -le 6 ]; then
              echo "  ✅ Nettoyage non nécessaire ($total images <= 6)"
              return 0
            fi
            
            # Calculer combien supprimer
            local to_delete=$((total - 6))
            echo "  🗑️  Images à supprimer: $to_delete (garder les 6 plus récentes)"
            
            # Supprimer les images les plus anciennes (tri par date, garde les plus récentes)
            local deleted=0
            echo "$manifests" | sort -k2 | head -n $to_delete | while IFS=$'\t' read -r digest updated tags; do
              if [ -n "$digest" ] && [[ "$digest" =~ ^sha256: ]]; then
                echo "    🔥 Suppression: $digest"
                echo "       📅 Date: $updated"
                echo "       🏷️  Tags: $tags"
                
                if doctl registry repository delete-manifest --force $repo $digest 2>/dev/null; then
                  echo "       ✅ Supprimé avec succès"
                  ((deleted++))
                else
                  echo "       ❌ Échec de suppression"
                fi
              else
                echo "    ⚠️  Digest invalide ignoré: $digest"
              fi
            done
            
            # Vérification post-nettoyage
            sleep 5
            local remaining=$(doctl registry repository list-manifests $repo --format Digest --no-header 2>/dev/null | wc -l)
            echo "  📊 Images restantes après nettoyage: $remaining"
            
            if [ $remaining -gt 6 ]; then
              echo "  ⚠️  Attention: Plus de 6 images restantes, nettoyage partiel"
            else
              echo "  ✅ Nettoyage terminé avec succès"
            fi
          }
          
          # Nettoyer les trois repositories
          echo "🚀 Début du nettoyage des repositories..."
          
          for repo in intelia-frontend intelia-backend intelia-llm; do
            cleanup_repo "$repo"
          done
          
          echo ""
          echo "🗑️ Lancement du garbage collection global..."
          if doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null; then
            echo "✅ Garbage collection démarré avec succès"
          else
            echo "⚠️  Garbage collection: déjà en cours ou erreur"
          fi
          
          echo ""
          echo "🎉 NETTOYAGE TERMINÉ !"
          echo "====================="
          
          # Affichage final du statut
          echo "📊 Statut final des repositories:"
          for repo in intelia-frontend intelia-backend intelia-llm; do
            local count=$(doctl registry repository list-manifests $repo --format Digest --no-header 2>/dev/null | wc -l || echo "0")
            echo "  $repo: $count images"
          done

  # 📊 Résumé final
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "🚀 RÉSUMÉ DU DÉPLOIEMENT"
          echo "========================"
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "✅ Frontend: DÉPLOYÉ"
            else
              echo "❌ Frontend: ÉCHEC"
            fi
          else
            echo "⏸️ Frontend: IGNORÉ (aucun changement)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "✅ Backend: DÉPLOYÉ"
            else
              echo "❌ Backend: ÉCHEC" 
            fi
          else
            echo "⏸️ Backend: IGNORÉ (aucun changement)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "✅ LLM: DÉPLOYÉ"
            else
              echo "❌ LLM: ÉCHEC"
            fi
          else
            echo "⏸️ LLM: IGNORÉ (aucun changement)"
          fi
          
          echo ""
          echo "📋 Déploiement global: ${{ needs.deploy.result == 'success' && '✅ RÉUSSI' || '❌ ÉCHEC' }}"
          echo "🧹 Nettoyage: ${{ needs.cleanup.result == 'success' && '✅ TERMINÉ' || '⚠️ PARTIEL' }}"
          
          # Compter les services déployés
          deployed=0
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then ((deployed++)); fi
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then ((deployed++)); fi
          if [[ "${{ needs.build-llm.result }}" == "success" ]]; then ((deployed++)); fi
          
          echo ""
          echo "📊 Services déployés: $deployed/3"
          echo "🔗 App Platform: https://cloud.digitalocean.com/apps"