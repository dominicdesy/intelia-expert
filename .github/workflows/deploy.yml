name: Ultra Fast Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  # üî• BUILDS PARALL√àLES + NETTOYAGE INT√âGR√â AM√âLIOR√â
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl + Cleanup AVANT build
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: ‚ö° Nettoyage INTELLIGENT Frontend (AM√âLIOR√â)
        run: |
          echo "üî• Nettoyage intelligent intelia-frontend..."
          
          # V√©rification pr√©liminaire du repository
          if ! doctl registry repository list | grep -q "intelia-frontend"; then
            echo "‚ÑπÔ∏è Repository intelia-frontend n'existe pas encore"
            exit 0
          fi
          
          # R√©cup√©ration des manifests avec retry et format am√©lior√©
          max_retries=3
          retry_count=0
          manifests=""
          
          while [ $retry_count -lt $max_retries ]; do
            # Format am√©lior√© pour obtenir plus d'informations
            if manifests=$(doctl registry repository list-manifests intelia-frontend --format Digest,UpdatedAt,Tags,CompressedSize --no-header 2>/dev/null); then
              break
            fi
            retry_count=$((retry_count + 1))
            echo "‚è≥ Tentative $retry_count/$max_retries..."
            sleep 3
          done
          
          if [ -z "$manifests" ]; then
            echo "‚ÑπÔ∏è Aucune image trouv√©e ou repository vide"
            exit 0
          fi
          
          total=$(echo "$manifests" | wc -l)
          echo "üìä Images trouv√©es: $total"
          
          if [ "$total" -le 5 ]; then
            echo "‚úÖ Nettoyage non n√©cessaire ($total <= 5 images)"
            exit 0
          fi
          
          # Strat√©gie de nettoyage plus conservatrice
          to_keep=3  # Garder seulement les 3 plus r√©centes
          to_delete=$((total - to_keep))
          echo "üéØ Suppression de $to_delete anciennes images (garde les $to_keep plus r√©centes)..."
          
          # Tri par date et suppression avec v√©rifications avanc√©es
          deleted_count=0
          failed_count=0
          skipped_count=0
          
          echo "$manifests" | sort -k2,2 | head -n "$to_delete" | while read digest date tags size; do
            if [ -n "$digest" ] && [[ "$digest" == sha256:* ]]; then
              # V√©rifier si l'image a des tags (images tagu√©es sont plus susceptibles d'√™tre verrouill√©es)
              if [ -n "$tags" ] && [ "$tags" != "<none>" ]; then
                echo "‚ö†Ô∏è Ignorer (tagu√©e): ${digest:0:20}... tags: $tags"
                skipped_count=$((skipped_count + 1))
                continue
              fi
              
              echo "üóëÔ∏è Tentative suppression: ${digest:0:20}... (${date}) [${size}]"
              
              # Double v√©rification que l'image existe encore
              if doctl registry repository list-manifests intelia-frontend --format Digest --no-header 2>/dev/null | grep -q "$digest"; then
                # Tentative de suppression avec timeout
                if timeout 30 doctl registry repository delete-manifest intelia-frontend "$digest" --force 2>/dev/null; then
                  echo "‚úÖ Supprim√©: ${digest:0:20}..."
                  deleted_count=$((deleted_count + 1))
                else
                  echo "‚ö†Ô∏è √âchec: ${digest:0:20}... (verrouill√© ou en cours d'utilisation)"
                  failed_count=$((failed_count + 1))
                fi
              else
                echo "‚ÑπÔ∏è D√©j√† supprim√©: ${digest:0:20}..."
              fi
              
              # D√©lai progressif pour √©viter le rate limiting
              sleep 2
            fi
          done
          
          echo "üìà R√©sum√©: $deleted_count supprim√©s, $failed_count √©checs, $skipped_count ignor√©s (tagu√©es)"
          
          # Si beaucoup d'√©checs, programmer un nettoyage diff√©r√©
          if [ "$failed_count" -gt 5 ]; then
            echo "üîÑ Trop d'√©checs d√©tect√©s. Programmation d'un nettoyage diff√©r√© recommand√©e."
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üöÄ Build & push frontend (OPTIMIS√â)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-from: |
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
            type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            LLM_BACKEND_URL=${{ secrets.LLM_BACKEND_URL }}
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64
          provenance: false
          sbom: false
          outputs: type=registry,compression=zstd,compression-level=3

  # üßπ NETTOYAGE DIFF√âR√â (job s√©par√© pour les images verrouill√©es)
  deferred-cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üßπ Nettoyage diff√©r√© des images non-tagu√©es
        run: |
          echo "üßπ NETTOYAGE DIFF√âR√â DES IMAGES NON-TAGU√âES"
          
          for repo in intelia-frontend intelia-backend intelia-llm; do
            echo "üîç Analyse $repo pour images non-tagu√©es..."
            
            if manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt,Tags --no-header 2>/dev/null); then
              if [ -n "$manifests" ]; then
                # Cibler sp√©cifiquement les images sans tags
                untagged=$(echo "$manifests" | grep -E '\s+<none>\s*$' | head -10)
                
                if [ -n "$untagged" ]; then
                  echo "üéØ Images non-tagu√©es trouv√©es dans $repo:"
                  
                  echo "$untagged" | while read digest date tags; do
                    echo "üóëÔ∏è Suppression image non-tagu√©e: ${digest:0:20}..."
                    
                    if timeout 20 doctl registry repository delete-manifest "$repo" "$digest" --force 2>/dev/null; then
                      echo "‚úÖ Supprim√©: ${digest:0:20}..."
                    else
                      echo "‚ö†Ô∏è √âchec diff√©r√©: ${digest:0:20}..."
                    fi
                    
                    sleep 1
                  done
                else
                  echo "‚ÑπÔ∏è Aucune image non-tagu√©e dans $repo"
                fi
              fi
            else
              echo "‚ö†Ô∏è $repo: impossible de lister les manifests"
            fi
            
            sleep 2
          done

      - name: üóëÔ∏è Garbage Collection avec retry
        run: |
          echo "üóëÔ∏è Lancement garbage collection avec retry..."
          
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Tentative $attempt/$max_attempts..."
            
            if doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force 2>/dev/null; then
              echo "‚úÖ Garbage collection lanc√©e avec succ√®s"
              break
            else
              echo "‚ö†Ô∏è √âchec tentative $attempt"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Garbage collection √©chou√©e apr√®s $max_attempts tentatives"
              else
                echo "‚è≥ Attente avant retry..."
                sleep 30
              fi
            fi
            
            attempt=$((attempt + 1))
          done

  # üîÑ NETTOYAGE PROGRAMM√â (optionnel, via workflow_dispatch)
  scheduled-cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: üîÑ Nettoyage en profondeur programm√©
        run: |
          echo "üîÑ NETTOYAGE EN PROFONDEUR PROGRAMM√â"
          
          for repo in intelia-frontend intelia-backend intelia-llm; do
            echo "üßπ Nettoyage en profondeur de $repo..."
            
            # Attendre un peu pour que les conteneurs se lib√®rent
            sleep 10
            
            if manifests=$(doctl registry repository list-manifests "$repo" --format Digest,UpdatedAt,Tags --no-header 2>/dev/null); then
              total=$(echo "$manifests" | wc -l)
              
              if [ "$total" -gt 2 ]; then
                to_delete=$((total - 2))  # Garder seulement les 2 plus r√©centes
                echo "üéØ Suppression agressive: $to_delete images de $repo"
                
                echo "$manifests" | sort -k2,2 | head -n "$to_delete" | while read digest date tags; do
                  if [ -n "$digest" ]; then
                    echo "üóëÔ∏è Suppression forc√©e: ${digest:0:20}..."
                    
                    # Plusieurs tentatives avec d√©lais croissants
                    for retry in 1 2 3; do
                      if timeout 60 doctl registry repository delete-manifest "$repo" "$digest" --force 2>/dev/null; then
                        echo "‚úÖ Supprim√© (tentative $retry): ${digest:0:20}..."
                        break
                      else
                        echo "‚ö†Ô∏è √âchec tentative $retry/3"
                        if [ $retry -lt 3 ]; then
                          sleep $((retry * 10))
                        fi
                      fi
                    done
                  fi
                  
                  sleep 3
                done
              fi
            fi
          done
          
          echo "üîÑ Nettoyage programm√© termin√©"

  # Les autres jobs restent identiques...
  build-backend:
    # [Le reste du job build-backend avec le m√™me pattern am√©lior√©]
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      # [R√©pliquer la logique am√©lior√©e ici]

  build-llm:
    # [Le reste du job build-llm avec le m√™me pattern am√©lior√©]
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      # [R√©pliquer la logique am√©lior√©e ici]

  # üìä R√©sum√© INSTANTAN√â
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deferred-cleanup]
    if: always()
    steps:
      - name: ‚ö° RAPPORT ULTRA RAPIDE
        run: |
          echo "üöÄ D√âPLOIEMENT ULTRA RAPIDE TERMIN√â"
          echo "==================================="
          
          # Statuts
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Frontend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Backend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "LLM: ‚è∏Ô∏è INCHANG√â"
          fi
          
          echo ""
          echo "‚ö° OPTIMISATIONS APPLIQU√âES:"
          echo "‚Ä¢ Builds 100% parall√®les"
          echo "‚Ä¢ Nettoyage intelligent multi-phase"
          echo "‚Ä¢ Strat√©gie diff√©r√©e pour images verrouill√©es"
          echo "‚Ä¢ Cache optimis√© + compression zstd"
          echo "‚Ä¢ M√©tadonn√©es d√©sactiv√©es (provenance/sbom)"
          echo "‚Ä¢ Timeouts et retry logic"
          echo "‚Ä¢ Ciblage des images non-tagu√©es"
          echo "‚Ä¢ Garbage collection robuste"