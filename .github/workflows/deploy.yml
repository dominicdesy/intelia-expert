name: Simple Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # D√©tection des changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

  # Build Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_BASE_URL=https://expert.intelia.com/api
            NEXT_PUBLIC_API_URL=https://expert.intelia.com/api

  # Build Backend
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  # Build LLM
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build and push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          platforms: linux/amd64
          provenance: false

  # NOUVEAU JOB: D√©ploiement automatique
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm]
    if: ${{ always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success') }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      # V√©rification de la disponibilit√© des images avant d√©ploiement
      - name: Verify images availability
        run: |
          echo "üîç V√©rification des images dans le registry..."
          
          # V√©rifier quelles images ont √©t√© build√©es dans ce workflow
          IMAGES_TO_CHECK=""
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            IMAGES_TO_CHECK="$IMAGES_TO_CHECK intelia-frontend"
          fi
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            IMAGES_TO_CHECK="$IMAGES_TO_CHECK intelia-backend"
          fi
          if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
            IMAGES_TO_CHECK="$IMAGES_TO_CHECK intelia-llm"
          fi
          
          echo "Images √† v√©rifier: $IMAGES_TO_CHECK"
          
          # V√©rifier chaque image
          for image in $IMAGES_TO_CHECK; do
            echo "V√©rification de $image:latest..."
            if doctl registry repository list-manifests $image --format Tag | grep -q "latest"; then
              echo "‚úÖ $image:latest trouv√©e"
            else
              echo "‚ùå $image:latest introuvable"
              echo "üìã Tags disponibles pour $image:"
              doctl registry repository list-manifests $image --format Tag || echo "Aucun tag trouv√©"
            fi
          done

      # Option A: D√©ploiement simple avec force rebuild
      - name: Trigger redeploy (use current app sources)
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          echo "App ID: ${{ secrets.DO_APP_ID }}"
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå Erreur: DO_APP_ID secret n'est pas configur√©"
            echo "üëâ Ajoutez le secret DO_APP_ID dans GitHub Settings > Secrets"
            echo "üí° Pour trouver votre App ID:"
            echo "   doctl apps list --format ID,Spec.Name"
            exit 1
          fi
          
          # Attendre un peu pour la propagation du registry
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30
          
          doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --wait

      # Option B: D√©ploiement avec tags immuables (recommand√© & idempotent)
      # D√©commentez si vous pr√©f√©rez piloter par tag SHA plut√¥t que latest
      # - name: Update spec with immutable image tags and deploy
      #   env:
      #     DO_APP_ID: ${{ secrets.DO_APP_ID }}
      #     GITHUB_SHA: ${{ github.sha }}
      #   run: |
      #     echo "üì¶ R√©cup√©ration de la spec..."
      #     doctl apps spec get "$DO_APP_ID" > app.yaml
      #
      #     # Remplacez par les noms EXACTS de vos services dans App Platform:
      #     # ex: backend, frontend, llm
      #     yq -i '(.spec.services[] | select(.name=="backend").image.tag) = env(GITHUB_SHA)' app.yaml
      #     yq -i '(.spec.services[] | select(.name=="frontend").image.tag) = env(GITHUB_SHA)' app.yaml
      #     yq -i '(.spec.services[] | select(.name=="llm").image.tag) = env(GITHUB_SHA)' app.yaml
      #
      #     echo "üìù Mise √† jour de l'app spec..."
      #     doctl apps update "$DO_APP_ID" --spec app.yaml
      #     echo "üöÄ D√©ploiement..."
      #     doctl apps create-deployment "$DO_APP_ID" --wait

      - name: Deployment status
        run: |
          echo "‚úÖ D√©ploiement d√©clench√© avec succ√®s"
          echo "üìç V√©rifiez le statut sur: https://cloud.digitalocean.com/apps"

  # Nettoyage optionnel
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Cleanup old images
        run: |
          echo "üßπ Nettoyage des anciennes images..."
          
          # Nettoyage frontend
          if doctl registry repository list | grep -q "intelia-frontend"; then
            echo "Nettoyage frontend..."
            doctl registry repository list-manifests intelia-frontend --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-frontend {} --force || true
          fi
          
          # Nettoyage backend
          if doctl registry repository list | grep -q "intelia-backend"; then
            echo "Nettoyage backend..."
            doctl registry repository list-manifests intelia-backend --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-backend {} --force || true
          fi
          
          # Nettoyage LLM  
          if doctl registry repository list | grep -q "intelia-llm"; then
            echo "Nettoyage LLM..."
            doctl registry repository list-manifests intelia-llm --format Digest | head -n -5 | xargs -I {} doctl registry repository delete-manifest intelia-llm {} --force || true
          fi
          
          # Garbage collection
          doctl registry garbage-collection start ${{ secrets.DOCR_NAME }} --force || echo "Garbage collection d√©j√† en cours"

  # R√©sum√©
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ D√âPLOIEMENT TERMIN√â"
          echo "===================="
          
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            echo "Frontend: ${{ needs.build-frontend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Frontend:‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            echo "Backend: ${{ needs.build-backend.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "Backend: ‚è∏Ô∏è INCHANG√â"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            echo "LLM: ${{ needs.build-llm.result == 'success' && '‚úÖ D√âPLOY√â' || '‚ùå √âCHEC' }}"
          else
            echo "LLM: ‚è∏Ô∏è INCHANG√â"
          fi
          
          echo ""
          echo "D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"