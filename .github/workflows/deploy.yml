name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Show changes
        run: |
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"

  # üéØ Build Frontend - SEULEMENT si chang√©
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            BUILDKIT_INLINE_CACHE=1

  # üéØ Build Backend - SEULEMENT si chang√©  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üéØ Build LLM - SEULEMENT si chang√©
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          build-args: BUILDKIT_INLINE_CACHE=1

  # üöÄ Deploy - SEULEMENT si au moins un service a √©t√© build√©
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå ERREUR: DO_APP_ID secret n'est pas configur√©"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "üìã Deployment ID: $DEPLOYMENT_ID"
          
          echo "üëÄ Surveillance du d√©ploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "‚úÖ D√©ploiement r√©ussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "‚ùå D√©ploiement √©chou√©"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "‚ö†Ô∏è D√©ploiement annul√© ou remplac√©"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "‚è∞ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # üßπ Nettoyage automatique avec API REST
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null || sudo apt-get update -y && sudo apt-get install -y jq

      - name: Cleanup DOCR tags & dangling manifests
        shell: bash
        run: |
          set -euo pipefail

          # Tags √† ne JAMAIS supprimer
          PROTECTED_REGEX='^(latest|main|prod|stable|buildcache)$'

          cleanup_repo() {
            local repo="$1"
            local max_delete="${2:-50}"  # limite de s√©curit√©
            local deleted=0

            echo ""
            echo "üè∑Ô∏è Nettoyage de ${repo}‚Ä¶"
            echo "  üìã R√©cup√©ration (JSON) des tags + digests‚Ä¶"

            # On r√©cup√®re tout en JSON, puis on extrait "tag" et "manifest_digest" proprement.
            # NB: certaines entr√©es ont tag == "" => manifests orphelins (dangling).
            doctl registry repository list-tags "${repo}" \
              --page 1 --page-size 500 -o json > /tmp/${repo}_tags.json

            # Compte brut (toutes entr√©es, y compris prot√©g√©es et vides)
            local total
            total=$(jq 'length' /tmp/${repo}_tags.json)
            echo "  üìä Entr√©es (tags + dangling): ${total}"

            # On parcourt proprement, sans header ni colonnes "humaines"
            # Format TSV: "<tag>\t<digest>"
            jq -r '.[] | [.tag, .manifest_digest] | @tsv' /tmp/${repo}_tags.json | \
            while IFS=$'\t' read -r tag digest; do
              # Limite de s√©curit√©
              if (( deleted >= max_delete )); then
                echo "  ‚õî Limite de s√©curit√© atteinte (${max_delete})."
                break
              fi

              # Cas 1: manifest orphelin (tag vide)
              if [[ -z "${tag}" || "${tag}" == "null" ]]; then
                if [[ -n "${digest}" && "${digest}" != "null" ]]; then
                  echo "    üóëÔ∏è Suppression manifest orphelin (digest): ${digest}"
                  if doctl registry repository delete-manifest -f "${repo}" "${digest}" >/dev/null 2>&1; then
                    echo "      ‚úÖ OK (manifest)"
                    ((deleted++))
                  else
                    echo "      ‚ùå √âchec (manifest)"
                  fi
                fi
                continue
              fi

              # Cas 2: tag prot√©g√©
              if [[ "${tag}" =~ ${PROTECTED_REGEX} ]]; then
                echo "    üîí Skip tag prot√©g√©: ${tag}"
                continue
              fi

              # Cas 3: suppression par tag
              echo "    üóëÔ∏è Suppression tag: ${tag}"
              if doctl registry repository delete-tag -f "${repo}" "${tag}" >/dev/null 2>&1; then
                echo "      ‚úÖ OK (tag)"
                ((deleted++))
              else
                echo "      ‚ùå √âchec (tag)"
              fi
            done

            echo "  üìä Total supprim√© (${repo}): ${deleted}"
          }

          # Appliquer sur tes d√©p√¥ts (ajuste la limite au besoin)
          cleanup_repo "intelia-llm"  60
          cleanup_repo "intelia-backend" 40
          cleanup_repo "intelia-frontend" 40


  # üìä R√©sum√© (bas√© sur la version qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED"
            else
              echo "‚ùå Backend: FAILED" 
            fi
          else
            echo "‚è∏Ô∏è Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "‚úÖ LLM: DEPLOYED"
            else
              echo "‚ùå LLM: FAILED"
            fi
          else
            echo "‚è∏Ô∏è LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "üìã D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"
          echo "üßπ Nettoyage: ${{ needs.cleanup.result == 'success' && '‚úÖ TERMIN√â' || '‚ö†Ô∏è PARTIEL' }}"