name: Smart Selective Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç D√©tecter les changements avec debug
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      llm-changed: ${{ steps.changes.outputs.llm }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'
            llm:
              - 'llm/**'

      - name: Debug changes detection
        run: |
          echo "=== CHANGEMENTS D√âTECT√âS ==="
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"
          echo "LLM changed: ${{ steps.changes.outputs.llm }}"
          echo ""
          echo "=== FICHIERS MODIFI√âS ==="
          git diff --name-only HEAD~1 HEAD || git diff --name-only HEAD
          echo "=========================="

  # üéØ Build Frontend - SEULEMENT si chang√©
  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-frontend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_BASE_URL=https://expert.intelia.com/api
            NEXT_PUBLIC_API_URL=https://expert.intelia.com/api
            BUILDKIT_INLINE_CACHE=1

  # üéØ Build Backend - SEULEMENT si chang√©  
  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-backend:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: BUILDKIT_INLINE_CACHE=1

  # üéØ Build LLM - SEULEMENT si chang√©
  build-llm:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.llm-changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Build & push LLM
        uses: docker/build-push-action@v6
        with:
          context: ./llm
          push: true
          tags: |
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:latest
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main
            registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:main-${{ github.sha }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DOCR_NAME }}/intelia-llm:buildcache,mode=max
          platforms: linux/amd64
          provenance: false
          build-args: BUILDKIT_INLINE_CACHE=1

  # üöÄ Deploy - SEULEMENT si au moins un service a √©t√© build√©
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Wait for registry propagation
        run: |
          echo "‚è≥ Attente de 30s pour la propagation du registry..."
          sleep 30

      - name: Trigger App Platform deployment
        run: |
          echo "üöÄ D√©clenchement du red√©ploiement..."
          if [ -z "${{ secrets.DO_APP_ID }}" ]; then
            echo "‚ùå ERREUR: DO_APP_ID secret n'est pas configur√©"
            exit 1
          fi
          
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DO_APP_ID }} --force-rebuild --format ID --no-header)
          echo "üìã Deployment ID: $DEPLOYMENT_ID"
          
          echo "üëÄ Surveillance du d√©ploiement (timeout 10 min)..."
          for i in {1..60}; do
            STATUS=$(doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header 2>/dev/null || echo "UNKNOWN")
            echo "[$i/60] Statut: $STATUS"
            
            case $STATUS in
              "ACTIVE"|"RUNNING")
                echo "‚úÖ D√©ploiement r√©ussi !"
                exit 0
                ;;
              "ERROR"|"FAILED")
                echo "‚ùå D√©ploiement √©chou√©"
                doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
                exit 1
                ;;
              "CANCELED"|"SUPERSEDED")
                echo "‚ö†Ô∏è D√©ploiement annul√© ou remplac√©"
                exit 1
                ;;
            esac
            
            sleep 10
          done
          
          echo "‚è∞ Timeout atteint"
          doctl apps get-deployment ${{ secrets.DO_APP_ID }} $DEPLOYMENT_ID || true
          exit 1

  # üßπ Registry cleanup - Version avec diagnostic d'abord
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-llm, deploy]
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success' || needs.build-llm.result == 'success')
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCR_ACCESS_TOKEN }}

      - name: Registry diagnostic and cleanup
        run: |
          echo "üîç DIAGNOSTIC COMPLET DU REGISTRY"
          echo "================================="
          
          # 1. Lister TOUS les repositories disponibles
          echo "üìã Repositories disponibles dans le registry:"
          doctl registry repository list --format Name,TagCount,UpdatedAt || echo "Erreur listing repositories"
          
          echo ""
          echo "üîç Recherche des repositories intelia..."
          
          # 2. Fonction de nettoyage avec gestion d'erreur robuste
          cleanup_if_exists() {
            local repo_name=$1
            echo ""
            echo "üîç V√©rification de: $repo_name"
            
            # Chercher le repo avec plusieurs variations possibles
            local found_repos=$(doctl registry repository list --format Name --no-header 2>/dev/null | grep -E "(^${repo_name}$|intelia.*${repo_name#intelia-})" || echo "")
            
            if [ -z "$found_repos" ]; then
              echo "  ‚ö†Ô∏è  Repository $repo_name non trouv√©"
              echo "  üí° Tentative de recherche alternative..."
              
              # Chercher des variations du nom
              local alt_search=$(doctl registry repository list --format Name --no-header 2>/dev/null | grep -i "${repo_name#intelia-}" || echo "")
              if [ -n "$alt_search" ]; then
                echo "  üîç Repositories similaires trouv√©s: $alt_search"
              else
                echo "  ‚ùå Aucun repository similaire trouv√©"
              fi
              return 1
            fi
            
            echo "  ‚úÖ Repository trouv√©: $found_repos"
            
            # Pour chaque repo trouv√©, effectuer le nettoyage
            echo "$found_repos" | while read -r actual_repo; do
              if [ -n "$actual_repo" ]; then
                echo "  üßπ Nettoyage de: $actual_repo"
                
                local manifests=$(doctl registry repository list-manifests "$actual_repo" --format Digest,Updated --no-header 2>/dev/null || echo "")
                
                if [ -z "$manifests" ]; then
                  echo "    üì≠ Repository vide"
                  continue
                fi
                
                local total=$(echo "$manifests" | wc -l)
                echo "    üìä Images actuelles: $total"
                
                if [ "$total" -le 6 ]; then
                  echo "    ‚úÖ Pas de nettoyage n√©cessaire ($total <= 6)"
                  continue
                fi
                
                local to_delete=$((total - 6))
                echo "    üóëÔ∏è  Suppression de $to_delete images anciennes..."
                
                # Supprimer les plus anciennes
                echo "$manifests" | sort -k2 | head -n "$to_delete" | while read -r digest updated; do
                  if [ -n "$digest" ] && [[ "$digest" =~ ^sha256: ]]; then
                    echo "      üî• Suppression: $digest ($updated)"
                    if doctl registry repository delete-manifest --force "$actual_repo" "$digest" 2>/dev/null; then
                      echo "      ‚úÖ Supprim√©"
                    else
                      echo "      ‚ùå √âchec"
                    fi
                  fi
                done
                
                # V√©rification finale
                local remaining=$(doctl registry repository list-manifests "$actual_repo" --format Digest --no-header 2>/dev/null | wc -l || echo "0")
                echo "    üìä Images restantes: $remaining"
              fi
            done
          }
          
          # 3. Nettoyer les repositories s'ils existent
          echo ""
          echo "üöÄ NETTOYAGE DES REPOSITORIES"
          echo "============================="
          
          cleanup_if_exists "intelia-frontend"
          cleanup_if_exists "intelia-backend"
          cleanup_if_exists "intelia-llm"
          
          # 4. Garbage collection si au moins un nettoyage a eu lieu
          echo ""
          echo "üóëÔ∏è Tentative de garbage collection..."
          if doctl registry garbage-collection start "${{ secrets.DOCR_NAME }}" --force 2>/dev/null; then
            echo "‚úÖ Garbage collection d√©marr√©"
          else
            echo "‚ö†Ô∏è  Garbage collection: d√©j√† en cours ou erreur (normal)"
          fi
          
          echo ""
          echo "üéâ DIAGNOSTIC ET NETTOYAGE TERMIN√âS"

  # üìä R√©sum√© final (bas√© sur deploy.yml.bak qui fonctionnait)
  summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, build-llm, deploy, cleanup]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ DEPLOYMENT SUMMARY"
          echo "===================="
          
          # Frontend
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
              echo "‚úÖ Frontend: DEPLOYED"
            else
              echo "‚ùå Frontend: FAILED"
            fi
          else
            echo "‚è∏Ô∏è Frontend: SKIPPED (no changes)"
          fi
          
          # Backend  
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
              echo "‚úÖ Backend: DEPLOYED"
            else
              echo "‚ùå Backend: FAILED" 
            fi
          else
            echo "‚è∏Ô∏è Backend: SKIPPED (no changes)"
          fi
          
          # LLM
          if [[ "${{ needs.detect-changes.outputs.llm-changed }}" == "true" ]]; then
            if [[ "${{ needs.build-llm.result }}" == "success" ]]; then
              echo "‚úÖ LLM: DEPLOYED"
            else
              echo "‚ùå LLM: FAILED"
            fi
          else
            echo "‚è∏Ô∏è LLM: SKIPPED (no changes)"
          fi
          
          echo ""
          echo "üìã D√©ploiement: ${{ needs.deploy.result == 'success' && '‚úÖ R√âUSSI' || '‚ùå √âCHEC' }}"
          echo "üßπ Nettoyage: ${{ needs.cleanup.result == 'success' && '‚úÖ TERMIN√â' || '‚ö†Ô∏è V√âRIFI√â' }}"
          
          # Compter les services d√©ploy√©s
          deployed=0
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then ((deployed++)); fi
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then ((deployed++)); fi
          if [[ "${{ needs.build-llm.result }}" == "success" ]]; then ((deployed++)); fi
          
          echo ""
          echo "üìä Services d√©ploy√©s: $deployed/3"
          echo "üîó App Platform: https://cloud.digitalocean.com/apps"