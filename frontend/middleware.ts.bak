// middleware.ts - CORRIG√â POUR √âVITER LES PARAM√àTRES DE REDIRECTION IND√âSIRABLES
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  
  try {
    const supabase = createMiddlewareClient({ req, res })
    const { data: { session } } = await supabase.auth.getSession()

    console.log('üîÑ [Middleware] V√©rification:', {
      path: req.nextUrl.pathname,
      hasSession: !!session,
      userAgent: req.headers.get('user-agent')?.substring(0, 50)
    })

    // Routes prot√©g√©es
    const protectedPaths = ['/chat', '/profile', '/settings', '/admin']
    const isProtectedPath = protectedPaths.some(path => 
      req.nextUrl.pathname.startsWith(path)
    )

    // ‚úÖ CORRECTION PRINCIPALE: Redirection PROPRE sans param√®tres ind√©sirables
    if (isProtectedPath && !session) {
      console.log('üö´ [Middleware] Acc√®s refus√© √† route prot√©g√©e:', req.nextUrl.pathname)
      console.log('üè† [Middleware] Redirection vers accueil SANS param√®tres')
      
      // ‚úÖ REDIRECTION PROPRE vers l'accueil (sans param√®tres de redirect)
      const homeUrl = new URL('/', req.url)
      
      // ‚úÖ NE PAS ajouter les param√®tres redirect et message qui causent le probl√®me
      // ‚ùå ANCIEN CODE qui causait le probl√®me:
      // redirectUrl.searchParams.set('redirect', req.nextUrl.pathname)
      // redirectUrl.searchParams.set('message', 'login_required')
      
      return NextResponse.redirect(homeUrl)
    }

    // ‚úÖ √âVITER LES REDIRECTIONS INUTILES pour les utilisateurs connect√©s
    if (req.nextUrl.pathname === '/' && session) {
      console.log('‚úÖ [Middleware] Utilisateur connect√© sur accueil - Pas de redirection forc√©e')
      // Laisser l'utilisateur sur la page d'accueil, ne pas forcer vers /chat
    }

    // Headers de s√©curit√© CONSERV√âS pour Zoho SalesIQ
    const response = NextResponse.next()
    
    const cspHeader = [
      "default-src 'self'",
      // ‚úÖ SCRIPT-SRC CORRIG√â pour autoriser Zoho SalesIQ
      "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com https://salesiq.zohopublic.com https://*.zoho.com https://*.zohostatic.com https://*.zohocdn.com",
      // ‚úÖ STYLE-SRC CORRIG√â pour autoriser Zoho SalesIQ
      "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://salesiq.zohopublic.com https://*.zoho.com https://*.zohostatic.com https://*.zohocdn.com",
      "font-src 'self' https://fonts.gstatic.com https://*.zoho.com https://*.zohostatic.com https://*.zohocdn.com",
      // ‚úÖ IMG-SRC CORRIG√â pour autoriser Zoho SalesIQ
      "img-src 'self' data: https: blob: https://salesiq.zohopublic.com https://*.zoho.com https://*.zohostatic.com https://*.zohocdn.com",
      // ‚úÖ CONNECT-SRC CORRIG√â - URL WEBSOCKET CONSERV√âE
      "connect-src 'self' https://*.supabase.co https://expert-app-cngws.ondigitalocean.app https://salesiq.zohopublic.com https://*.zoho.com wss://*.zoho.com wss://vts.zohopublic.com wss://salesiq.zohopublic.com https://*.zohostatic.com",
      // ‚úÖ FRAME-SRC CONSERV√â pour autoriser les iframes Zoho
      "frame-src 'self' https://salesiq.zohopublic.com https://*.zoho.com",
      // ‚úÖ CHILD-SRC CONSERV√â pour autoriser les pop-ups Zoho
      "child-src 'self' https://salesiq.zohopublic.com https://*.zoho.com",
      // ‚úÖ WORKER-SRC CONSERV√â pour les service workers
      "worker-src 'self' blob:",
      "media-src 'self' https://*.zoho.com",
      "object-src 'none'",
      "base-uri 'self'",
      "form-action 'self'",
      "frame-ancestors 'none'",
      "upgrade-insecure-requests"
    ].join('; ')

    response.headers.set('Content-Security-Policy', cspHeader)
    response.headers.set('X-Frame-Options', 'DENY')
    response.headers.set('X-Content-Type-Options', 'nosniff')
    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
    response.headers.set('X-XSS-Protection', '1; mode=block')
    
    return response

  } catch (error) {
    console.error('‚ùå [Middleware] Erreur:', error)
    return NextResponse.next()
  }
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|images|icons|.*\\.png$|.*\\.jpg$|.*\\.svg$|.*\\.ico$).*)',
  ],
}