// page.tsx

'use client'

import React, { useState, useEffect, useRef, useCallback, Suspense, useMemo } from 'react'
import Link from 'next/link'
import { useRouter, useSearchParams, usePathname } from 'next/navigation'
import { useAuthStore } from '@/lib/stores/auth'
import type { Language, User } from '@/types'

// ==================== HOOK USECOUNTRIES INT√âGR√â AVEC API REST COUNTRIES ====================
const fallbackCountries = [
  { value: 'CA', label: 'Canada', phoneCode: '+1', flag: 'üá®üá¶' },
  { value: 'US', label: '√âtats-Unis', phoneCode: '+1', flag: 'üá∫üá∏' },
  { value: 'FR', label: 'France', phoneCode: '+33', flag: 'üá´üá∑' },
  { value: 'GB', label: 'Royaume-Uni', phoneCode: '+44', flag: 'üá¨üáß' },
  { value: 'DE', label: 'Allemagne', phoneCode: '+49', flag: 'üá©üá™' },
  { value: 'IT', label: 'Italie', phoneCode: '+39', flag: 'üáÆüáπ' },
  { value: 'ES', label: 'Espagne', phoneCode: '+34', flag: 'üá™üá∏' },
  { value: 'BE', label: 'Belgique', phoneCode: '+32', flag: 'üáßüá™' },
  { value: 'CH', label: 'Suisse', phoneCode: '+41', flag: 'üá®üá≠' },
  { value: 'MX', label: 'Mexique', phoneCode: '+52', flag: 'üá≤üáΩ' },
  { value: 'BR', label: 'Br√©sil', phoneCode: '+55', flag: 'üáßüá∑' },
  { value: 'AU', label: 'Australie', phoneCode: '+61', flag: 'üá¶üá∫' },
  { value: 'JP', label: 'Japon', phoneCode: '+81', flag: 'üáØüáµ' },
  { value: 'CN', label: 'Chine', phoneCode: '+86', flag: 'üá®üá≥' },
  { value: 'IN', label: 'Inde', phoneCode: '+91', flag: 'üáÆüá≥' },
  { value: 'NL', label: 'Pays-Bas', phoneCode: '+31', flag: 'üá≥üá±' },
  { value: 'SE', label: 'Su√®de', phoneCode: '+46', flag: 'üá∏üá™' },
  { value: 'NO', label: 'Norv√®ge', phoneCode: '+47', flag: 'üá≥üá¥' },
  { value: 'DK', label: 'Danemark', phoneCode: '+45', flag: 'üá©üá∞' },
  { value: 'FI', label: 'Finlande', phoneCode: '+358', flag: 'üá´üáÆ' }
]

interface Country {
  value: string
  label: string
  phoneCode: string
  flag?: string
}

// Hook pour charger les pays depuis l'API REST Countries avec debug complet
const useCountries = () => {
  console.log('üéØ [Countries] Hook useCountries appel√©!')
  
  const [countries, setCountries] = useState<Country[]>(fallbackCountries)
  const [loading, setLoading] = useState(true)
  const [usingFallback, setUsingFallback] = useState(true)

  useEffect(() => {
    console.log('üöÄ [Countries] D√âMARRAGE du processus de chargement des pays')
    
    const fetchCountries = async () => {
      try {
        console.log('üåç [Countries] D√©but du chargement depuis l\'API REST Countries...')
        console.log('üì° [Countries] URL: https://restcountries.com/v3.1/all?fields=cca2,name,idd,flag,translations')
        
        const controller = new AbortController()
        const timeoutId = setTimeout(() => {
          console.log('‚è±Ô∏è [Countries] Timeout atteint (10s)')
          controller.abort()
        }, 10000)
        
        const response = await fetch('https://restcountries.com/v3.1/all?fields=cca2,name,idd,flag,translations', {
          headers: {
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0 (compatible; Intelia/1.0)',
            'Cache-Control': 'no-cache'
          },
          signal: controller.signal
        })
        
        clearTimeout(timeoutId)
        console.log(`üì° [Countries] Statut HTTP: ${response.status} ${response.statusText}`)
        
        if (!response.ok) {
          throw new Error(`API indisponible: ${response.status}`)
        }
        
        const data = await response.json()
        console.log(`üìä [Countries] Donn√©es re√ßues: ${data.length} pays bruts`)
        console.log('üîç [Countries] √âchantillon brut:', data.slice(0, 2))
        
        if (!Array.isArray(data)) {
          console.error('‚ùå [Countries] Format invalide - pas un array')
          throw new Error('Format de donn√©es invalide')
        }
        
        const formattedCountries = data
          .map((country: any, index: number) => {
            let phoneCode = ''
            if (country.idd?.root) {
              phoneCode = country.idd.root
              if (country.idd.suffixes && country.idd.suffixes[0]) {
                phoneCode += country.idd.suffixes[0]
              }
            }
            
            const formatted = {
              value: country.cca2,
              label: country.translations?.fra?.common || country.name?.common || country.cca2,
              phoneCode: phoneCode,
              flag: country.flag || ''
            }
            
            if (index < 3) {
              console.log(`üè≥Ô∏è [Countries] Pays ${index + 1}:`, formatted)
            }
            
            return formatted
          })
          .filter((country: Country, index: number) => {
            const hasValidCode = country.phoneCode && 
                                country.phoneCode !== 'undefined' && 
                                country.phoneCode !== 'null' &&
                                country.phoneCode.length > 1 &&
                                country.phoneCode.startsWith('+') &&
                                /^\+\d+$/.test(country.phoneCode)
            
            const hasValidInfo = country.value && 
                                country.value.length === 2 &&
                                country.label && 
                                country.label.length > 1
            
            const isValid = hasValidCode && hasValidInfo
            
            if (!isValid && index < 5) {
              console.log(`‚ùå [Countries] Pays rejet√©:`, {
                country: country.label,
                code: country.value,
                phoneCode: country.phoneCode,
                hasValidCode,
                hasValidInfo
              })
            }
            
            return isValid
          })
          .sort((a: Country, b: Country) => a.label.localeCompare(b.label, 'fr', { numeric: true }))
        
        console.log(`‚úÖ [Countries] Pays valides apr√®s filtrage: ${formattedCountries.length}`)
        console.log('üìã [Countries] √âchantillon final:', formattedCountries.slice(0, 5))
        
        if (formattedCountries.length >= 50) {
          console.log('üéâ [Countries] API valid√©e! Utilisation des donn√©es compl√®tes')
          console.log(`üìà [Countries] Transition: fallback(${fallbackCountries.length}) ‚Üí API(${formattedCountries.length})`)
          setCountries(formattedCountries)
          setUsingFallback(false)
        } else {
          console.warn(`‚ö†Ô∏è [Countries] Pas assez de pays valides: ${formattedCountries.length}/50`)
          throw new Error(`Qualit√© insuffisante: ${formattedCountries.length}/50 pays`)
        }
        
      } catch (err: any) {
        console.error('üí• [Countries] ERREUR:', err)
        console.warn('üîÑ [Countries] Passage en mode fallback')
        
        if (err.name === 'AbortError') {
          console.warn('‚è±Ô∏è [Countries] Cause: Timeout de l\'API (10s)')
        } else if (err.name === 'TypeError' && err.message.includes('fetch')) {
          console.warn('üåê [Countries] Cause: Probl√®me de connexion r√©seau')
        } else {
          console.warn('üêõ [Countries] Cause:', err.message)
        }
        
        setCountries(fallbackCountries)
        setUsingFallback(true)
      } finally {
        console.log('üèÅ [Countries] Chargement termin√©')
        setLoading(false)
      }
    }

    const timer = setTimeout(() => {
      console.log('‚è∞ [Countries] D√©marrage apr√®s d√©lai de 100ms')
      fetchCountries()
    }, 100)
    
    return () => clearTimeout(timer)
  }, [])

  console.log(`üîÑ [Countries] Render - ${countries.length} pays, loading:${loading}, fallback:${usingFallback}`)
  return { countries, loading, usingFallback }
}

// Hook pour cr√©er le mapping des codes t√©l√©phoniques
const useCountryCodeMap = (countries: Country[]) => {
  return useMemo(() => {
    const mapping = countries.reduce((acc, country) => {
      acc[country.value] = country.phoneCode
      return acc
    }, {} as Record<string, string>)
    
    console.log(`üó∫Ô∏è [CountryCodeMap] Mapping cr√©√© avec ${Object.keys(mapping).length} entr√©es`)
    if (Object.keys(mapping).length > 0) {
      console.log('üìã [CountryCodeMap] √âchantillon:', Object.entries(mapping).slice(0, 3))
    }
    
    return mapping
  }, [countries])
}

const translations = {
  fr: {
    title: 'Intelia Expert',
    email: 'Email',
    password: 'Mot de passe',
    confirmPassword: 'Confirmer le mot de passe',
    login: 'Se connecter',
    signup: 'Cr√©er un compte',
    rememberMe: 'Se souvenir de mon email',
    forgotPassword: 'Mot de passe oubli√© ?',
    newToIntelia: 'Nouveau sur Intelia ?',
    connecting: 'Connexion en cours...',
    creating: 'Cr√©ation en cours...',
    loginError: 'Erreur de connexion',
    signupError: 'Erreur de cr√©ation',
    emailRequired: 'L\'adresse email est requise',
    emailInvalid: 'Veuillez entrer une adresse email valide',
    passwordRequired: 'Le mot de passe est requis',
    passwordTooShort: 'Le mot de passe doit contenir au moins 8 caract√®res, une majuscule et un chiffre',
    passwordMismatch: 'Les mots de passe ne correspondent pas',
    firstNameRequired: 'Le pr√©nom est requis',
    lastNameRequired: 'Le nom de famille est requis',
    countryRequired: 'Le pays est requis',
    phoneInvalid: 'Format de t√©l√©phone invalide',
    terms: 'conditions d\'utilisation',
    privacy: 'politique de confidentialit√©',
    gdprNotice: 'En vous connectant, vous acceptez nos',
    needHelp: 'Besoin d\'aide ?',
    contactSupport: 'Contactez le support',
    createAccount: 'Cr√©er un compte',
    backToLogin: 'Retour √† la connexion',
    confirmationSent: 'Email de confirmation envoy√© ! V√©rifiez votre bo√Æte mail.',
    accountCreated: 'Compte cr√©√© avec succ√®s ! V√©rifiez vos emails pour confirmer votre compte.',
    personalInfo: 'Informations personnelles',
    firstName: 'Pr√©nom',
    lastName: 'Nom de famille',
    linkedinProfile: 'Profil LinkedIn personnel',
    contact: 'Contact',
    country: 'Pays',
    countryCode: 'Indicatif pays',
    areaCode: 'Indicatif r√©gional',
    phoneNumber: 'Num√©ro de t√©l√©phone',
    company: 'Entreprise',
    companyName: 'Nom de l\'entreprise',
    companyWebsite: 'Site web de l\'entreprise',
    companyLinkedin: 'Page LinkedIn de l\'entreprise',
    optional: '(optionnel)',
    required: '*',
    close: 'Fermer',
    alreadyHaveAccount: 'D√©j√† un compte ?',
    authSuccess: 'Connexion r√©ussie !',
    authError: 'Erreur de connexion, veuillez r√©essayer.',
    authIncomplete: 'Connexion incompl√®te, veuillez r√©essayer.',
    sessionCleared: 'Session pr√©c√©dente effac√©e',
    forceLogout: 'D√©connexion automatique',
    loadingCountries: 'Chargement des pays...',
    limitedCountryList: 'Liste de pays limit√©e (connexion API limit√©e)',
    selectCountry: 'S√©lectionner un pays...'
  },
  en: {
    title: 'Intelia Expert',
    email: 'Email',
    password: 'Password',
    confirmPassword: 'Confirm password',
    login: 'Sign in',
    signup: 'Create account',
    rememberMe: 'Remember my email',
    forgotPassword: 'Forgot password?',
    newToIntelia: 'New to Intelia?',
    connecting: 'Signing in...',
    creating: 'Creating account...',
    loginError: 'Login error',
    signupError: 'Signup error',
    emailRequired: 'Email address is required',
    emailInvalid: 'Please enter a valid email address',
    passwordRequired: 'Password is required',
    passwordTooShort: 'Password must be at least 8 characters with one uppercase letter and one number',
    passwordMismatch: 'Passwords do not match',
    firstNameRequired: 'First name is required',
    lastNameRequired: 'Last name is required',
    countryRequired: 'Country is required',
    phoneInvalid: 'Invalid phone format',
    terms: 'terms of service',
    privacy: 'privacy policy',
    gdprNotice: 'By signing in, you accept our',
    needHelp: 'Need help?',
    contactSupport: 'Contact support',
    createAccount: 'Create account',
    backToLogin: 'Back to login',
    confirmationSent: 'Confirmation email sent! Check your mailbox.',
    accountCreated: 'Account created successfully! Check your emails to confirm your account.',
    personalInfo: 'Personal Information',
    firstName: 'First Name',
    lastName: 'Last Name',
    linkedinProfile: 'Personal LinkedIn Profile',
    contact: 'Contact',
    country: 'Country',
    countryCode: 'Country Code',
    areaCode: 'Area Code',
    phoneNumber: 'Phone Number',
    company: 'Company',
    companyName: 'Company Name',
    companyWebsite: 'Company Website',
    companyLinkedin: 'Company LinkedIn Page',
    optional: '(optional)',
    required: '*',
    close: 'Close',
    alreadyHaveAccount: 'Already have an account?',
    authSuccess: 'Successfully logged in!',
    authError: 'Login error, please try again.',
    authIncomplete: 'Incomplete login, please try again.',
    sessionCleared: 'Previous session cleared',
    forceLogout: 'Automatic logout',
    loadingCountries: 'Loading countries...',
    limitedCountryList: 'Limited country list (limited internet connection)',
    selectCountry: 'Select a country...'
  },
  es: {
    title: 'Intelia Expert',
    email: 'Email',
    password: 'Contrase√±a',
    confirmPassword: 'Confirmar contrase√±a',
    login: 'Iniciar sesi√≥n',
    signup: 'Crear cuenta',
    rememberMe: 'Recordar mi email',
    forgotPassword: '¬øOlvidaste tu contrase√±a?',
    newToIntelia: '¬øNuevo en Intelia?',
    connecting: 'Iniciando sesi√≥n...',
    creating: 'Creando cuenta...',
    loginError: 'Error de inicio de sesi√≥n',
    signupError: 'Error de registro',
    emailRequired: 'La direcci√≥n de correo es requerida',
    emailInvalid: 'Por favor ingresa una direcci√≥n de correo v√°lida',
    passwordRequired: 'La contrase√±a es requerida',
    passwordTooShort: 'La contrase√±a debe tener al menos 8 caracteres con una may√∫scula y un n√∫mero',
    passwordMismatch: 'Las contrase√±as no coinciden',
    firstNameRequired: 'El nombre es requerido',
    lastNameRequired: 'El apellido es requerido',
    countryRequired: 'El pa√≠s es requerido',
    phoneInvalid: 'Formato de tel√©fono inv√°lido',
    terms: 't√©rminos de servicio',
    privacy: 'pol√≠tica de privacidad',
    gdprNotice: 'Al iniciar sesi√≥n, aceptas nuestros',
    needHelp: '¬øNecesitas ayuda?',
    contactSupport: 'Contactar soporte',
    createAccount: 'Crear cuenta',
    backToLogin: 'Volver al inicio',
    confirmationSent: '¬°Email de confirmaci√≥n enviado! Revisa tu bandeja de entrada.',
    accountCreated: '¬°Cuenta creada exitosamente! Revisa tus emails para confirmar tu cuenta.',
    personalInfo: 'Informaci√≥n Personal',
    firstName: 'Nombre',
    lastName: 'Apellido',
    linkedinProfile: 'Perfil Personal de LinkedIn',
    contact: 'Contacto',
    country: 'Pa√≠s',
    countryCode: 'C√≥digo de Pa√≠s',
    areaCode: 'C√≥digo de √Årea',
    phoneNumber: 'N√∫mero de Tel√©fono',
    company: 'Empresa',
    companyName: 'Nombre de la Empresa',
    companyWebsite: 'Sitio Web de la Empresa',
    companyLinkedin: 'P√°gina LinkedIn de la Empresa',
    optional: '(opcional)',
    required: '*',
    close: 'Cerrar',
    alreadyHaveAccount: '¬øYa tienes cuenta?',
    authSuccess: '¬°Inicio de sesi√≥n exitoso!',
    authError: 'Error de conexi√≥n, por favor intenta de nuevo.',
    authIncomplete: 'Inicio de sesi√≥n incompleto, por favor intenta de nuevo.',
    sessionCleared: 'Sesi√≥n anterior eliminada',
    forceLogout: 'Desconexi√≥n autom√°tica',
    loadingCountries: 'Cargando pa√≠ses...',
    limitedCountryList: 'Lista de pa√≠ses limitada (conexi√≥n de internet limitada)',
    selectCountry: 'Seleccionar pa√≠s...'
  },
  de: {
    title: 'Intelia Expert',
    email: 'E-Mail',
    password: 'Passwort',
    confirmPassword: 'Passwort best√§tigen',
    login: 'Anmelden',
    signup: 'Konto erstellen',
    rememberMe: 'E-Mail merken',
    forgotPassword: 'Passwort vergessen?',
    newToIntelia: 'Neu bei Intelia?',
    connecting: 'Anmeldung l√§uft...',
    creating: 'Konto wird erstellt...',
    loginError: 'Anmeldefehler',
    signupError: 'Registrierungsfehler',
    emailRequired: 'E-Mail-Adresse ist erforderlich',
    emailInvalid: 'Bitte geben Sie eine g√ºltige E-Mail-Adresse ein',
    passwordRequired: 'Passwort ist erforderlich',
    passwordTooShort: 'Passwort muss mindestens 8 Zeichen mit einem Gro√übuchstaben und einer Zahl haben',
    passwordMismatch: 'Passw√∂rter stimmen nicht √ºberein',
    firstNameRequired: 'Vorname ist erforderlich',
    lastNameRequired: 'Nachname ist erforderlich',
    countryRequired: 'Land ist erforderlich',
    phoneInvalid: 'Ung√ºltiges Telefonformat',
    terms: 'Nutzungsbedingungen',
    privacy: 'Datenschutzrichtlinie',
    gdprNotice: 'Durch die Anmeldung akzeptieren Sie unsere',
    needHelp: 'Brauchen Sie Hilfe?',
    contactSupport: 'Support kontaktieren',
    createAccount: 'Konto erstellen',
    backToLogin: 'Zur√ºck zur Anmeldung',
    confirmationSent: 'Best√§tigungs-E-Mail gesendet! √úberpr√ºfen Sie Ihr Postfach.',
    accountCreated: 'Konto erfolgreich erstellt! √úberpr√ºfen Sie Ihre E-Mails zur Kontobest√§tigung.',
    personalInfo: 'Pers√∂nliche Informationen',
    firstName: 'Vorname',
    lastName: 'Nachname',
    linkedinProfile: 'Pers√∂nliches LinkedIn-Profil',
    contact: 'Kontakt',
    country: 'Land',
    countryCode: 'L√§ndercode',
    areaCode: 'Vorwahl',
    phoneNumber: 'Telefonnummer',
    company: 'Unternehmen',
    companyName: 'Firmenname',
    companyWebsite: 'Firmen-Website',
    companyLinkedin: 'Unternehmens-LinkedIn-Seite',
    optional: '(optional)',
    required: '*',
    close: 'Schlie√üen',
    alreadyHaveAccount: 'Bereits ein Konto?',
    authSuccess: 'Erfolgreich angemeldet!',
    authError: 'Anmeldefehler, bitte versuchen Sie es erneut.',
    authIncomplete: 'Unvollst√§ndige Anmeldung, bitte versuchen Sie es erneut.',
    sessionCleared: 'Vorherige Sitzung gel√∂scht',
    forceLogout: 'Automatische Abmeldung',
    loadingCountries: 'L√§nder werden geladen...',
    limitedCountryList: 'Begrenzte L√§nderliste (begrenzte Internetverbindung)',
    selectCountry: 'Land ausw√§hlen...'
  }
}

const InteliaLogo = ({ className = "w-16 h-16" }: { className?: string }) => (
  <img 
    src="/images/favicon.png" 
    alt="Intelia Logo" 
    className={className}
  />
)

const LanguageSelector = ({ onLanguageChange, currentLanguage }: { 
  onLanguageChange: (lang: Language) => void
  currentLanguage: Language 
}) => {
  const [isOpen, setIsOpen] = useState(false)

  const languages = [
    { code: 'fr' as Language, name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'en' as Language, name: 'English', flag: 'üá∫üá∏' },
    { code: 'es' as Language, name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'de' as Language, name: 'Deutsch', flag: 'üá©üá™' }
  ]

  const currentLang = languages.find(lang => lang.code === currentLanguage)

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 px-3 py-2 text-sm text-gray-600 hover:text-gray-900 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
      >
        <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
        </svg>
        <span>{currentLang?.name}</span>
        <svg className={`w-4 h-4 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute top-full left-0 mt-1 w-40 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
            {languages.map((lang) => (
              <button
                key={lang.code}
                onClick={() => {
                  onLanguageChange(lang.code)
                  setIsOpen(false)
                }}
                className={`w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex items-center space-x-2 ${
                  lang.code === currentLanguage ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
                } first:rounded-t-lg last:rounded-b-lg transition-colors`}
              >
                <span>{lang.flag}</span>
                <span>{lang.name}</span>
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  )
}

const validateEmail = (email: string): boolean => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}

const validatePassword = (password: string): { isValid: boolean; errors: string[] } => {
  const errors: string[] = []
  
  if (password.length < 8) {
    errors.push('Au moins 8 caract√®res')
  }
  if (!/[A-Z]/.test(password)) {
    errors.push('Une majuscule')
  }
  if (!/[0-9]/.test(password)) {
    errors.push('Un chiffre')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}

const validatePhone = (countryCode: string, areaCode: string, phoneNumber: string): boolean => {
  if (!countryCode.trim() && !areaCode.trim() && !phoneNumber.trim()) {
    return true
  }
  
  if (countryCode.trim() || areaCode.trim() || phoneNumber.trim()) {
    if (!countryCode.trim() || !/^\+[1-9]\d{0,3}$/.test(countryCode.trim())) {
      return false
    }
    
    if (!areaCode.trim() || !/^\d{3}$/.test(areaCode.trim())) {
      return false
    }
    
    if (!phoneNumber.trim() || !/^\d{7}$/.test(phoneNumber.trim())) {
      return false
    }
  }
  
  return true
}

const validateLinkedIn = (url: string): boolean => {
  if (!url.trim()) return true
  return /^(https?:\/\/)?(www\.)?linkedin\.com\/(in|company)\/[\w\-]+\/?$/.test(url)
}

const validateWebsite = (url: string): boolean => {
  if (!url.trim()) return true
  return /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(url)
}

// üîß 1. Votre contenu existant devient PageContent
function PageContent() {
  console.log('üöÄ [PageContent] Composant PageContent rendu')
  
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams() // ‚úÖ Maintenant autoris√© dans Suspense
  
  const { user, isAuthenticated, isLoading, hasHydrated } = useAuthStore() // Donn√©es
  const { login, register, initializeSession } = useAuthStore() // Actions

  // ‚≠ê APPEL DU HOOK USECONTRIES IMM√âDIATEMENT
  console.log('üéØ [PageContent] Appel du hook useCountries...')
  const { countries, loading: countriesLoading, usingFallback } = useCountries()
  console.log('üìä [PageContent] Hook useCountries retourn√©:', { 
    countriesLength: countries.length, 
    loading: countriesLoading, 
    usingFallback 
  })

  // Cr√©er le mapping des codes t√©l√©phoniques dynamiquement
  const countryCodeMap = useCountryCodeMap(countries)

  // üõ°Ô∏è PROTECTION + REMEMBER ME FEATURES + FIX REDIRECTION
  const hasInitialized = useRef(false)
  const hasCheckedAuth = useRef(false)
  const redirectLock = useRef(false) // üîß Protection contre la boucle
  const sessionInitialized = useRef(false)

  const [currentLanguage, setCurrentLanguage] = useState<Language>('fr')
  const t = translations[currentLanguage]
  
  const [isSignupMode, setIsSignupMode] = useState(false)
  const [localError, setLocalError] = useState('')
  const [localSuccess, setLocalSuccess] = useState('')
  
  const [loginData, setLoginData] = useState({
    email: '',
    password: '',
    rememberMe: false
  })

  const [signupData, setSignupData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    linkedinProfile: '',
    country: '',
    countryCode: '',      
    areaCode: '',         
    phoneNumber: '',      
    companyName: '',
    companyWebsite: '',
    companyLinkedin: ''
  })

  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const passwordInputRef = useRef<HTMLInputElement>(null)

  // ‚úÖ UTILITAIRES REMEMBER ME CORRIG√âS + AM√âLIOR√âS
  const rememberMeUtils = {
    save: (email: string, remember = true) => {
      try {
        if (remember && email?.trim()) {
          localStorage.setItem('intelia-remember-me', 'true')
          localStorage.setItem('intelia-last-email', email.trim())
          console.log('‚úÖ [RememberMe] Email sauvegard√©:', email.trim())
        } else {
          localStorage.removeItem('intelia-remember-me')
          localStorage.removeItem('intelia-last-email')
          console.log('üóëÔ∏è [RememberMe] Pr√©f√©rences effac√©es')
        }
      } catch (error) {
        console.error('‚ùå [RememberMe] Erreur sauvegarde:', error)
      }
    },
    
    load: () => {
      try {
        const rememberMe = localStorage.getItem('intelia-remember-me') === 'true'
        const lastEmail = localStorage.getItem('intelia-last-email') || ''
        
        return {
          rememberMe,
          lastEmail: rememberMe ? lastEmail : '',
          hasRememberedEmail: rememberMe && lastEmail.length > 0
        }
      } catch (error) {
        console.error('‚ùå [RememberMe] Erreur chargement:', error)
        return { rememberMe: false, lastEmail: '', hasRememberedEmail: false }
      }
    }
  }

  // üõ°Ô∏è FONCTION DE REDIRECTION S√âCURIS√âE (FIX PRINCIPAL)
  const safeRedirectToChat = useCallback(() => {
    if (redirectLock.current) {
      console.log('üîí [Redirect] D√©j√† en cours de redirection, ignor√©')
      return
    }
    
    // üîß NE PAS rediriger si on est d√©j√† sur /chat
    if (pathname?.startsWith("/chat")) {
      console.log('üîß [Redirect] D√©j√† sur /chat, pas de redirection')
      return
    }
    
    console.log('üöÄ [Redirect] Redirection vers /chat depuis:', pathname)
    redirectLock.current = true
    
    // ‚úÖ Utiliser router.replace au lieu de window.location
    // pour √©viter le reload et donc la re-mont√©e des providers
    router.replace('/chat')
  }, [pathname, router])

  // ‚úÖ INITIALISATION CORRIG√âE AVEC REMEMBER ME
  useEffect(() => {
    if (hasInitialized.current) return
    
    // Charger les pr√©f√©rences utilisateur
    const savedLanguage = localStorage.getItem('intelia-language') as Language
    if (savedLanguage && translations[savedLanguage]) {
      setCurrentLanguage(savedLanguage)
    } else {
      const browserLanguage = navigator.language.substring(0, 2) as Language
      if (translations[browserLanguage]) {
        setCurrentLanguage(browserLanguage)
      }
    }

    // ‚úÖ RESTAURER EMAIL avec fonction utilitaire
    const { rememberMe, lastEmail, hasRememberedEmail } = rememberMeUtils.load()
    
    console.log('üìÑ [Init] Chargement remember me:', { rememberMe, lastEmail, hasRememberedEmail })
    
    if (hasRememberedEmail) {
      setLoginData({
        email: lastEmail,
        password: '', // ‚úÖ Toujours vider le mot de passe
        rememberMe: true
      })
      
      setLocalSuccess(`Email restaur√© : ${lastEmail}. Entrez votre mot de passe.`)
      setTimeout(() => setLocalSuccess(''), 4000)
    }

    hasInitialized.current = true
  }, [])

  // ‚úÖ FOCUS AUTOMATIQUE sur mot de passe si email pr√©-rempli
  useEffect(() => {
    const { rememberMe, lastEmail } = rememberMeUtils.load()
    
    if (rememberMe && lastEmail && loginData.email && !loginData.password && passwordInputRef.current) {
      setTimeout(() => {
        passwordInputRef.current?.focus()
      }, 500)
    }
  }, [loginData.email, loginData.password])

  // üõ°Ô∏è V√âRIFICATION AUTH UNE SEULE FOIS (FIX PRINCIPAL)
  useEffect(() => {
    if (!hasHydrated || !hasInitialized.current || hasCheckedAuth.current) {
      return
    }

    hasCheckedAuth.current = true
    console.log('üîç [Auth] V√©rification unique de l\'authentification')

    // Si d√©j√† connect√©, rediriger imm√©diatement
    if (isAuthenticated) {
      console.log('‚úÖ [Auth] D√©j√† connect√©, redirection imm√©diate')
      safeRedirectToChat()
      return
    }

    // Sinon, initialiser la session une seule fois
    if (!sessionInitialized.current) {
      sessionInitialized.current = true
      console.log('üìÑ [Session] Initialisation unique de la session')
      
      initializeSession().then((sessionFound) => {
        if (sessionFound) {
          console.log('‚úÖ [Session] Session trouv√©e, redirection automatique')
          // La redirection sera g√©r√©e par le changement d'√©tat isAuthenticated
        } else {
          console.log('‚ùå [Session] Aucune session trouv√©e')
        }
      }).catch(error => {
        console.error('‚ùå [Session] Erreur initialisation:', error)
      })
    }
  }, [hasHydrated, hasInitialized.current, isAuthenticated, initializeSession, safeRedirectToChat])

  // üõ°Ô∏è SURVEILLANCE CHANGEMENT AUTH (FIX PRINCIPAL)
  useEffect(() => {
    if (!hasHydrated || !hasInitialized.current || !hasCheckedAuth.current) {
      return
    }

    // üîß Uniquement quand l'auth est pr√™te ET valide
    if (!isLoading && isAuthenticated) {
      console.log('üîÑ [Auth] √âtat auth chang√©, redirection s√©curis√©e')
      safeRedirectToChat()
    }
  }, [isAuthenticated, isLoading, hasHydrated, safeRedirectToChat])

  // üõ°Ô∏è GESTION URL CALLBACK
  useEffect(() => {
    if (!hasInitialized.current) return

    const authStatus = searchParams.get('auth')
    if (!authStatus) return
    
    if (authStatus === 'success') {
      setLocalSuccess(t.authSuccess)
    } else if (authStatus === 'error') {
      setLocalError(t.authError)
    } else if (authStatus === 'incomplete') {
      setLocalError(t.authIncomplete)
    }
    
    // Nettoyer l'URL
    const url = new URL(window.location.href)
    url.searchParams.delete('auth')
    window.history.replaceState({}, '', url.pathname)
    
    // Masquer les messages apr√®s 3 secondes
    const timer = setTimeout(() => {
      setLocalSuccess('')
      setLocalError('')
    }, 3000)
    
    return () => clearTimeout(timer)
  }, [searchParams, t])

  // ‚úÖ AFFICHAGE CONDITIONNEL
  if (!hasHydrated || !hasInitialized.current) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center">
        <div className="text-center">
          <InteliaLogo className="w-16 h-16 mx-auto mb-4" />
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Initialisation...</p>
        </div>
      </div>
    )
  }

  const handleLanguageChange = (newLanguage: Language) => {
    setCurrentLanguage(newLanguage)
    localStorage.setItem('intelia-language', newLanguage)
  }

  // ‚úÖ FONCTION HANDLELOGINCHANGE CORRIG√âE AVEC PERSISTENCE EN TEMPS R√âEL
  const handleLoginChange = (field: string, value: string | boolean) => {
    setLoginData(prev => {
      const newData = { ...prev, [field]: value }
      
      // üîß NOUVELLE LOGIQUE : Gestion sp√©ciale pour rememberMe
      if (field === 'rememberMe') {
        const isRememberChecked = value as boolean
        console.log('üõØ [HandleChange] RememberMe chang√©:', isRememberChecked)
        
        // Persistence en temps r√©el du statut rememberMe
        if (isRememberChecked && prev.email?.trim()) {
          // Si on coche ET qu'il y a un email, sauvegarder
          rememberMeUtils.save(prev.email.trim(), true)
          console.log('‚úÖ [HandleChange] Email sauvegard√© imm√©diatement:', prev.email.trim())
        } else if (!isRememberChecked) {
          // Si on d√©coche, effacer imm√©diatement
          rememberMeUtils.save('', false)
          console.log('üóëÔ∏è [HandleChange] Remember Me d√©sactiv√©')
        }
      }
      
      // üîß NOUVELLE LOGIQUE : Gestion sp√©ciale pour l'email quand rememberMe est actif
      if (field === 'email' && prev.rememberMe) {
        const emailValue = (value as string).trim()
        if (emailValue && validateEmail(emailValue)) {
          // Sauvegarder le nouvel email si remember est actif et email valide
          rememberMeUtils.save(emailValue, true)
          console.log('‚úÖ [HandleChange] Nouvel email sauvegard√©:', emailValue)
        }
      }
      
      return newData
    })
    
    if (localError) setLocalError('')
    if (localSuccess) setLocalSuccess('')
  }

  const handleSignupChange = (field: string, value: string) => {
    setSignupData(prev => {
      const newData = { ...prev, [field]: value }
      
      // Auto-remplir l'indicatif pays quand le pays change
      if (field === 'country' && value && countryCodeMap[value]) {
        console.log('üè≥Ô∏è [Country] Auto-remplissage code pays:', value, '->', countryCodeMap[value])
        newData.countryCode = countryCodeMap[value]
      }
      
      return newData
    })
    
    if (localError) setLocalError('')
    if (localSuccess) setLocalSuccess('')
  }

  const validateSignupForm = (): string | null => {
    const { 
      email, password, confirmPassword, firstName, lastName, country, 
      countryCode, areaCode, phoneNumber,
      linkedinProfile, companyWebsite, companyLinkedin 
    } = signupData

    if (!email.trim()) return t.emailRequired
    if (!validateEmail(email)) return t.emailInvalid
    if (!password) return t.passwordRequired
    
    const passwordValidation = validatePassword(password)
    if (!passwordValidation.isValid) return t.passwordTooShort
    
    if (password !== confirmPassword) return t.passwordMismatch
    if (!firstName.trim()) return t.firstNameRequired
    if (!lastName.trim()) return t.lastNameRequired
    if (!country) return t.countryRequired
    
    if (!validatePhone(countryCode, areaCode, phoneNumber)) {
      return 'Format de t√©l√©phone invalide. Si vous renseignez le t√©l√©phone, tous les champs (indicatif pays, indicatif r√©gional, num√©ro) sont requis.'
    }
    
    if (linkedinProfile && !validateLinkedIn(linkedinProfile)) return 'Format LinkedIn invalide'
    if (companyWebsite && !validateWebsite(companyWebsite)) return 'Format de site web invalide'
    if (companyLinkedin && !validateLinkedIn(companyLinkedin)) return 'Format LinkedIn entreprise invalide'
    
    return null
  }

  // ‚úÖ LOGIN AVEC GESTION "SE SOUVENIR DE MOI" CORRIG√âE
  const handleLogin = async () => {
    setLocalError('')
    setLocalSuccess('')
    
    if (!loginData.email.trim()) {
      setLocalError(t.emailRequired)
      return
    }
    
    if (!validateEmail(loginData.email)) {
      setLocalError(t.emailInvalid)
      return
    }
    
    if (!loginData.password) {
      setLocalError(t.passwordRequired)
      return
    }

    if (loginData.password.length < 6) {
      setLocalError(t.passwordTooShort)
      return
    }

    try {
      await login(loginData.email.trim(), loginData.password)
      
      // ‚úÖ GESTION "Se souvenir de moi" avec fonction utilitaire CORRIG√âE
      // Note: La persistence a d√©j√† √©t√© faite dans handleLoginChange, mais on confirme ici pour s√©curit√©
      rememberMeUtils.save(loginData.email.trim(), loginData.rememberMe)
      console.log('‚úÖ [Login] Confirmation persistence remember me:', loginData.rememberMe)
      
      // üîß Pas de redirection manuelle ici, elle sera g√©r√©e par useEffect
      
    } catch (error: any) {
      // üîß R√©initialiser les verrous en cas d'erreur
      redirectLock.current = false
      
      if (error.message?.includes('Invalid login credentials')) {
        setLocalError('Email ou mot de passe incorrect. V√©rifiez vos identifiants.')
      } else if (error.message?.includes('Email not confirmed')) {
        setLocalError('Email non confirm√©. V√©rifiez votre bo√Æte mail.')
      } else if (error.message?.includes('Too many requests')) {
        setLocalError('Trop de tentatives. Attendez quelques minutes.')
      } else {
        setLocalError(error.message || 'Erreur de connexion')
      }
    }
  }

  const handleSignup = async () => {
    setLocalError('')
    setLocalSuccess('')
    
    const validationError = validateSignupForm()
    if (validationError) {
      setLocalError(validationError)
      return
    }

    try {
      console.log('üìù [Signup] Tentative d\'inscription:', signupData.email)
      
      const userData: Partial<User> = {
        name: `${signupData.firstName.trim()} ${signupData.lastName.trim()}`,
        user_type: 'producer',
        language: currentLanguage
      }
      
      await register(signupData.email.trim(), signupData.password, userData)
      
      setLocalSuccess(t.accountCreated)
      
      // R√©initialiser le formulaire
      setSignupData({
        email: '', password: '', confirmPassword: '',
        firstName: '', lastName: '', linkedinProfile: '',
        country: '', countryCode: '', areaCode: '', phoneNumber: '',
        companyName: '', companyWebsite: '', companyLinkedin: ''
      })
      
      // Passer en mode login apr√®s 4 secondes
      setTimeout(() => {
        setIsSignupMode(false)
        setLocalSuccess('')
      }, 4000)
      
    } catch (error: any) {
      console.error('‚ùå [Signup] Erreur:', error)
      setLocalError(error.message || 'Erreur lors de la cr√©ation du compte')
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isLoading) {
      if (isSignupMode) {
        handleSignup()
      } else {
        handleLogin()
      }
    }
  }

  // ‚úÖ GESTION MODES AVEC REMEMBER EMAIL CORRIG√âE
  const handleCloseSignup = () => {
    setIsSignupMode(false)
    setLocalError('')
    setLocalSuccess('')
    
    // ‚úÖ Restaurer EMAIL avec fonction utilitaire
    const { rememberMe, lastEmail } = rememberMeUtils.load()
    
    console.log('üìù [Signup] Fermeture signup - restore email:', lastEmail)
    
    setLoginData({ 
      email: lastEmail, 
      password: '', // ‚úÖ Toujours vider mot de passe
      rememberMe 
    })
    
    // Message si email restaur√©
    if (rememberMe && lastEmail) {
      setLocalSuccess(`Email restaur√© : ${lastEmail}`)
      setTimeout(() => setLocalSuccess(''), 3000)
    }
    
    // R√©initialiser le formulaire d'inscription
    setSignupData({
      email: '', password: '', confirmPassword: '',
      firstName: '', lastName: '', linkedinProfile: '',
      country: '', countryCode: '', areaCode: '', phoneNumber: '',
      companyName: '', companyWebsite: '', companyLinkedin: ''
    })
  }

  const toggleMode = () => {
    setIsSignupMode(!isSignupMode)
    setLocalError('')
    setLocalSuccess('')
    
    if (!isSignupMode) {
      // Passage en mode signup - vider login
      setLoginData({ email: '', password: '', rememberMe: false })
    } else {
      // Retour en mode login - restaurer EMAIL avec fonction utilitaire
      const { rememberMe, lastEmail } = rememberMeUtils.load()
      
      console.log('üîÑ [Toggle] Retour login - restore email:', lastEmail)
      
      setLoginData({ 
        email: lastEmail, 
        password: '', // ‚úÖ Toujours vider mot de passe
        rememberMe 
      })
      
      // Message si email restaur√©
      if (rememberMe && lastEmail) {
        setLocalSuccess(`Email restaur√© : ${lastEmail}`)
        setTimeout(() => setLocalSuccess(''), 3000)
      }
    }
    
    setSignupData({
      email: '', password: '', confirmPassword: '',
      firstName: '', lastName: '', linkedinProfile: '',
      country: '', countryCode: '', areaCode: '', phoneNumber: '',
      companyName: '', companyWebsite: '', companyLinkedin: ''
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex flex-col justify-center py-8 sm:px-6 lg:px-8 relative">
      
      {/* ‚≠ê BO√éTE DE DEBUG EN MODE D√âVELOPPEMENT */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed top-16 right-4 bg-purple-50 border border-purple-200 rounded-lg p-4 text-xs max-w-sm z-50">
          <div className="font-semibold text-purple-800 mb-2">üß™ Debug Countries API</div>
          <div className="space-y-1 text-purple-700">
            <div>üìä Pays: <span className="font-mono bg-purple-100 px-1 rounded">{countries.length}</span></div>
            <div>‚è≥ Loading: <span className="font-mono bg-purple-100 px-1 rounded">{countriesLoading ? 'Oui' : 'Non'}</span></div>
            <div>üîÑ Fallback: <span className="font-mono bg-purple-100 px-1 rounded">{usingFallback ? 'Oui' : 'Non'}</span></div>
            <div>üéØ Source: <span className="font-mono bg-purple-100 px-1 rounded">{usingFallback ? 'Liste locale' : 'API REST Countries'}</span></div>
          </div>
          {countries.length > 0 && (
            <div className="mt-2 p-2 bg-purple-100 rounded text-xs">
              <div className="font-semibold">Premier pays:</div>
              <div className="font-mono">{countries[0].flag} {countries[0].label} ({countries[0].phoneCode})</div>
            </div>
          )}
          <button 
            onClick={() => setIsSignupMode(!isSignupMode)}
            className="mt-2 text-xs bg-purple-100 hover:bg-purple-200 px-2 py-1 rounded"
          >
            {isSignupMode ? 'Mode Login' : 'Mode Inscription'}
          </button>
        </div>
      )}
      
      <div className="absolute top-4 right-4">
        <LanguageSelector onLanguageChange={handleLanguageChange} currentLanguage={currentLanguage} />
      </div>
      
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <InteliaLogo className="w-16 h-16" />
        </div>
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          {t.title}
        </h2>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-2xl">
        <div className="bg-white py-8 px-4 shadow-lg sm:rounded-lg sm:px-10 max-h-screen overflow-y-auto relative">
          
          {/* Bouton de fermeture pour le mode inscription */}
          {isSignupMode && (
            <button
              onClick={handleCloseSignup}
              className="absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors z-10"
              title={t.close}
              disabled={isLoading}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          )}

          {/* Statut du chargement des pays */}
          {usingFallback && !countriesLoading && isSignupMode && (
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center space-x-2">
                <svg className="w-4 h-4 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <span className="text-sm text-yellow-800">
                  {t.limitedCountryList}
                </span>
              </div>
            </div>
          )}

          {/* Message de succ√®s si API fonctionne */}
          {!countriesLoading && !usingFallback && isSignupMode && (
            <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center space-x-2">
                <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span className="text-sm text-green-800">
                  ‚úÖ API REST Countries active - {countries.length} pays charg√©s avec drapeaux et codes t√©l√©phoniques
                </span>
              </div>
            </div>
          )}
          
          {/* Messages d'erreur et succ√®s */}
          {localError && (
            <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">
                    {isSignupMode ? t.signupError : t.loginError}
                  </h3>
                  <div className="mt-1 text-sm text-red-700">
                    {localError}
                  </div>
                </div>
              </div>
            </div>
          )}

          {localSuccess && (
            <div className="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <div className="text-sm text-green-700">
                    {localSuccess}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Formulaire de connexion */}
          {!isSignupMode && (
            <div className="space-y-6">
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                  {t.email} <span className="text-red-500">*</span>
                </label>
                <div className="mt-1">
                  <input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={loginData.email}
                    onChange={(e) => handleLoginChange('email', e.target.value)}
                    onKeyPress={handleKeyPress}
                    className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm transition-colors"
                    placeholder="votre@email.com"
                    disabled={isLoading}
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                  {t.password} <span className="text-red-500">*</span>
                </label>
                <div className="mt-1 relative">
                  <input
                    ref={passwordInputRef}
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    autoComplete="current-password"
                    required
                    value={loginData.password}
                    onChange={(e) => handleLoginChange('password', e.target.value)}
                    onKeyPress={handleKeyPress}
                    className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 pr-10 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm transition-colors"
                    placeholder={loginData.email ? "Entrez votre mot de passe" : "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"}
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center hover:text-gray-600 transition-colors"
                    disabled={isLoading}
                    tabIndex={-1}
                  >
                    {showPassword ? (
                      <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L6.34 6.34m6.822 10.565l-3.536-3.536" />
                      </svg>
                    ) : (
                      <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    )}
                  </button>
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    checked={loginData.rememberMe}
                    onChange={(e) => {
                      console.log('üõØ [Checkbox] √âv√©nement onChange d√©clench√©!')
                      console.log('üõØ [Checkbox] e.target.checked:', e.target.checked)
                      console.log('üõØ [Checkbox] √âtat actuel rememberMe:', loginData.rememberMe)
                      
                      // ‚úÖ APPEL SIMPLIFI√â ET DIRECT
                      handleLoginChange('rememberMe', e.target.checked)
                    }}
                    className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    disabled={isLoading}
                  />
                  <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                    {t.rememberMe}
                  </label>
                </div>

                <div className="text-sm">
                  <Link 
                    href="/auth/forgot-password" 
                    className="font-medium text-blue-600 hover:text-blue-500 transition-colors"
                  >
                    {t.forgotPassword}
                  </Link>
                </div>
              </div>

              <div>
                <button
                  type="button"
                  onClick={handleLogin}
                  disabled={isLoading || !loginData.email || !loginData.password}
                  className="flex w-full justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isLoading ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>{t.connecting}</span>
                    </div>
                  ) : (
                    t.login
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Formulaire d'inscription avec s√©lecteur de pays am√©lior√© */}
          {isSignupMode && (
            <div className="space-y-6 pt-2">
              {/* Section: Informations personnelles */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 border-b pb-2">
                  {t.personalInfo}
                </h3>
                
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                      {t.firstName} <span className="text-red-500">*</span>
                    </label>
                    <input
                      id="firstName"
                      type="text"
                      required
                      value={signupData.firstName}
                      onChange={(e) => handleSignupChange('firstName', e.target.value)}
                      className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                      disabled={isLoading}
                    />
                  </div>

                  <div>
                    <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                      {t.lastName} <span className="text-red-500">*</span>
                    </label>
                    <input
                      id="lastName"
                      type="text"
                      required
                      value={signupData.lastName}
                      onChange={(e) => handleSignupChange('lastName', e.target.value)}
                      className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                      disabled={isLoading}
                    />
                  </div>
                </div>

                <div className="mt-4">
                  <label htmlFor="linkedinProfile" className="block text-sm font-medium text-gray-700">
                    {t.linkedinProfile} <span className="text-gray-500 text-xs">{t.optional}</span>
                  </label>
                  <input
                    id="linkedinProfile"
                    type="url"
                    value={signupData.linkedinProfile}
                    onChange={(e) => handleSignupChange('linkedinProfile', e.target.value)}
                    placeholder="https://linkedin.com/in/votre-profil"
                    className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    disabled={isLoading}
                  />
                </div>
              </div>

              {/* Section: Contact */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 border-b pb-2">
                  {t.contact}
                </h3>

                <div className="mb-4">
                  <label htmlFor="signupEmail" className="block text-sm font-medium text-gray-700">
                    {t.email} <span className="text-red-500">*</span>
                  </label>
                  <input
                    id="signupEmail"
                    type="email"
                    required
                    value={signupData.email}
                    onChange={(e) => handleSignupChange('email', e.target.value)}
                    placeholder="votre@email.com"
                    className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    disabled={isLoading}
                  />
                </div>

                {/* ‚≠ê S√âLECTEUR DE PAYS AVEC API REST COUNTRIES */}
                <div className="mb-4">
                  <label htmlFor="country" className="block text-sm font-medium text-gray-700">
                    {t.country} <span className="text-red-500">*</span>
                  </label>
                  
                  {countriesLoading ? (
                    <div className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 bg-gray-50">
                      <div className="flex items-center space-x-2">
                        <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-sm text-gray-600">{t.loadingCountries}</span>
                      </div>
                    </div>
                  ) : (
                    <select
                      id="country"
                      required
                      value={signupData.country}
                      onChange={(e) => {
                        console.log('üè≥Ô∏è [Country] S√©lection pays:', e.target.value)
                        handleSignupChange('country', e.target.value)
                      }}
                      className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 bg-white shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                      disabled={isLoading}
                    >
                      <option value="">{t.selectCountry}</option>
                      {countries.length === 0 ? (
                        <option disabled>Aucun pays disponible</option>
                      ) : (
                        countries.map((country) => (
                          <option key={country.value} value={country.value}>
                            {country.flag ? `${country.flag} ` : ''}{country.label} ({country.phoneCode})
                          </option>
                        ))
                      )}
                    </select>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    T√©l√©phone <span className="text-gray-500 text-xs">{t.optional}</span>
                  </label>
                  <div className="grid grid-cols-3 gap-3">
                    <div>
                      <label htmlFor="countryCode" className="block text-xs font-medium text-gray-600 mb-1">
                        {t.countryCode}
                      </label>
                      <input
                        id="countryCode"
                        type="text"
                        value={signupData.countryCode}
                        onChange={(e) => handleSignupChange('countryCode', e.target.value)}
                        placeholder="+1"
                        className="block w-full appearance-none rounded-md border border-gray-300 px-2 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 text-sm"
                        disabled={isLoading}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="areaCode" className="block text-xs font-medium text-gray-600 mb-1">
                        {t.areaCode}
                      </label>
                      <input
                        id="areaCode"
                        type="tel"
                        value={signupData.areaCode}
                        onChange={(e) => handleSignupChange('areaCode', e.target.value)}
                        placeholder="514"
                        maxLength={3}
                        className="block w-full appearance-none rounded-md border border-gray-300 px-2 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 text-sm"
                        disabled={isLoading}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="phoneNumber" className="block text-xs font-medium text-gray-600 mb-1">
                        {t.phoneNumber}
                      </label>
                      <input
                        id="phoneNumber"
                        type="tel"
                        value={signupData.phoneNumber}
                        onChange={(e) => handleSignupChange('phoneNumber', e.target.value)}
                        placeholder="1234567"
                        maxLength={7}
                        className="block w-full appearance-none rounded-md border border-gray-300 px-2 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 text-sm"
                        disabled={isLoading}
                      />
                    </div>
                  </div>
                  
                  {(signupData.countryCode || signupData.areaCode || signupData.phoneNumber) && (
                    <div className="mt-2">
                      {validatePhone(signupData.countryCode, signupData.areaCode, signupData.phoneNumber) ? (
                        <div className="flex items-center text-xs text-green-600">
                          <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                          Format t√©l√©phone valide
                        </div>
                      ) : (
                        <div className="flex items-center text-xs text-red-600">
                          <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                          </svg>
                          Tous les champs t√©l√©phone sont requis
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>

              {/* Section: Mots de passe */}
              <div>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label htmlFor="signupPassword" className="block text-sm font-medium text-gray-700">
                      {t.password} <span className="text-red-500">*</span>
                    </label>
                    <div className="mt-1 relative">
                      <input
                        id="signupPassword"
                        type={showPassword ? "text" : "password"}
                        required
                        value={signupData.password}
                        onChange={(e) => handleSignupChange('password', e.target.value)}
                        className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 pr-10 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        disabled={isLoading}
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        tabIndex={-1}
                      >
                        <svg className="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                      </button>
                    </div>
                    {signupData.password && (
                      <div className="mt-2 space-y-1">
                        {(() => {
                          const validation = validatePassword(signupData.password)
                          return validation.errors.map((error, index) => (
                            <div key={index} className="flex items-center text-xs text-red-600">
                              <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                              </svg>
                              {error}
                            </div>
                          ))
                        })()}
                        {validatePassword(signupData.password).isValid && (
                          <div className="flex items-center text-xs text-green-600">
                            <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                            </svg>
                            Mot de passe valide
                          </div>
                        )}
                      </div>
                    )}
                  </div>

                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                      {t.confirmPassword} <span className="text-red-500">*</span>
                    </label>
                    <div className="mt-1 relative">
                      <input
                        id="confirmPassword"
                        type={showConfirmPassword ? "text" : "password"}
                        required
                        value={signupData.confirmPassword}
                        onChange={(e) => handleSignupChange('confirmPassword', e.target.value)}
                        className="block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 pr-10 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                        placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                        disabled={isLoading}
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        tabIndex={-1}
                      >
                        <svg className="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                      </button>
                    </div>
                    {signupData.confirmPassword && (
                      <div className="mt-2">
                        {signupData.password === signupData.confirmPassword ? (
                          <div className="flex items-center text-xs text-green-600">
                            <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                            </svg>
                            Mots de passe identiques
                          </div>
                        ) : (
                          <div className="flex items-center text-xs text-red-600">
                            <svg className="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                            </svg>
                            Les mots de passe ne correspondent pas
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Section: Entreprise */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4 border-b pb-2">
                  {t.company}
                </h3>

                <div className="mb-4">
                  <label htmlFor="companyName" className="block text-sm font-medium text-gray-700">
                    {t.companyName} <span className="text-gray-500 text-xs">{t.optional}</span>
                  </label>
                  <input
                    id="companyName"
                    type="text"
                    value={signupData.companyName}
                    onChange={(e) => handleSignupChange('companyName', e.target.value)}
                    className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    disabled={isLoading}
                  />
                </div>

                <div className="mb-4">
                  <label htmlFor="companyWebsite" className="block text-sm font-medium text-gray-700">
                    {t.companyWebsite} <span className="text-gray-500 text-xs">{t.optional}</span>
                  </label>
                  <input
                    id="companyWebsite"
                    type="url"
                    value={signupData.companyWebsite}
                    onChange={(e) => handleSignupChange('companyWebsite', e.target.value)}
                    placeholder="https://www.entreprise.com"
                    className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    disabled={isLoading}
                  />
                </div>

                <div>
                  <label htmlFor="companyLinkedin" className="block text-sm font-medium text-gray-700">
                    {t.companyLinkedin} <span className="text-gray-500 text-xs">{t.optional}</span>
                  </label>
                  <input
                    id="companyLinkedin"
                    type="url"
                    value={signupData.companyLinkedin}
                    onChange={(e) => handleSignupChange('companyLinkedin', e.target.value)}
                    placeholder="https://linkedin.com/company/votre-entreprise"
                    className="mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm"
                    disabled={isLoading}
                  />
                </div>
              </div>

              <div className="pt-4">
                <button
                  type="button"
                  onClick={handleSignup}
                  disabled={isLoading}
                  className="flex w-full justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isLoading ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>{t.creating}</span>
                    </div>
                  ) : (
                    t.signup
                  )}
                </button>
              </div>
            </div>
          )}

          {/* Section des boutons de basculement - seulement visible en mode connexion */}
          {!isSignupMode && (
            <>
              <div className="mt-6">
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-gray-300" />
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="bg-white px-2 text-gray-500">
                      {t.newToIntelia}
                    </span>
                  </div>
                </div>

                <div className="mt-6">
                  <button
                    type="button"
                    onClick={toggleMode}
                    className="flex w-full justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                    disabled={isLoading}
                  >
                    {t.createAccount}
                  </button>
                </div>
              </div>
            </>
          )}

          {/* Toggle pour revenir au login depuis signup */}
          {isSignupMode && (
            <div className="mt-6">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300" />
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="bg-white px-2 text-gray-500">
                    {t.alreadyHaveAccount}
                  </span>
                </div>
              </div>

              <div className="mt-6">
                <button
                  type="button"
                  onClick={toggleMode}
                  className="flex w-full justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                  disabled={isLoading}
                >
                  {t.backToLogin}
                </button>
              </div>
            </div>
          )}

          {/* Section RGPD am√©lior√©e */}
          <div className="mt-6 pt-6 border-t border-gray-200">
            <div className="flex items-start space-x-3 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <div className="flex-shrink-0 mt-0.5">
                <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-blue-800 leading-relaxed">
                  <span className="font-medium">D√©claration de conformit√© :</span>{' '}
                  {t.gdprNotice}{' '}
                  <Link 
                    href="/terms" 
                    className="text-blue-700 hover:text-blue-900 underline font-medium transition-colors"
                    target="_blank"
                  >
                    {t.terms}
                  </Link>{' '}
                  et notre{' '}
                  <Link 
                    href="/privacy" 
                    className="text-blue-700 hover:text-blue-900 underline font-medium transition-colors"
                    target="_blank"
                  >
                    {t.privacy}
                  </Link>
                  .
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Section d'aide */}
      <div className="mt-8 text-center">
        <p className="text-xs text-gray-500">
          {t.needHelp}{' '}
          <button
            type="button"
            onClick={() => window.open('mailto:support@intelia.com', '_blank')}
            className="text-blue-600 hover:underline font-medium"
          >
            {t.contactSupport}
          </button>
        </p>
      </div>
    </div>
  )
}

// üîß 2. Export principal avec Suspense
export default function Page() {
  console.log('üìÑ [Page] Composant Page principal appel√©')
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center">
        <div className="text-center">
          <img 
            src="/images/favicon.png" 
            alt="Intelia Logo" 
            className="w-16 h-16 mx-auto mb-4"
          />
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement...</p>
        </div>
      </div>
    }>
      <PageContent />
    </Suspense>
  )
}