// app/auth/callback/route.ts - ROUTE DE CALLBACK SUPABASE CORRIG√âE

import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse, type NextRequest } from 'next/server'

/**
 * ‚úÖ ROUTE DE CALLBACK SUPABASE CORRIG√âE
 * Objectif: √âviter les redirections avec param√®tres ind√©sirables
 * R√©sultat: Redirection propre vers https://expert.intelia.com/
 */
export async function GET(request: NextRequest) {
  console.log('üîó [Auth Callback] Traitement callback authentification')
  
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')
  const error = requestUrl.searchParams.get('error')
  const errorDescription = requestUrl.searchParams.get('error_description')
  
  console.log('üìç [Auth Callback] Param√®tres re√ßus:', {
    code: !!code,
    error: error,
    errorDescription: errorDescription,
    origin: requestUrl.origin,
    pathname: requestUrl.pathname
  })
  
  // ‚úÖ GESTION D'ERREUR D'AUTHENTIFICATION
  if (error) {
    console.error('‚ùå [Auth Callback] Erreur authentification:', error, errorDescription)
    
    // ‚úÖ Redirection vers l'accueil SANS param√®tres probl√©matiques
    const homeUrl = new URL(requestUrl.origin)
    console.log('üè† [Auth Callback] Redirection erreur vers:', homeUrl.toString())
    
    return NextResponse.redirect(homeUrl)
  }
  
  // ‚úÖ TRAITEMENT DU CODE D'AUTHENTIFICATION
  if (code) {
    console.log('üîê [Auth Callback] Code d\'authentification re√ßu, √©change en cours...')
    
    try {
      const supabase = createRouteHandlerClient({ cookies })
      
      // √âchanger le code contre une session
      const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code)
      
      if (exchangeError) {
        console.error('‚ùå [Auth Callback] Erreur √©change code:', exchangeError)
        
        // ‚úÖ M√™me en cas d'erreur, redirection propre
        const homeUrl = new URL(requestUrl.origin)
        console.log('üè† [Auth Callback] Redirection apr√®s erreur √©change:', homeUrl.toString())
        
        return NextResponse.redirect(homeUrl)
      }
      
      if (data?.session?.user) {
        console.log('‚úÖ [Auth Callback] Session cr√©√©e avec succ√®s pour:', data.session.user.email)
        
        // ‚úÖ REDIRECTION PROPRE VERS L'ACCUEIL (SANS PARAM√àTRES)
        const homeUrl = new URL(requestUrl.origin)
        console.log('üè† [Auth Callback] Redirection succ√®s vers:', homeUrl.toString())
        
        return NextResponse.redirect(homeUrl)
      } else {
        console.warn('‚ö†Ô∏è [Auth Callback] Session cr√©√©e mais pas d\'utilisateur')
        
        const homeUrl = new URL(requestUrl.origin)
        return NextResponse.redirect(homeUrl)
      }
      
    } catch (error) {
      console.error('‚ùå [Auth Callback] Erreur critique √©change:', error)
      
      const homeUrl = new URL(requestUrl.origin)
      return NextResponse.redirect(homeUrl)
    }
  }
  
  // ‚úÖ PAS DE CODE - Redirection vers l'accueil
  console.log('‚ÑπÔ∏è [Auth Callback] Pas de code, redirection vers accueil')
  const homeUrl = new URL(requestUrl.origin)
  
  return NextResponse.redirect(homeUrl)
}