import React, { useState, useEffect } from 'react'
import { useTranslation } from '../hooks/useTranslation'
import { useConversationGroups, useConversationActions, useCurrentConversation } from '../hooks/useChatStore'
import { useAuthStore } from '../hooks/useAuthStore'
import { EllipsisVerticalIcon, TrashIcon, RefreshIcon, PlusIcon, ClockIcon, MessageCircleIcon } from '../utils/icons'
import { Conversation, ConversationGroup } from '../types'

// ==================== MENU HISTORIQUE CONVERSATIONS STYLE CLAUDE.AI ====================
export const HistoryMenu = () => {
  const { t } = useTranslation()
  const [isOpen, setIsOpen] = useState(false)
  const { user } = useAuthStore()
  
  // Hooks pour conversations
  const { conversationGroups, isLoadingHistory, loadConversations } = useConversationGroups()
  const { deleteConversation, clearAllConversations, refreshConversations, createNewConversation } = useConversationActions()
  const { currentConversation, setCurrentConversation, loadConversation } = useCurrentConversation()

  const handleToggle = async () => {
    if (!isOpen && user) {
      console.log('📂 [HistoryMenu] Ouverture menu - chargement conversations pour:', user.email || user.id)
	  await loadConversations(user.email || user.id)
    }
    setIsOpen(!isOpen)
  }

  const handleRefresh = async (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    if (!user) return
    
    console.log('🔄 [HistoryMenu] Rechargement manuel des conversations')
    await refreshConversations(user.email || user.id)
  }

  const handleClearAll = async (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    if (!user) {
      console.error('❌ [HistoryMenu] Pas d\'utilisateur pour la suppression')
      return
    }
    
    try {
      console.log('🗑️ [HistoryMenu] Début suppression toutes conversations')
      
      const confirmed = window.confirm('Êtes-vous sûr de vouloir supprimer toutes les conversations ? Cette action est irréversible.')
      
      if (!confirmed) {
        console.log('❌ [HistoryMenu] Suppression annulée par utilisateur')
        return
      }
      
      await clearAllConversations(user.email || user.id)
      console.log('✅ [HistoryMenu] Toutes conversations supprimées')
      
      setIsOpen(false)
      
    } catch (error) {
      console.error('❌ [HistoryMenu] Erreur suppression conversations:', error)
      alert('Erreur lors de la suppression des conversations')
    }
  }

  const handleDeleteSingle = async (conversationId: string, e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    try {
      console.log('🗑️ [HistoryMenu] Suppression conversation:', conversationId)
      await deleteConversation(conversationId)
      console.log('✅ [HistoryMenu] Conversation supprimée:', conversationId)
    } catch (error) {
      console.error('❌ [HistoryMenu] Erreur suppression conversation:', error)
      alert('Erreur lors de la suppression de la conversation')
    }
  }

  const handleConversationClick = async (conversation: Conversation, e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    try {
      console.log('📖 [HistoryMenu] Clic sur conversation:', conversation.id)
      
      // ✅ CORRECTION: Charger la conversation complète avec getConversationWithMessages
      await loadConversation(conversation.id)
      
      // Fermer le menu
      setIsOpen(false)
      
      console.log('✅ [HistoryMenu] Conversation ouverte:', conversation.id)
      
    } catch (error) {
      console.error('❌ [HistoryMenu] Erreur ouverture conversation:', error)
      alert('Erreur lors de l\'ouverture de la conversation')
    }
  }

  const handleNewConversation = (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    console.log('✨ [HistoryMenu] Nouvelle conversation')
    createNewConversation()
    setIsOpen(false)
  }

  // Compter le nombre total de conversations
  const totalConversations = conversationGroups.reduce((total, group) => total + group.conversations.length, 0)

  return (
    <div className="relative">
      <button
        onClick={handleToggle}
        className="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors flex items-center space-x-2"
        title={t('nav.history')}
      >
        <EllipsisVerticalIcon className="w-5 h-5" />
        {totalConversations > 0 && (
          <span className="text-xs bg-blue-100 text-blue-600 px-2 py-0.5 rounded-full">
            {totalConversations}
          </span>
        )}
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          
          {/* ✅ NOUVEAU: Fenêtre plus grande pour afficher plusieurs conversations */}
          <div className="absolute left-0 top-full mt-2 w-96 bg-white rounded-lg shadow-xl border border-gray-200 z-50 max-h-[70vh] overflow-hidden flex flex-col">
            
            {/* Header avec actions */}
            <div className="p-4 border-b border-gray-100 bg-gray-50">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <MessageCircleIcon className="w-5 h-5 text-gray-600" />
                  <h3 className="font-semibold text-gray-900">Conversations</h3>
                  {isLoadingHistory && (
                    <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                  )}
                </div>
                
                <div className="flex items-center space-x-2">
                  <button
                    onClick={handleRefresh}
                    className="p-1.5 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors"
                    title="Actualiser"
                    disabled={isLoadingHistory}
                  >
                    <RefreshIcon />
                  </button>
                  
                  <button
                    onClick={handleNewConversation}
                    className="p-1.5 text-gray-400 hover:text-green-600 hover:bg-green-50 rounded transition-colors"
                    title="Nouvelle conversation"
                  >
                    <PlusIcon className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Bouton supprimer tout */}
              {totalConversations > 0 && (
                <button
                  onClick={handleClearAll}
                  className="w-full text-red-600 hover:text-red-700 text-sm font-medium hover:bg-red-50 px-3 py-2 rounded transition-colors flex items-center justify-center space-x-2"
                  title="Supprimer toutes les conversations"
                  disabled={isLoadingHistory}
                >
                  <TrashIcon className="w-4 h-4" />
                  <span>Supprimer tout ({totalConversations})</span>
                </button>
              )}
            </div>
            
            {/* Liste des conversations groupées */}
            <div className="flex-1 overflow-y-auto">
              {isLoadingHistory ? (
                <div className="p-6 text-center text-gray-500">
                  <div className="flex items-center justify-center space-x-3 mb-2">
                    <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                    <span>Chargement des conversations...</span>
                  </div>
                  <p className="text-xs text-gray-400">Récupération de votre historique</p>
                </div>
              ) : conversationGroups.length === 0 ? (
                <div className="p-6 text-center text-gray-500">
                  <div className="mb-3">
                    <MessageCircleIcon className="w-12 h-12 text-gray-300 mx-auto mb-2" />
                  </div>
                  <div className="text-sm font-medium text-gray-600 mb-1">Aucune conversation</div>
                  <div className="text-xs text-gray-400 mb-4">Commencez par poser une question</div>
                  
                  <button
                    onClick={handleNewConversation}
                    className="inline-flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    <PlusIcon className="w-4 h-4" />
                    <span>Nouvelle conversation</span>
                  </button>
                  
                  {user && (
                    <button
                      onClick={handleRefresh}
                      className="ml-2 text-blue-600 hover:text-blue-700 text-xs underline"
                      disabled={isLoadingHistory}
                    >
                      Actualiser
                    </button>
                  )}
                </div>
              ) : (
                // ✅ NOUVEAU: Affichage groupé par date comme Claude.ai
                conversationGroups.map((group: ConversationGroup, groupIndex: number) => (
                  <div key={groupIndex} className="border-b border-gray-100 last:border-b-0">
                    
                    {/* En-tête de groupe */}
                    <div className="px-4 py-3 bg-gray-50 border-b border-gray-100">
                      <div className="flex items-center space-x-2">
                        <ClockIcon className="w-4 h-4 text-gray-400" />
                        <span className="text-sm font-medium text-gray-700">{group.title}</span>
                        <span className="text-xs text-gray-400">({group.conversations.length})</span>
                      </div>
                    </div>
                    
                    {/* Conversations du groupe */}
                    <div className="divide-y divide-gray-50">
                      {group.conversations.map((conv: Conversation) => (
                        <div 
                          key={conv.id} 
                          className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors group ${
                            currentConversation?.id === conv.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                          }`}
                          onClick={(e) => handleConversationClick(conv, e)}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1 min-w-0 pr-3">
                              
                              {/* Titre de la conversation */}
                              <h4 className="text-sm font-medium text-gray-900 truncate mb-1">
                                {conv.title}
                              </h4>
                              
                              {/* Aperçu de la conversation */}
                              <p className="text-xs text-gray-600 mb-2 line-clamp-2 leading-relaxed">
                                {conv.preview}
                              </p>
                              
                              {/* Métadonnées */}
                              <div className="flex items-center space-x-3 text-xs text-gray-400">
                                <span>
                                  {new Date(conv.updated_at).toLocaleDateString('fr-FR', { 
                                    day: 'numeric', 
                                    month: 'short', 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                  })}
                                </span>
                                
                                <span className="flex items-center space-x-1">
                                  <MessageCircleIcon className="w-3 h-3" />
                                  <span>{conv.message_count} messages</span>
                                </span>
                                
                                {conv.language && (
                                  <span className="uppercase bg-gray-200 px-1.5 py-0.5 rounded text-xs">
                                    {conv.language}
                                  </span>
                                )}
                              </div>
                              
                              {/* Feedback si présent */}
                              {conv.feedback && (
                                <div className="mt-2 text-xs">
                                  {conv.feedback === 1 ? (
                                    <span className="text-green-600 bg-green-50 px-2 py-1 rounded">👍 Apprécié</span>
                                  ) : (
                                    <span className="text-red-600 bg-red-50 px-2 py-1 rounded">👎 Pas utile</span>
                                  )}
                                </div>
                              )}
                            </div>
                            
                            {/* Bouton supprimer */}
                            <button
                              onClick={(e) => handleDeleteSingle(conv.id, e)}
                              className="ml-2 p-1.5 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded transition-colors opacity-0 group-hover:opacity-100"
                              title="Supprimer cette conversation"
                              disabled={isLoadingHistory}
                            >
                              <TrashIcon className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Footer avec statistiques */}
            {totalConversations > 0 && (
              <div className="p-3 border-t border-gray-100 bg-gray-50">
                <div className="flex items-center justify-between text-xs text-gray-500">
                  <span>
                    {totalConversations} conversation{totalConversations > 1 ? 's' : ''} • 
                    <span className="ml-1">
                      {conversationGroups.length} groupe{conversationGroups.length > 1 ? 's' : ''}
                    </span>
                  </span>
                  
                  {conversationGroups.length > 0 && (
                    <span>
                      Dernière : {new Date(
                        Math.max(
                          ...conversationGroups
                            .flatMap(g => g.conversations)
                            .map(c => new Date(c.updated_at).getTime())
                        )
                      ).toLocaleDateString('fr-FR')}
                    </span>
                  )}
                </div>
                
                {/* Indicateur conversation courante */}
                {currentConversation && (
                  <div className="mt-2 text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                    📖 Conversation active : {currentConversation.title}
                  </div>
                )}
              </div>
            )}
          </div>
        </>
      )}
    </div>
  )
}