// components/ZohoSalesIQ.tsx - VERSION AVEC BOUTON FLOTTANT UNIQUEMENT

import { useEffect, useRef, useCallback } from 'react'

interface ZohoSalesIQProps {
  user: any
  language: string
}

export const ZohoSalesIQ: React.FC<ZohoSalesIQProps> = ({ user, language }) => {
  const isInitializedRef = useRef(false)
  const sessionLanguageRef = useRef<string | null>(null)
  const widgetLoadedRef = useRef(false)
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  const clearRetryTimeout = useCallback(() => {
    if (retryTimeoutRef.current) {
      clearTimeout(retryTimeoutRef.current)
      retryTimeoutRef.current = null
    }
  }, [])

  const ensureFloatButtonVisible = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] V√©rification visibilit√© bouton flottant')
    
    const floatButton = document.querySelector('#zsiq_float') as HTMLElement
    if (floatButton && floatButton.classList.contains('zsiq-hide')) {
      console.log('üìå [ZohoSalesIQ] Retrait classe zsiq-hide pour rendre visible')
      floatButton.classList.remove('zsiq-hide')
      console.log('‚úÖ [ZohoSalesIQ] Bouton flottant maintenant visible')
    }
  }, [])

  // ‚úÖ NOUVEAU: Masquer automatiquement la fen√™tre de chat si elle s'ouvre
  const hideZohoChatWindow = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] V√©rification et masquage fen√™tre chat si ouverte')
    
    // Masquer la fen√™tre principale de chat si elle est ouverte
    const chatWindow = document.querySelector('#zsiq_agelif, .zsiq_theme1, .siq-widgetwindow') as HTMLElement
    if (chatWindow && !chatWindow.classList.contains('zsiq-hide')) {
      console.log('üìå [ZohoSalesIQ] Masquage fen√™tre de chat automatiquement ouverte')
      
      // Tenter de fermer via l'API Zoho
      if (window.$zoho?.salesiq?.floatwindow) {
        try {
          window.$zoho.salesiq.floatwindow.visible('hide')
          console.log('‚úÖ [ZohoSalesIQ] Fen√™tre ferm√©e via API Zoho')
        } catch (error) {
          console.warn('‚ö†Ô∏è [ZohoSalesIQ] Impossible de fermer via API:', error)
        }
      }
      
      // Backup: masquer via CSS
      chatWindow.classList.add('zsiq-hide')
      chatWindow.style.display = 'none'
      console.log('‚úÖ [ZohoSalesIQ] Fen√™tre masqu√©e via CSS')
    }
    
    // S'assurer que le bouton flottant reste visible
    ensureFloatButtonVisible()
  }, [ensureFloatButtonVisible])

  // ‚úÖ NOUVEAU: Fix accessibilit√© Microsoft Edge
  const fixZohoAccessibility = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] Application fixes accessibilit√© Microsoft Edge')
    
    // ‚úÖ FIX 1: Interactive controls must not be nested
    const floatButton = document.querySelector('#zsiq_float') as HTMLElement
    if (floatButton) {
      // Supprimer les attributs role imbriqu√©s probl√©matiques
      const nestedControls = floatButton.querySelectorAll('[role="button"]')
      nestedControls.forEach((control, index) => {
        if (index > 0) { // Garder le premier, supprimer les autres
          control.removeAttribute('role')
          control.removeAttribute('tabindex')
          console.log('‚úÖ [ZohoSalesIQ] Contr√¥le imbriqu√© corrig√©')
        }
      })
      
      // S'assurer d'un seul point d'interaction
      if (!floatButton.getAttribute('aria-label')) {
        floatButton.setAttribute('aria-label', 'Ouvrir le support chat')
        floatButton.setAttribute('title', 'Ouvrir le support chat')
      }
      
      // Supprimer les √©l√©ments interactifs redondants
      const redundantButtons = floatButton.querySelectorAll('div[onclick], span[onclick]')
      redundantButtons.forEach(btn => {
        btn.removeAttribute('onclick')
        btn.removeAttribute('role')
        btn.removeAttribute('tabindex')
      })
    }

    // ‚úÖ FIX 2: ARIA commands must have accessible name
    const interactiveElements = document.querySelectorAll('#zsiq_float [role="button"], .siqico-close, [class*="zsiq"][onclick]')
    interactiveElements.forEach(element => {
      if (!element.getAttribute('aria-label') && !element.getAttribute('aria-labelledby')) {
        const className = element.className
        let label = '√âl√©ment interactif du chat'
        
        if (className.includes('close')) {
          label = 'Fermer le chat'
        } else if (className.includes('minimize')) {
          label = 'R√©duire le chat'
        } else if (className.includes('maximize')) {
          label = 'Agrandir le chat'
        }
        
        element.setAttribute('aria-label', label)
        element.setAttribute('title', label)
        console.log('‚úÖ [ZohoSalesIQ] aria-label ajout√©:', label)
      }
    })

    // ‚úÖ FIX 3: Supprimer les tabindex n√©gatifs qui causent des probl√®mes
    const negativeTabIndex = document.querySelectorAll('[tabindex="-1"]')
    negativeTabIndex.forEach(element => {
      if (element.closest('#zsiq_float')) {
        element.removeAttribute('tabindex')
      }
    })
  }, [])

  const initializeZohoObject = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] Initialisation objet $zoho')
    
    if (!document.querySelector('#zoho-init-script')) {
      const initScript = document.createElement('script')
      initScript.id = 'zoho-init-script'
      initScript.innerHTML = `
        window.$zoho = window.$zoho || {};
        $zoho.salesiq = $zoho.salesiq || {ready: function(){}};
        console.log('‚úÖ [ZohoSalesIQ] Objet $zoho initialis√©');
      `
      document.head.appendChild(initScript)
    }
  }, [])

  const configureWidget = useCallback((lang: string) => {
    console.log('üîß [ZohoSalesIQ] Configuration du widget pour langue:', lang)
    
    let attempts = 0
    const maxAttempts = 10
    const checkInterval = 1000
    
    const configureAttempt = () => {
      attempts++
      console.log(`üîß [ZohoSalesIQ] Tentative de configuration ${attempts}/${maxAttempts}`)
      
      if (window.$zoho && 
          window.$zoho.salesiq && 
          typeof window.$zoho.salesiq.visitor?.info === 'function' &&
          typeof window.$zoho.salesiq.floatwindow?.visible === 'function') {
        
        try {
          console.log('‚úÖ [ZohoSalesIQ] Objet Zoho complet disponible, configuration...')
          
          // Configuration utilisateur
          if (user?.email) {
            const visitorInfo = {
              'Email': user.email,
              'Name': user.name || user.email.split('@')[0],
              'App Language': lang,
              'Widget Language': lang,
              'User ID': user.id || 'unknown'
            }
            
            window.$zoho.salesiq.visitor.info(visitorInfo)
            console.log('üë§ [ZohoSalesIQ] Info utilisateur configur√©e avec langue:', lang)
          }
          
          // ‚úÖ MODIFICATION PRINCIPALE: Ne pas auto-ouvrir le widget
          console.log('üëÅÔ∏è [ZohoSalesIQ] Widget configur√© - BOUTON FLOTTANT UNIQUEMENT')
          
          // ‚úÖ S'assurer que seul le bouton flottant est visible
          setTimeout(() => {
            ensureFloatButtonVisible()
            hideZohoChatWindow() // ‚úÖ NOUVEAU: Masquer la fen√™tre si elle s'ouvre
            fixZohoAccessibility()
          }, 1000)
          
          // ‚úÖ V√âRIFICATION R√âP√âT√âE pour s'assurer que la fen√™tre reste ferm√©e
          setTimeout(() => {
            ensureFloatButtonVisible()
            hideZohoChatWindow() // ‚úÖ NOUVEAU: Masquer √† nouveau
            fixZohoAccessibility()
          }, 3000)
          
          // ‚úÖ V√âRIFICATION FINALE
          setTimeout(() => {
            ensureFloatButtonVisible()
            hideZohoChatWindow() // ‚úÖ NOUVEAU: Masquer une derni√®re fois
            fixZohoAccessibility()
          }, 8000)
          
          console.log('‚úÖ [ZohoSalesIQ] Configuration termin√©e - Bouton flottant uniquement')
          return
          
        } catch (error) {
          console.error('‚ùå [ZohoSalesIQ] Erreur configuration:', error)
        }
      } else if (attempts < maxAttempts) {
        console.log('‚è≥ [ZohoSalesIQ] Widget pas encore pr√™t, retry...')
        retryTimeoutRef.current = setTimeout(configureAttempt, checkInterval)
      } else {
        console.error('‚ùå [ZohoSalesIQ] √âchec configuration apr√®s', maxAttempts, 'tentatives')
      }
    }
    
    configureAttempt()
  }, [user, ensureFloatButtonVisible, hideZohoChatWindow, fixZohoAccessibility])

  const loadZohoWithLanguage = useCallback((lang: string) => {
    console.log('üöÄ [ZohoSalesIQ] Chargement widget avec langue de session:', lang)
    
    if (!user?.email) {
      console.warn('‚ö†Ô∏è [ZohoSalesIQ] Pas d\'utilisateur, abandon')
      return
    }

    // ‚úÖ S√âCURIS√â: Variables depuis environnement
    const widgetBaseUrl = process.env.NEXT_PUBLIC_ZOHO_WIDGET_BASE_URL
    const widgetId = process.env.NEXT_PUBLIC_ZOHO_WIDGET_ID
    
    if (!widgetBaseUrl || !widgetId) {
      console.error('‚ùå [ZohoSalesIQ] Variables Zoho manquantes:', {
        baseUrl: !!widgetBaseUrl,
        widgetId: !!widgetId
      })
      return
    }

    try {
      // Initialiser l'objet $zoho AVANT le script
      initializeZohoObject()
      
      // Cr√©er le script principal
      const script = document.createElement('script')
      script.id = 'zsiqscript'
      script.async = true
      script.defer = true
      
      // ‚úÖ S√âCURIS√â: URL construite depuis variables env
      script.src = `${widgetBaseUrl}?wc=${widgetId}&locale=${lang}`
      
      console.log('üì° [ZohoSalesIQ] Chargement script principal depuis env vars')
      
      let loadTimeout: NodeJS.Timeout
      
      script.onload = () => {
        console.log('‚úÖ [ZohoSalesIQ] Script principal charg√© avec succ√®s')
        clearTimeout(loadTimeout)
        widgetLoadedRef.current = true
        
        // Attendre que le widget soit compl√®tement initialis√©
        setTimeout(() => {
          configureWidget(lang)
        }, 2000)
      }
      
      script.onerror = (error) => {
        console.error('‚ùå [ZohoSalesIQ] Erreur chargement script principal:', error)
        clearTimeout(loadTimeout)
      }
      
      // Timeout de s√©curit√©
      loadTimeout = setTimeout(() => {
        console.error('‚ùå [ZohoSalesIQ] Timeout chargement script')
        script.remove()
      }, 15000)
      
      document.head.appendChild(script)
      
    } catch (error) {
      console.error('‚ùå [ZohoSalesIQ] Erreur cr√©ation script:', error)
    }
  }, [user, initializeZohoObject, configureWidget])

  // ‚úÖ NOUVEAU: Observer DOM pour masquer automatiquement la fen√™tre de chat
  useEffect(() => {
    if (!widgetLoadedRef.current) return

    const observer = new MutationObserver((mutations) => {
      let shouldCheck = false
      
      mutations.forEach((mutation) => {
        // V√©rifier si des √©l√©ments Zoho ont √©t√© ajout√©s/modifi√©s
        if (mutation.type === 'childList') {
          const hasZohoElements = Array.from(mutation.addedNodes).some(node => 
            node instanceof Element && (
              node.id?.includes('zsiq') || 
              node.className?.includes('zsiq') ||
              node.className?.includes('siq-')
            )
          )
          if (hasZohoElements) shouldCheck = true
        }
        
        // V√©rifier si des classes/styles ont chang√© sur des √©l√©ments Zoho
        if (mutation.type === 'attributes' && mutation.target instanceof Element) {
          if (mutation.target.id?.includes('zsiq') || 
              mutation.target.className?.includes('zsiq') ||
              mutation.target.className?.includes('siq-')) {
            shouldCheck = true
          }
        }
      })
      
      if (shouldCheck) {
        setTimeout(() => {
          hideZohoChatWindow()
          fixZohoAccessibility()
        }, 500)
      }
    })

    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['class', 'style', 'id']
    })

    return () => observer.disconnect()
  }, [hideZohoChatWindow, fixZohoAccessibility])

  // ‚úÖ EFFET PRINCIPAL: Langue fixe pour la session
  useEffect(() => {
    console.log('üåê [ZohoSalesIQ] Effet d√©clench√© - Langue courante:', language, 'User:', !!user?.email)
    
    // ‚úÖ CAPTURE de la langue √† la premi√®re initialisation
    if (!isInitializedRef.current && user?.email) {
      console.log('üéØ [ZohoSalesIQ] PREMI√àRE INITIALISATION - Fixation langue session √†:', language)
      
      isInitializedRef.current = true
      sessionLanguageRef.current = language
      
      console.log('üìå [ZohoSalesIQ] Langue de session fix√©e:', sessionLanguageRef.current)
      
      // ‚úÖ CORRECTION: Stocker dans window pour debug
      window.ZOHO_SESSION_LANGUAGE = language
      console.log('üåç [ZohoSalesIQ] Variable globale stock√©e:', window.ZOHO_SESSION_LANGUAGE)
      
      loadZohoWithLanguage(language)
      
      return
    }
    
    // ‚úÖ IGNORER tous les changements de langue ult√©rieurs
    if (isInitializedRef.current && sessionLanguageRef.current) {
      if (language !== sessionLanguageRef.current) {
        console.log('üö´ [ZohoSalesIQ] CHANGEMENT DE LANGUE IGNOR√â:', sessionLanguageRef.current, '‚Üí', language)
        console.log('üìå [ZohoSalesIQ] Widget reste en:', sessionLanguageRef.current)
        console.log('üí° [ZohoSalesIQ] Nouvelle langue sera effective √† la prochaine session')
      } else {
        console.log('üëç [ZohoSalesIQ] Langue inchang√©e, widget stable')
      }
      
      return
    }
    
  }, [language, user?.email, loadZohoWithLanguage])

  // Nettoyage √† la destruction du composant
  useEffect(() => {
    return () => {
      console.log('üßπ [ZohoSalesIQ] Destruction composant - nettoyage session')
      clearRetryTimeout()
      
      // R√©initialiser les refs pour la prochaine session
      isInitializedRef.current = false
      sessionLanguageRef.current = null
      widgetLoadedRef.current = false
      
      if (window.ZOHO_SESSION_LANGUAGE) {
        delete window.ZOHO_SESSION_LANGUAGE
      }
    }
  }, [clearRetryTimeout])

  return null
}

// Types TypeScript
declare global {
  interface Window {
    $zoho?: {
      salesiq?: {
        ready?: () => void
        visitor?: {
          info: (data: any) => void
        }
        floatwindow?: {
          visible: (action: 'show' | 'hide') => void
        }
      }
    }
    ZOHO_SESSION_LANGUAGE?: string
  }
}