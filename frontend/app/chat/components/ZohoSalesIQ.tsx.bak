// components/ZohoSalesIQ.tsx - VERSION STABLE: Langue fixe pour la session + Corrections Accessibilit√©

import { useEffect, useRef, useCallback } from 'react'

interface ZohoSalesIQProps {
  user: any
  language: string
}

export const ZohoSalesIQ: React.FC<ZohoSalesIQProps> = ({ user, language }) => {
  const isInitializedRef = useRef(false)
  const sessionLanguageRef = useRef<string | null>(null)
  const widgetLoadedRef = useRef(false)
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  const clearRetryTimeout = useCallback(() => {
    if (retryTimeoutRef.current) {
      clearTimeout(retryTimeoutRef.current)
      retryTimeoutRef.current = null
    }
  }, [])

  const ensureFloatButtonVisible = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] V√©rification visibilit√© bouton flottant')
    
    const floatButton = document.querySelector('#zsiq_float')
    if (floatButton && floatButton.classList.contains('zsiq-hide')) {
      console.log('üìå [ZohoSalesIQ] Retrait classe zsiq-hide pour rendre visible')
      floatButton.classList.remove('zsiq-hide')
      console.log('‚úÖ [ZohoSalesIQ] Bouton flottant maintenant visible')
    }
  }, [])

  // ‚úÖ NOUVELLE FONCTION: Fix accessibilit√© widget Zoho
  const fixZohoAccessibility = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] Application fixes accessibilit√©')
    
    // ‚úÖ FIX #2: ARIA commands must have accessible name
    const closeButton = document.querySelector('#hide-widget.siqico-close')
    if (closeButton && !closeButton.getAttribute('aria-label')) {
      closeButton.setAttribute('aria-label', 'Fermer le widget de discussion')
      closeButton.setAttribute('title', 'Fermer le widget de discussion')
      console.log('‚úÖ [ZohoSalesIQ] aria-label ajout√© au bouton fermer')
    }

    // ‚úÖ FIX #3: Interactive controls must not be nested
    const floatButton = document.querySelector('#zsiq_float')
    if (floatButton) {
      // V√©rifier s'il y a des √©l√©ments imbriqu√©s avec tabindex n√©gatif
      const nestedElements = floatButton.querySelectorAll('[tabindex="-1"]')
      nestedElements.forEach((element) => {
        // Retirer tabindex n√©gatif des √©l√©ments imbriqu√©s
        element.removeAttribute('tabindex')
        console.log('‚úÖ [ZohoSalesIQ] tabindex n√©gatif retir√© d\'√©l√©ment imbriqu√©')
      })

      // S'assurer que le bouton flottant a les bons attributs ARIA
      if (!floatButton.getAttribute('aria-label')) {
        floatButton.setAttribute('aria-label', 'Ouvrir le widget de discussion')
        floatButton.setAttribute('title', 'Ouvrir le widget de discussion')
        console.log('‚úÖ [ZohoSalesIQ] aria-label ajout√© au bouton flottant')
      }
    }

    // Rechercher d'autres √©l√©ments Zoho qui pourraient avoir besoin de labels
    const zohoElements = document.querySelectorAll('[class*="zsiq"], [id*="zsiq"]')
    zohoElements.forEach((element) => {
      if (element.getAttribute('role') === 'button' && !element.getAttribute('aria-label')) {
        element.setAttribute('aria-label', 'Widget de discussion')
        console.log('‚úÖ [ZohoSalesIQ] aria-label ajout√© √† √©l√©ment Zoho')
      }
    })
  }, [])

  const initializeZohoObject = useCallback(() => {
    console.log('üîß [ZohoSalesIQ] Initialisation objet $zoho')
    
    if (!document.querySelector('#zoho-init-script')) {
      const initScript = document.createElement('script')
      initScript.id = 'zoho-init-script'
      initScript.innerHTML = `
        window.$zoho = window.$zoho || {};
        $zoho.salesiq = $zoho.salesiq || {ready: function(){}};
        console.log('‚úÖ [ZohoSalesIQ] Objet $zoho initialis√©');
      `
      document.head.appendChild(initScript)
    }
  }, [])

  const configureWidget = useCallback((lang: string) => {
    console.log('üîß [ZohoSalesIQ] Configuration du widget pour langue:', lang)
    
    let attempts = 0
    const maxAttempts = 10
    const checkInterval = 1000
    
    const configureAttempt = () => {
      attempts++
      console.log(`üîß [ZohoSalesIQ] Tentative de configuration ${attempts}/${maxAttempts}`)
      
      if (window.$zoho && 
          window.$zoho.salesiq && 
          typeof window.$zoho.salesiq.visitor?.info === 'function' &&
          typeof window.$zoho.salesiq.floatwindow?.visible === 'function') {
        
        try {
          console.log('‚úÖ [ZohoSalesIQ] Objet Zoho complet disponible, configuration...')
          
          // Configuration utilisateur
          if (user?.email) {
            const visitorInfo = {
              'Email': user.email,
              'Name': user.name || user.email.split('@')[0],
              'App Language': lang,
              'Widget Language': lang,
              'User ID': user.id || 'unknown'
            }
            
            window.$zoho.salesiq.visitor.info(visitorInfo)
            console.log('üë§ [ZohoSalesIQ] Info utilisateur configur√©e avec langue:', lang)
          }
          
          // Afficher le widget
          setTimeout(() => {
            try {
              if (window.$zoho?.salesiq?.floatwindow) {
                window.$zoho.salesiq.floatwindow.visible('show')
                console.log('üëÅÔ∏è [ZohoSalesIQ] Widget affich√©')
                
                // ‚úÖ CORRECTION: S'assurer que le bouton flottant reste visible
                setTimeout(() => {
                  ensureFloatButtonVisible()
                  // ‚úÖ NOUVEAU: Appliquer les fixes d'accessibilit√©
                  fixZohoAccessibility()
                }, 1000)
                
                // ‚úÖ CORRECTION: V√©rification suppl√©mentaire apr√®s 5 secondes
                setTimeout(() => {
                  ensureFloatButtonVisible()
                  fixZohoAccessibility() // ‚úÖ NOUVEAU: Fix accessibilit√© r√©p√©t√©
                }, 5000)
              }
            } catch (showError) {
              console.error('‚ùå [ZohoSalesIQ] Erreur affichage:', showError)
            }
          }, 500)
          
          console.log('‚úÖ [ZohoSalesIQ] Configuration termin√©e avec succ√®s')
          return
          
        } catch (error) {
          console.error('‚ùå [ZohoSalesIQ] Erreur configuration:', error)
        }
      } else if (attempts < maxAttempts) {
        console.log('‚è≥ [ZohoSalesIQ] Widget pas encore pr√™t, retry...')
        console.log('üîç [ZohoSalesIQ] √âtat:', {
          zoho: !!window.$zoho,
          salesiq: !!window.$zoho?.salesiq,
          visitor: typeof window.$zoho?.salesiq?.visitor,
          floatwindow: typeof window.$zoho?.salesiq?.floatwindow
        })
        
        retryTimeoutRef.current = setTimeout(configureAttempt, checkInterval)
        
      } else {
        console.error('‚ùå [ZohoSalesIQ] √âchec configuration apr√®s', maxAttempts, 'tentatives')
      }
    }
    
    configureAttempt()
  }, [user, ensureFloatButtonVisible, fixZohoAccessibility])

  const loadZohoWithLanguage = useCallback((lang: string) => {
    console.log('üöÄ [ZohoSalesIQ] Chargement widget avec langue de session:', lang)
    
    if (!user?.email) {
      console.warn('‚ö†Ô∏è [ZohoSalesIQ] Pas d\'utilisateur, abandon')
      return
    }

    try {
      // Initialiser l'objet $zoho AVANT le script
      initializeZohoObject()
      
      // Cr√©er le script principal
      const script = document.createElement('script')
      script.id = 'zsiqscript'
      script.async = true
      script.defer = true
      
      // ‚úÖ CORRECTION: URL avec locale pour forcer la langue
      script.src = `https://salesiq.zohopublic.com/widget?wc=siq31d58179214fbbfbb0a5b5eb16ab9173ba0ee84601e9d7d04840d96541bc7e4f&locale=${lang}`
      
      console.log('üì° [ZohoSalesIQ] Chargement script principal:', script.src)
      
      let loadTimeout: NodeJS.Timeout
      
      script.onload = () => {
        console.log('‚úÖ [ZohoSalesIQ] Script principal charg√© avec succ√®s')
        clearTimeout(loadTimeout)
        widgetLoadedRef.current = true
        
        // Attendre que le widget soit compl√®tement initialis√©
        setTimeout(() => {
          configureWidget(lang)
        }, 2000)
      }
      
      script.onerror = (error) => {
        console.error('‚ùå [ZohoSalesIQ] Erreur chargement script principal:', error)
        clearTimeout(loadTimeout)
      }
      
      // Timeout de s√©curit√©
      loadTimeout = setTimeout(() => {
        console.error('‚ùå [ZohoSalesIQ] Timeout chargement script')
        script.remove()
      }, 15000)
      
      document.head.appendChild(script)
      
    } catch (error) {
      console.error('‚ùå [ZohoSalesIQ] Erreur cr√©ation script:', error)
    }
  }, [user, initializeZohoObject, configureWidget])

  // ‚úÖ EFFET PRINCIPAL: Langue fixe pour la session
  useEffect(() => {
    console.log('üåê [ZohoSalesIQ] Effet d√©clench√© - Langue courante:', language, 'User:', !!user?.email)
    
    // ‚úÖ CAPTURE de la langue √† la premi√®re initialisation
    if (!isInitializedRef.current && user?.email) {
      console.log('üéØ [ZohoSalesIQ] PREMI√àRE INITIALISATION - Fixation langue session √†:', language)
      
      isInitializedRef.current = true
      sessionLanguageRef.current = language
      
      console.log('üìå [ZohoSalesIQ] Langue de session fix√©e:', sessionLanguageRef.current)
      
      // ‚úÖ CORRECTION: Stocker dans window pour debug
      window.ZOHO_SESSION_LANGUAGE = language
      console.log('üåç [ZohoSalesIQ] Variable globale stock√©e:', window.ZOHO_SESSION_LANGUAGE)
      
      loadZohoWithLanguage(language)
      
      return
    }
    
    // ‚úÖ IGNORER tous les changements de langue ult√©rieurs
    if (isInitializedRef.current && sessionLanguageRef.current) {
      if (language !== sessionLanguageRef.current) {
        console.log('üö´ [ZohoSalesIQ] CHANGEMENT DE LANGUE IGNOR√â:', sessionLanguageRef.current, '‚Üí', language)
        console.log('üìå [ZohoSalesIQ] Widget reste en:', sessionLanguageRef.current)
        console.log('üí° [ZohoSalesIQ] Nouvelle langue sera effective √† la prochaine session')
      } else {
        console.log('üëç [ZohoSalesIQ] Langue inchang√©e, widget stable')
      }
      
      return
    }
    
  }, [language, user?.email, loadZohoWithLanguage])

  // ‚úÖ NOUVEAU: Observer les changements DOM pour appliquer les fixes
  useEffect(() => {
    if (!widgetLoadedRef.current) return

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          // Appliquer les fixes quand le DOM change
          setTimeout(() => {
            fixZohoAccessibility()
          }, 500)
        }
      })
    })

    // Observer les changements dans le body pour d√©tecter l'ajout du widget
    observer.observe(document.body, {
      childList: true,
      subtree: true
    })

    return () => {
      observer.disconnect()
    }
  }, [fixZohoAccessibility])

  // Nettoyage √† la destruction du composant
  useEffect(() => {
    return () => {
      console.log('üßπ [ZohoSalesIQ] Destruction composant - nettoyage session')
      clearRetryTimeout()
      
      // R√©initialiser les refs pour la prochaine session
      isInitializedRef.current = false
      sessionLanguageRef.current = null
      widgetLoadedRef.current = false
      
      if (window.ZOHO_SESSION_LANGUAGE) {
        delete window.ZOHO_SESSION_LANGUAGE
      }
    }
  }, [clearRetryTimeout])

  return null
}

// Types TypeScript
declare global {
  interface Window {
    $zoho?: {
      salesiq?: {
        ready?: () => void
        visitor?: {
          info: (data: any) => void
        }
        floatwindow?: {
          visible: (action: 'show' | 'hide') => void
        }
      }
    }
    ZOHO_SESSION_LANGUAGE?: string
  }
}