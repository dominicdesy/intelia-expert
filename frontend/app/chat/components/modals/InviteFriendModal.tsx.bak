import React, { useState, useMemo, useEffect } from 'react'
import { useTranslation } from '../../hooks/useTranslation'
// ‚úÖ CHANGEMENT 1: Utiliser useAuthStore comme dans UserMenuButton
import { useAuthStore } from '@/lib/stores/auth' 
// ‚úÖ CHANGEMENT 2: Utiliser le singleton au lieu de createClientComponentClient
import { getSupabaseClient } from '@/lib/supabase/singleton'

interface InviteFriendModalProps {
  onClose: () => void
}

// ==================== SERVICE D'INVITATION AVEC M√äME AUTH QUE CHAT ====================
const invitationService = {
  async sendInvitation(emails: string[], personalMessage: string, inviterInfo: any) {
    try {
      console.log('üìß [InvitationService] Envoi invitation avec auth Supabase (singleton):', { 
        emails, 
        hasMessage: !!personalMessage,
        inviterEmail: inviterInfo.email 
      })
      
      // ‚úÖ SOLUTION: Utiliser le singleton au lieu de createClientComponentClient
      const supabase = getSupabaseClient()
      
      // R√©cup√©rer la session Supabase comme dans apiService
      const { data, error } = await supabase.auth.getSession()
      if (error) {
        console.error('‚ùå [InvitationService] Erreur session Supabase (singleton):', error)
        throw new Error('Session expir√©e - reconnexion n√©cessaire')
      }
      
      const session = data.session
      if (!session?.access_token) {
        throw new Error('Session expir√©e - reconnexion n√©cessaire')
      }

      console.log('‚úÖ [InvitationService] Token Supabase r√©cup√©r√© (singleton), longueur:', session.access_token.length)
      
	  const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'https://expert-app-cngws.ondigitalocean.app'
 	  const API_VERSION = process.env.NEXT_PUBLIC_API_VERSION || 'v1'
	  const FULL_API_URL = `${API_BASE_URL}/api/${API_VERSION}`
      
      // Headers identiques √† apiService
      const headers = {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': `Bearer ${session.access_token}` // ‚úÖ M√äME TOKEN QUE LE CHAT
      }
      
      const response = await fetch(`${FULL_API_URL}/invitations/send`, {		  
        method: 'POST',
        headers,
        body: JSON.stringify({
          emails,
          personal_message: personalMessage,
          inviter_name: inviterInfo.name,
          inviter_email: inviterInfo.email,
          language: inviterInfo.language || 'fr'
        })
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå [InvitationService] Erreur HTTP (singleton):', response.status, errorText)
        
        if (response.status === 401) {
          // M√™me gestion d'erreur que apiService
          await supabase.auth.signOut()
          window.location.href = '/'
          throw new Error('Session expir√©e. Redirection vers la connexion...')
        }
        
        let errorMessage = 'Erreur lors de l\'envoi des invitations'
        try {
          const errorJson = JSON.parse(errorText)
          errorMessage = errorJson.detail || errorJson.message || errorMessage
        } catch {
          // Si ce n'est pas du JSON, garder le message par d√©faut
        }
        
        throw new Error(errorMessage)
      }

      const result = await response.json()
      console.log('‚úÖ [InvitationService] Invitations envoy√©es (singleton):', result)
      return result
      
    } catch (error) {
      console.error('‚ùå [InvitationService] Erreur envoi (singleton):', error)
      throw error
    }
  }
}

// ==================== MODAL INVITATION AMI CORRIG√âE ====================
export const InviteFriendModal: React.FC<InviteFriendModalProps> = ({ onClose }) => {
  const { t } = useTranslation()
  // ‚úÖ CHANGEMENT 3: Utiliser useAuthStore comme dans UserMenuButton
  const { user } = useAuthStore() 
  const [emails, setEmails] = useState('')
  const [personalMessage, setPersonalMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState<string[]>([])
  const [successMessage, setSuccessMessage] = useState('')

  // CORRECTION: Calcul de currentUser avec useMemo - AVEC LANGUE
  const currentUser = useMemo(() => {
    // Essayer plusieurs sources pour les donn√©es utilisateur
    if (user?.email) {
      return user
    }
    
    // Fallback: essayer de r√©cup√©rer depuis localStorage/sessionStorage
    try {
      const supabaseAuth = localStorage.getItem('supabase.auth.token') || sessionStorage.getItem('supabase.auth.token')
      if (supabaseAuth) {
        const authData = JSON.parse(supabaseAuth)
        if (authData.user?.email) {
          // R√©cup√©rer la langue depuis plusieurs sources
          const userLanguage = 
            authData.user.user_metadata?.language ||
            authData.user.language ||
            localStorage.getItem('intelia_language') ||
            localStorage.getItem('preferred_language') ||
            (navigator.language.startsWith('en') ? 'en' : 
             navigator.language.startsWith('es') ? 'es' : 'fr')

          return {
            email: authData.user.email,
            name: authData.user.user_metadata?.name || authData.user.name || authData.user.email.split('@')[0],
            id: authData.user.id,
            language: userLanguage // AJOUT: propri√©t√© language
          }
        }
      }
    } catch (e) {
      console.warn('Erreur r√©cup√©ration auth depuis storage:', e)
    }
    
    return null
  }, [user])

  // CORRECTION: useEffect utilise currentUser - D√âCLAR√â APR√àS currentUser
  useEffect(() => {
    if (!currentUser?.email) {
      setErrors(['Vous devez √™tre connect√© pour envoyer des invitations'])
    } else {
      setErrors([]) // Clear errors si utilisateur trouv√©
    }
  }, [currentUser])

  // Validation des emails
  const validateEmails = (emailString: string): { valid: string[], invalid: string[] } => {
    const emailList = emailString
      .split(',')
      .map(email => email.trim())
      .filter(email => email.length > 0)
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    const valid: string[] = []
    const invalid: string[] = []
    
    emailList.forEach(email => {
      if (emailRegex.test(email)) {
        valid.push(email)
      } else {
        invalid.push(email)
      }
    })
    
    return { valid, invalid }
  }

  const handleSendInvitations = async () => {
    setErrors([])
    setSuccessMessage('')
    
    // CORRECTION 4: Validation utilisateur connect√© avec currentUser
    if (!currentUser?.email) {
      setErrors(['Vous devez √™tre connect√© pour envoyer des invitations'])
      return
    }

    if (!emails.trim()) {
      setErrors(['Veuillez saisir au moins une adresse email'])
      return
    }

    const { valid, invalid } = validateEmails(emails)
    
    if (invalid.length > 0) {
      setErrors([
        `Adresses email invalides : ${invalid.join(', ')}`,
        'Format attendu : nom@exemple.com'
      ])
      return
    }

    if (valid.length === 0) {
      setErrors(['Aucune adresse email valide trouv√©e'])
      return
    }

    if (valid.length > 10) {
      setErrors(['Maximum 10 invitations √† la fois'])
      return
    }

    setIsLoading(true)
    
    try {
      console.log('üöÄ [InviteFriendModal] D√©but envoi invitations (singleton):', {
        emails: valid,
        userEmail: currentUser.email,
        userName: currentUser.name,
        userLanguage: currentUser.language
      })
      
      // CORRECTION 5: Utiliser currentUser avec langue d√©tect√©e
      const result = await invitationService.sendInvitation(
        valid, 
        personalMessage.trim(), 
        {
          name: currentUser.name || currentUser.email?.split('@')[0] || 'Utilisateur Intelia',
          email: currentUser.email, // CRITIQUE: Email exact de l'utilisateur connect√©
          language: currentUser.language || 'fr' // CORRECTION: Langue de l'utilisateur
        }
      )
      
      setSuccessMessage(
        `‚úÖ ${result.sent_count} invitation${result.sent_count > 1 ? 's' : ''} envoy√©e${result.sent_count > 1 ? 's' : ''} avec succ√®s !`
      )
      
      // Afficher les √©checs s'il y en a
      if (result.failed_emails && result.failed_emails.length > 0) {
        setErrors([
          `Certaines invitations ont √©chou√© : ${result.failed_emails.join(', ')}`
        ])
      }
      
      // R√©initialiser le formulaire apr√®s 3 secondes si tout est OK
      if (result.failed_emails.length === 0) {
        setTimeout(() => {
          setEmails('')
          setPersonalMessage('')
          setSuccessMessage('')
          onClose()
        }, 3000)
      }
      
    } catch (error) {
      console.error('‚ùå [InviteFriendModal] Erreur envoi (singleton):', error)
      
      let errorMessage = 'Erreur lors de l\'envoi des invitations'
      
      if (error instanceof Error) {
        errorMessage = error.message
      }
      
      // Messages d'erreur sp√©cifiques pour debug
      if (errorMessage.includes('403') || errorMessage.includes('Forbidden')) {
        setErrors([
          'Erreur d\'autorisation - V√©rifiez que vous √™tes bien connect√©',
          'Si le probl√®me persiste, d√©connectez-vous et reconnectez-vous'
        ])
      } else if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {
        setErrors([
          'Session expir√©e - Veuillez vous reconnecter',
          'Votre session a expir√©, reconnectez-vous pour continuer'
        ])
      } else {
        setErrors([
          errorMessage,
          'Veuillez r√©essayer ou contacter le support si le probl√®me persiste.'
        ])
      }
    } finally {
      setIsLoading(false)
    }
  }

  const getEmailCount = () => {
    const { valid } = validateEmails(emails)
    return valid.length
  }

  // CORRECTION 6: Affichage conditionnel si pas d'utilisateur
  if (!currentUser?.email) {
    return (
      <div className="space-y-6">
        <div className="text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-red-600" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
            </svg>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            Connexion requise
          </h2>
          <p className="text-sm text-gray-600 mb-4">
            Vous devez √™tre connect√© pour envoyer des invitations
          </p>
          <div className="text-xs text-gray-500 bg-gray-50 p-3 rounded">
            <strong>Debug:</strong><br/>
            user: {user ? JSON.stringify({email: user.email, name: user.name}) : 'null'}<br/>
            localStorage auth: {typeof window !== 'undefined' && localStorage.getItem('supabase.auth.token') ? 'pr√©sent' : 'absent'}
          </div>
        </div>
        
        <div className="flex justify-center">
          <button
            onClick={onClose}
            className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
          >
            Fermer
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header avec ic√¥ne */}
      <div className="text-center">
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-blue-600" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" d="M18 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM3 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 019.374 21c-2.331 0-4.512-.645-6.374-1.766z" />
          </svg>
        </div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">
          Invitez vos coll√®gues √† d√©couvrir Intelia Expert
        </h2>
        <p className="text-sm text-gray-600">
          Invitations envoy√©es par <strong>{currentUser.name || currentUser.email}</strong>
        </p>
      </div>

      {/* Messages de succ√®s */}
      {successMessage && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center">
            <svg className="w-5 h-5 text-green-600 mr-2" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-green-800 font-medium">{successMessage}</span>
          </div>
        </div>
      )}

      {/* Messages d'erreur */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-red-800">
            <p className="font-medium mb-2 flex items-center">
              <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
              </svg>
              Erreur de validation
            </p>
            <ul className="list-disc list-inside space-y-1 text-sm">
              {errors.map((error, index) => (
                <li key={index}>{error}</li>
              ))}
            </ul>
          </div>
        </div>
      )}

      <div className="space-y-6">
        {/* Section Email Addresses */}
        <div>
          <label className="block text-sm font-medium text-gray-900 mb-2">
            Adresses Email
            {getEmailCount() > 0 && (
              <span className="ml-2 text-blue-600 font-normal">
                ({getEmailCount()} destinataire{getEmailCount() > 1 ? 's' : ''})
              </span>
            )}
          </label>
          <textarea
            value={emails}
            onChange={(e) => setEmails(e.target.value)}
            placeholder="nom1@exemple.com, nom2@exemple.com, nom3@exemple.com"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            rows={3}
            disabled={isLoading}
          />
          <p className="text-xs text-gray-500 mt-1">
            üí° S√©parez les adresses par des virgules. Maximum 10 invitations √† la fois.
          </p>
        </div>

        {/* Section Message Personnel */}
        <div>
          <label className="block text-sm font-medium text-gray-900 mb-2">
            Ajouter un message personnel 
            <span className="text-gray-500 font-normal">(optionnel)</span>
          </label>
          <textarea
            value={personalMessage}
            onChange={(e) => setPersonalMessage(e.target.value)}
            placeholder="Expliquez √† vos coll√®gues pourquoi vous les invitez √† d√©couvrir Intelia Expert..."
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            rows={4}
            maxLength={500}
            disabled={isLoading}
          />
          <div className="flex justify-between items-center mt-1">
            <p className="text-xs text-gray-500">
              üí¨ Votre message sera inclus dans l'email d'invitation
            </p>
            <span className="text-xs text-gray-400">
              {personalMessage.length}/500
            </span>
          </div>
        </div>
      </div>

      {/* Boutons d'action */}
      <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
        <button
          onClick={onClose}
          className="px-6 py-2 text-gray-600 hover:text-gray-800 font-medium"
          disabled={isLoading}
        >
          Annuler
        </button>
        <button
          onClick={handleSendInvitations}
          disabled={isLoading || getEmailCount() === 0}
          className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium flex items-center space-x-2"
        >
          {isLoading ? (
            <>
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>Envoi en cours...</span>
            </>
          ) : (
            <>
              <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
              </svg>
              <span>
                Envoyer {getEmailCount() > 0 ? `(${getEmailCount()})` : ''}
              </span>
            </>
          )}
        </button>
      </div>

      {/* Footer avec informations */}
      <div className="text-xs text-gray-500 text-center pt-2 border-t border-gray-100">
        üîí Les invitations sont envoy√©es depuis support@intelia.com avec votre nom comme exp√©diteur.
        <br />
        Vos contacts recevront un lien pour cr√©er leur compte Intelia Expert gratuitement.
      </div>
    </div>
  )
}