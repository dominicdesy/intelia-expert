import { ConversationData, API_CONFIG } from '../types'

// ==================== SERVICE DE LOGGING AVEC COMMENTAIRES FEEDBACK ====================
export class ConversationService {
  private baseUrl = API_CONFIG.LOGGING_BASE_URL
  private loggingEnabled = true

  async saveConversation(data: ConversationData): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìù Logging d√©sactiv√© - conversation non sauvegard√©e:', data.conversation_id)
      return
    }

    try {
      console.log('üíæ Sauvegarde conversation:', data.conversation_id)
      console.log('üì° URL de sauvegarde:', `${this.baseUrl}/logging/conversation`)
      
      const response = await fetch(`${this.baseUrl}/logging/conversation`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          user_id: data.user_id,
          question: data.question,
          response: data.response,
          conversation_id: data.conversation_id,
          confidence_score: data.confidence_score,
          response_time_ms: data.response_time_ms,
          language: data.language || 'fr',
          rag_used: data.rag_used !== undefined ? data.rag_used : true
        })
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Conversation sauvegard√©e:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde conversation:', error)
      // Ne pas bloquer l'UX si le logging √©choue
    }
  }

  async sendFeedback(conversationId: string, feedback: 1 | -1): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìä Logging d√©sactiv√© - feedback non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üìä Envoi feedback:', conversationId, feedback)
      console.log('üì° URL feedback:', `${this.baseUrl}/logging/conversation/${conversationId}/feedback`)
      
      const response = await fetch(`${this.baseUrl}/logging/conversation/${conversationId}/feedback`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ feedback })
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Feedback enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi feedback:', error)
      throw error  // Propager pour afficher erreur √† l'utilisateur
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE POUR ENVOYER COMMENTAIRE FEEDBACK
  async sendFeedbackComment(conversationId: string, comment: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üí¨ Logging d√©sactiv√© - commentaire non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üí¨ Envoi commentaire feedback:', conversationId, comment.substring(0, 50) + '...')
      console.log('üì° URL commentaire:', `${this.baseUrl}/logging/conversation/${conversationId}/comment`)
      
      const response = await fetch(`${this.baseUrl}/logging/conversation/${conversationId}/comment`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ 
          comment: comment,
          timestamp: new Date().toISOString()
        })
      })
      
      if (!response.ok) {
        // Si l'endpoint n'existe pas encore, ne pas faire √©chouer
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint commentaire feedback pas encore impl√©ment√© sur le serveur')
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Commentaire feedback enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi commentaire feedback:', error)
      // Ne pas faire √©chouer si le commentaire ne peut pas √™tre envoy√©
      // Le feedback principal est plus important
    }
  }

  // ‚úÖ M√âTHODE COMBIN√âE POUR FEEDBACK + COMMENTAIRE
  async sendFeedbackWithComment(
    conversationId: string, 
    feedback: 1 | -1, 
    comment?: string
  ): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìäüí¨ Logging d√©sactiv√© - feedback avec commentaire non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üìäüí¨ Envoi feedback avec commentaire:', conversationId, feedback, comment ? 'avec commentaire' : 'sans commentaire')
      console.log('üì° URL feedback combin√©:', `${this.baseUrl}/logging/conversation/${conversationId}/feedback-with-comment`)
      
      const response = await fetch(`${this.baseUrl}/logging/conversation/${conversationId}/feedback-with-comment`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ 
          feedback,
          comment: comment || null,
          timestamp: new Date().toISOString()
        })
      })
      
      if (!response.ok) {
        // Fallback vers les m√©thodes s√©par√©es si l'endpoint combin√© n'existe pas
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint combin√© non disponible, utilisation m√©thodes s√©par√©es')
          await this.sendFeedback(conversationId, feedback)
          if (comment) {
            await this.sendFeedbackComment(conversationId, comment)
          }
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Feedback avec commentaire enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi feedback avec commentaire:', error)
      throw error
    }
  }

  async getUserConversations(userId: string, limit = 50): Promise<any[]> {
    if (!this.loggingEnabled) {
      console.log('üîç Logging d√©sactiv√© - conversations non r√©cup√©r√©es')
      return []
    }

    try {
      console.log('üîç R√©cup√©ration conversations pour:', userId)
      console.log('üì° URL conversations:', `${this.baseUrl}/logging/user/${userId}/conversations?limit=${limit}`)
      
      const response = await fetch(`${this.baseUrl}/logging/user/${userId}/conversations?limit=${limit}`, {
        headers: { 'Accept': 'application/json' }
      })
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }
      
      const data = await response.json()
      console.log('‚úÖ Conversations r√©cup√©r√©es:', data.count)
      return data.conversations || []
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration conversations:', error)
      return []
    }
  }

  async deleteConversation(conversationId: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üóëÔ∏è Logging d√©sactiv√© - conversation non supprim√©e:', conversationId)
      return
    }

    try {
      console.log('üóëÔ∏è Suppression conversation serveur:', conversationId)
      console.log('üì° URL suppression:', `${this.baseUrl}/logging/conversation/${conversationId}`)
      
      const response = await fetch(`${this.baseUrl}/logging/conversation/${conversationId}`, {
        method: 'DELETE',
        headers: { 
          'Accept': 'application/json'
        }
      })
      
      if (!response.ok) {
        // Si l'endpoint n'existe pas (404), on continue sans erreur
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint de suppression non disponible sur le serveur')
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Conversation supprim√©e du serveur:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur suppression conversation serveur:', error)
      throw error  // Propager pour que l'UI puisse g√©rer l'erreur
    }
  }

  async clearAllUserConversations(userId: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üóëÔ∏è Logging d√©sactiv√© - conversations non supprim√©es:', userId)
      return
    }

    try {
      console.log('üóëÔ∏è Suppression toutes conversations serveur pour:', userId)
      console.log('üì° URL suppression globale:', `${this.baseUrl}/logging/user/${userId}/conversations`)
      
      const response = await fetch(`${this.baseUrl}/logging/user/${userId}/conversations`, {
        method: 'DELETE',
        headers: { 
          'Accept': 'application/json'
        }
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Toutes conversations supprim√©es du serveur:', result.message, 'Count:', result.deleted_count)
      
    } catch (error) {
      console.error('‚ùå Erreur suppression toutes conversations serveur:', error)
      throw error  // Propager pour que l'UI puisse g√©rer l'erreur
    }
  }

  // ‚úÖ M√âTHODE POUR R√âCUP√âRER STATISTIQUES FEEDBACK
  async getFeedbackStats(userId?: string, days: number = 7): Promise<any> {
    if (!this.loggingEnabled) {
      console.log('üìä Logging d√©sactiv√© - stats feedback non r√©cup√©r√©es')
      return null
    }

    try {
      const params = new URLSearchParams()
      if (userId) params.append('user_id', userId)
      params.append('days', days.toString())
      
      const url = `${this.baseUrl}/logging/analytics/feedback?${params.toString()}`
      console.log('üìä R√©cup√©ration stats feedback:', url)
      
      const response = await fetch(url, {
        headers: { 'Accept': 'application/json' }
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint stats feedback pas encore impl√©ment√©')
          return null
        }
        throw new Error(`HTTP ${response.status}`)
      }
      
      const data = await response.json()
      console.log('‚úÖ Stats feedback r√©cup√©r√©es:', data)
      return data
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats feedback:', error)
      return null
    }
  }

  // ‚úÖ M√âTHODE POUR TESTER LA CONNECTIVIT√â DU SERVICE
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Test connectivit√© service logging...')
      
      const response = await fetch(`${this.baseUrl}/logging/test`, {
        headers: { 'Accept': 'application/json' }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Service logging op√©rationnel:', data.message)
        return true
      } else {
        console.warn('‚ö†Ô∏è Service logging indisponible:', response.status)
        return false
      }
      
    } catch (error) {
      console.error('‚ùå Erreur test connectivit√©:', error)
      return false
    }
  }
}

// Instance globale du service
export const conversationService = new ConversationService()