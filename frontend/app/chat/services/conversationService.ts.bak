import { 
  Conversation, 
  ConversationWithMessages, 
  ConversationGroup,
  ConversationHistoryResponse,
  ConversationDetailResponse,
  ConversationGroupingOptions,
  Message,
  ConversationData
} from '../types'

// ==================== SERVICE CONVERSATIONS COMPLET INT√âGR√â ====================
export class ConversationService {
  private baseUrl: string
  private loggingEnabled = true

  constructor() {
    // ‚úÖ S√âCURIS√â: Configuration depuis variables d'environnement
    const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL
    const apiVersion = process.env.NEXT_PUBLIC_API_VERSION || 'v1'
    
    if (!apiBaseUrl) {
      console.error('‚ùå NEXT_PUBLIC_API_BASE_URL environment variable missing')
      this.loggingEnabled = false
      this.baseUrl = ''
      return
    }
    
    this.baseUrl = `${apiBaseUrl}/api/${apiVersion}`
    console.log('‚úÖ ConversationService configur√©:', this.baseUrl)
  }

  // ==================== NOUVELLES M√âTHODES POUR CONVERSATIONS ====================

  private getAuthToken(): string {
    try {
      // 1. Essayer le token depuis les cookies (comme dans apiService)
      const cookies = document.cookie.split(';')
      const sbCookie = cookies.find(cookie => 
        cookie.trim().startsWith('sb-cdrmjshmkdfwwtsfdvbl-auth-token=')
      )
      
      if (sbCookie) {
        const cookieValue = sbCookie.split('=')[1]
        const decodedValue = decodeURIComponent(cookieValue)
        const parsed = JSON.parse(decodedValue)
        
        if (Array.isArray(parsed) && parsed[0] && parsed[0] !== 'mock-jwt-token-for-development') {
          return parsed[0]
        }
      }

      // 2. Fallback vers localStorage
      const sbToken = localStorage.getItem('sb-cdrmjshmkdfwwtsfdvbl-auth-token')
      if (sbToken) {
        try {
          const parsed = JSON.parse(sbToken)
          if (Array.isArray(parsed) && parsed[0]) {
            return parsed[0]
          }
        } catch (e) {
          console.warn('[ConversationService] Failed to parse localStorage token')
        }
      }

      return ''
    } catch (error) {
      console.error('[ConversationService] Error getting auth token:', error)
      return ''
    }
  }

  /**
   * ‚úÖ M√âTHODE CORRIG√âE - R√©cup√®re une conversation avec messages complets
   */
  async getConversationWithMessages(conversationId: string): Promise<ConversationWithMessages | null> {
    try {
      console.log('üìñ [ConversationService] Chargement conversation compl√®te:', conversationId)
      
      const response = await fetch(`${this.baseUrl}/conversation/${conversationId}`, {
        method: 'GET',
        headers: { 
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        
        // ‚úÖ CORRECTION: Acc√©der aux donn√©es dans data.conversation
        console.log('‚úÖ [ConversationService] Donn√©es r√©cup√©r√©es:', {
          id: data.conversation?.conversation_id,
          questionLength: data.conversation?.question?.length || 0,
          responseLength: (data.conversation?.full_text ?? data.conversation?.response)?.length || 0
        })
        
        // ‚úÖ CORRECTION: Passer data.conversation √† la m√©thode transform
        if (data.conversation && data.conversation.question && data.conversation.response) {
          const conversationWithMessages = this.transformToConversationWithMessages(data.conversation)
          
          if (conversationWithMessages.messages.length > 0) {
            console.log('‚úÖ [ConversationService] Conversation transform√©e avec messages complets')
            return conversationWithMessages
          }
        }
      }
      
      console.warn('‚ö†Ô∏è [ConversationService] Impossible de r√©cup√©rer la conversation compl√®te')
      return null
      
    } catch (error) {
      console.error('‚ùå [ConversationService] Erreur getConversationWithMessages:', error)
      return null
    }
  }

  /**
   * R√©cup√®re l'historique des conversations group√©es par date
   */
  async getConversationHistory(
    userId: string, 
    options: ConversationGroupingOptions = {
      groupBy: 'date',
      sortBy: 'updated_at', 
      sortOrder: 'desc',
      limit: 50
    }
  ): Promise<ConversationHistoryResponse> {
    try {
      console.log('üìÇ [ConversationService] Chargement historique pour:', userId)
      
      const params = new URLSearchParams({
        groupBy: options.groupBy,
        sortBy: options.sortBy,
        sortOrder: options.sortOrder,
        ...(options.limit && { limit: options.limit.toString() }),
        ...(options.offset && { offset: options.offset.toString() })
      })

      const response = await fetch(
        `${this.baseUrl}/v1/conversations/history/${userId}?${params}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.getAuthToken()}`
          }
        }
      )

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: Failed to load conversation history`)
      }

      const data = await response.json()
      console.log('‚úÖ [ConversationService] Historique charg√©:', data.total_count, 'conversations')
      
      return data
      
    } catch (error) {
      console.error('‚ùå [ConversationService] Erreur chargement historique:', error)
      throw error
    }
  }

  /**
   * R√©cup√®re une conversation compl√®te avec tous ses messages
   */
  async getConversationDetail(conversationId: string): Promise<ConversationDetailResponse> {
    try {
      console.log('üìñ [ConversationService] Chargement conversation:', conversationId)
      
      const response = await fetch(
        `${this.baseUrl}/v1/conversations/${conversationId}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.getAuthToken()}`
          }
        }
      )

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: Failed to load conversation`)
      }

      const data = await response.json()
      console.log('‚úÖ [ConversationService] Conversation charg√©e:', data.conversation.message_count, 'messages')
      
      return data
      
    } catch (error) {
      console.error('‚ùå [ConversationService] Erreur chargement conversation:', error)
      throw error
    }
  }

  /**
   * Groupe les conversations par date (utilitaire c√¥t√© client)
   */
  groupConversationsByDate(conversations: Conversation[]): ConversationGroup[] {
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000)
    const thisWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)
    const thisMonth = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)

    const groups: ConversationGroup[] = [
      { title: "Aujourd'hui", conversations: [] },
      { title: "Hier", conversations: [] },
      { title: "Cette semaine", conversations: [] },
      { title: "Ce mois-ci", conversations: [] },
      { title: "Plus ancien", conversations: [] }
    ]

    conversations.forEach(conv => {
      const convDate = new Date(conv.updated_at)
      
      if (convDate >= today) {
        groups[0].conversations.push(conv)
      } else if (convDate >= yesterday) {
        groups[1].conversations.push(conv)
      } else if (convDate >= thisWeek) {
        groups[2].conversations.push(conv)
      } else if (convDate >= thisMonth) {
        groups[3].conversations.push(conv)
      } else {
        groups[4].conversations.push(conv)
      }
    })

    // Filtrer les groupes vides
    return groups.filter(group => group.conversations.length > 0)
  }

  /**
   * üîß M√âTHODE CORRIG√âE - Essaie plusieurs endpoints jusqu'√† trouver le bon
   */
  async getUserConversations(userId: string, limit = 50): Promise<Conversation[]> {
    if (!this.loggingEnabled) {
      console.log('üìù Logging d√©sactiv√© - conversations non r√©cup√©r√©es')
      return []
    }

    // üéØ Liste d'endpoints √† tester (bas√© sur le diagnostic)
    const endpointsToTry = [
      // Endpoints qui fonctionnent selon le diagnostic
      `/conversations`, // Base endpoint qui pourrait lister toutes
      `/conversations/list`,
      `/conversations/all`,
      
      // Endpoints sp√©cifiques utilisateur
      `/conversations/user/${userId}`,
      `/expert/conversations/user/${userId}`,
      
      // Fallback sur l'endpoint expert
      `/expert/conversations`
    ]

    for (const endpoint of endpointsToTry) {
      try {
        console.log(`üîç Test endpoint: ${this.baseUrl}${endpoint}`)
        
        const response = await fetch(`${this.baseUrl}${endpoint}?limit=${limit}`, {
          method: 'GET',
          headers: { 
            'Accept': 'application/json',
            'Authorization': `Bearer ${this.getAuthToken()}`
          }
        })
        
        console.log(`üìä ${endpoint}: ${response.status} ${response.statusText}`)
        
        if (response.ok) {
          const data = await response.json()
          console.log(`‚úÖ ENDPOINT FONCTIONNEL: ${endpoint}`)
          console.log(`üìà Donn√©es re√ßues:`, data)
          
          // üîß Adapter selon la structure de r√©ponse
          let conversations = []
          
          if (Array.isArray(data)) {
            conversations = data
          } else if (data.conversations && Array.isArray(data.conversations)) {
            conversations = data.conversations
          } else if (data.data && Array.isArray(data.data)) {
            conversations = data.data
          } else {
            console.log(`‚ö†Ô∏è Structure de donn√©es inattendue pour ${endpoint}:`, Object.keys(data))
            continue
          }
          
          // üîß Filtrer par userId si l'endpoint ne le fait pas automatiquement
          if (userId && conversations.length > 0) {
            conversations = conversations.filter((conv: any) => 
              conv.user_id === userId || conv.userId === userId
            )
          }
          
          console.log(`‚úÖ ${conversations.length} conversations r√©cup√©r√©es via ${endpoint}`)
          
          // Transformer en format Conversation[]
          return conversations.map((conv: any) => {
            const firstQuestion = conv.question?.split('\n--- Question suivante ---\n')?.[0] || conv.question || 'Conversation sans titre'
            const title = firstQuestion.length > 100 ? firstQuestion.substring(0, 100) + '...' : firstQuestion
            
            const responses = conv.response?.split('\n--- R√©ponse suivante ---\n') || [conv.response]
            const lastResponse = responses[responses.length - 1] || 'Aucune r√©ponse'
            const lastMessagePreview = lastResponse.length > 300 ? lastResponse.substring(0, 300) + '...' : lastResponse

            return {
              id: conv.conversation_id || conv.id || conv.session_id,
              title: title,
              preview: firstQuestion,
              message_count: conv.message_count || 2,
              created_at: conv.timestamp || conv.created_at || new Date().toISOString(),
              updated_at: conv.updated_at || conv.timestamp || new Date().toISOString(),
              feedback: conv.feedback,
              language: conv.language || 'fr',
              last_message_preview: lastMessagePreview,
              status: 'active'
            }
          })
        } else if (response.status === 401) {
          console.log(`üîê ${endpoint}: Authentification requise`)
        } else if (response.status === 405) {
          console.log(`‚ùå ${endpoint}: M√©thode non autoris√©e`)
        } else {
          console.log(`‚ùå ${endpoint}: ${response.status}`)
        }
        
      } catch (error) {
        console.log(`‚ùå ${endpoint}: ${error.message}`)
      }
    }
    
    console.warn('‚ö†Ô∏è Aucun endpoint de listing trouv√© - tentative de r√©cup√©ration alternative')
    return await this.tryAlternativeConversationRetrieval(userId, limit)
  }

  /**
   * üÜò M√âTHODE ALTERNATIVE - Si aucun endpoint de listing ne fonctionne
   * Utilise l'endpoint de r√©cup√©ration sp√©cifique qui fonctionne
   */
  async tryAlternativeConversationRetrieval(userId: string, limit: number): Promise<Conversation[]> {
    console.log('üÜò M√©thode alternative: essai de reconstruction depuis les sessions r√©centes')
    
    // üéØ Si on a des session IDs stock√©s quelque part (localStorage, etc.)
    const recentSessionIds = this.getRecentSessionIds()
    
    if (recentSessionIds.length === 0) {
      console.log('‚ö†Ô∏è Aucune session r√©cente trouv√©e')
      return []
    }
    
    const conversations: Conversation[] = []
    
    for (const sessionId of recentSessionIds.slice(0, limit)) {
      try {
        // Utiliser l'endpoint qui fonctionne selon le diagnostic
        const response = await fetch(`${this.baseUrl}/conversations/${sessionId}`, {
          method: 'GET',
          headers: { 
            'Accept': 'application/json',
            'Authorization': `Bearer ${this.getAuthToken()}`
          }
        })
        
        if (response.ok) {
          const data = await response.json()
          
          if (data.session_id && data.question) {
            const conv = {
              id: data.session_id,
              title: data.question.substring(0, 100) + (data.question.length > 100 ? '...' : ''),
              preview: data.question,
              message_count: data.message_count || 2,
              created_at: data.timestamp || new Date().toISOString(),
              updated_at: data.updated_at || data.timestamp || new Date().toISOString(),
              feedback: data.feedback,
              language: data.language || 'fr',
              last_message_preview: (data.response || '').substring(0, 300) + '...',
              status: 'active' as const
            }
            
            conversations.push(conv)
          }
        }
      } catch (error) {
        console.log(`‚ùå Erreur r√©cup√©ration session ${sessionId}:`, error)
      }
    }
    
    console.log(`‚úÖ ${conversations.length} conversations r√©cup√©r√©es via m√©thode alternative`)
    return conversations
  }

  /**
   * üîß UTILITAIRE - R√©cup√®re les session IDs r√©cents depuis le localStorage
   */
  private getRecentSessionIds(): string[] {
    try {
      const stored = localStorage.getItem('recent_conversation_sessions')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (Array.isArray(parsed)) {
          return parsed.slice(0, 20) // Max 20 sessions r√©centes
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lecture sessions r√©centes:', error)
    }
    
    return []
  }

  /**
   * üîß UTILITAIRE - Stocke un session ID pour la r√©cup√©ration future
   * √Ä appeler depuis apiService apr√®s cr√©ation d'une conversation
   */
  storeRecentSessionId(sessionId: string): void {
    try {
      const existing = this.getRecentSessionIds()
      const updated = [sessionId, ...existing.filter(id => id !== sessionId)].slice(0, 50)
      localStorage.setItem('recent_conversation_sessions', JSON.stringify(updated))
      console.log('üìù Session ID stock√© pour historique:', sessionId.substring(0, 8) + '...')
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur stockage session ID:', error)
    }
  }

  // üîß NOUVELLE M√âTHODE - Test tous les endpoints pour trouver le bon
  async discoverWorkingEndpoints(): Promise<string[]> {
    console.log('üîç === D√âCOUVERTE DES ENDPOINTS FONCTIONNELS ===')
    
    const endpointsToTest = [
      '/conversations',
      '/conversations/list', 
      '/conversations/all',
      '/conversations/history',
      '/expert/conversations',
      '/expert/sessions',
      '/expert/list',
      '/sessions',
      '/sessions/list',
      '/history'
    ]
    
    const workingEndpoints: string[] = []
    
    for (const endpoint of endpointsToTest) {
      try {
        const response = await fetch(`${this.baseUrl}${endpoint}`, {
          method: 'GET',
          headers: { 
            'Accept': 'application/json',
            'Authorization': `Bearer ${this.getAuthToken()}`
          }
        })
        
        console.log(`üì° ${endpoint}: ${response.status} ${response.statusText}`)
        
        if (response.ok) {
          const data = await response.json()
          console.log(`‚úÖ ENDPOINT FONCTIONNEL: ${endpoint}`)
          console.log(`üìä Structure:`, Array.isArray(data) ? `Array[${data.length}]` : Object.keys(data))
          workingEndpoints.push(endpoint)
        }
      } catch (error) {
        console.log(`‚ùå ${endpoint}: ${error.message}`)
      }
    }
    
    console.log('‚úÖ Endpoints fonctionnels d√©couverts:', workingEndpoints)
    return workingEndpoints
  }

  /**
   * Transforme une conversation en ConversationWithMessages - AVEC PARSING DES MESSAGES MULTIPLES
   */
  transformToConversationWithMessages(conversationData: any): ConversationWithMessages {
    const messages: Message[] = []
    
    if (conversationData.question && conversationData.response) {
      // ‚úÖ NOUVEAU: Parser les questions et r√©ponses multiples
      const questions = conversationData.question.split('\n--- Question suivante ---\n')
      const responses = (conversationData.full_text ?? conversationData.response).split('\n--- R√©ponse suivante ---\n')
      
      // Cr√©er des messages altern√©s (question/r√©ponse)
      for (let i = 0; i < Math.max(questions.length, responses.length); i++) {
        if (questions[i]) {
          messages.push({
            id: `${conversationData.conversation_id || conversationData.id}_user_${i}`,
            content: questions[i].trim(),
            isUser: true,
            timestamp: new Date(conversationData.timestamp || new Date()),
            conversation_id: conversationData.conversation_id || conversationData.id
          })
        }
        
        if (responses[i]) {
          messages.push({
            id: `${conversationData.conversation_id || conversationData.id}_assistant_${i}`,
            content: responses[i].trim(),
            isUser: false,
            timestamp: new Date(conversationData.timestamp || new Date()),
            conversation_id: conversationData.conversation_id || conversationData.id,
            feedback: i === responses.length - 1 && conversationData.feedback === 1 ? 'positive' 
                    : i === responses.length - 1 && conversationData.feedback === -1 ? 'negative' 
                    : null,
            feedbackComment: i === responses.length - 1 ? conversationData.feedback_comment : undefined
          })
        }
      }
    }

    // Premier message pour le titre
    const firstQuestion = messages.find(m => m.isUser)?.content || 'Conversation'
    const title = firstQuestion.length > 100 ? firstQuestion.substring(0, 100) + '...' : firstQuestion

    // Derni√®re r√©ponse pour l'aper√ßu
    const lastResponse = messages.filter(m => !m.isUser).pop()?.content || 'Aucune r√©ponse'
    const lastMessagePreview = lastResponse.length > 300 ? lastResponse.substring(0, 300) + '...' : lastResponse

    return {
      id: conversationData.conversation_id || conversationData.id,
      title: title,
      preview: firstQuestion,
      message_count: messages.length,
      created_at: conversationData.timestamp || new Date().toISOString(),
      updated_at: conversationData.updated_at || conversationData.timestamp || new Date().toISOString(),
      feedback: conversationData.feedback,
      language: conversationData.language || 'fr',
      last_message_preview: lastMessagePreview,
      status: 'active',
      messages
    }
  }

  // ==================== M√âTHODES EXISTANTES CONSERV√âES ====================

  async saveConversation(data: ConversationData): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìù Logging d√©sactiv√© - conversation non sauvegard√©e:', data.conversation_id)
      return
    }

    try {
      console.log('üíæ Sauvegarde conversation:', data.conversation_id)
      console.log('üì° URL de sauvegarde:', `${this.baseUrl}/conversation`)
      
      const response = await fetch(`${this.baseUrl}/conversation`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify({
          user_id: data.user_id,
          question: data.question,
          response: data.response,
          // ‚úÖ plein texte non tronqu√© si disponible
          full_text: data.full_text ?? undefined,
          conversation_id: data.conversation_id,
          confidence_score: data.confidence_score,
          response_time_ms: data.response_time_ms,
          language: data.language || 'fr',
          rag_used: data.rag_used !== undefined ? data.rag_used : true
        })
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Conversation sauvegard√©e:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde conversation:', error)
    }
  }

  async sendFeedback(conversationId: string, feedback: 1 | -1): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìä Logging d√©sactiv√© - feedback non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üìä Envoi feedback:', conversationId, feedback)
      console.log('üì° URL feedback:', `${this.baseUrl}/conversation/${conversationId}/feedback`)
      
      const response = await fetch(`${this.baseUrl}/conversation/${conversationId}/feedback`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify({ feedback })
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Feedback enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi feedback:', error)
      throw error
    }
  }

  async sendFeedbackComment(conversationId: string, comment: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üí¨ Logging d√©sactiv√© - commentaire non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üí¨ Envoi commentaire feedback:', conversationId, comment.substring(0, 50) + '...')
      console.log('üì° URL commentaire:', `${this.baseUrl}/conversation/${conversationId}/comment`)
      
      const response = await fetch(`${this.baseUrl}/conversation/${conversationId}/comment`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify({ 
          comment: comment,
          timestamp: new Date().toISOString()
        })
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint commentaire feedback pas encore impl√©ment√© sur le serveur')
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Commentaire feedback enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi commentaire feedback:', error)
    }
  }

  async sendFeedbackWithComment(
    conversationId: string, 
    feedback: 1 | -1, 
    comment?: string
  ): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üìäüí¨ Logging d√©sactiv√© - feedback avec commentaire non envoy√©:', conversationId)
      return
    }

    try {
      console.log('üìäüí¨ Envoi feedback avec commentaire:', conversationId, feedback, comment ? 'avec commentaire' : 'sans commentaire')
      console.log('üì° URL feedback combin√©:', `${this.baseUrl}/conversation/${conversationId}/feedback-with-comment`)
      
      const response = await fetch(`${this.baseUrl}/conversation/${conversationId}/feedback-with-comment`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        },
        body: JSON.stringify({ 
          feedback,
          comment: comment || null,
          timestamp: new Date().toISOString()
        })
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint combin√© non disponible, utilisation m√©thodes s√©par√©es')
          await this.sendFeedback(conversationId, feedback)
          if (comment) {
            await this.sendFeedbackComment(conversationId, comment)
          }
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Feedback avec commentaire enregistr√©:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur envoi feedback avec commentaire:', error)
      throw error
    }
  }

  async deleteConversation(conversationId: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üóëÔ∏è Logging d√©sactiv√© - conversation non supprim√©e:', conversationId)
      return
    }

    try {
      console.log('üóëÔ∏è Suppression conversation serveur:', conversationId)
      console.log('üì° URL suppression:', `${this.baseUrl}/conversation/${conversationId}`)
      
      const response = await fetch(`${this.baseUrl}/conversation/${conversationId}`, {
        method: 'DELETE',
        headers: { 
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint de suppression non disponible sur le serveur')
          return
        }
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Conversation supprim√©e du serveur:', result.message)
      
    } catch (error) {
      console.error('‚ùå Erreur suppression conversation serveur:', error)
      throw error
    }
  }

  async clearAllUserConversations(userId: string): Promise<void> {
    if (!this.loggingEnabled) {
      console.log('üóëÔ∏è Logging d√©sactiv√© - conversations non supprim√©es:', userId)
      return
    }

    try {
      console.log('üóëÔ∏è Suppression toutes conversations serveur pour:', userId)
      console.log('üì° URL suppression globale:', `${this.baseUrl}/conversations/user/${userId}`)
      
      const response = await fetch(`${this.baseUrl}/conversations/user/${userId}`, {
        method: 'DELETE',
        headers: { 
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Toutes conversations supprim√©es du serveur:', result.message, 'Count:', result.deleted_count)
      
    } catch (error) {
      console.error('‚ùå Erreur suppression toutes conversations serveur:', error)
      throw error
    }
  }

  async getFeedbackStats(userId?: string, days: number = 7): Promise<any> {
    if (!this.loggingEnabled) {
      console.log('üìä Logging d√©sactiv√© - stats feedback non r√©cup√©r√©es')
      return null
    }

    try {
      const params = new URLSearchParams()
      if (userId) params.append('user_id', userId)
      params.append('days', days.toString())
      
      const url = `${this.baseUrl}/analytics/feedback?${params.toString()}`
      console.log('üìä R√©cup√©ration stats feedback:', url)
      
      const response = await fetch(url, {
        headers: { 
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è Endpoint stats feedback pas encore impl√©ment√©')
          return null
        }
        throw new Error(`HTTP ${response.status}`)
      }
      
      const data = await response.json()
      console.log('‚úÖ Stats feedback r√©cup√©r√©es:', data)
      return data
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration stats feedback:', error)
      return null
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      console.log('üîå Test connectivit√© service logging...')
      
      const response = await fetch(`${this.baseUrl}/test-comments`, {
        headers: { 
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.getAuthToken()}`
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Service logging op√©rationnel:', data.message)
        return true
      } else {
        console.warn('‚ö†Ô∏è Service logging indisponible:', response.status)
        return false
      }
      
    } catch (error) {
      console.error('‚ùå Erreur test connectivit√©:', error)
      return false
    }
  }
}

// Instance globale du service
export const conversationService = new ConversationService()