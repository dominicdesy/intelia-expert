// lib/stores/chat.ts - VERSION FINALE AVEC API S√âCURIS√âE + HYDRATATION - CORRIG√âE
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { secureRequest } from '@/lib/supabase/client'
import type { Message, Conversation, TopicSuggestion } from '@/types'

interface ChatState {
  // √âtat
  conversations: Conversation[]
  currentConversation: Conversation | null
  isLoading: boolean
  error: string | null
  hasHydrated: boolean // HYDRATATION

  // Actions hydratation
  setHasHydrated: (hasHydrated: boolean) => void

  // Actions conversations
  createConversation: () => void
  loadConversations: () => Promise<void>
  loadConversation: (id: string) => Promise<void>
  deleteConversation: (id: string) => Promise<void>
  clearAllConversations: () => Promise<void>

  // Actions messages
  sendMessage: (content: string) => Promise<void>
  giveFeedback: (messageId: string, feedback: { message_id: string; rating: 'positive' | 'negative'; category: string }) => Promise<void>

  // Actions suggestions
  loadTopicSuggestions: () => Promise<TopicSuggestion[]>
}

// üîß CONFIGURATION API CORRIG√âE - Une seule fois, en haut du fichier
const getAPIConfig = () => {
  const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'https://expert-app-cngws.ondigitalocean.app'
  const version = process.env.NEXT_PUBLIC_API_VERSION || 'v1'
  
  // üîß CORRECTION: Enlever /api s'il est d√©j√† pr√©sent pour √©viter /api/api/
  const cleanBaseUrl = baseUrl.replace(/\/api\/?$/, '')
  const fullUrl = `${cleanBaseUrl}/api/${version}`
  
  console.log('üîß [ChatStore] Configuration API:', {
    originalBaseUrl: baseUrl,
    cleanBaseUrl,
    version,
    fullUrl
  })
  
  return fullUrl
}

const API_URL = getAPIConfig()

export const useChatStore = create<ChatState>()(
  persist(
    (set, get) => ({
      // √âtat initial
      conversations: [],
      currentConversation: null,
      isLoading: false,
      error: null,
      hasHydrated: false,

      // HYDRATATION - Marquer comme termin√©e
      setHasHydrated: (hasHydrated: boolean) => {
        set({ hasHydrated })
      },

      // Cr√©er une nouvelle conversation
      createConversation: () => {
        const newConversation: Conversation = {
          id: `conv-${Date.now()}`,
          title: 'Nouvelle conversation',
          preview: '',
          message_count: 0,
          messages: [],
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }

        set(state => ({
          currentConversation: newConversation,
          conversations: [newConversation, ...state.conversations]
        }))

        console.log('‚úÖ Nouvelle conversation cr√©√©e:', newConversation.id)
      },

      // Charger toutes les conversations
      loadConversations: async () => {
        try {
          console.log('üìã Chargement conversations s√©curis√©...')
          
          // API s√©curis√©e (quand elle sera pr√™te)
          /*
          const response = await secureRequest.get(`${API_URL}/conversations`)
          const data = await response.json()
          
          if (response.ok) {
            set({ conversations: data.conversations || [] })
          } else {
            throw new Error(data.message || 'Erreur chargement conversations')
          }
          */
          
          // Pour l'instant, utiliser les conversations locales
          console.log('‚úÖ Conversations charg√©es:', get().conversations.length)
          
        } catch (error: any) {
          console.error('‚õî Erreur chargement conversations:', error)
          set({ error: 'Erreur lors du chargement des conversations' })
        }
      },

      // Charger une conversation sp√©cifique
      loadConversation: async (id: string) => {
        try {
          console.log('üìñ Chargement conversation s√©curis√©:', id)
          
          const conversations = get().conversations
          const conversation = conversations.find(c => c.id === id)
          
          if (conversation) {
            set({ currentConversation: conversation, error: null })
            console.log('‚úÖ Conversation charg√©e:', conversation.title)
          } else {
            throw new Error('Conversation non trouv√©e')
          }
          
        } catch (error: any) {
          console.error('‚õî Erreur chargement conversation:', error)
          set({ error: 'Conversation non trouv√©e' })
        }
      },

      // Supprimer une conversation
      deleteConversation: async (id: string) => {
        try {
          console.log('üóëÔ∏è Suppression conversation s√©curis√©e:', id)
          
          // API s√©curis√©e (quand elle sera pr√™te)
          /*
          const response = await secureRequest.delete(`${API_URL}/conversations/${id}`)
          if (!response.ok) {
            throw new Error('Erreur suppression serveur')
          }
          */
          
          set(state => ({
            conversations: state.conversations.filter(c => c.id !== id),
            currentConversation: state.currentConversation?.id === id ? null : state.currentConversation,
            error: null
          }))

          console.log('‚úÖ Conversation supprim√©e')
          
        } catch (error: any) {
          console.error('‚õî Erreur suppression conversation:', error)
          set({ error: 'Erreur lors de la suppression' })
        }
      },

      // Effacer toutes les conversations
      clearAllConversations: async () => {
        try {
          console.log('üßπ Suppression s√©curis√©e toutes conversations...')
          
          // API s√©curis√©e (quand elle sera pr√™te)
          /*
          const response = await secureRequest.delete(`${API_URL}/conversations`)
          if (!response.ok) {
            throw new Error('Erreur suppression serveur')
          }
          */
          
          set({
            conversations: [],
            currentConversation: null,
            error: null
          })

          console.log('‚úÖ Toutes les conversations supprim√©es')
          
        } catch (error: any) {
          console.error('‚õî Erreur suppression toutes conversations:', error)
          set({ error: 'Erreur lors de la suppression' })
        }
      },

      // Envoyer un message - Version s√©curis√©e avec URL corrig√©e
      sendMessage: async (content: string) => {
        const startTime = Date.now()
        set({ isLoading: true, error: null })

        try {
          console.log('üí¨ Envoi message s√©curis√©:', content.substring(0, 50) + '...')

          // Cr√©er le message utilisateur avec interface correcte
          const userMessage: Message = {
            id: `user-${Date.now()}`,
            content,
            isUser: true, // ‚úÖ Utilise isUser au lieu de role
            timestamp: new Date(), // ‚úÖ Utilise Date au lieu de string
            conversation_id: get().currentConversation?.id
          }

          // Ajouter √† la conversation courante
          let currentConv = get().currentConversation
          if (!currentConv) {
            get().createConversation()
            currentConv = get().currentConversation!
          }

          // Mettre √† jour avec message utilisateur
          const updatedConv = {
            ...currentConv,
            messages: [...(currentConv.messages || []), userMessage],
            title: currentConv.message_count === 0 ? content.substring(0, 50) : currentConv.title,
            preview: currentConv.message_count === 0 ? content.substring(0, 150) : currentConv.preview,
            message_count: (currentConv.message_count || 0) + 1,
            updated_at: new Date().toISOString()
          }

          set(state => ({
            currentConversation: updatedConv,
            conversations: state.conversations.map(c => 
              c.id === updatedConv.id ? updatedConv : c
            )
          }))

          // Appel API s√©curis√© avec URL corrig√©e
          try {
            console.log('üîß [ChatStore] Appel API URL:', `${API_URL}/expert/ask`)
            
            const response = await secureRequest.post(`${API_URL}/expert/ask`, {
              question: content,
              conversation_id: currentConv.id,
              language: 'fr'
            })

            const data = await response.json()
            const responseTime = Date.now() - startTime

            if (!response.ok) {
              throw new Error(data.message || `Erreur API: ${response.status}`)
            }

            // Cr√©er le message de r√©ponse avec interface correcte
            const assistantMessage: Message = {
              id: `ai-${Date.now()}`,
              content: data.answer || data.response || 'R√©ponse re√ßue avec succ√®s.',
              isUser: false, // ‚úÖ Utilise isUser au lieu de role
              timestamp: new Date(), // ‚úÖ Utilise Date au lieu de string
              conversation_id: currentConv.id,
              sources: data.sources || [],
              metadata: { 
                response_time: responseTime,
                model_used: data.model_used || process.env.NEXT_PUBLIC_DEFAULT_MODEL || 'gpt-5'
              }
            }

            // Mettre √† jour avec la r√©ponse
            const finalConv = {
              ...updatedConv,
              messages: [...updatedConv.messages!, assistantMessage],
              message_count: updatedConv.message_count + 1,
              updated_at: new Date().toISOString()
            }

            set(state => ({
              currentConversation: finalConv,
              conversations: state.conversations.map(c => 
                c.id === finalConv.id ? finalConv : c
              )
            }))

            console.log('‚úÖ Message envoy√© et r√©ponse re√ßue')

          } catch (apiError: any) {
            console.error('‚õî Erreur API, passage en mode fallback:', apiError)
            
            // Mode fallback - Simulation r√©ponse IA
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))

            const fallbackMessage: Message = {
              id: `ai-fallback-${Date.now()}`,
              content: `Merci pour votre question : "${content.substring(0, 100)}..."

En tant qu'expert en sant√© et nutrition animale, cette question est importante pour l'optimisation de vos √©levages.

**Points cl√©s √† consid√©rer :**
‚Ä¢ Surveillance r√©guli√®re des indicateurs de performance
‚Ä¢ Adaptation de l'alimentation selon les conditions environnementales  
‚Ä¢ Mise en place de protocoles pr√©ventifs adapt√©s
‚Ä¢ Consultation v√©t√©rinaire en cas de doute

*Note : Le syst√®me fonctionne en mode d√©grad√©. L'API sera bient√¥t disponible.*

Avez-vous d'autres questions sp√©cifiques sur ce sujet ?`,
              isUser: false,
              timestamp: new Date(),
              conversation_id: currentConv.id,
              sources: [],
              metadata: { 
                response_time: Date.now() - startTime,
                model_used: 'fallback'
              }
            }

            const finalConv = {
              ...updatedConv,
              messages: [...updatedConv.messages!, fallbackMessage],
              message_count: updatedConv.message_count + 1,
              updated_at: new Date().toISOString()
            }

            set(state => ({
              currentConversation: finalConv,
              conversations: state.conversations.map(c => 
                c.id === finalConv.id ? finalConv : c
              )
            }))

            console.log('‚úÖ R√©ponse fallback g√©n√©r√©e')
          }

        } catch (error: any) {
          console.error('‚õî Erreur critique envoi message:', error)
          
          // Message d'erreur g√©n√©rique
          const errorMessage: Message = {
            id: `error-${Date.now()}`,
            content: 'D√©sol√©, le syst√®me est temporairement indisponible. Veuillez r√©essayer dans quelques instants.',
            isUser: false,
            timestamp: new Date(),
            conversation_id: get().currentConversation?.id,
            metadata: { 
              response_time: Date.now() - startTime,
              model_used: 'error'
            }
          }

          const currentConv = get().currentConversation
          if (currentConv) {
            const updatedConv = {
              ...currentConv,
              messages: [...(currentConv.messages || []), errorMessage],
              message_count: (currentConv.message_count || 0) + 1,
              updated_at: new Date().toISOString()
            }

            set(state => ({
              currentConversation: updatedConv,
              conversations: state.conversations.map(c => 
                c.id === updatedConv.id ? updatedConv : c
              )
            }))
          }

          set({ error: 'Erreur lors de l\'envoi du message' })
          
        } finally {
          set({ isLoading: false })
        }
      },

      // Donner un feedback - Version s√©curis√©e
      giveFeedback: async (messageId: string, feedback: { message_id: string; rating: 'positive' | 'negative'; category: string }) => {
        try {
          console.log('üëçüëé Feedback s√©curis√© pour message:', messageId, feedback.rating)

          // Mettre √† jour localement
          const currentConv = get().currentConversation
          if (currentConv && currentConv.messages) {
            const updatedMessages = currentConv.messages.map(msg =>
              msg.id === messageId
                ? { ...msg, feedback: feedback.rating }
                : msg
            )

            const updatedConv = {
              ...currentConv,
              messages: updatedMessages,
              updated_at: new Date().toISOString()
            }

            set(state => ({
              currentConversation: updatedConv,
              conversations: state.conversations.map(c => 
                c.id === updatedConv.id ? updatedConv : c
              )
            }))
          }

          // Envoyer au serveur (quand l'API sera pr√™te)
          /*
          try {
            const response = await secureRequest.post(`${API_URL}/expert/feedback`, feedback)
            if (!response.ok) {
              console.warn('‚ö†Ô∏è Erreur envoi feedback serveur, conserv√© localement')
            }
          } catch (apiError) {
            console.warn('‚ö†Ô∏è API feedback indisponible, conserv√© localement')
          }
          */

          console.log('‚úÖ Feedback enregistr√©')
          
        } catch (error: any) {
          console.error('‚õî Erreur feedback:', error)
        }
      },

      // Charger les suggestions de sujets
      loadTopicSuggestions: async (): Promise<TopicSuggestion[]> => {
        try {
          console.log('üí° Chargement suggestions s√©curis√©...')

          // Suggestions optimis√©es pour l'agriculture avec couleurs Intelia
          const suggestions: TopicSuggestion[] = [
            {
              id: '1',
              title: 'Probl√®mes de croissance poulets',
              description: 'Diagnostics et solutions pour optimiser la croissance',
              category: 'nutrition',
              icon: 'üêî',
              popular: true
            },
            {
              id: '2',
              title: 'Conditions environnementales optimales',
              description: 'Temp√©rature, ventilation et humidit√©',
              category: 'environment',
              icon: 'üå°Ô∏è',
              popular: true
            },
            {
              id: '3',
              title: 'Protocoles de vaccination',
              description: 'Calendriers et bonnes pratiques',
              category: 'health',
              icon: 'üíâ',
              popular: false
            },
            {
              id: '4',
              title: 'Diagnostic des maladies',
              description: 'Sympt√¥mes et identification pr√©coce',
              category: 'health',
              icon: 'üî¨',
              popular: true
            },
            {
              id: '5',
              title: 'Nutrition et alimentation',
              description: 'Rations √©quilibr√©es et compl√©ments',
              category: 'nutrition',
              icon: 'üåæ',
              popular: false
            },
            {
              id: '6',
              title: 'Gestion de la mortalit√©',
              description: 'Pr√©vention et causes fr√©quentes',
              category: 'health',
              icon: '‚ö†Ô∏è',
              popular: true
            }
          ]

          console.log('‚úÖ Suggestions charg√©es:', suggestions.length)
          return suggestions

        } catch (error: any) {
          console.error('‚õî Erreur chargement suggestions:', error)
          return []
        }
      }
    }),
    {
      name: 'intelia-chat-storage',
      storage: createJSONStorage(() => {
        // HYDRATATION - V√©rifier c√¥t√© client
        if (typeof window !== 'undefined') {
          return localStorage
        }
        return {
          getItem: () => null,
          setItem: () => {},
          removeItem: () => {}
        }
      }),
      partialize: (state) => ({
        conversations: state.conversations,
        currentConversation: state.currentConversation
      }),
      onRehydrateStorage: () => (state) => {
        // HYDRATATION - Marquer comme termin√©e
        if (state) {
          state.setHasHydrated(true)
        }
      }
    }
  )
)