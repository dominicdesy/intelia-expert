// lib/api/client.ts - VERSION CORRIG√âE AVEC AUTH-TEMP
import { ApiResponse } from '@/types'

class ApiClient {
  private baseURL: string
  private defaultHeaders: HeadersInit

  constructor() {
    // üîß CORRECTION: URL corrig√©e pour utiliser l'API d√©ploy√©e
    this.baseURL = process.env.NEXT_PUBLIC_API_URL || 'https://expert-app-cngws.ondigitalocean.app/api'
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      'Origin': 'https://expert.intelia.com', // üîß AJOUT: Header CORS obligatoire
    }
    console.log('üîß API Client initialis√© avec baseURL:', this.baseURL)
  }

  private async request<T>(
    endpoint: string, 
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const fullUrl = `${this.baseURL}${endpoint}`
    console.log('üì§ Requ√™te API:', {
      url: fullUrl,
      method: options.method || 'GET',
      headers: { ...this.defaultHeaders, ...options.headers },
      body: options.body
    })

    try {
      const response = await fetch(fullUrl, {
        ...options,
        headers: {
          ...this.defaultHeaders,
          ...options.headers,
        },
      })

      console.log('üì• R√©ponse API Status:', response.status, response.statusText)

      // V√©rifier si la r√©ponse est ok
      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå R√©ponse non-OK:', {
          status: response.status,
          statusText: response.statusText,
          errorText: errorText
        })
        
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }

      // Lire la r√©ponse
      const responseText = await response.text()
      console.log('üìÑ R√©ponse brute:', responseText)

      let data: any
      try {
        data = JSON.parse(responseText)
        console.log('‚úÖ JSON pars√© avec succ√®s:', data)
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON:', parseError)
        throw new Error(`Erreur parsing JSON: ${parseError}`)
      }

      // Retourner la r√©ponse format√©e
      const apiResponse: ApiResponse<T> = {
        success: true,
        data: data as T
      }

      console.log('üéØ R√©ponse finale format√©e:', apiResponse)
      return apiResponse

    } catch (error: any) {
      console.error('üí• Erreur compl√®te dans request:', {
        message: error.message,
        stack: error.stack,
        url: fullUrl,
        options: options
      })

      return {
        success: false,
        error: {
          code: 'FETCH_ERROR',
          message: error.message,
          details: {
            url: fullUrl,
            method: options.method || 'GET'
          }
        }
      }
    }
  }

  async get<T>(endpoint: string, authToken?: string): Promise<ApiResponse<T>> {
    console.log('üîç GET Request:', endpoint)
    const headers: HeadersInit = {}
    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`
    }
    return this.request<T>(endpoint, { method: 'GET', headers })
  }

  async post<T>(endpoint: string, data?: any, authToken?: string): Promise<ApiResponse<T>> {
    console.log('üìÆ POST Request:', endpoint, 'avec data:', data)
    const headers: HeadersInit = {}
    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`
    }
    return this.request<T>(endpoint, {
      method: 'POST',
      headers,
      body: data ? JSON.stringify(data) : undefined,
    })
  }

  async put<T>(endpoint: string, data?: any, authToken?: string): Promise<ApiResponse<T>> {
    const headers: HeadersInit = {}
    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`
    }
    return this.request<T>(endpoint, {
      method: 'PUT',
      headers,
      body: data ? JSON.stringify(data) : undefined,
    })
  }

  async delete<T>(endpoint: string, authToken?: string): Promise<ApiResponse<T>> {
    const headers: HeadersInit = {}
    if (authToken) {
      headers['Authorization'] = `Bearer ${authToken}`
    }
    return this.request<T>(endpoint, { method: 'DELETE', headers })
  }
}

export const apiClient = new ApiClient()