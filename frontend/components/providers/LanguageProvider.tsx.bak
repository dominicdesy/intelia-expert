// components/providers/LanguageProvider.tsx
'use client'

import { useEffect, useRef } from 'react'
import { useLanguageStore } from '@/lib/stores/language'

// Type Language depuis types
type Language = 'fr' | 'en' | 'es' | 'pt' | 'de' | 'nl' | 'pl'

// Helper function pour valider le type Language
function isValidLanguage(lang: string): lang is Language {
  const supportedLangs: Language[] = ['fr', 'en', 'es', 'pt', 'de', 'nl', 'pl']
  return supportedLangs.includes(lang as Language)
}

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const { setLanguage } = useLanguageStore()
  const hasInitializedRef = useRef(false)

  useEffect(() => {
    // CORRECTION: Initialisation UNE SEULE FOIS, sans dépendance sur user
    if (hasInitializedRef.current) return
    hasInitializedRef.current = true

    // Définer la langue basée sur le navigateur SEULEMENT
    if (typeof window !== 'undefined') {
      const browserLang = navigator.language.split('-')[0]
      
      // Validation propre du type
      if (isValidLanguage(browserLang)) {
        setLanguage(browserLang)
      } else {
        setLanguage('fr') // Français par défaut
      }
      
      console.log('[LanguageProvider] Langue initialisée depuis navigateur:', browserLang)
    }
  }, [setLanguage]) // SUPPRESSION de 'user' des dépendances !

  return <>{children}</>
}