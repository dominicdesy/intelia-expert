'use client'

import { useEffect, useRef, useState, createContext, useContext } from 'react'
import { usePathname, useRouter } from 'next/navigation'
import { useAuthStore } from '@/lib/stores/auth'

interface AuthProviderProps {
  children: React.ReactNode
}

// ‚úÖ NOUVEAU CONTEXTE pour partager l'√©tat auth avec tous les composants
interface AuthContextType {
  isAuthReady: boolean
  isInGracePeriod: boolean
  authErrors: string[]
  isRecovering: boolean
  clearAuthErrors: () => void
}

const AuthContext = createContext<AuthContextType>({
  isAuthReady: false,
  isInGracePeriod: true,
  authErrors: [],
  isRecovering: false,
  clearAuthErrors: () => {}
})

export const useAuthContext = () => useContext(AuthContext)

export function AuthProvider({ children }: AuthProviderProps) {
  const router = useRouter()
  const { 
    checkAuth, 
    isLoading, 
    hasHydrated, 
    isAuthenticated,
    // ‚úÖ NOUVEAUX √âTATS du store am√©lior√©
    authErrors,
    isRecovering,
    clearAuthErrors,
    lastAuthCheck
  } = useAuthStore()
  const pathname = usePathname()

  // üî• PROTECTION ANTI-BOUCLE RENFORC√âE
  const authCheckLock = useRef(false)
  const lastPathname = useRef('')
  const gracePeriodTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const authCheckTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  
  const [isInitialized, setIsInitialized] = useState(false)
  // ‚úÖ NOUVEAUX √âTATS pour p√©riode de gr√¢ce
  const [isInGracePeriod, setIsInGracePeriod] = useState(true)
  const [isAuthReady, setIsAuthReady] = useState(false)
  const [gracePeriodCount, setGracePeriodCount] = useState(0)

  // ‚úÖ Pages publiques o√π on ne doit PAS v√©rifier l'auth
  const publicRoutes = [
    '/',
    '/auth',
    '/auth/login',
    '/auth/register', 
    '/auth/signup',
    '/auth/callback',
    '/auth/reset',
    '/auth/forgot-password',
    '/terms',
    '/privacy'
  ]

  const isPublicPage = publicRoutes.some(route => 
    pathname === route || pathname.startsWith(route + '/')
  ) || pathname.startsWith('/auth/')

  // üö® PAGES PROT√âG√âES - N√©cessitent authentification
  const protectedRoutes = ['/chat', '/dashboard', '/profile', '/settings']
  const isProtectedPage = protectedRoutes.some(route => 
    pathname === route || pathname.startsWith(route + '/')
  )

  // üîç FONCTION DE DEBUG AJOUT√âE
  const debugAuthCheck = () => {
    console.log('=== DEBUG: AuthProvider checkAuth ===')
    console.log('Supabase config:', {
      url: process.env.NEXT_PUBLIC_SUPABASE_URL ? 'OK' : 'MANQUANT',
      key: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'OK' : 'MANQUANT',
      url_value: process.env.NEXT_PUBLIC_SUPABASE_URL,
      key_length: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.length
    })
    console.log('Contexte:', {
      pathname,
      isPublicPage,
      isProtectedPage,
      isAuthenticated,
      isLoading,
      hasHydrated,
      isInGracePeriod
    })
  }

  // ‚úÖ NOUVELLE FONCTION : Gestion intelligente de la redirection
  const handleAuthRedirect = (reason: string) => {
    console.log('üîÑ [AuthProvider] Redirection vers login:', reason)
    
    // Nettoyer les timeouts
    if (authCheckTimeoutRef.current) {
      clearTimeout(authCheckTimeoutRef.current)
    }
    
    try {
      // Utiliser router.replace pour √©viter les boucles
      router.replace('/')
    } catch (error) {
      console.error('üîß [AuthProvider] Erreur redirection router:', error)
      // Fallback vers window.location si n√©cessaire
      if (typeof window !== 'undefined') {
        window.location.href = '/'
      }
    }
  }

  // ‚úÖ NOUVELLE GESTION : P√©riode de gr√¢ce pour √©viter redirections pr√©matur√©es
  useEffect(() => {
    // üî• PROTECTION CRITIQUE : √âviter la boucle infinie
    if (!hasHydrated || isInGracePeriod === false) return

    // üî• PROTECTION : Ne d√©marrer qu'une seule fois
    if (gracePeriodCount > 0) {
      console.log('‚ö†Ô∏è [AuthProvider] P√©riode de gr√¢ce d√©j√† d√©marr√©e, skip')
      return
    }

    const gracePeriodDuration = isPublicPage ? 1000 : 3000 // Plus court pour pages publiques
    
    if (gracePeriodTimeoutRef.current) {
      clearTimeout(gracePeriodTimeoutRef.current)
    }
    
    setGracePeriodCount(1) // Marquer comme d√©marr√©
    console.log(`üîÑ [AuthProvider] P√©riode de gr√¢ce d√©marr√©e UNIQUE (${gracePeriodDuration}ms)`)
    
    gracePeriodTimeoutRef.current = setTimeout(() => {
      console.log('‚úÖ [AuthProvider] P√©riode de gr√¢ce termin√©e')
      setIsInGracePeriod(false)
      setIsAuthReady(true)
      
      // Si on est sur page prot√©g√©e et pas authentifi√© apr√®s gr√¢ce, v√©rifier une derni√®re fois
      if (isProtectedPage && !isAuthenticated && !isLoading) {
        console.log('üîç [AuthProvider] V√©rification finale apr√®s p√©riode de gr√¢ce')
        
        authCheckTimeoutRef.current = setTimeout(() => {
          const currentState = useAuthStore.getState()
          if (!currentState.isAuthenticated && isProtectedPage && !currentState.isLoading) {
            handleAuthRedirect('Non authentifi√© apr√®s p√©riode de gr√¢ce')
          }
        }, 1000)
      }
    }, gracePeriodDuration)

    return () => {
      if (gracePeriodTimeoutRef.current) {
        clearTimeout(gracePeriodTimeoutRef.current)
      }
    }
  }, [hasHydrated]) // üî• D√âPENDANCES R√âDUITES - seulement hasHydrated

  // üî• INITIALISATION UNE SEULE FOIS
  useEffect(() => {
    if (!hasHydrated || isInitialized) {
      return
    }

    console.log('üîß [AuthProvider] Initialisation provider')
    setIsInitialized(true)
  }, [hasHydrated, isInitialized])

  // ‚úÖ SURVEILLANCE DES ERREURS AUTH pour redirection automatique
  useEffect(() => {
    if (!isAuthReady || isInGracePeriod) return
    
    // Si erreurs critiques de session et on est sur page prot√©g√©e
    if (authErrors.length > 0 && isProtectedPage) {
      const hasSessionError = authErrors.some(error => 
        error.includes('Session expir√©e') || 
        error.includes('Auth session missing') ||
        error.includes('Forbidden')
      )
      
      if (hasSessionError && !isAuthenticated) {
        console.log('üîÑ [AuthProvider] Erreur session d√©tect√©e, redirection')
        handleAuthRedirect('Erreur de session d√©tect√©e')
      }
    }
  }, [authErrors, isProtectedPage, isAuthenticated, isAuthReady, isInGracePeriod])

  // üî• V√âRIFICATION AUTH PROT√âG√âE ET INTELLIGENTE
  useEffect(() => {
    // Attendre l'initialisation et la fin de la p√©riode de gr√¢ce
    if (!isInitialized || !hasHydrated || isInGracePeriod) {
      return
    }

    // Skip si page publique
    if (isPublicPage) {
      console.log('‚ÑπÔ∏è [AuthProvider] Page publique d√©tect√©e, skip auth check:', pathname)
      authCheckLock.current = false // Reset le lock pour les pages publiques
      return
    }

    // Skip si pas une page prot√©g√©e
    if (!isProtectedPage) {
      console.log('‚ÑπÔ∏è [AuthProvider] Page non prot√©g√©e, skip:', pathname)
      return
    }

    // üõ°Ô∏è PROTECTION CONTRE MULTIPLES APPELS
    if (authCheckLock.current && lastPathname.current === pathname) {
      console.log('‚ö†Ô∏è [AuthProvider] Auth d√©j√† v√©rifi√© pour cette page, skip')
      return
    }

    // ‚úÖ NOUVEAU: √âviter les v√©rifications trop fr√©quentes
    const now = Date.now()
    if (lastAuthCheck && now - lastAuthCheck < 2000) {
      console.log('üîÑ [AuthProvider] V√©rification auth trop r√©cente, skip')
      return
    }

    // üî• NOUVEAU: Si d√©j√† authentifi√© sur une page prot√©g√©e, pas besoin de re-v√©rifier
    if (isAuthenticated && lastPathname.current === pathname && !isRecovering) {
      console.log('‚úÖ [AuthProvider] Utilisateur d√©j√† authentifi√© et stable, skip verification')
      return
    }

    console.log('üîç [AuthProvider] V√©rification auth pour page prot√©g√©e:', pathname)
    
    // üîç APPEL DU DEBUG ICI
    debugAuthCheck()
    
    // Marquer comme en cours de v√©rification
    authCheckLock.current = true
    lastPathname.current = pathname

    // V√©rifier l'auth avec d√©lai pour √©viter conflits
    if (authCheckTimeoutRef.current) {
      clearTimeout(authCheckTimeoutRef.current)
    }
    
    authCheckTimeoutRef.current = setTimeout(() => {
      checkAuth()
        .then(() => {
          // Apr√®s v√©rification, si toujours pas authentifi√© sur page prot√©g√©e
          setTimeout(() => {
            const currentState = useAuthStore.getState()
            if (!currentState.isAuthenticated && isProtectedPage && !currentState.isLoading) {
              console.log('üîÑ [AuthProvider] Toujours non authentifi√© apr√®s v√©rification')
              handleAuthRedirect('√âchec v√©rification auth')
            }
          }, 1000)
        })
        .catch((error) => {
          console.error('‚ùå [AuthProvider] Erreur v√©rification auth:', error)
          if (isProtectedPage) {
            handleAuthRedirect('Erreur lors de la v√©rification')
          }
        })
        .finally(() => {
          // üî• IMPORTANT: Reset le lock apr√®s v√©rification
          authCheckLock.current = false
        })
    }, 200) // D√©lai plus court pour r√©activit√©

    return () => {
      if (authCheckTimeoutRef.current) {
        clearTimeout(authCheckTimeoutRef.current)
      }
    }
  }, [
    pathname, 
    isPublicPage, 
    isProtectedPage, 
    checkAuth, 
    isInitialized, 
    hasHydrated,
    isAuthenticated,
    isInGracePeriod,
    isRecovering,
    lastAuthCheck
  ])

  // üî• RESET DES FLAGS LORS DU CHANGEMENT DE PAGE
  useEffect(() => {
    if (lastPathname.current !== pathname) {
      console.log('üîÑ [AuthProvider] Changement de page:', lastPathname.current, '‚Üí', pathname)
      
      // Reset seulement si on change vraiment de page
      if (lastPathname.current !== '') {
        authCheckLock.current = false
        // Nettoyer les erreurs lors du changement de page vers page publique
        if (isPublicPage && authErrors.length > 0) {
          clearAuthErrors()
        }
      }
    }
  }, [pathname, isPublicPage, authErrors, clearAuthErrors])

  // ‚úÖ NETTOYAGE lors du d√©montage
  useEffect(() => {
    return () => {
      if (gracePeriodTimeoutRef.current) {
        clearTimeout(gracePeriodTimeoutRef.current)
      }
      if (authCheckTimeoutRef.current) {
        clearTimeout(authCheckTimeoutRef.current)
      }
    }
  }, [])

  // üî• LOADING STATE AM√âLIOR√â avec p√©riode de gr√¢ce
  if (!hasHydrated || !isInitialized) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Initialisation...</p>
        </div>
      </div>
    )
  }

  // ‚úÖ NOUVEAU: Loading pendant p√©riode de gr√¢ce sur pages prot√©g√©es
  if (isInGracePeriod && isProtectedPage) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-pulse h-8 w-8 bg-emerald-300 rounded-full mx-auto mb-4"></div>
          <p className="text-gray-600">V√©rification de l'authentification...</p>
          <div className="mt-2 text-xs text-gray-500">
            Patientez quelques instants... ({gracePeriodCount}/3)
          </div>
          
          {/* ‚úÖ AFFICHAGE DES ERREURS PENDANT LA P√âRIODE DE GR√ÇCE */}
          {authErrors.length > 0 && (
            <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg max-w-md mx-auto">
              <p className="text-yellow-800 text-sm font-medium">Probl√®me d√©tect√© :</p>
              <p className="text-yellow-700 text-xs mt-1">
                {authErrors[authErrors.length - 1]}
              </p>
            </div>
          )}
        </div>
      </div>
    )
  }

  // ‚úÖ Loader seulement si on charge ET qu'on est sur une page prot√©g√©e
  if (isLoading && isProtectedPage && !isPublicPage && isAuthReady) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto mb-4"></div>
          <p className="text-gray-600">V√©rification de l'authentification...</p>
          
          {/* ‚úÖ INDICATEUR DE R√âCUP√âRATION */}
          {isRecovering && (
            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg max-w-md mx-auto">
              <p className="text-blue-800 text-sm">R√©cup√©ration de la session en cours...</p>
            </div>
          )}
        </div>
      </div>
    )
  }

  // ‚úÖ CONTEXTE AUTH pour tous les composants enfants
  const authContextValue: AuthContextType = {
    isAuthReady,
    isInGracePeriod,
    authErrors,
    isRecovering,
    clearAuthErrors
  }

  return (
    <AuthContext.Provider value={authContextValue}>
      {children}
    </AuthContext.Provider>
  )
}