'use client'

import { useEffect, useRef } from 'react'
import { useAuthStore } from '@/lib/stores/auth'
import { getSupabaseClient } from '@/lib/supabase/singleton'

interface AuthProviderProps {
  children: React.ReactNode
}

export function AuthProvider({ children }: AuthProviderProps) {
  const { hasHydrated, setHasHydrated, checkAuth } = useAuthStore()
  
  // Protection race condition et d√©montage
  const isMountedRef = useRef(true)
  const subscriptionRef = useRef<any>(null)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  
  // CORRECTION CRITIQUE: Flag pour bloquer TOUS les setState pendant d√©connexion
  const isLoggingOutRef = useRef(false)
  const logoutTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  // Wrapper s√©curis√© pour checkAuth
  const safeCheckAuth = async () => {
    if (!isMountedRef.current || isLoggingOutRef.current) {
      console.log('[AuthProvider] checkAuth ignor√© - composant d√©mont√© ou d√©connexion en cours')
      return
    }
    try {
      await checkAuth()
    } catch (error) {
      if (isMountedRef.current && !isLoggingOutRef.current) {
        console.error('[AuthProvider] Erreur checkAuth s√©curis√©:', error)
      }
    }
  }

  // Logique d'hydratation SANS initialisation automatique pour √©viter la boucle
  useEffect(() => {
    // V√©rifier si une d√©connexion r√©cente est en cours
    const recentLogout = sessionStorage.getItem('recent-logout')
    if (recentLogout) {
      const logoutTime = parseInt(recentLogout)
      if (Date.now() - logoutTime < 5000) {
        console.log('[AuthProvider] Initialisation diff√©r√©e - d√©connexion r√©cente')
        return
      }
    }

    if (!hasHydrated && isMountedRef.current && !isLoggingOutRef.current) {
      setHasHydrated(true)
      console.log('[AuthProvider] Store hydrat√© - AUCUNE initialisation automatique')
      
      // SUPPRESSION COMPL√àTE de l'appel √† initializeSession() qui causait la boucle
      // La page chat g√®re maintenant sa propre initialisation
    }
  }, [hasHydrated, setHasHydrated])

  // CORRECTION FINALE: Listener Supabase qui NE FAIT PLUS DE setState pour SIGNED_OUT
  useEffect(() => {
    let isCancelled = false
    
    const supabase = getSupabaseClient()
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üî• [DEBUG-AUTH] === √âV√âNEMENT SUPABASE ===')
        console.log('üî• [DEBUG-AUTH] Event:', event, 'Session:', !!session)
        console.log('üî• [DEBUG-AUTH] isMountedRef:', isMountedRef.current)
        console.log('üî• [DEBUG-AUTH] isLoggingOutRef:', isLoggingOutRef.current)
        console.log('üî• [DEBUG-AUTH] isCancelled:', isCancelled)
        
        if (isCancelled || !isMountedRef.current || isLoggingOutRef.current) {
          console.log('üî• [DEBUG-AUTH] √âV√âNEMENT IGNOR√â - composant d√©mont√© ou d√©connexion active')
          return
        }
        
        console.log('üî• [DEBUG-AUTH] Traitement de l\'√©v√©nement:', event)
        
        try {
          switch (event) {
            case 'INITIAL_SESSION':
              console.log('üî• [DEBUG-AUTH] INITIAL_SESSION ignor√©')
              break
              
            case 'SIGNED_IN':
              console.log('üî• [DEBUG-AUTH] SIGNED_IN - v√©rification √©tat...')
              if (!isLoggingOutRef.current) {
                console.log('üî• [DEBUG-AUTH] Utilisateur connect√© - checkAuth')
                await safeCheckAuth()
              } else {
                console.log('üî• [DEBUG-AUTH] SIGNED_IN ignor√© - d√©connexion en cours')
              }
              break
              
            case 'SIGNED_OUT':
              console.log('üî• [DEBUG-AUTH] SIGNED_OUT - NOUVELLE STRAT√âGIE SANS setState')
              
              // CORRECTION FINALE: NE PLUS FAIRE DE setState ICI
              // Cette ligne causait React #300 car elle s'ex√©cutait pendant le d√©montage
              // useAuthStore.setState({ user: null, isAuthenticated: false, lastAuthCheck: Date.now() })
              
              // √Ä la place, juste marquer le flag et laisser le store g√©rer
              isLoggingOutRef.current = true
              
              console.log('üî• [DEBUG-AUTH] SIGNED_OUT trait√© - PAS de setState, juste flag activ√©')
              
              // Le timeout reste pour d√©bloquer apr√®s s√©curit√©
              if (logoutTimeoutRef.current) {
                clearTimeout(logoutTimeoutRef.current)
              }

              logoutTimeoutRef.current = setTimeout(() => {
                console.log('üïê [DEBUG-TIMEOUT-AUTH] Execution timeout 5s - isMounted:', isMountedRef.current)
                if (isMountedRef.current) {
                  console.log('üî• [DEBUG-AUTH] Fin du blocage apr√®s 5s')
                } else {
                  console.log('‚ö†Ô∏è [DEBUG-TIMEOUT-AUTH] Timeout 5s ignor√© - AuthProvider d√©mont√©')
                }
              }, 5000)
              
              break
              
            case 'TOKEN_REFRESHED':
              if (!isLoggingOutRef.current) {
                console.log('üî• [DEBUG-AUTH] Token rafra√Æchi')
                await safeCheckAuth()
              } else {
                console.log('üî• [DEBUG-AUTH] TOKEN_REFRESHED ignor√© - d√©connexion en cours')
              }
              break
              
            case 'USER_UPDATED':
              if (!isLoggingOutRef.current) {
                console.log('üî• [DEBUG-AUTH] Utilisateur mis √† jour')
                await safeCheckAuth()
              } else {
                console.log('üî• [DEBUG-AUTH] USER_UPDATED ignor√© - d√©connexion en cours')
              }
              break
              
            default:
              console.log('üî• [DEBUG-AUTH] √âv√©nement non g√©r√©:', event)
          }
        } catch (error) {
          if (isMountedRef.current && !isLoggingOutRef.current) {
            console.error('üî• [DEBUG-AUTH] Erreur traitement √©v√©nement:', event, error)
          }
        }
      }
    )

    // Stocker la subscription pour nettoyage
    subscriptionRef.current = subscription

    // V√©rification p√©riodique avec protection renforc√©e
    const intervalId = setInterval(async () => {
      if (isCancelled || !isMountedRef.current || isLoggingOutRef.current) {
        return
      }
      
      try {
        const supabase = getSupabaseClient()
        const { data: { session }, error } = await supabase.auth.getSession()
        
        if (error) {
          console.warn('[AuthProvider] Erreur v√©rification session:', error)
          return
        }
        
        if (!isMountedRef.current || isCancelled || isLoggingOutRef.current) {
          return
        }
        
        // V√©rification synchronisation avec le store
        const isAuthenticated = useAuthStore.getState().isAuthenticated
        const hasSession = !!session
        
        if (isAuthenticated !== hasSession) {
          console.log('[AuthProvider] Synchronisation √©tat auth n√©cessaire')
          await safeCheckAuth()
        }
      } catch (error) {
        if (isMountedRef.current && !isLoggingOutRef.current) {
          console.warn('[AuthProvider] Erreur v√©rification p√©riodique:', error)
        }
      }
    }, 60000)

    intervalRef.current = intervalId

    // Cleanup complet avec protection
    return () => {
      isCancelled = true
      
      if (subscriptionRef.current) {
        try {
          subscriptionRef.current.unsubscribe()
        } catch (error) {
          console.warn('[AuthProvider] Erreur unsubscribe:', error)
        }
      }
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
      
      if (logoutTimeoutRef.current) {
        clearTimeout(logoutTimeoutRef.current)
      }
      
      console.log('[AuthProvider] Nettoyage subscription et interval')
    }
  }, [checkAuth])

  // Effect de d√©montage pour nettoyer les refs
  useEffect(() => {
    isMountedRef.current = true
    isLoggingOutRef.current = false
    
    return () => {
      console.log('[AuthProvider] D√©montage - nettoyage des refs')
      isMountedRef.current = false
      isLoggingOutRef.current = true // Bloquer d√©finitivement les setState
      
      // Nettoyage final des ressources
      if (subscriptionRef.current) {
        try {
          subscriptionRef.current.unsubscribe()
        } catch (error) {
          console.warn('[AuthProvider] Erreur final unsubscribe:', error)
        }
        subscriptionRef.current = null
      }
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
      
      if (logoutTimeoutRef.current) {
        clearTimeout(logoutTimeoutRef.current)
        logoutTimeoutRef.current = null
      }
    }
  }, [])