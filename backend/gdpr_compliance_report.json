{
  "scan_date": "2025-10-11T12:37:09.918772",
  "summary": {
    "files_scanned": 33,
    "total_personal_data": 1174,
    "total_issues": 26,
    "critical_issues": 5,
    "high_issues": 8,
    "medium_issues": 13
  },
  "files": [
    {
      "file": "app\\main.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "deletion": [
          449,
          807,
          844
        ],
        "audit_log": [
          134,
          143
        ],
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\__init__.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\__init__.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\admin.py",
      "personal_data": {
        "user_id": [
          {
            "line": 50,
            "context": "SELECT \n                        COUNT(DISTINCT user_email) as total_users,\n                        COUNT(*)"
          },
          {
            "line": 79,
            "context": "SELECT \n                        user_email,\n                        COUNT(*) as question_cou"
          },
          {
            "line": 83,
            "context": "user_questions_complete\n                    WHERE user_email IS NOT NULL AND user_email != ''"
          },
          {
            "line": 83,
            "context": "WHERE user_email IS NOT NULL AND user_email != ''\n                    GROUP BY user_email"
          },
          {
            "line": 84,
            "context": "AND user_email != ''\n                    GROUP BY user_email\n                    ORDER BY question_count DESC"
          },
          {
            "line": 97,
            "context": "questions,\n                        COUNT(DISTINCT user_email) as unique_users\n                    FROM user_qu"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [],
        "consent": [],
        "export": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\auth.py",
      "personal_data": {
        "email": [
          {
            "line": 21,
            "context": "rtError:\n    SUPABASE_AVAILABLE = False\n\n# Import email service for multilingual confirmation emails\ntry:"
          },
          {
            "line": 27,
            "context": "AIL_SERVICE_AVAILABLE = False\n    logger.warning(\"Email service not available\")\n\nrouter = APIRouter(prefi"
          },
          {
            "line": 91,
            "context": "at: datetime\n\n\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\n\n\nclass DeleteDataRes"
          },
          {
            "line": 104,
            "context": "R REGISTER ===\nclass UserRegister(BaseModel):\n    email: EmailStr\n    password: str\n    first_name: Optio"
          },
          {
            "line": 124,
            "context": "D ===\nclass ForgotPasswordRequest(BaseModel):\n    email: EmailStr\n\n\nclass ValidateResetTokenRequest(BaseM"
          },
          {
            "line": 250,
            "context": "def get_user_profile_from_supabase(user_id: str, email: str) -> Dict[str, Any]:\n    \"\"\"\n    Récupère le"
          },
          {
            "line": 273,
            "context": "# Si pas trouvé par auth_user_id, essayer par email\n        if not response.data:\n            respons"
          },
          {
            "line": 275,
            "context": "esponse = supabase.table(\"users\").select(\"*\").eq(\"email\", email).execute()\n\n        if response.data and"
          },
          {
            "line": 275,
            "context": "= supabase.table(\"users\").select(\"*\").eq(\"email\", email).execute()\n\n        if response.data and len(resp"
          },
          {
            "line": 280,
            "context": "gger.debug(\n                f\"Profil trouvé pour {email}: {profile.get('user_type', 'user')}\""
          },
          {
            "line": 289,
            "context": "logger.warning(f\"Aucun profil trouvé pour {email} - rôle par défaut\")\n            return {\"user_ty"
          },
          {
            "line": 319,
            "context": "oad.get('aud')}\")\n        logger.critical(f\"Token EMAIL: {payload.get('email')}\")\n        logger.critical"
          },
          {
            "line": 319,
            "context": "logger.critical(f\"Token EMAIL: {payload.get('email')}\")\n        logger.critical(f\"Token SUB: {payloa"
          },
          {
            "line": 388,
            "context": ".get(\"sub\") or payload.get(\"user_id\")\n            email = payload.get(\"email\")\n            session_id = p"
          },
          {
            "line": 388,
            "context": "d.get(\"user_id\")\n            email = payload.get(\"email\")\n            session_id = payload.get(\"session_i"
          },
          {
            "line": 396,
            "context": "de\")\n                continue\n\n            if not email:\n                logger.warning(\"Token sans email"
          },
          {
            "line": 397,
            "context": "email:\n                logger.warning(\"Token sans email valide\")\n                continue\n\n            #"
          },
          {
            "line": 402,
            "context": "e = await get_user_profile_from_supabase(user_id, email)\n            except Exception as e:"
          },
          {
            "line": 410,
            "context": "\"user_id\": user_id,\n                \"email\": email,\n                \"session_id\": session_id"
          },
          {
            "line": 410,
            "context": "\"user_id\": user_id,\n                \"email\": email,\n                \"session_id\": session_id,  # NOU"
          },
          {
            "line": 426,
            "context": "info(\n                f\"Utilisateur authentifié: {email} (rôle: {user_data['user_type']}, secret: {secret"
          },
          {
            "line": 468,
            "context": "r.info(f\"[Login] Tentative de connexion: {request.email}\")\n\n    if not SUPABASE_AVAILABLE:\n        logger"
          },
          {
            "line": 478,
            "context": "alidation des données d'entrée\n    if not request.email or not request.email.strip():\n        logger.warn"
          },
          {
            "line": 478,
            "context": "d'entrée\n    if not request.email or not request.email.strip():\n        logger.warning(\"[Login] Email ma"
          },
          {
            "line": 479,
            "context": "st.email.strip():\n        logger.warning(\"[Login] Email manquant ou vide\")\n        raise HTTPException(st"
          },
          {
            "line": 480,
            "context": "HTTPException(status_code=400, detail=\"L'adresse email est requise\")\n\n    if not request.password:"
          },
          {
            "line": 500,
            "context": "tative d'authentification Supabase pour: {request.email}\"\n        )\n\n        # Essayer la nouvelle API d'"
          },
          {
            "line": 506,
            "context": "ase.auth.sign_in_with_password(\n                {\"email\": request.email.strip(), \"password\": request.pass"
          },
          {
            "line": 506,
            "context": "_with_password(\n                {\"email\": request.email.strip(), \"password\": request.password}"
          },
          {
            "line": 513,
            "context": "result = supabase.auth.sign_in(\n                email=request.email.strip(), password=request.password"
          },
          {
            "line": 513,
            "context": "abase.auth.sign_in(\n                email=request.email.strip(), password=request.password\n            )"
          },
          {
            "line": 525,
            "context": "f\"[Login] Authentification échouée pour: {request.email}\")\n            raise HTTPException("
          },
          {
            "line": 527,
            "context": "ception(\n                status_code=401, detail=\"Email ou mot de passe incorrect\"\n            )"
          },
          {
            "line": 530,
            "context": "incorrect\"\n            )\n\n        # Vérifier si l'email est confirmé\n        if hasattr(user, \"email_conf"
          },
          {
            "line": 532,
            "context": "onfirmed_at:\n            logger.warning(f\"[Login] Email non confirmé pour: {request.email}\")"
          },
          {
            "line": 532,
            "context": "rning(f\"[Login] Email non confirmé pour: {request.email}\")\n            raise HTTPException("
          },
          {
            "line": 535,
            "context": "detail=\"Veuillez confirmer votre email avant de vous connecter\",\n            )"
          },
          {
            "line": 545,
            "context": "= {\n            \"user_id\": user.id,\n            \"email\": request.email.strip(),\n            \"sub\": user."
          },
          {
            "line": 545,
            "context": "\"user_id\": user.id,\n            \"email\": request.email.strip(),\n            \"sub\": user.id,"
          },
          {
            "line": 561,
            "context": "start_session(\n                user_email=request.email.strip(), session_id=session_id\n            )"
          },
          {
            "line": 568,
            "context": "r.info(f\"[Login] Connexion réussie pour: {request.email}\")\n\n        return TokenResponse(\n            acc"
          },
          {
            "line": 593,
            "context": "\"authentication failed\",\n                \"invalid email or password\",\n            ]\n        ):"
          },
          {
            "line": 598,
            "context": "ception(\n                status_code=401, detail=\"Email ou mot de passe incorrect\"\n            )"
          },
          {
            "line": 603,
            "context": "age\n            for keyword in [\n                \"email not confirmed\",\n                \"email_not_confir"
          },
          {
            "line": 609,
            "context": "logger.info(\"[Login] Erreur identifiée comme email non confirmé\")\n            raise HTTPException("
          },
          {
            "line": 612,
            "context": "detail=\"Veuillez confirmer votre email avant de vous connecter\",\n            )\n        e"
          },
          {
            "line": 620,
            "context": "ception(\n                status_code=401, detail=\"Email ou mot de passe incorrect\"\n            )"
          },
          {
            "line": 681,
            "context": "(\"session_id\")\n    user_email = current_user.get(\"email\", \"unknown\")\n\n    try:\n        if session_id:"
          },
          {
            "line": 714,
            "context": "\"\"\"\n    user_id = current_user.get(\"user_id\")\n    email = current_user.get(\"email\")\n    session_id = curr"
          },
          {
            "line": 714,
            "context": "user.get(\"user_id\")\n    email = current_user.get(\"email\")\n    session_id = current_user.get(\"session_id\")"
          },
          {
            "line": 721,
            "context": "ken_data = {\n        \"user_id\": user_id,\n        \"email\": email,\n        \"sub\": user_id,\n        \"iss\": \""
          },
          {
            "line": 721,
            "context": "= {\n        \"user_id\": user_id,\n        \"email\": email,\n        \"sub\": user_id,\n        \"iss\": \"intelia-"
          },
          {
            "line": 731,
            "context": "gger.info(f\"[RefreshToken] Token rafraîchi pour: {email}\")\n\n    return TokenResponse(\n        access_toke"
          },
          {
            "line": 789,
            "context": "\"scopes\": (\n                        \"openid email profile\"\n                        if provider_name"
          },
          {
            "line": 791,
            "context": "== \"linkedin_oidc\"\n                        else \"email\"\n                    ),\n                },"
          },
          {
            "line": 874,
            "context": "\"scopes\": (\n                        \"openid email profile\"\n                        if provider_name"
          },
          {
            "line": 876,
            "context": "== \"linkedin_oidc\"\n                        else \"email\"\n                    ),\n                },"
          },
          {
            "line": 949,
            "context": "uth_{provider_name}_{code[:8]}\",\n                \"email\": f\"test.oauth.{provider_name}@intelia.com\","
          },
          {
            "line": 961,
            "context": "une donnée utilisateur dans la session\")\n\n        email = user_data.get(\"email\")\n        user_id = user_d"
          },
          {
            "line": 961,
            "context": "dans la session\")\n\n        email = user_data.get(\"email\")\n        user_id = user_data.get(\"id\")\n        #"
          },
          {
            "line": 965,
            "context": "a variable non utilisée full_name\n\n        if not email or not user_id:\n            raise Exception(\"Donn"
          },
          {
            "line": 968,
            "context": "logger.info(f\"[OAuth/Callback] Utilisateur: {email} (ID: {user_id})\")\n\n        # NOUVEAU : Générer s"
          },
          {
            "line": 977,
            "context": "= {\n            \"user_id\": user_id,\n            \"email\": email,\n            \"sub\": user_id,"
          },
          {
            "line": 977,
            "context": "\"user_id\": user_id,\n            \"email\": email,\n            \"sub\": user_id,\n            \"iss\": \""
          },
          {
            "line": 992,
            "context": "()\n            analytics.start_session(user_email=email, session_id=session_id)\n            logger.info(f"
          },
          {
            "line": 999,
            "context": "ccess=true&oauth_provider={provider}&oauth_email={email}\"\n\n        logger.info(\n            f\"[OAuth/Call"
          },
          {
            "line": 1002,
            "context": "lback] Redirection vers frontend avec token pour {email}\"\n        )\n        return RedirectResponse(url=s"
          },
          {
            "line": 1081,
            "context": "{provider_name}_{request.code[:8]}\",\n            \"email\": f\"user_{request.code[:8]}@example.com\","
          },
          {
            "line": 1088,
            "context": "}\n\n        if not user_data or not user_data.get(\"email\"):\n            logger.error(\"[OAuth] Données util"
          },
          {
            "line": 1095,
            "context": "# Extraire les informations utilisateur\n        email = user_data.get(\"email\")\n        user_id = user_d"
          },
          {
            "line": 1095,
            "context": "ations utilisateur\n        email = user_data.get(\"email\")\n        user_id = user_data.get(\"id\")\n        f"
          },
          {
            "line": 1102,
            "context": "rl\")\n\n        logger.info(f\"[OAuth] Utilisateur: {email} (ID: {user_id})\")\n\n        # Créer notre token J"
          },
          {
            "line": 1108,
            "context": "= {\n            \"user_id\": user_id,\n            \"email\": email,\n            \"sub\": user_id,"
          },
          {
            "line": 1108,
            "context": "\"user_id\": user_id,\n            \"email\": email,\n            \"sub\": user_id,\n            \"iss\": \""
          },
          {
            "line": 1120,
            "context": "ponse = {\n            \"id\": user_id,\n            \"email\": email,\n            \"full_name\": full_name,"
          },
          {
            "line": 1120,
            "context": "{\n            \"id\": user_id,\n            \"email\": email,\n            \"full_name\": full_name,"
          },
          {
            "line": 1127,
            "context": "OAuth] Connexion réussie via {request.provider}: {email}\")\n\n        return OAuthCallbackResponse("
          },
          {
            "line": 1157,
            "context": "d] Demande de changement pour: {current_user.get('email', 'unknown')}\"\n    )\n\n    if not SUPABASE_AVAILAB"
          },
          {
            "line": 1176,
            "context": "supabase_key)\n    user_email = current_user.get(\"email\")\n\n    try:\n        # 1. Vérifier le mot de passe"
          },
          {
            "line": 1184,
            "context": "ase.auth.sign_in_with_password(\n                {\"email\": user_email, \"password\": request.current_passwor"
          },
          {
            "line": 1189,
            "context": "y_result = supabase.auth.sign_in(\n                email=user_email, password=request.current_password"
          },
          {
            "line": 1258,
            "context": "fo(f\"[Register] Tentative inscription: {user_data.email}\")\n\n    if not SUPABASE_AVAILABLE:\n        logger"
          },
          {
            "line": 1307,
            "context": "redirect_to = f\"{frontend_url}/auth/verify-email\"\n\n        # Essayer la nouvelle API Supabase d'ab"
          },
          {
            "line": 1313,
            "context": "h.sign_up(\n                {\n                    \"email\": user_data.email,\n                    \"password\""
          },
          {
            "line": 1313,
            "context": "{\n                    \"email\": user_data.email,\n                    \"password\": user_data.passwo"
          },
          {
            "line": 1324,
            "context": "result = supabase.auth.sign_up(\n                email=user_data.email,\n                password=user_da"
          },
          {
            "line": 1324,
            "context": "ase.auth.sign_up(\n                email=user_data.email,\n                password=user_data.password,"
          },
          {
            "line": 1333,
            "context": "ption(status_code=400, detail=\"Un compte avec cet email existe déjà\")\n            raise HTTPException(sta"
          },
          {
            "line": 1346,
            "context": "une valeur (existant)\n        # MAIS si \"Confirm email\" est activé, tous les nouveaux users ont email_co"
          },
          {
            "line": 1366,
            "context": "\"auth_user_id\": user.id,\n                    \"email\": user_data.email,\n                    \"first_nam"
          },
          {
            "line": 1366,
            "context": ": user.id,\n                    \"email\": user_data.email,\n                    \"first_name\": user_data.firs"
          },
          {
            "line": 1389,
            "context": "# NOTE: Supabase envoie automatiquement l'email de confirmation via SMTP configuré\n        # L'em"
          },
          {
            "line": 1390,
            "context": "il de confirmation via SMTP configuré\n        # L'email utilise le template personnalisé (Supabase Dashbo"
          },
          {
            "line": 1390,
            "context": "se le template personnalisé (Supabase Dashboard → Email Templates → Confirm signup)\n        # Le template"
          },
          {
            "line": 1392,
            "context": "rred_language }}\n        logger.info(f\"[Register] Email de confirmation multilangue envoyé par Supabase ("
          },
          {
            "line": 1394,
            "context": "ferred_language})\")\n\n        # DÉSACTIVÉ: Envoi d'email custom car Supabase génère les tokens\n        # e"
          },
          {
            "line": 1399,
            "context": "ter] EMAIL_SERVICE_AVAILABLE=True, initialisation email service...\")\n                email_service = get_"
          },
          {
            "line": 1401,
            "context": "ervice()\n                logger.info(f\"[Register] Email service initialisé: {type(email_service)}\")"
          },
          {
            "line": 1424,
            "context": "type\": \"signup\",\n                                \"email\": user_data.email,"
          },
          {
            "line": 1424,
            "context": "\"email\": user_data.email,\n                                \"password\": user"
          },
          {
            "line": 1456,
            "context": "confirmation_url = f\"{frontend_url}/auth/verify-email?email={user_data.email}\"\n\n                logger."
          },
          {
            "line": 1456,
            "context": "irmation_url = f\"{frontend_url}/auth/verify-email?email={user_data.email}\"\n\n                logger.info(f"
          },
          {
            "line": 1456,
            "context": "{frontend_url}/auth/verify-email?email={user_data.email}\"\n\n                logger.info(f\"[Register] Envoi"
          },
          {
            "line": 1458,
            "context": "\"\n\n                logger.info(f\"[Register] Envoi email de confirmation à {user_data.email} en {user_data"
          },
          {
            "line": 1458,
            "context": "egister] Envoi email de confirmation à {user_data.email} en {user_data.preferred_language}\")"
          },
          {
            "line": 1464,
            "context": "FIRMATION,\n                    to_email=user_data.email,\n                    language=user_data.preferred"
          },
          {
            "line": 1472,
            "context": "t:\n                    logger.info(f\"[Register] ✅ Email de confirmation envoyé avec succès\")"
          },
          {
            "line": 1474,
            "context": "logger.error(f\"[Register] ❌ Échec envoi email (send_auth_email returned False)\")\n            ex"
          },
          {
            "line": 1476,
            "context": "er.error(f\"[Register] ❌ Exception lors de l'envoi email: {type(e).__name__}: {str(e)}\")\n                i"
          },
          {
            "line": 1479,
            "context": "# Ne pas bloquer la registration si l'email échoue\n        else:\n            if not EMAIL_SER"
          },
          {
            "line": 1482,
            "context": "ning(f\"[Register] EMAIL_SERVICE_AVAILABLE=False - email non envoyé\")\n            elif not user_data.prefe"
          },
          {
            "line": 1484,
            "context": "er.warning(f\"[Register] preferred_language vide - email non envoyé\")\n\n        # NE PAS créer de token JWT"
          },
          {
            "line": 1486,
            "context": "r de token JWT - l'utilisateur doit confirmer son email d'abord\n        # Le login sera possible uniqueme"
          },
          {
            "line": 1487,
            "context": "sera possible uniquement après confirmation de l'email\n\n        logger.info(f\"[Register] Inscription réu"
          },
          {
            "line": 1489,
            "context": "info(f\"[Register] Inscription réussie: {user_data.email} - Email de confirmation requis\")\n\n        return"
          },
          {
            "line": 1489,
            "context": "egister] Inscription réussie: {user_data.email} - Email de confirmation requis\")\n\n        return AuthResp"
          },
          {
            "line": 1493,
            "context": "\"Compte créé avec succès. Veuillez vérifier votre email pour confirmer votre compte.\",\n            token="
          },
          {
            "line": 1494,
            "context": "token=None,  # Pas de token tant que l'email n'est pas confirmé\n            user=None,   # Pas"
          },
          {
            "line": 1495,
            "context": "user=None,   # Pas d'infos utilisateur tant que l'email n'est pas confirmé\n        )\n\n    except HTTPExce"
          },
          {
            "line": 1513,
            "context": "de réinitialisation de mot de passe\n    Envoie un email avec un lien de réinitialisation\n    \"\"\"\n    logg"
          },
          {
            "line": 1515,
            "context": "ger.info(f\"[ResetPassword] Demande pour: {request.email}\")\n\n    if not SUPABASE_AVAILABLE:\n        logger"
          },
          {
            "line": 1543,
            "context": "pabase.auth.reset_password_email(\n                email=request.email, options={\"redirect_to\": redirect_u"
          },
          {
            "line": 1543,
            "context": "set_password_email(\n                email=request.email, options={\"redirect_to\": redirect_url}"
          },
          {
            "line": 1549,
            "context": "se.auth.api.reset_password_email(\n                email=request.email, redirect_to=redirect_url"
          },
          {
            "line": 1549,
            "context": "set_password_email(\n                email=request.email, redirect_to=redirect_url\n            )"
          },
          {
            "line": 1552,
            "context": "# Supabase ne retourne pas d'erreur même si l'email n'existe pas (pour des raisons de sécurité)"
          },
          {
            "line": 1554,
            "context": "logger.info(\n            f\"[ResetPassword] Email de réinitialisation envoyé pour: {request.email}\""
          },
          {
            "line": 1554,
            "context": "] Email de réinitialisation envoyé pour: {request.email}\"\n        )\n\n        return ForgotPasswordRespons"
          },
          {
            "line": 1559,
            "context": "ccess=True,\n            message=\"Si cette adresse email existe dans notre système, vous recevrez un lien"
          },
          {
            "line": 1566,
            "context": ",\n            detail=\"Erreur lors de l'envoi de l'email de réinitialisation\",\n        )\n\n\n# === ENDPOINT"
          },
          {
            "line": 1690,
            "context": "b')}\")\n        logger.info(f\"[ConfirmReset] Token email: {token_payload.get('email')}\")\n        logger.in"
          },
          {
            "line": 1690,
            "context": "f\"[ConfirmReset] Token email: {token_payload.get('email')}\")\n        logger.info(f\"[ConfirmReset] Token e"
          },
          {
            "line": 1711,
            "context": ")\n\n        user_email = token_payload.get(\"email\")\n        token_type = token_payload.get(\"aud\") o"
          },
          {
            "line": 1717,
            "context": "e_error}\")\n\n    # === MÉTHODE 1 : VERIFY OTP AVEC EMAIL (PRIORITÉ ÉLEVÉE) ===\n    if user_email:"
          },
          {
            "line": 1720,
            "context": "f\"[ConfirmReset] === MÉTHODE 1: VERIFY OTP avec email {user_email} ===\"\n        )\n        try:"
          },
          {
            "line": 1733,
            "context": "pabase.auth.verify_otp(\n                        {\"email\": user_email, \"token\": request.token, \"type\": otp"
          },
          {
            "line": 1805,
            "context": "logger.error(f\"[ConfirmReset] Token analysé: email={user_email}, type={token_type}\")\n\n    # Erreur f"
          },
          {
            "line": 1821,
            "context": "nt_user[\"user_id\"]\n    user_email = current_user[\"email\"]\n    logger.info(\"GDPR deletion requested for %s"
          },
          {
            "line": 1854,
            "context": "] Profil complet récupéré pour {current_user.get('email')}\")\n\n                        # Retourner les don"
          },
          {
            "line": 1859,
            "context": "user.get(\"user_id\"),\n                            \"email\": current_user.get(\"email\"),"
          },
          {
            "line": 1859,
            "context": "\"email\": current_user.get(\"email\"),\n                            \"session_id\": curr"
          },
          {
            "line": 1891,
            "context": "Fallback vers données JWT pour {current_user.get('email')}\")\n        return {\n            \"user_id\": curr"
          },
          {
            "line": 1894,
            "context": "er_id\": current_user.get(\"user_id\"),\n            \"email\": current_user.get(\"email\"),\n            \"session"
          },
          {
            "line": 1894,
            "context": "user_id\"),\n            \"email\": current_user.get(\"email\"),\n            \"session_id\": current_user.get(\"se"
          },
          {
            "line": 1908,
            "context": "er_id\": current_user.get(\"user_id\"),\n            \"email\": current_user.get(\"email\"),\n            \"session"
          },
          {
            "line": 1908,
            "context": "user_id\"),\n            \"email\": current_user.get(\"email\"),\n            \"session_id\": current_user.get(\"se"
          }
        ],
        "phone": [
          {
            "line": 110,
            "context": "str] = None\n    company: Optional[str] = None\n    phone: Optional[str] = None\n    country: Optional[str]"
          },
          {
            "line": 1297,
            "context": "ompany\"] = user_data.company\n        if user_data.phone:\n            user_metadata[\"phone\"] = user_data.p"
          },
          {
            "line": 1298,
            "context": "if user_data.phone:\n            user_metadata[\"phone\"] = user_data.phone\n        if user_data.country:"
          },
          {
            "line": 1298,
            "context": "e:\n            user_metadata[\"phone\"] = user_data.phone\n        if user_data.country:\n            user_me"
          },
          {
            "line": 1371,
            "context": "country\": user_data.country,\n                    \"phone\": user_data.phone,\n                    \"company_n"
          },
          {
            "line": 1371,
            "context": "a.country,\n                    \"phone\": user_data.phone,\n                    \"company_name\": user_data.co"
          },
          {
            "line": 1869,
            "context": "get(\"phone_number\"),\n                            \"phone\": profile_data.get(\"phone\"),"
          },
          {
            "line": 1869,
            "context": "\"phone\": profile_data.get(\"phone\"),\n                            \"linkedin_profile\""
          }
        ],
        "name": [
          {
            "line": 106,
            "context": "Model):\n    email: EmailStr\n    password: str\n    first_name: Optional[str] = None\n    last_name: Optional[str"
          },
          {
            "line": 107,
            "context": "ord: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str"
          },
          {
            "line": 108,
            "context": "r] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str] = None\n    company: Optional[str]"
          },
          {
            "line": 284,
            "context": "rofile.get(\"user_type\", \"user\"),\n                \"full_name\": profile.get(\"full_name\"),\n                \"pref"
          },
          {
            "line": 284,
            "context": "user\"),\n                \"full_name\": profile.get(\"full_name\"),\n                \"preferences\": profile.get(\"pr"
          },
          {
            "line": 418,
            "context": "rofile.get(\"user_type\", \"user\"),\n                \"full_name\": profile.get(\"full_name\"),\n                \"pref"
          },
          {
            "line": 418,
            "context": "user\"),\n                \"full_name\": profile.get(\"full_name\"),\n                \"preferences\": profile.get(\"pr"
          },
          {
            "line": 951,
            "context": "\"user_metadata\": {\n                    \"full_name\": f\"Test OAuth {provider_name.title()}\","
          },
          {
            "line": 963,
            "context": "RRECTION: Suppression de la variable non utilisée full_name\n\n        if not email or not user_id:"
          },
          {
            "line": 1083,
            "context": ",\n            \"user_metadata\": {\n                \"full_name\": f\"User OAuth {provider_name.title()}\","
          },
          {
            "line": 1097,
            "context": "l\")\n        user_id = user_data.get(\"id\")\n        full_name = user_data.get(\"user_metadata\", {}).get("
          },
          {
            "line": 1098,
            "context": "r_data.get(\"user_metadata\", {}).get(\n            \"full_name\"\n        ) or user_data.get(\"name\")\n        avata"
          },
          {
            "line": 1099,
            "context": "\"full_name\"\n        ) or user_data.get(\"name\")\n        avatar_url = user_data.get(\"user_metada"
          },
          {
            "line": 1121,
            "context": "user_id,\n            \"email\": email,\n            \"full_name\": full_name,\n            \"avatar_url\": avatar_url"
          },
          {
            "line": 1121,
            "context": "\"email\": email,\n            \"full_name\": full_name,\n            \"avatar_url\": avatar_url,"
          },
          {
            "line": 1277,
            "context": "rl, supabase_key)\n\n    try:\n        # Préparer le nom complet\n        full_name = user_data.full_name"
          },
          {
            "line": 1278,
            "context": "try:\n        # Préparer le nom complet\n        full_name = user_data.full_name\n        if not full_name an"
          },
          {
            "line": 1278,
            "context": "arer le nom complet\n        full_name = user_data.full_name\n        if not full_name and (user_data.first_nam"
          },
          {
            "line": 1279,
            "context": "full_name = user_data.full_name\n        if not full_name and (user_data.first_name or user_data.last_name)"
          },
          {
            "line": 1279,
            "context": "full_name\n        if not full_name and (user_data.first_name or user_data.last_name):\n            parts = []"
          },
          {
            "line": 1279,
            "context": "full_name and (user_data.first_name or user_data.last_name):\n            parts = []\n            if user_data"
          },
          {
            "line": 1281,
            "context": ":\n            parts = []\n            if user_data.first_name:\n                parts.append(user_data.first_nam"
          },
          {
            "line": 1282,
            "context": "irst_name:\n                parts.append(user_data.first_name)\n            if user_data.last_name:"
          },
          {
            "line": 1283,
            "context": "nd(user_data.first_name)\n            if user_data.last_name:\n                parts.append(user_data.last_name"
          },
          {
            "line": 1284,
            "context": "last_name:\n                parts.append(user_data.last_name)\n            full_name = \" \".join(parts)"
          },
          {
            "line": 1285,
            "context": "parts.append(user_data.last_name)\n            full_name = \" \".join(parts)\n\n        # Préparer les métadon"
          },
          {
            "line": 1289,
            "context": "utilisateur\n        user_metadata = {}\n        if full_name:\n            user_metadata[\"full_name\"] = full_na"
          },
          {
            "line": 1290,
            "context": "if full_name:\n            user_metadata[\"full_name\"] = full_name\n        if user_data.first_name:"
          },
          {
            "line": 1290,
            "context": "ll_name:\n            user_metadata[\"full_name\"] = full_name\n        if user_data.first_name:\n            user"
          },
          {
            "line": 1291,
            "context": "ata[\"full_name\"] = full_name\n        if user_data.first_name:\n            user_metadata[\"first_name\"] = user_d"
          },
          {
            "line": 1292,
            "context": "user_data.first_name:\n            user_metadata[\"first_name\"] = user_data.first_name\n        if user_data.las"
          },
          {
            "line": 1292,
            "context": "user_metadata[\"first_name\"] = user_data.first_name\n        if user_data.last_name:\n            user_"
          },
          {
            "line": 1293,
            "context": "ame\"] = user_data.first_name\n        if user_data.last_name:\n            user_metadata[\"last_name\"] = user_da"
          },
          {
            "line": 1294,
            "context": "f user_data.last_name:\n            user_metadata[\"last_name\"] = user_data.last_name\n        if user_data.comp"
          },
          {
            "line": 1294,
            "context": "user_metadata[\"last_name\"] = user_data.last_name\n        if user_data.company:\n            user_me"
          },
          {
            "line": 1367,
            "context": "\"email\": user_data.email,\n                    \"first_name\": user_data.first_name,\n                    \"last"
          },
          {
            "line": 1367,
            "context": "mail,\n                    \"first_name\": user_data.first_name,\n                    \"last_name\": user_data.last_"
          },
          {
            "line": 1368,
            "context": "name\": user_data.first_name,\n                    \"last_name\": user_data.last_name,\n                    \"full_"
          },
          {
            "line": 1368,
            "context": "_name,\n                    \"last_name\": user_data.last_name,\n                    \"full_name\": full_name,"
          },
          {
            "line": 1369,
            "context": "_name\": user_data.last_name,\n                    \"full_name\": full_name,\n                    \"country\": user_"
          },
          {
            "line": 1369,
            "context": "_data.last_name,\n                    \"full_name\": full_name,\n                    \"country\": user_data.country"
          },
          {
            "line": 1460,
            "context": "\")\n                logger.info(f\"[Register] First name: {user_data.first_name}\")\n\n                result"
          },
          {
            "line": 1460,
            "context": "logger.info(f\"[Register] First name: {user_data.first_name}\")\n\n                result = email_service.send_a"
          },
          {
            "line": 1468,
            "context": "\",  # Token OTP si disponible\n                    first_name=user_data.first_name,\n                )"
          },
          {
            "line": 1468,
            "context": "sponible\n                    first_name=user_data.first_name,\n                )\n\n                if result:"
          },
          {
            "line": 1856,
            "context": "# Retourner les données complètes incluant first_name, last_name, country\n                        retur"
          },
          {
            "line": 1856,
            "context": "ourner les données complètes incluant first_name, last_name, country\n                        return {"
          },
          {
            "line": 1862,
            "context": "r.get(\"user_type\")),\n                            \"full_name\": profile_data.get(\"full_name\", current_user.get("
          },
          {
            "line": 1862,
            "context": "\"full_name\": profile_data.get(\"full_name\", current_user.get(\"full_name\")),"
          },
          {
            "line": 1862,
            "context": ": profile_data.get(\"full_name\", current_user.get(\"full_name\")),\n                            \"first_name\": pro"
          },
          {
            "line": 1863,
            "context": "r.get(\"full_name\")),\n                            \"first_name\": profile_data.get(\"first_name\"),  # NOUVEAU"
          },
          {
            "line": 1863,
            "context": "\"first_name\": profile_data.get(\"first_name\"),  # NOUVEAU\n                            \"last_n"
          },
          {
            "line": 1864,
            "context": "t_name\"),  # NOUVEAU\n                            \"last_name\": profile_data.get(\"last_name\"),    # NOUVEAU"
          },
          {
            "line": 1864,
            "context": "\"last_name\": profile_data.get(\"last_name\"),    # NOUVEAU\n                            \"coun"
          },
          {
            "line": 1897,
            "context": "ype\": current_user.get(\"user_type\"),\n            \"full_name\": current_user.get(\"full_name\"),\n            \"is_"
          },
          {
            "line": 1897,
            "context": "ype\"),\n            \"full_name\": current_user.get(\"full_name\"),\n            \"is_admin\": current_user.get(\"is_a"
          },
          {
            "line": 1911,
            "context": "ype\": current_user.get(\"user_type\"),\n            \"full_name\": current_user.get(\"full_name\"),\n            \"is_"
          },
          {
            "line": 1911,
            "context": "ype\"),\n            \"full_name\": current_user.get(\"full_name\"),\n            \"is_admin\": current_user.get(\"is_a"
          }
        ],
        "address": [
          {
            "line": 480,
            "context": "raise HTTPException(status_code=400, detail=\"L'adresse email est requise\")\n\n    if not request.password:"
          },
          {
            "line": 1559,
            "context": "success=True,\n            message=\"Si cette adresse email existe dans notre système, vous recevrez un"
          }
        ],
        "password": [
          {
            "line": 92,
            "context": "LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\n\n\nclass DeleteDataResponse(BaseModel):\n    s"
          },
          {
            "line": 105,
            "context": "UserRegister(BaseModel):\n    email: EmailStr\n    password: str\n    first_name: Optional[str] = None\n    las"
          },
          {
            "line": 122,
            "context": "Any]] = None\n\n\n# === NOUVEAUX MODÈLES POUR RESET PASSWORD ===\nclass ForgotPasswordRequest(BaseModel):\n    e"
          },
          {
            "line": 146,
            "context": "message: str\n\n\n# === NOUVEAU MODÈLE POUR CHANGE PASSWORD ===\nclass ChangePasswordRequest(BaseModel):\n    c"
          },
          {
            "line": 482,
            "context": "L'adresse email est requise\")\n\n    if not request.password:\n        logger.warning(\"[Login] Mot de passe man"
          },
          {
            "line": 506,
            "context": "{\"email\": request.email.strip(), \"password\": request.password}\n            )\n            log"
          },
          {
            "line": 506,
            "context": "mail\": request.email.strip(), \"password\": request.password}\n            )\n            logger.info(\"[Login] U"
          },
          {
            "line": 513,
            "context": "_in(\n                email=request.email.strip(), password=request.password\n            )\n\n        # Vérifie"
          },
          {
            "line": 513,
            "context": "email=request.email.strip(), password=request.password\n            )\n\n        # Vérifier le résultat"
          },
          {
            "line": 590,
            "context": "\"invalid_credentials\",\n                \"wrong password\",\n                \"incorrect password\","
          },
          {
            "line": 591,
            "context": "\"wrong password\",\n                \"incorrect password\",\n                \"authentication failed\","
          },
          {
            "line": 593,
            "context": "cation failed\",\n                \"invalid email or password\",\n            ]\n        ):\n            logger.inf"
          },
          {
            "line": 1146,
            "context": "k OAuth\"\n        )\n\n\n# === NOUVEL ENDPOINT CHANGE PASSWORD ===\n@router.post(\"/change-password\", response_mod"
          },
          {
            "line": 1147,
            "context": "NDPOINT CHANGE PASSWORD ===\n@router.post(\"/change-password\", response_model=ChangePasswordResponse)\nasync de"
          },
          {
            "line": 1184,
            "context": "_password(\n                {\"email\": user_email, \"password\": request.current_password}\n            )"
          },
          {
            "line": 1189,
            "context": "e.auth.sign_in(\n                email=user_email, password=request.current_password\n            )\n\n        i"
          },
          {
            "line": 1221,
            "context": "t = supabase_auth.auth.update_user(\n            {\"password\": request.new_password}\n        )\n\n        if not"
          },
          {
            "line": 1314,
            "context": "\"email\": user_data.email,\n                    \"password\": user_data.password,\n                    \"option"
          },
          {
            "line": 1314,
            "context": ".email,\n                    \"password\": user_data.password,\n                    \"options\": {"
          },
          {
            "line": 1325,
            "context": "email=user_data.email,\n                password=user_data.password,\n                user_metadata"
          },
          {
            "line": 1325,
            "context": "er_data.email,\n                password=user_data.password,\n                user_metadata=user_metadata if u"
          },
          {
            "line": 1425,
            "context": "user_data.email,\n                                \"password\": user_data.password,"
          },
          {
            "line": 1425,
            "context": "\"password\": user_data.password,\n                            }"
          },
          {
            "line": 1508,
            "context": "tion du compte\"\n        )\n\n\n# === ENDPOINT FORGOT PASSWORD ===\n@router.post(\"/reset-password\", response_mode"
          },
          {
            "line": 1509,
            "context": "ENDPOINT FORGOT PASSWORD ===\n@router.post(\"/reset-password\", response_model=ForgotPasswordResponse)\nasync de"
          },
          {
            "line": 1537,
            "context": "\"https://expert.intelia.com/auth/reset-password\",\n        )\n\n        # Essayer la nouvelle API Su"
          },
          {
            "line": 1640,
            "context": "u token\"\n        )\n\n\n# === ENDPOINT CONFIRM RESET PASSWORD ===\n@router.post(\"/confirm-reset-password\", respo"
          },
          {
            "line": 1641,
            "context": "M RESET PASSWORD ===\n@router.post(\"/confirm-reset-password\", response_model=ForgotPasswordResponse)\nasync de"
          },
          {
            "line": 1772,
            "context": "h.auth.update_user(\n                            {\"password\": request.new_password}\n                        )"
          },
          {
            "line": 1776,
            "context": "f\"[ConfirmReset] Résultat update password: user={bool(update_result.user)}\""
          },
          {
            "line": 1789,
            "context": "\"[ConfirmReset] Échec update password après OTP réussi\"\n                            )"
          },
          {
            "line": 1950,
            "context": "# NOUVEAU\n    }\n\n\n# === ENDPOINT DEBUG POUR RESET PASSWORD ===\n@router.get(\"/debug/reset-config\")\nasync def"
          },
          {
            "line": 1953,
            "context": "ug temporaire pour voir la configuration de reset password\"\"\"\n\n    # Récupérer exactement comme dans la fonc"
          },
          {
            "line": 1955,
            "context": "Récupérer exactement comme dans la fonction reset-password\n    redirect_url = os.getenv(\n        \"RESET_PASS"
          },
          {
            "line": 1957,
            "context": "RECT_URL\", \"https://expert.intelia.com/auth/reset-password\"\n    )\n\n    return {\n        \"redirect_url_config"
          }
        ],
        "user_id": [
          {
            "line": 250,
            "context": "NSERVÉE)\nasync def get_user_profile_from_supabase(user_id: str, email: str) -> Dict[str, Any]:\n    \"\"\""
          },
          {
            "line": 268,
            "context": "pabase_url, supabase_key)\n\n        # Chercher par auth_user_id d'abord (si c'est comme ça que c'est lié)"
          },
          {
            "line": 270,
            "context": "supabase.table(\"users\").select(\"*\").eq(\"auth_user_id\", user_id).execute()\n        )\n\n        # Si pas"
          },
          {
            "line": 270,
            "context": "ase.table(\"users\").select(\"*\").eq(\"auth_user_id\", user_id).execute()\n        )\n\n        # Si pas trouvé par"
          },
          {
            "line": 273,
            "context": ".execute()\n        )\n\n        # Si pas trouvé par auth_user_id, essayer par email\n        if not response.data:"
          },
          {
            "line": 387,
            "context": "# Support auth-temp ET Supabase\n            user_id = payload.get(\"sub\") or payload.get(\"user_id\")"
          },
          {
            "line": 387,
            "context": "user_id = payload.get(\"sub\") or payload.get(\"user_id\")\n            email = payload.get(\"email\")"
          },
          {
            "line": 392,
            "context": "# Vérification de base\n            if not user_id:\n                logger.warning(\"Token sans user_"
          },
          {
            "line": 393,
            "context": "er_id:\n                logger.warning(\"Token sans user_id valide\")\n                continue\n\n            if"
          },
          {
            "line": 402,
            "context": "profile = await get_user_profile_from_supabase(user_id, email)\n            except Exception as e:"
          },
          {
            "line": 409,
            "context": "NIFIÉE\n            user_data = {\n                \"user_id\": user_id,\n                \"email\": email,"
          },
          {
            "line": 409,
            "context": "user_data = {\n                \"user_id\": user_id,\n                \"email\": email,"
          },
          {
            "line": 544,
            "context": "PIRE_MINUTES)\n        token_data = {\n            \"user_id\": user.id,\n            \"email\": request.email.str"
          },
          {
            "line": 561,
            "context": "analytics.start_session(\n                user_email=request.email.strip(), session_id=session_id"
          },
          {
            "line": 681,
            "context": "session_id = current_user.get(\"session_id\")\n    user_email = current_user.get(\"email\", \"unknown\")\n\n    try:"
          },
          {
            "line": 691,
            "context": "logger.info(f\"[Logout] Session terminée: {user_email}, durée: {duration}s\")\n\n            return Logout"
          },
          {
            "line": 713,
            "context": "token lors d'une activité utilisateur\n    \"\"\"\n    user_id = current_user.get(\"user_id\")\n    email = current"
          },
          {
            "line": 713,
            "context": "ilisateur\n    \"\"\"\n    user_id = current_user.get(\"user_id\")\n    email = current_user.get(\"email\")\n    sessi"
          },
          {
            "line": 720,
            "context": "TOKEN_EXPIRE_MINUTES)\n    token_data = {\n        \"user_id\": user_id,\n        \"email\": email,\n        \"sub\":"
          },
          {
            "line": 720,
            "context": "RE_MINUTES)\n    token_data = {\n        \"user_id\": user_id,\n        \"email\": email,\n        \"sub\": user_id,"
          },
          {
            "line": 722,
            "context": ": user_id,\n        \"email\": email,\n        \"sub\": user_id,\n        \"iss\": \"intelia-expert\",\n        \"aud\":"
          },
          {
            "line": 962,
            "context": ")\n\n        email = user_data.get(\"email\")\n        user_id = user_data.get(\"id\")\n        # CORRECTION: Suppr"
          },
          {
            "line": 965,
            "context": "n utilisée full_name\n\n        if not email or not user_id:\n            raise Exception(\"Données utilisateur"
          },
          {
            "line": 968,
            "context": "nfo(f\"[OAuth/Callback] Utilisateur: {email} (ID: {user_id})\")\n\n        # NOUVEAU : Générer session_id pour"
          },
          {
            "line": 976,
            "context": "PIRE_MINUTES)\n        token_data = {\n            \"user_id\": user_id,\n            \"email\": email,"
          },
          {
            "line": 976,
            "context": "ES)\n        token_data = {\n            \"user_id\": user_id,\n            \"email\": email,\n            \"sub\": u"
          },
          {
            "line": 978,
            "context": "d,\n            \"email\": email,\n            \"sub\": user_id,\n            \"iss\": \"intelia-expert\","
          },
          {
            "line": 992,
            "context": "ics_manager()\n            analytics.start_session(user_email=email, session_id=session_id)\n            logger."
          },
          {
            "line": 1096,
            "context": "ur\n        email = user_data.get(\"email\")\n        user_id = user_data.get(\"id\")\n        full_name = user_da"
          },
          {
            "line": 1102,
            "context": "logger.info(f\"[OAuth] Utilisateur: {email} (ID: {user_id})\")\n\n        # Créer notre token JWT pour l'utili"
          },
          {
            "line": 1107,
            "context": "PIRE_MINUTES)\n        token_data = {\n            \"user_id\": user_id,\n            \"email\": email,"
          },
          {
            "line": 1107,
            "context": "ES)\n        token_data = {\n            \"user_id\": user_id,\n            \"email\": email,\n            \"sub\": u"
          },
          {
            "line": 1109,
            "context": "d,\n            \"email\": email,\n            \"sub\": user_id,\n            \"iss\": \"intelia-expert\","
          },
          {
            "line": 1119,
            "context": "ateur\n        user_response = {\n            \"id\": user_id,\n            \"email\": email,\n            \"full_na"
          },
          {
            "line": 1176,
            "context": "t = create_client(supabase_url, supabase_key)\n    user_email = current_user.get(\"email\")\n\n    try:\n        # 1"
          },
          {
            "line": 1184,
            "context": ".sign_in_with_password(\n                {\"email\": user_email, \"password\": request.current_password}"
          },
          {
            "line": 1189,
            "context": "lt = supabase.auth.sign_in(\n                email=user_email, password=request.current_password\n            )"
          },
          {
            "line": 1194,
            "context": "ngePassword] Mot de passe actuel incorrect pour: {user_email}\"\n            )\n            raise HTTPException("
          },
          {
            "line": 1226,
            "context": "gePassword] Échec mise à jour mot de passe pour: {user_email}\"\n            )\n            raise HTTPException("
          },
          {
            "line": 1233,
            "context": "sword] Mot de passe mis à jour avec succès pour: {user_email}\"\n        )\n\n        return ChangePasswordRespons"
          },
          {
            "line": 1365,
            "context": "user_profile = {\n                    \"auth_user_id\": user.id,\n                    \"email\": user_data"
          },
          {
            "line": 1676,
            "context": "fo(\"[ConfirmReset] === ANALYSE DU TOKEN ===\")\n    user_email = None\n    token_type = None\n\n    try:\n        im"
          },
          {
            "line": 1711,
            "context": "de réinitialisation.\",\n                )\n\n        user_email = token_payload.get(\"email\")\n        token_type ="
          },
          {
            "line": 1718,
            "context": "ERIFY OTP AVEC EMAIL (PRIORITÉ ÉLEVÉE) ===\n    if user_email:\n        logger.info(\n            f\"[ConfirmReset"
          },
          {
            "line": 1720,
            "context": "nfirmReset] === MÉTHODE 1: VERIFY OTP avec email {user_email} ===\"\n        )\n        try:\n            # Types"
          },
          {
            "line": 1733,
            "context": "uth.verify_otp(\n                        {\"email\": user_email, \"token\": request.token, \"type\": otp_type}"
          },
          {
            "line": 1805,
            "context": "gger.error(f\"[ConfirmReset] Token analysé: email={user_email}, type={token_type}\")\n\n    # Erreur finale avec p"
          },
          {
            "line": 1820,
            "context": "st data deletion for GDPR compliance.\n    \"\"\"\n    user_id = current_user[\"user_id\"]\n    user_email = curren"
          },
          {
            "line": 1820,
            "context": "R compliance.\n    \"\"\"\n    user_id = current_user[\"user_id\"]\n    user_email = current_user[\"email\"]\n    logg"
          },
          {
            "line": 1821,
            "context": "\"\"\"\n    user_id = current_user[\"user_id\"]\n    user_email = current_user[\"email\"]\n    logger.info(\"GDPR del"
          },
          {
            "line": 1822,
            "context": "ogger.info(\"GDPR deletion requested for %s (%s)\", user_email, user_id)\n    return {\n        \"success\": True,"
          },
          {
            "line": 1822,
            "context": "GDPR deletion requested for %s (%s)\", user_email, user_id)\n    return {\n        \"success\": True,\n        \"m"
          },
          {
            "line": 1847,
            "context": ".select(\"*\")\n                        .eq(\"auth_user_id\", current_user[\"user_id\"])"
          },
          {
            "line": 1847,
            "context": ".eq(\"auth_user_id\", current_user[\"user_id\"])\n                        .single()"
          },
          {
            "line": 1858,
            "context": "return {\n                            \"user_id\": current_user.get(\"user_id\"),"
          },
          {
            "line": 1858,
            "context": "\"user_id\": current_user.get(\"user_id\"),\n                            \"email\": current_u"
          },
          {
            "line": 1893,
            "context": "ser.get('email')}\")\n        return {\n            \"user_id\": current_user.get(\"user_id\"),\n            \"email"
          },
          {
            "line": 1893,
            "context": "return {\n            \"user_id\": current_user.get(\"user_id\"),\n            \"email\": current_user.get(\"email\")"
          },
          {
            "line": 1907,
            "context": "les données du JWT\n        return {\n            \"user_id\": current_user.get(\"user_id\"),\n            \"email"
          },
          {
            "line": 1907,
            "context": "return {\n            \"user_id\": current_user.get(\"user_id\"),\n            \"email\": current_user.get(\"email\")"
          }
        ]
      },
      "gdpr_practices": {
        "deletion": [
          1815
        ],
        "retention": [
          75,
          78
        ],
        "encryption": [],
        "audit_log": [],
        "consent": [],
        "export": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_encryption",
          "severity": "CRITICAL",
          "message": "Mots de passe trouvés sans chiffrement apparent"
        },
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\billing.py",
      "personal_data": {
        "email": [
          {
            "line": 77,
            "context": ", 'Plan Basic', 1000, 29.99, 0.015, '{\"support\": \"email\", \"priority\": \"normal\"}'),"
          },
          {
            "line": 739,
            "context": "ateur\"\"\"\n\n    # Sécurité\n    if current_user.get(\"email\") != user_email and not current_user.get("
          },
          {
            "line": 754,
            "context": "rsonnelles\"\"\"\n\n    user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPExcept"
          },
          {
            "line": 756,
            "context": "raise HTTPException(status_code=400, detail=\"User email not found\")\n\n    billing = get_billing_manager()"
          },
          {
            "line": 768,
            "context": "acturation\"\"\"\n\n    user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPExcept"
          },
          {
            "line": 770,
            "context": "raise HTTPException(status_code=400, detail=\"User email not found\")\n\n    billing = get_billing_manager()"
          }
        ],
        "name": [
          {
            "line": 696,
            "context": "\"plan\": {\n                            \"name\": current_data[\"plan_name\"],"
          }
        ],
        "user_id": [
          {
            "line": 88,
            "context": "S user_billing_info (\n                            user_email VARCHAR(255) PRIMARY KEY,"
          },
          {
            "line": 112,
            "context": "d SERIAL PRIMARY KEY,\n                            user_email VARCHAR(255) NOT NULL,"
          },
          {
            "line": 137,
            "context": "UNIQUE(user_email, month_year)\n                        );"
          },
          {
            "line": 147,
            "context": "d SERIAL PRIMARY KEY,\n                            user_email VARCHAR(255) NOT NULL,"
          },
          {
            "line": 172,
            "context": "UNIQUE(user_email, month_year)\n                        );"
          },
          {
            "line": 182,
            "context": "d SERIAL PRIMARY KEY,\n                            user_email VARCHAR(255) NOT NULL,"
          },
          {
            "line": 192,
            "context": "illing_usage_user_month ON monthly_usage_tracking(user_email, month_year);\",\n                        \"CREATE I"
          },
          {
            "line": 195,
            "context": "EXISTS idx_billing_audit_user ON quota_audit_log(user_email, created_at);\",\n                    ]"
          },
          {
            "line": 221,
            "context": "def check_quota_before_question(\n        self, user_email: str\n    ) -> Tuple[bool, Dict[str, Any]]:"
          },
          {
            "line": 246,
            "context": "LEFT JOIN monthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND"
          },
          {
            "line": 246,
            "context": "onthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND mut.month_year ="
          },
          {
            "line": 248,
            "context": "month_year = %s\n                        WHERE ubi.user_email = %s\n                    \"\"\","
          },
          {
            "line": 250,
            "context": "\"\"\",\n                        (current_month, user_email),\n                    )\n\n                    user"
          },
          {
            "line": 257,
            "context": "self._initialize_new_user(user_email)\n                        return self.check_quota_"
          },
          {
            "line": 258,
            "context": "return self.check_quota_before_question(user_email)\n\n                    # Déterminer le quota effec"
          },
          {
            "line": 283,
            "context": "lf._log_quota_action(\n                            user_email,\n                            \"question_blocked\","
          },
          {
            "line": 320,
            "context": "logger.error(f\"❌ Erreur vérification quota pour {user_email}: {e}\")\n            # En cas d'erreur, autoriser"
          },
          {
            "line": 325,
            "context": "def increment_usage_after_question(\n        self, user_email: str, success: bool = True, cost_usd: float = 0.0"
          },
          {
            "line": 343,
            "context": "= bp.plan_name\n                        WHERE ubi.user_email = %s\n                    \"\"\","
          },
          {
            "line": 345,
            "context": "\"\"\",\n                        (user_email,),\n                    )\n\n                    quo"
          },
          {
            "line": 355,
            "context": "thly_usage_tracking (\n                            user_email, month_year, questions_used, questions_successful"
          },
          {
            "line": 358,
            "context": "T_TIMESTAMP)\n                        ON CONFLICT (user_email, month_year) \n                        DO UPDATE S"
          },
          {
            "line": 367,
            "context": "(\n                            user_email,\n                            current_month,"
          },
          {
            "line": 380,
            "context": "self._update_quota_status(cur, user_email, current_month)\n\n                    conn.commit("
          },
          {
            "line": 386,
            "context": "self._log_quota_action(\n                        user_email,\n                        \"question_allowed\","
          },
          {
            "line": 396,
            "context": "ogger.error(f\"❌ Erreur incrémentation usage pour {user_email}: {e}\")\n\n    def _update_quota_status(self, cur,"
          },
          {
            "line": 398,
            "context": "}: {e}\")\n\n    def _update_quota_status(self, cur, user_email: str, month_year: str) -> None:\n        \"\"\"Met à"
          },
          {
            "line": 405,
            "context": "ROM monthly_usage_tracking \n                WHERE user_email = %s AND month_year = %s\n            \"\"\","
          },
          {
            "line": 407,
            "context": "month_year = %s\n            \"\"\",\n                (user_email, month_year),\n            )\n\n            result ="
          },
          {
            "line": 425,
            "context": "_at = CURRENT_TIMESTAMP\n                    WHERE user_email = %s AND month_year = %s AND quota_exceeded_at IS"
          },
          {
            "line": 427,
            "context": "\"\"\",\n                    (new_status.value, user_email, month_year),\n                )\n            elif"
          },
          {
            "line": 441,
            "context": "SET current_status = %s \n                WHERE user_email = %s AND month_year = %s\n            \"\"\","
          },
          {
            "line": 443,
            "context": "\"\"\",\n                (new_status.value, user_email, month_year),\n            )\n\n        except Excep"
          },
          {
            "line": 449,
            "context": "status: {e}\")\n\n    def _initialize_new_user(self, user_email: str, plan_name: str = \"free\") -> None:\n        \""
          },
          {
            "line": 456,
            "context": "INSERT INTO user_billing_info (user_email, plan_name)\n                        VALUES (%s, %"
          },
          {
            "line": 458,
            "context": "UES (%s, %s)\n                        ON CONFLICT (user_email) DO NOTHING\n                    \"\"\","
          },
          {
            "line": 460,
            "context": "\"\"\",\n                        (user_email, plan_name),\n                    )"
          },
          {
            "line": 464,
            "context": "f\"✅ Nouvel utilisateur initialisé: {user_email} - Plan: {plan_name}\"\n                    )"
          },
          {
            "line": 467,
            "context": "gger.error(f\"❌ Erreur initialisation utilisateur {user_email}: {e}\")\n\n    def _log_quota_action(\n        self,"
          },
          {
            "line": 470,
            "context": ": {e}\")\n\n    def _log_quota_action(\n        self, user_email: str, action: str, details: Dict[str, Any]\n    )"
          },
          {
            "line": 478,
            "context": "INSERT INTO quota_audit_log (user_email, action, details)\n                        VALUES"
          },
          {
            "line": 481,
            "context": "\"\"\",\n                        (user_email, action, json.dumps(details)),"
          },
          {
            "line": 488,
            "context": "def generate_monthly_invoice(\n        self, user_email: str, year: int, month: int\n    ) -> Dict[str, An"
          },
          {
            "line": 509,
            "context": "LEFT JOIN monthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND"
          },
          {
            "line": 509,
            "context": "onthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND mut.month_year ="
          },
          {
            "line": 511,
            "context": "month_year = %s\n                        WHERE ubi.user_email = %s\n                    \"\"\","
          },
          {
            "line": 513,
            "context": "\"\"\",\n                        (month_year, user_email),\n                    )\n\n                    bill"
          },
          {
            "line": 520,
            "context": "\"error\": f\"Aucune donnée de facturation pour {user_email}\"\n                        }"
          },
          {
            "line": 549,
            "context": "TO monthly_invoices (\n                            user_email, month_year, plan_name, questions_included,"
          },
          {
            "line": 553,
            "context": "%s, %s, %s)\n                        ON CONFLICT (user_email, month_year)\n                        DO UPDATE SE"
          },
          {
            "line": 562,
            "context": "(\n                            user_email,\n                            month_year,"
          },
          {
            "line": 578,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"month_year"
          },
          {
            "line": 578,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"month_year\": month_year"
          },
          {
            "line": 587,
            "context": "logger.error(f\"❌ Erreur génération facture pour {user_email}: {e}\")\n            return {\"error\": str(e)}"
          },
          {
            "line": 591,
            "context": "str(e)}\n\n    def change_user_plan(\n        self, user_email: str, new_plan: str, effective_date: datetime = N"
          },
          {
            "line": 605,
            "context": "= CURRENT_TIMESTAMP\n                        WHERE user_email = %s\n                    \"\"\","
          },
          {
            "line": 607,
            "context": "\"\"\",\n                        (new_plan, user_email),\n                    )\n\n                    if c"
          },
          {
            "line": 614,
            "context": "INSERT INTO user_billing_info (user_email, plan_name)\n                            VALUES (%"
          },
          {
            "line": 617,
            "context": "\"\"\",\n                            (user_email, new_plan),\n                        )"
          },
          {
            "line": 624,
            "context": "self._log_quota_action(\n                        user_email,\n                        \"plan_changed\","
          },
          {
            "line": 635,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"new_plan\":"
          },
          {
            "line": 635,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"new_plan\": new_plan,"
          },
          {
            "line": 642,
            "context": "logger.error(f\"❌ Erreur changement plan pour {user_email}: {e}\")\n            return {\"error\": str(e)}"
          },
          {
            "line": 645,
            "context": ": str(e)}\n\n    def get_user_billing_summary(self, user_email: str) -> Dict[str, Any]:\n        \"\"\"Résumé comple"
          },
          {
            "line": 666,
            "context": "LEFT JOIN monthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND"
          },
          {
            "line": 666,
            "context": "onthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                            AND mut.month_year ="
          },
          {
            "line": 668,
            "context": "month_year = %s\n                        WHERE ubi.user_email = %s\n                    \"\"\","
          },
          {
            "line": 670,
            "context": "\"\"\",\n                        (current_month, user_email),\n                    )\n\n                    curr"
          },
          {
            "line": 676,
            "context": "return {\"error\": f\"Utilisateur {user_email} non trouvé\"}\n\n                    # Historique d"
          },
          {
            "line": 683,
            "context": "M monthly_invoices \n                        WHERE user_email = %s\n                        ORDER BY month_year"
          },
          {
            "line": 687,
            "context": "\"\"\",\n                        (user_email,),\n                    )\n\n                    inv"
          },
          {
            "line": 693,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"current_mo"
          },
          {
            "line": 693,
            "context": "return {\n                        \"user_email\": user_email,\n                        \"current_month\": current"
          },
          {
            "line": 714,
            "context": "logger.error(f\"❌ Erreur billing summary pour {user_email}: {e}\")\n            return {\"error\": str(e)}\n\n\n#"
          },
          {
            "line": 732,
            "context": "CTURATION ==========\n\n\n@router.get(\"/quota-check/{user_email}\")\ndef check_user_quota(\n    user_email: str, cur"
          },
          {
            "line": 734,
            "context": "ta-check/{user_email}\")\ndef check_user_quota(\n    user_email: str, current_user: dict = Depends(get_current_us"
          },
          {
            "line": 739,
            "context": "# Sécurité\n    if current_user.get(\"email\") != user_email and not current_user.get(\n        \"is_admin\", Fal"
          },
          {
            "line": 745,
            "context": "ed, details = billing.check_quota_before_question(user_email)\n\n    return {\"user_email\": user_email, \"quota_av"
          },
          {
            "line": 747,
            "context": "k_quota_before_question(user_email)\n\n    return {\"user_email\": user_email, \"quota_available\": allowed, \"detail"
          },
          {
            "line": 747,
            "context": "e_question(user_email)\n\n    return {\"user_email\": user_email, \"quota_available\": allowed, \"details\": details}"
          },
          {
            "line": 754,
            "context": "\"Informations de facturation personnelles\"\"\"\n\n    user_email = current_user.get(\"email\")\n    if not user_email"
          },
          {
            "line": 755,
            "context": "user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=400, det"
          },
          {
            "line": 759,
            "context": "ger()\n    return billing.get_user_billing_summary(user_email)\n\n\n@router.post(\"/change-plan\")\ndef change_user_p"
          },
          {
            "line": 768,
            "context": "\"\"\"Changement de plan de facturation\"\"\"\n\n    user_email = current_user.get(\"email\")\n    if not user_email"
          },
          {
            "line": 769,
            "context": "user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=400, det"
          },
          {
            "line": 773,
            "context": "ing_manager()\n    return billing.change_user_plan(user_email, new_plan)\n\n\n@router.post(\"/generate-invoice/{use"
          },
          {
            "line": 776,
            "context": "ail, new_plan)\n\n\n@router.post(\"/generate-invoice/{user_email}/{year}/{month}\")\ndef generate_invoice(\n    user_"
          },
          {
            "line": 778,
            "context": "email}/{year}/{month}\")\ndef generate_invoice(\n    user_email: str,\n    year: int,\n    month: int,\n    current_"
          },
          {
            "line": 789,
            "context": "ger()\n    return billing.generate_monthly_invoice(user_email, year, month)\n\n\n@router.get(\"/plans\")\ndef availab"
          },
          {
            "line": 834,
            "context": "SELECT \n                        COUNT(DISTINCT user_email) as total_billing_users,"
          },
          {
            "line": 835,
            "context": "ing_users,\n                        COUNT(DISTINCT user_email) FILTER (WHERE plan_name != 'free') as paid_users"
          },
          {
            "line": 836,
            "context": "aid_users,\n                        COUNT(DISTINCT user_email) FILTER (WHERE plan_name = 'free') as free_users"
          },
          {
            "line": 849,
            "context": "rice_per_month,\n                        COUNT(ubi.user_email) as user_count,\n                        ROUND(COU"
          },
          {
            "line": 850,
            "context": "er_count,\n                        ROUND(COUNT(ubi.user_email) * 100.0 / SUM(COUNT(ubi.user_email)) OVER (), 2)"
          },
          {
            "line": 850,
            "context": "UND(COUNT(ubi.user_email) * 100.0 / SUM(COUNT(ubi.user_email)) OVER (), 2) as percentage\n                    F"
          },
          {
            "line": 863,
            "context": "SELECT \n                        COUNT(DISTINCT user_email) as active_users_this_month,"
          },
          {
            "line": 879,
            "context": "SELECT \n                        mut.user_email,\n                        ubi.plan_name,"
          },
          {
            "line": 886,
            "context": "LEFT JOIN user_billing_info ubi ON mut.user_email = ubi.user_email\n                    WHERE mut.mo"
          },
          {
            "line": 886,
            "context": "OIN user_billing_info ubi ON mut.user_email = ubi.user_email\n                    WHERE mut.month_year = %s"
          },
          {
            "line": 907,
            "context": "LEFT JOIN monthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                        AND mut"
          },
          {
            "line": 907,
            "context": "onthly_usage_tracking mut ON ubi.user_email = mut.user_email \n                        AND mut.month_year = %s"
          },
          {
            "line": 1012,
            "context": "EXPERT.PY ==========\n\n\ndef check_quota_middleware(user_email: str) -> Tuple[bool, Dict[str, Any]]:\n    \"\"\""
          },
          {
            "line": 1019,
            "context": "return billing.check_quota_before_question(user_email)\n    except Exception as e:\n        logger.error("
          },
          {
            "line": 1027,
            "context": "Erreur système\"}\n\n\ndef increment_quota_usage(\n    user_email: str, success: bool = True, cost_usd: float = 0.0"
          },
          {
            "line": 1034,
            "context": "()\n        billing.increment_usage_after_question(user_email, success, cost_usd)\n    except Exception as e:"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [
          177,
          384,
          472,
          472,
          485,
          622
        ],
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\billing_openai.py",
      "personal_data": {
        "name": [
          {
            "line": 232,
            "context": "e\": 0.00013,\n    }\n\n    # Estimation basée sur le nom du modèle\n    rate = 0.01  # Tarif par défaut"
          }
        ],
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "deletion": [
          355
        ],
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\conversations.py",
      "personal_data": {
        "email": [
          {
            "line": 104,
            "context": "f\"save_conversation: user={current_user.get('email', 'unknown')}, \"\n            f\"session_id={conver"
          },
          {
            "line": 112,
            "context": "non autorisée: {requester_id} ({current_user.get('email')}) → {conversation_data.user_id}\"\n            )"
          },
          {
            "line": 215,
            "context": "it}, \"\n            f\"requester={current_user.get('email', 'unknown')}\"\n        )\n\n        # Vérification"
          },
          {
            "line": 224,
            "context": "non autorisé: {requester_id} ({current_user.get('email')}) → {user_id}\"\n            )\n            raise"
          },
          {
            "line": 275,
            "context": "id}, \"\n            f\"requester={current_user.get('email', 'unknown')}\"\n        )\n\n        # Récupérer les"
          },
          {
            "line": 321,
            "context": "{message_data.role}, requester={current_user.get('email', 'unknown')}\"\n        )\n\n        # Ajouter le me"
          }
        ],
        "user_id": [
          {
            "line": 29,
            "context": "ession_id\n    question: str\n    response: str\n    user_id: str\n    timestamp: Optional[str] = None\n    sour"
          },
          {
            "line": 109,
            "context": "les UUID\n        requester_id = current_user.get(\"user_id\", \"\")\n        if conversation_data.user_id != req"
          },
          {
            "line": 110,
            "context": "r.get(\"user_id\", \"\")\n        if conversation_data.user_id != requester_id and not current_user.get(\"is_admi"
          },
          {
            "line": 112,
            "context": "{current_user.get('email')}) → {conversation_data.user_id}\"\n            )\n            raise HTTPException("
          },
          {
            "line": 154,
            "context": "nversation_data.conversation_id,\n                \"user_id\": conversation_data.user_id,\n                \"mes"
          },
          {
            "line": 154,
            "context": "_id,\n                \"user_id\": conversation_data.user_id,\n                \"message_count\": existing_conv[\""
          },
          {
            "line": 166,
            "context": "onversation_data.conversation_id,\n                user_id=conversation_data.user_id,\n                user_m"
          },
          {
            "line": 166,
            "context": "ion_id,\n                user_id=conversation_data.user_id,\n                user_message=conversation_data.q"
          },
          {
            "line": 181,
            "context": "ssion_id\": result[\"session_id\"],\n                \"user_id\": conversation_data.user_id,\n                \"mes"
          },
          {
            "line": 181,
            "context": "d\"],\n                \"user_id\": conversation_data.user_id,\n                \"message_count\": result[\"message"
          },
          {
            "line": 201,
            "context": "NOUVELLE ARCHITECTURE =====\n\n@router.get(\"/user/{user_id}\")\nasync def get_user_conversations_endpoint("
          },
          {
            "line": 203,
            "context": "\")\nasync def get_user_conversations_endpoint(\n    user_id: str,\n    limit: int = Query(default=50, ge=1, le"
          },
          {
            "line": 214,
            "context": "ogger.info(\n            f\"get_user_conversations: user_id={user_id}, limit={limit}, \"\n            f\"request"
          },
          {
            "line": 214,
            "context": "o(\n            f\"get_user_conversations: user_id={user_id}, limit={limit}, \"\n            f\"requester={curre"
          },
          {
            "line": 218,
            "context": ")\n\n        # Vérification sécurité - comparer les user_id (UUID)\n        requester_id = current_user.get(\"u"
          },
          {
            "line": 219,
            "context": "d (UUID)\n        requester_id = current_user.get(\"user_id\", \"\")\n        is_admin = current_user.get(\"user_t"
          },
          {
            "line": 222,
            "context": "r current_user.get(\"is_admin\", False)\n\n        if user_id != requester_id and not is_admin:\n            log"
          },
          {
            "line": 224,
            "context": ": {requester_id} ({current_user.get('email')}) → {user_id}\"\n            )\n            raise HTTPException("
          },
          {
            "line": 233,
            "context": "ation_service.get_user_conversations(\n            user_id=user_id,\n            limit=limit,\n            off"
          },
          {
            "line": 233,
            "context": "rvice.get_user_conversations(\n            user_id=user_id,\n            limit=limit,\n            offset=offs"
          },
          {
            "line": 239,
            "context": "logger.info(f\"Conversations trouvées pour {user_id}: {result['total']}\")\n\n        return {"
          },
          {
            "line": 243,
            "context": "n {\n            \"status\": \"success\",\n            \"user_id\": user_id,\n            \"conversations\": result[\"c"
          },
          {
            "line": 243,
            "context": "\"status\": \"success\",\n            \"user_id\": user_id,\n            \"conversations\": result[\"conversatio"
          },
          {
            "line": 255,
            "context": "ception(f\"Erreur récupération conversations pour {user_id}\")\n        raise HTTPException(\n            statu"
          },
          {
            "line": 539,
            "context": "on: {str(e)}\",\n        )\n\n\n@router.delete(\"/user/{user_id}\")\nasync def delete_all_user_conversations(\n    u"
          },
          {
            "line": 541,
            "context": "d}\")\nasync def delete_all_user_conversations(\n    user_id: str,\n    current_user: dict = Depends(get_curren"
          },
          {
            "line": 548,
            "context": "logger.info(f\"delete_all_user_conversations: user_id={user_id}\")\n\n        # Vérification sécurité - Co"
          },
          {
            "line": 548,
            "context": "er.info(f\"delete_all_user_conversations: user_id={user_id}\")\n\n        # Vérification sécurité - Comparer le"
          },
          {
            "line": 551,
            "context": "les UUID\n        requester_id = current_user.get(\"user_id\", \"\")\n        if user_id != requester_id and not"
          },
          {
            "line": 552,
            "context": "r_id = current_user.get(\"user_id\", \"\")\n        if user_id != requester_id and not current_user.get(\"is_admi"
          },
          {
            "line": 564,
            "context": "\"SELECT COUNT(*) FROM conversations WHERE user_id = %s AND status != 'deleted'\","
          },
          {
            "line": 565,
            "context": "%s AND status != 'deleted'\",\n                    (user_id,)\n                )\n                total_found ="
          },
          {
            "line": 571,
            "context": "SET status = 'deleted', updated_at = NOW() WHERE user_id = %s AND status != 'deleted'\","
          },
          {
            "line": 572,
            "context": "%s AND status != 'deleted'\",\n                    (user_id,)\n                )\n                deleted_count"
          },
          {
            "line": 576,
            "context": "f\"Toutes les conversations supprimées pour user: {user_id}, count: {deleted_count}\")\n\n        return {"
          },
          {
            "line": 580,
            "context": "n {\n            \"status\": \"success\",\n            \"user_id\": user_id,\n            \"deleted_count\": deleted_c"
          },
          {
            "line": 580,
            "context": "\"status\": \"success\",\n            \"user_id\": user_id,\n            \"deleted_count\": deleted_count,"
          },
          {
            "line": 590,
            "context": "logger.exception(f\"Erreur suppression pour {user_id}\")\n        raise HTTPException(\n            statu"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "deletion": [
          502,
          513,
          539,
          555,
          569
        ],
        "audit_log": [],
        "consent": [],
        "export": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\health.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": [],
        "export": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\invitations.py",
      "personal_data": {
        "email": [
          {
            "line": 170,
            "context": "utilisateur\n            user_email = payload.get(\"email\")\n            user_id = payload.get(\"sub\") or pay"
          },
          {
            "line": 204,
            "context": "(),\n                {\n                    \"email\": user_email,\n                    \"id\": user_id,"
          },
          {
            "line": 257,
            "context": "(),\n                {\n                    \"email\": user_data.get(\"email\"),\n                    \"id"
          },
          {
            "line": 257,
            "context": "{\n                    \"email\": user_data.get(\"email\"),\n                    \"id\": user_data.get(\"user_"
          },
          {
            "line": 260,
            "context": "full_name\")\n                    or user_data.get(\"email\", \"\").split(\"@\")[0],\n                    \"metadat"
          },
          {
            "line": 287,
            "context": "raise ValueError(\"Au moins une adresse email est requise\")\n        if len(v) > 10:"
          },
          {
            "line": 294,
            "context": "return v\n\n\nclass InvitationResult(BaseModel):\n    email: str\n    success: bool\n    status: str  # 'sent',"
          },
          {
            "line": 313,
            "context": "lt] = []\n\n\nclass InvitationStatus(BaseModel):\n    email: str\n    status: str  # 'pending', 'accepted', 'e"
          },
          {
            "line": 328,
            "context": "S\", \"24\"))\n\n    async def check_user_exists(self, email: str) -> Dict[str, Any]:\n        \"\"\"Vérifie si un"
          },
          {
            "line": 336,
            "context": "r user in existing_users:\n                if user.email and user.email.lower() == email.lower():"
          },
          {
            "line": 336,
            "context": "ing_users:\n                if user.email and user.email.lower() == email.lower():\n                    ret"
          },
          {
            "line": 336,
            "context": "if user.email and user.email.lower() == email.lower():\n                    return {"
          },
          {
            "line": 340,
            "context": "\"user_id\": user.id,\n                        \"email\": user.email,\n                        \"created_at"
          },
          {
            "line": 340,
            "context": "\": user.id,\n                        \"email\": user.email,\n                        \"created_at\": user.creat"
          },
          {
            "line": 349,
            "context": "logger.error(f\"Erreur vérification utilisateur {email}: {str(e)}\")\n            return {\"exists\": False,"
          },
          {
            "line": 353,
            "context": "async def check_invitation_status(\n        self, email: str, inviter_email: str\n    ) -> Dict[str, Any]:"
          },
          {
            "line": 355,
            "context": "\"\"\"Vérifie le statut des invitations pour cet email\"\"\"\n        try:\n            result = ("
          },
          {
            "line": 360,
            "context": ".select(\"*\")\n                .eq(\"email\", email)\n                .order(\"invited_at\", des"
          },
          {
            "line": 360,
            "context": ".select(\"*\")\n                .eq(\"email\", email)\n                .order(\"invited_at\", desc=True)"
          },
          {
            "line": 435,
            "context": "er.error(f\"Erreur vérification statut invitation {email}: {str(e)}\")\n            return {\"has_invitations"
          },
          {
            "line": 439,
            "context": "f validate_email_before_invitation(\n        self, email: str, inviter_email: str\n    ) -> Dict[str, Any]:"
          },
          {
            "line": 444,
            "context": "user_check = await self.check_user_exists(email)\n\n        if user_check[\"exists\"]:\n            re"
          },
          {
            "line": 450,
            "context": "sts\",\n                \"message\": f\"L'utilisateur {email} possède déjà un compte Intelia Expert\","
          },
          {
            "line": 459,
            "context": "ation_status = await self.check_invitation_status(email, inviter_email)\n\n        if not invitation_status"
          },
          {
            "line": 466,
            "context": "\"message\", f\"Impossible d'inviter {email}\"\n                ),\n                \"details\": i"
          },
          {
            "line": 477,
            "context": "\"message\": f\"Renvoi d'invitation possible pour {email}\",\n                \"details\": invitation_status,"
          },
          {
            "line": 486,
            "context": "\"message\": f\"Invitation possible pour {email}\",\n        }\n\n    def get_invitation_template_dat"
          },
          {
            "line": 496,
            "context": "\"\"\"Prépare les données pour le template d'email\"\"\"\n\n        templates = {\n            \"fr\": {"
          },
          {
            "line": 572,
            "context": "async def send_invitation(\n        self,\n        email: str,\n        inviter_name: str,\n        inviter_"
          },
          {
            "line": 586,
            "context": ".auth.admin.invite_user_by_email(\n                email=email,\n                options={"
          },
          {
            "line": 586,
            "context": "admin.invite_user_by_email(\n                email=email,\n                options={\n                    \"r"
          },
          {
            "line": 602,
            "context": "f\"Invitation Supabase {action_type} à {email} de la part de {inviter_name}\"\n            )"
          },
          {
            "line": 607,
            "context": "await self.log_invitation(\n                email,\n                inviter_email,\n                i"
          },
          {
            "line": 617,
            "context": "\"success\": True,\n                \"email\": email,\n                \"invitation_id\": respons"
          },
          {
            "line": 617,
            "context": "\"success\": True,\n                \"email\": email,\n                \"invitation_id\": response.user.i"
          },
          {
            "line": 624,
            "context": "ogger.error(f\"Erreur envoi invitation Supabase à {email}: {str(e)}\")\n            return {"
          },
          {
            "line": 627,
            "context": "\"success\": False,\n                \"email\": email,\n                \"error\": str(e),"
          },
          {
            "line": 627,
            "context": "\"success\": False,\n                \"email\": email,\n                \"error\": str(e),"
          },
          {
            "line": 635,
            "context": "invitation_with_validation(\n        self,\n        email: str,\n        inviter_name: str,\n        inviter_"
          },
          {
            "line": 647,
            "context": "validate_email_before_invitation(\n                email, inviter_email\n            )\n\n            if not"
          },
          {
            "line": 653,
            "context": "\"success\": False,\n                    \"email\": email,\n                    \"status\": \"skipped\","
          },
          {
            "line": 653,
            "context": "\"success\": False,\n                    \"email\": email,\n                    \"status\": \"skipped\","
          },
          {
            "line": 667,
            "context": "return await self.send_invitation(\n            email, inviter_name, inviter_email, personal_message, l"
          },
          {
            "line": 672,
            "context": "async def log_invitation(\n        self,\n        email: str,\n        inviter_email: str,\n        inviter"
          },
          {
            "line": 683,
            "context": "await self.mark_previous_invitations_superseded(email, inviter_email)\n\n            # Données à insérer"
          },
          {
            "line": 687,
            "context": "invitation_data = {\n                \"email\": email,\n                \"inviter_email\": inviter"
          },
          {
            "line": 687,
            "context": "invitation_data = {\n                \"email\": email,\n                \"inviter_email\": inviter_email,"
          },
          {
            "line": 703,
            "context": "f\"{action_type.capitalize()} loggée avec succès: {email}\")\n            return result.data[0] if result.da"
          },
          {
            "line": 707,
            "context": "logger.error(f\"Erreur enregistrement invitation: {email} - {str(e)}\")\n            if \"404\" in str(e) or \""
          },
          {
            "line": 715,
            "context": "rk_previous_invitations_superseded(\n        self, email: str, inviter_email: str\n    ):\n        \"\"\"Marque"
          },
          {
            "line": 727,
            "context": "}\n                )\n                .eq(\"email\", email)\n                .eq(\"inviter_email\", inv"
          },
          {
            "line": 727,
            "context": "}\n                )\n                .eq(\"email\", email)\n                .eq(\"inviter_email\", inviter_ema"
          },
          {
            "line": 735,
            "context": ") précédente(s) marquée(s) comme superseded pour {email}\"\n                )\n\n        except Exception as"
          },
          {
            "line": 740,
            "context": "f\"Erreur marquage invitations superseded pour {email}: {str(e)}\"\n            )\n\n    async def mark_inv"
          },
          {
            "line": 743,
            "context": ")\n\n    async def mark_invitation_accepted(self, email: str, user_id: str = None):\n        \"\"\"Marque une"
          },
          {
            "line": 749,
            "context": ".select(\"*\")\n                .eq(\"email\", email)\n                .eq(\"status\", \"pending\")"
          },
          {
            "line": 749,
            "context": ".select(\"*\")\n                .eq(\"email\", email)\n                .eq(\"status\", \"pending\")"
          },
          {
            "line": 773,
            "context": "er.info(f\"Invitation marquée comme acceptée pour {email}\")\n                return result.data[0] if resul"
          },
          {
            "line": 776,
            "context": "warning(f\"Aucune invitation pending trouvée pour {email}\")\n                return None\n\n        except Ex"
          },
          {
            "line": 780,
            "context": "error(f\"Erreur marquage invitation acceptée pour {email}: {str(e)}\")\n            return None\n\n    def get"
          },
          {
            "line": 906,
            "context": ")[:10]\n\n            # Statistiques par email unique (dédoublonnage)\n            unique_emails"
          },
          {
            "line": 909,
            "context": "for inv in sent_invitations.data:\n                email = inv[\"email\"]\n                if ("
          },
          {
            "line": 909,
            "context": "nt_invitations.data:\n                email = inv[\"email\"]\n                if (\n                    email"
          },
          {
            "line": 911,
            "context": "\"email\"]\n                if (\n                    email not in unique_emails\n                    or inv[\""
          },
          {
            "line": 912,
            "context": "or inv[\"invited_at\"] > unique_emails[email][\"invited_at\"]\n                ):"
          },
          {
            "line": 914,
            "context": "):\n                    unique_emails[email] = inv\n\n            unique_sent = len(unique_emai"
          },
          {
            "line": 994,
            "context": "# Vérification et ajustement automatique de l'email inviteur\n    if current_user.email.lower() != req"
          },
          {
            "line": 995,
            "context": "tomatique de l'email inviteur\n    if current_user.email.lower() != request.inviter_email.lower():"
          },
          {
            "line": 996,
            "context": "r():\n        request.inviter_email = current_user.email\n        if not request.inviter_name or request.in"
          },
          {
            "line": 998,
            "context": ".inviter_name = current_user.name or current_user.email.split(\"@\")[0]\n\n    # Initialiser le service Supab"
          },
          {
            "line": 1010,
            "context": "_count = 0\n    results = []\n\n    # Traiter chaque email individuellement\n    for email in request.emails:"
          },
          {
            "line": 1011,
            "context": "# Traiter chaque email individuellement\n    for email in request.emails:\n        try:\n            logge"
          },
          {
            "line": 1013,
            "context": "try:\n            logger.info(f\"Traitement de {email}\")\n\n            # Envoyer l'invitation avec valid"
          },
          {
            "line": 1017,
            "context": ".send_invitation_with_validation(\n                email=email,\n                inviter_name=request.invit"
          },
          {
            "line": 1017,
            "context": "invitation_with_validation(\n                email=email,\n                inviter_name=request.inviter_nam"
          },
          {
            "line": 1027,
            "context": "tation_result = InvitationResult(\n                email=email,\n                success=result[\"success\"],"
          },
          {
            "line": 1027,
            "context": "_result = InvitationResult(\n                email=email,\n                success=result[\"success\"],"
          },
          {
            "line": 1041,
            "context": "logger.info(f\"Invitation renvoyée: {email}\")\n                else:\n                    sent"
          },
          {
            "line": 1044,
            "context": "logger.info(f\"Invitation envoyée: {email}\")\n            elif result.get(\"status\") == \"skip"
          },
          {
            "line": 1047,
            "context": "logger.info(f\"Invitation ignorée: {email} - {result.get('reason')}\")\n            else:"
          },
          {
            "line": 1050,
            "context": "logger.error(f\"Échec invitation: {email}\")\n\n        except Exception as e:\n            lo"
          },
          {
            "line": 1053,
            "context": "logger.error(f\"Erreur inattendue pour {email}: {str(e)}\")\n\n            results.append("
          },
          {
            "line": 1057,
            "context": "InvitationResult(\n                    email=email,\n                    success=False,"
          },
          {
            "line": 1057,
            "context": "InvitationResult(\n                    email=email,\n                    success=False,"
          },
          {
            "line": 1111,
            "context": "ccepted\")\nasync def mark_invitation_accepted(\n    email: EmailStr,\n    user_id: Optional[str] = None,"
          },
          {
            "line": 1117,
            "context": "\"\"\"\n\n    logger.info(f\"Marquage acceptation pour {email}\")\n\n    invitation_service = SupabaseInvitationSe"
          },
          {
            "line": 1120,
            "context": "await invitation_service.mark_invitation_accepted(email, user_id)\n\n    if result:\n        return {"
          },
          {
            "line": 1125,
            "context": "ssage\": f\"Invitation marquée comme acceptée pour {email}\",\n            \"invitation\": result,\n        }"
          },
          {
            "line": 1131,
            "context": "ssage\": f\"Aucune invitation pending trouvée pour {email}\",\n        }\n\n\n@router.get(\"/stats/detailed\")\nasy"
          },
          {
            "line": 1138,
            "context": "nfo(f\"Demande stats détaillées pour {current_user.email}\")\n\n    invitation_service = SupabaseInvitationSe"
          },
          {
            "line": 1141,
            "context": "itation_service.get_invitation_stats(current_user.email)\n\n    return {\n        \"user_email\": current_user"
          },
          {
            "line": 1144,
            "context": "return {\n        \"user_email\": current_user.email,\n        \"user_name\": current_user.name,"
          },
          {
            "line": 1155,
            "context": "er.info(f\"Demande résumé stats pour {current_user.email}\")\n\n    invitation_service = SupabaseInvitationSe"
          },
          {
            "line": 1158,
            "context": "itation_service.get_invitation_stats(current_user.email)\n\n    return {\n        \"user_email\": current_user"
          },
          {
            "line": 1161,
            "context": "return {\n        \"user_email\": current_user.email,\n        \"total_invitations_sent\": stats[\"total_s"
          },
          {
            "line": 1221,
            "context": "{\n                    \"inviter_email\": email,\n                    \"invitations_sent\": stats[\"s"
          },
          {
            "line": 1233,
            "context": "),\n                }\n                for email, stats in inviter_stats.items()\n            ],"
          },
          {
            "line": 1263,
            "context": "idation de {len(emails)} emails par {current_user.email}\")\n\n    invitation_service = SupabaseInvitationSe"
          },
          {
            "line": 1268,
            "context": "InvitationService()\n    validations = []\n\n    for email in emails:\n        validation = await invitation_"
          },
          {
            "line": 1270,
            "context": "ice.validate_email_before_invitation(\n            email, current_user.email\n        )\n        validations"
          },
          {
            "line": 1270,
            "context": "efore_invitation(\n            email, current_user.email\n        )\n        validations.append("
          },
          {
            "line": 1274,
            "context": "alidations.append(\n            {\n                \"email\": email,\n                \"can_invite\": validation"
          },
          {
            "line": 1274,
            "context": "ns.append(\n            {\n                \"email\": email,\n                \"can_invite\": validation[\"can_in"
          },
          {
            "line": 1313,
            "context": "*\")\n            .eq(\"inviter_email\", current_user.email)\n            .order(\"invited_at\", desc=True)"
          },
          {
            "line": 1331,
            "context": "icated\": True,\n        \"user_email\": current_user.email,\n        \"user_name\": current_user.name,"
          },
          {
            "line": 1412,
            "context": "{\n                    \"inviter_email\": email,\n                    \"inviter_name\": stats[\"invit"
          },
          {
            "line": 1426,
            "context": "),\n                }\n                for email, stats in inviter_stats.items()\n            ],"
          },
          {
            "line": 1436,
            "context": "{\n                    \"inviter_email\": email,\n                    \"inviter_name\": stats[\"invit"
          },
          {
            "line": 1450,
            "context": "),\n                }\n                for email, stats in inviter_stats.items()\n                i"
          },
          {
            "line": 1604,
            "context": "for inv in invitations.data:\n            email = inv[\"inviter_email\"]\n            inviter_stats["
          },
          {
            "line": 1605,
            "context": "= inv[\"inviter_email\"]\n            inviter_stats[email][\"sent\"] += 1\n            inviter_stats[email][\"n"
          },
          {
            "line": 1606,
            "context": "ats[email][\"sent\"] += 1\n            inviter_stats[email][\"name\"] = inv.get(\"inviter_name\", email.split(\"@"
          },
          {
            "line": 1606,
            "context": "er_stats[email][\"name\"] = inv.get(\"inviter_name\", email.split(\"@\")[0])\n            if inv.get(\"status\") ="
          },
          {
            "line": 1608,
            "context": "us\") == \"accepted\":\n                inviter_stats[email][\"accepted\"] += 1\n\n        # Trier selon le critè"
          },
          {
            "line": 1615,
            "context": "{\n                    \"inviter_email\": email,\n                    \"inviter_name\": stats[\"name\""
          },
          {
            "line": 1628,
            "context": "),\n                }\n                for email, stats in inviter_stats.items()\n            ],"
          }
        ],
        "phone": [
          {
            "line": 512,
            "context": "l\",\n                    \"Utiliser l'interface sur mobile, tablette et ordinateur\",\n                ],"
          },
          {
            "line": 528,
            "context": "English, or Spanish\",\n                    \"Use on mobile, tablet, and computer\",\n                ],"
          }
        ],
        "name": [
          {
            "line": 174,
            "context": "user_name = (\n                user_metadata.get(\"name\")\n                or payload.get(\"name\")"
          },
          {
            "line": 175,
            "context": "adata.get(\"name\")\n                or payload.get(\"name\")\n                or payload.get(\"full_name\")"
          },
          {
            "line": 176,
            "context": "yload.get(\"name\")\n                or payload.get(\"full_name\")\n            )\n\n            # Validation des don"
          },
          {
            "line": 206,
            "context": "\"id\": user_id,\n                    \"name\": user_name or user_email.split(\"@\")[0],"
          },
          {
            "line": 259,
            "context": "\": user_data.get(\"user_id\"),\n                    \"name\": user_data.get(\"full_name\")"
          },
          {
            "line": 259,
            "context": "_id\"),\n                    \"name\": user_data.get(\"full_name\")\n                    or user_data.get(\"email\", \""
          },
          {
            "line": 998,
            "context": ":\n            request.inviter_name = current_user.name or current_user.email.split(\"@\")[0]\n\n    # Initia"
          },
          {
            "line": 1145,
            "context": "ent_user.email,\n        \"user_name\": current_user.name,\n        \"supabase_enabled\": True,\n        \"max_p"
          },
          {
            "line": 1332,
            "context": "ent_user.email,\n        \"user_name\": current_user.name,\n        \"user_id\": current_user.id,\n        \"sup"
          },
          {
            "line": 1601,
            "context": "= defaultdict(lambda: {\"sent\": 0, \"accepted\": 0, \"name\": \"\"})\n\n        for inv in invitations.data:"
          },
          {
            "line": 1606,
            "context": "l][\"sent\"] += 1\n            inviter_stats[email][\"name\"] = inv.get(\"inviter_name\", email.split(\"@\")[0])"
          },
          {
            "line": 1616,
            "context": "email,\n                    \"inviter_name\": stats[\"name\"],\n                    \"invitations_sent\": stats["
          }
        ],
        "address": [
          {
            "line": 287,
            "context": "== 0:\n            raise ValueError(\"Au moins une adresse email est requise\")\n        if len(v) > 10:"
          }
        ],
        "user_id": [
          {
            "line": 170,
            "context": "# Extraction des données utilisateur\n            user_email = payload.get(\"email\")\n            user_id = payl"
          },
          {
            "line": 171,
            "context": "user_email = payload.get(\"email\")\n            user_id = payload.get(\"sub\") or payload.get(\"user_id\")"
          },
          {
            "line": 171,
            "context": "user_id = payload.get(\"sub\") or payload.get(\"user_id\")\n            user_metadata = payload.get(\"user_m"
          },
          {
            "line": 180,
            "context": "lidation des données critiques\n            if not user_email or not user_id:\n                continue"
          },
          {
            "line": 180,
            "context": "es critiques\n            if not user_email or not user_id:\n                continue\n\n            # Validati"
          },
          {
            "line": 196,
            "context": "info(\n                f\"Utilisateur authentifié: {user_email} (secret: {secret_name})\"\n            )"
          },
          {
            "line": 204,
            "context": "),\n                {\n                    \"email\": user_email,\n                    \"id\": user_id,"
          },
          {
            "line": 205,
            "context": "\"email\": user_email,\n                    \"id\": user_id,\n                    \"name\": user_name or user_em"
          },
          {
            "line": 206,
            "context": "user_id,\n                    \"name\": user_name or user_email.split(\"@\")[0],\n                    \"metadata\": us"
          },
          {
            "line": 258,
            "context": "email\"),\n                    \"id\": user_data.get(\"user_id\"),\n                    \"name\": user_data.get(\"ful"
          },
          {
            "line": 339,
            "context": "\"exists\": True,\n                        \"user_id\": user.id,\n                        \"email\": user."
          },
          {
            "line": 743,
            "context": "nc def mark_invitation_accepted(self, email: str, user_id: str = None):\n        \"\"\"Marque une invitation co"
          },
          {
            "line": 763,
            "context": "soformat(),\n                }\n\n                if user_id:\n                    update_data[\"accepted_user_i"
          },
          {
            "line": 764,
            "context": "update_data[\"accepted_user_id\"] = user_id\n\n                result = (\n                    s"
          },
          {
            "line": 783,
            "context": "return None\n\n    def get_user_by_id(self, user_id: str) -> Dict[str, Any]:\n        \"\"\"Récupère un u"
          },
          {
            "line": 786,
            "context": "nse = self.admin_client.auth.admin.get_user_by_id(user_id)\n\n            if response.user:\n                r"
          },
          {
            "line": 794,
            "context": "logger.error(f\"Erreur récupération utilisateur {user_id}: {str(e)}\")\n            return {\"success\": False"
          },
          {
            "line": 798,
            "context": "str(e)}\n\n    def update_user_by_id(\n        self, user_id: str, update_data: Dict[str, Any]\n    ) -> Dict[s"
          },
          {
            "line": 803,
            "context": "ent.auth.admin.update_user_by_id(\n                user_id, update_data\n            )\n\n            if respon"
          },
          {
            "line": 812,
            "context": "logger.error(f\"Erreur mise à jour utilisateur {user_id}: {str(e)}\")\n            return {\"success\": False"
          },
          {
            "line": 815,
            "context": "str(e)}\n\n    async def get_invitation_stats(self, user_email: str) -> Dict[str, Any]:\n        \"\"\"Récupère les"
          },
          {
            "line": 821,
            "context": ".select(\"*\")\n                .eq(\"inviter_email\", user_email)\n                .execute()\n            )"
          },
          {
            "line": 1112,
            "context": "ark_invitation_accepted(\n    email: EmailStr,\n    user_id: Optional[str] = None,\n    current_user=Depends(g"
          },
          {
            "line": 1120,
            "context": "nvitation_service.mark_invitation_accepted(email, user_id)\n\n    if result:\n        return {\n            \"su"
          },
          {
            "line": 1144,
            "context": "_stats(current_user.email)\n\n    return {\n        \"user_email\": current_user.email,\n        \"user_name\": curren"
          },
          {
            "line": 1161,
            "context": "_stats(current_user.email)\n\n    return {\n        \"user_email\": current_user.email,\n        \"total_invitations_"
          },
          {
            "line": 1331,
            "context": "return {\n        \"authenticated\": True,\n        \"user_email\": current_user.email,\n        \"user_name\": curren"
          },
          {
            "line": 1333,
            "context": "\"user_name\": current_user.name,\n        \"user_id\": current_user.id,\n        \"supabase_available\":"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [],
        "consent": [],
        "export": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\logging.py",
      "personal_data": {
        "password": [
          {
            "line": 807,
            "context": "_USER\", \"postgres\"),\n                            \"password\": os.getenv(\"POSTGRES_PASSWORD\", \"\"),"
          },
          {
            "line": 815,
            "context": "GRES_USER\", \"postgres\"),\n                        \"password\": os.getenv(\"POSTGRES_PASSWORD\", \"\"),"
          }
        ],
        "ip_address": [
          {
            "line": 86,
            "context": "user_email: str,\n        session_id: str,\n        ip_address: str = None,\n        user_agent: str = None,"
          },
          {
            "line": 95,
            "context": "ser_email, session_id, login_time, last_activity, ip_address, user_agent)\n                        VALUES (%s,"
          },
          {
            "line": 101,
            "context": "(user_email, session_id, ip_address, user_agent),\n                    )"
          }
        ],
        "user_id": [
          {
            "line": 84,
            "context": "===\n\n    def start_session(\n        self,\n        user_email: str,\n        session_id: str,\n        ip_address"
          },
          {
            "line": 95,
            "context": "INSERT INTO user_sessions (user_email, session_id, login_time, last_activity, ip_addres"
          },
          {
            "line": 101,
            "context": "\"\"\",\n                        (user_email, session_id, ip_address, user_agent),"
          },
          {
            "line": 104,
            "context": ")\n\n            logger.info(f\"Session démarrée: {user_email} ({session_id})\")\n            return {\"success\":"
          },
          {
            "line": 121,
            "context": "ut_time IS NULL\n                        RETURNING user_email\n                    \"\"\","
          },
          {
            "line": 128,
            "context": "return {\"success\": True, \"user_email\": result[0]}\n                    else:"
          },
          {
            "line": 152,
            "context": "ut_time IS NULL\n                        RETURNING user_email, session_duration_seconds\n                    \"\"\""
          },
          {
            "line": 159,
            "context": "if result:\n                        user_email, duration = result\n                        logger"
          },
          {
            "line": 161,
            "context": "f\"Session terminée: {user_email} - durée: {duration}s\"\n                        )"
          },
          {
            "line": 166,
            "context": "duration\": duration,\n                            \"user_email\": user_email,\n                        }"
          },
          {
            "line": 166,
            "context": "ration,\n                            \"user_email\": user_email,\n                        }\n                    el"
          },
          {
            "line": 178,
            "context": "str(e)}\n\n    def get_user_session_analytics(self, user_email: str, days: int = 30):\n        \"\"\"Analytics des s"
          },
          {
            "line": 180,
            "context": "vec cache\"\"\"\n        cache_key = f\"user_sessions_{user_email}_{days}\"\n\n        def compute_session_analytics()"
          },
          {
            "line": 200,
            "context": "M user_sessions\n                            WHERE user_email = %s AND login_time >= %s"
          },
          {
            "line": 202,
            "context": "\"\"\",\n                            (user_email, start_date),\n                        )"
          },
          {
            "line": 221,
            "context": "M user_sessions\n                            WHERE user_email = %s AND login_time >= %s"
          },
          {
            "line": 225,
            "context": "\"\"\",\n                            (user_email, start_date),\n                        )"
          },
          {
            "line": 250,
            "context": "M user_sessions\n                            WHERE user_email = %s \n                            AND login_time"
          },
          {
            "line": 256,
            "context": "\"\"\",\n                            (user_email, start_date),\n                        )"
          },
          {
            "line": 268,
            "context": "\"success\": True,\n                            \"user_email\": user_email,\n                            \"period"
          },
          {
            "line": 268,
            "context": ": True,\n                            \"user_email\": user_email,\n                            \"period_days\": days,"
          },
          {
            "line": 289,
            "context": "SELECT \n                            user_email, \n                            session_id,"
          },
          {
            "line": 341,
            "context": "ion_id = %s\n                        RETURNING id, user_email\n                    \"\"\","
          },
          {
            "line": 394,
            "context": "= \"error\",\n        component: str = None,\n        user_email: str = None,\n        session_id: str = None,"
          },
          {
            "line": 409,
            "context": "error_type, category, severity, component, user_email,\n                            session_id, question"
          },
          {
            "line": 418,
            "context": "component,\n                            user_email,\n                            session_id,"
          },
          {
            "line": 432,
            "context": "def log_openai_usage(\n        self,\n        user_email: str,\n        session_id: str = None,\n        que"
          },
          {
            "line": 450,
            "context": "T INTO openai_usage (\n                            user_email, session_id, question_id, model, tokens,"
          },
          {
            "line": 455,
            "context": "(\n                            user_email,\n                            session_id,"
          },
          {
            "line": 474,
            "context": "def log_question_response(\n        self,\n        user_email: str,\n        session_id: str,\n        question_i"
          },
          {
            "line": 518,
            "context": "_questions_complete (\n                            user_email, session_id, question_id, question, response_text"
          },
          {
            "line": 525,
            "context": "(\n                            user_email,\n                            session_id,"
          },
          {
            "line": 547,
            "context": "f\"Question loggée en base: {user_email}, session: {session_id}\"\n                    )"
          },
          {
            "line": 553,
            "context": "logger.error(\n                f\"Détails: user={user_email}, session={session_id}, question_id={question_id}"
          },
          {
            "line": 569,
            "context": "page: int = 1,\n        limit: int = 10,\n        user_email: str = None,\n        start_date: date = None,"
          },
          {
            "line": 581,
            "context": "ions = []\n            params = []\n\n            if user_email:\n                conditions.append(\"user_email ="
          },
          {
            "line": 582,
            "context": "if user_email:\n                conditions.append(\"user_email = %s\")\n                params.append(user_email)"
          },
          {
            "line": 583,
            "context": "(\"user_email = %s\")\n                params.append(user_email)\n\n            if start_date:\n                cond"
          },
          {
            "line": 614,
            "context": "main_query = f\"\"\"\n                        SELECT user_email, session_id, question_id, question, response_text"
          },
          {
            "line": 659,
            "context": ",\n            }\n\n    def get_user_analytics(self, user_email: str, days: int = 30) -> Dict[str, Any]:"
          },
          {
            "line": 661,
            "context": "ec cache\"\"\"\n        cache_key = f\"user_analytics_{user_email}_{days}\"\n\n        def compute_analytics():"
          },
          {
            "line": 678,
            "context": "stions_complete\n                            WHERE user_email = %s AND created_at >= %s"
          },
          {
            "line": 680,
            "context": "\"\"\",\n                            (user_email, start_date),\n                        )"
          },
          {
            "line": 692,
            "context": "OM openai_usage\n                            WHERE user_email = %s AND created_at >= %s"
          },
          {
            "line": 694,
            "context": "\"\"\",\n                            (user_email, start_date),\n                        )"
          },
          {
            "line": 702,
            "context": "\"success\": True,\n                            \"user_email\": user_email,\n                            \"period"
          },
          {
            "line": 702,
            "context": ": True,\n                            \"user_email\": user_email,\n                            \"period_days\": days,"
          }
        ]
      },
      "gdpr_practices": {
        "export": [
          148,
          293,
          294
        ],
        "audit_log": [
          400,
          428,
          443,
          470,
          490,
          557,
          563
        ],
        "encryption": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_encryption",
          "severity": "CRITICAL",
          "message": "Mots de passe trouvés sans chiffrement apparent"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\logging_cache.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "retention": [
          5,
          24
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\logging_endpoints.py",
      "personal_data": {
        "email": [
          {
            "line": 71,
            "context": "ed\"\n        )\n\n    user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPExcept"
          },
          {
            "line": 73,
            "context": "raise HTTPException(status_code=400, detail=\"User email not found\")\n\n    try:\n        analytics = get_ana"
          },
          {
            "line": 94,
            "context": "s\n    if user_email:\n        if current_user.get(\"email\") != user_email and not has_permission("
          },
          {
            "line": 102,
            "context": "else:\n        user_email = current_user.get(\"email\")\n\n    if not has_permission(current_user, Permis"
          },
          {
            "line": 110,
            "context": "raise HTTPException(status_code=400, detail=\"User email required\")\n\n    try:\n        analytics = get_anal"
          },
          {
            "line": 151,
            "context": "ur connecté\"\"\"\n    user_email = current_user.get(\"email\")\n\n    try:\n        analytics = get_analytics_man"
          },
          {
            "line": 187,
            "context": "NALYTICS):\n        user_email = current_user.get(\"email\")  # Forcer son propre email\n\n    if not user_ema"
          },
          {
            "line": 187,
            "context": "= current_user.get(\"email\")  # Forcer son propre email\n\n    if not user_email:\n        user_email = curr"
          },
          {
            "line": 190,
            "context": "ser_email:\n        user_email = current_user.get(\"email\")\n\n    try:\n        analytics = get_analytics_man"
          },
          {
            "line": 210,
            "context": "ed\"\n        )\n\n    user_email = current_user.get(\"email\")\n\n    try:\n        analytics = get_analytics_man"
          },
          {
            "line": 288,
            "context": "return {\n        \"user_email\": current_user.get(\"email\"),\n        \"user_type\": user_type,\n        \"is_ad"
          },
          {
            "line": 533,
            "context": "Endpoint /questions appelé par {current_user.get('email')} (page={page}, limit={limit})\"\n    )\n\n    if no"
          },
          {
            "line": 537,
            "context": "ning(f\"Permission refusée pour {current_user.get('email')}\")\n        raise HTTPException(\n            sta"
          },
          {
            "line": 739,
            "context": "bug\": {\n                \"user\": current_user.get(\"email\"),\n                \"params\": {\"page\": page, \"limi"
          },
          {
            "line": 958,
            "context": "current_user.get(\"user_type\", \"unknown\")\n        email = current_user.get(\"email\", \"unknown\")\n\n        #"
          },
          {
            "line": 958,
            "context": "pe\", \"unknown\")\n        email = current_user.get(\"email\", \"unknown\")\n\n        # Test permissions individu"
          },
          {
            "line": 978,
            "context": "\"user_type\": user_type,\n            \"email\": email,\n            \"permissions\": perms,"
          },
          {
            "line": 978,
            "context": "\"user_type\": user_type,\n            \"email\": email,\n            \"permissions\": perms,\n            \"r"
          },
          {
            "line": 1019,
            "context": "ount,\n            \"user_email\": current_user.get(\"email\"),\n            \"analytics_manager_type\": type(ana"
          },
          {
            "line": 1038,
            "context": "er_type\": current_user.get(\"user_type\"),\n        \"email\": current_user.get(\"email\"),\n    }\n\n    try:"
          },
          {
            "line": 1038,
            "context": "(\"user_type\"),\n        \"email\": current_user.get(\"email\"),\n    }\n\n    try:\n        # Vérification super a"
          }
        ],
        "user_id": [
          {
            "line": 71,
            "context": "iew analytics permission required\"\n        )\n\n    user_email = current_user.get(\"email\")\n    if not user_email"
          },
          {
            "line": 72,
            "context": "user_email = current_user.get(\"email\")\n    if not user_email:\n        raise HTTPException(status_code=400, det"
          },
          {
            "line": 77,
            "context": "r()\n        result = analytics.get_user_analytics(user_email, days)\n        result[\"user_role\"] = current_user"
          },
          {
            "line": 87,
            "context": "ics(\n    days: int = Query(30, ge=1, le=365),\n    user_email: str = Query(None),\n    current_user: dict = Depe"
          },
          {
            "line": 92,
            "context": "]:\n    \"\"\"Analytics des coûts OpenAI\"\"\"\n\n    # Si user_email spécifié, vérifier les permissions\n    if user_em"
          },
          {
            "line": 93,
            "context": "r_email spécifié, vérifier les permissions\n    if user_email:\n        if current_user.get(\"email\") != user_ema"
          },
          {
            "line": 94,
            "context": "er_email:\n        if current_user.get(\"email\") != user_email and not has_permission(\n            current_user,"
          },
          {
            "line": 102,
            "context": "lytics required\",\n            )\n    else:\n        user_email = current_user.get(\"email\")\n\n    if not has_permi"
          },
          {
            "line": 109,
            "context": "costs permission required\"\n        )\n\n    if not user_email:\n        raise HTTPException(status_code=400, det"
          },
          {
            "line": 114,
            "context": "r()\n        result = analytics.get_user_analytics(user_email, days)\n        result[\"user_role\"] = current_user"
          },
          {
            "line": 151,
            "context": "ics des sessions de l'utilisateur connecté\"\"\"\n    user_email = current_user.get(\"email\")\n\n    try:\n        ana"
          },
          {
            "line": 155,
            "context": "result = analytics.get_user_session_analytics(user_email, days)\n        return result\n    except Exception"
          },
          {
            "line": 179,
            "context": "session-stats\")\nasync def session_statistics(\n    user_email: str = Query(None),\n    days: int = Query(30, ge="
          },
          {
            "line": 187,
            "context": "ent_user, Permission.VIEW_ALL_ANALYTICS):\n        user_email = current_user.get(\"email\")  # Forcer son propre"
          },
          {
            "line": 189,
            "context": "t(\"email\")  # Forcer son propre email\n\n    if not user_email:\n        user_email = current_user.get(\"email\")"
          },
          {
            "line": 190,
            "context": "son propre email\n\n    if not user_email:\n        user_email = current_user.get(\"email\")\n\n    try:\n        ana"
          },
          {
            "line": 194,
            "context": "result = analytics.get_user_session_analytics(user_email, days)\n        return result\n    except Exception"
          },
          {
            "line": 210,
            "context": "iew analytics permission required\"\n        )\n\n    user_email = current_user.get(\"email\")\n\n    try:\n        ana"
          },
          {
            "line": 222,
            "context": "FROM user_sessions\n                    WHERE user_email = %s\n                    ORDER BY login_time DESC"
          },
          {
            "line": 226,
            "context": "LIMIT 1\n                \"\"\",\n                    (user_email,),\n                )\n\n                last_sessio"
          },
          {
            "line": 249,
            "context": "FROM user_sessions\n                    WHERE user_email = %s \n                    AND login_time >= CURRE"
          },
          {
            "line": 253,
            "context": "OT NULL\n                \"\"\",\n                    (user_email,),\n                )\n\n                stats_7d ="
          },
          {
            "line": 262,
            "context": "\"stats_7_days\": stats_7d,\n                    \"user_email\": user_email,\n                }\n\n    except Excep"
          },
          {
            "line": 262,
            "context": "ays\": stats_7d,\n                    \"user_email\": user_email,\n                }\n\n    except Exception as e:"
          },
          {
            "line": 288,
            "context": "ONS.get(UserRole.USER, [])\n\n    return {\n        \"user_email\": current_user.get(\"email\"),\n        \"user_type\":"
          },
          {
            "line": 586,
            "context": "id,\n                            user_email,\n                            question,"
          },
          {
            "line": 634,
            "context": "),\n                            \"user_email\": row[\"user_email\"] or \"\","
          },
          {
            "line": 634,
            "context": "),\n                            \"user_email\": row[\"user_email\"] or \"\",\n                            \"user_name\":"
          },
          {
            "line": 635,
            "context": "\",\n                            \"user_name\": (row[\"user_email\"] or \"\")\n                            .split(\"@\")["
          },
          {
            "line": 672,
            "context": "),\n                                \"user_email\": row[\"user_email\"] or \"\","
          },
          {
            "line": 672,
            "context": "\"user_email\": row[\"user_email\"] or \"\",\n                                \"user_na"
          },
          {
            "line": 673,
            "context": "\"user_name\": (row[\"user_email\"] or \"\")\n                                .split(\""
          },
          {
            "line": 798,
            "context": "SELECT \n                        ubi.user_email,\n                        COALESCE(SUM(mut.questio"
          },
          {
            "line": 802,
            "context": "LEFT JOIN monthly_usage_tracking mut ON ubi.user_email = mut.user_email\n                    GROUP BY ubi"
          },
          {
            "line": 802,
            "context": "onthly_usage_tracking mut ON ubi.user_email = mut.user_email\n                    GROUP BY ubi.user_email, ubi."
          },
          {
            "line": 803,
            "context": "= mut.user_email\n                    GROUP BY ubi.user_email, ubi.plan_name\n                    ORDER BY quest"
          },
          {
            "line": 911,
            "context": "cur.execute(\n                    \"SELECT id, user_email, question FROM user_questions_complete ORDER BY c"
          },
          {
            "line": 1019,
            "context": "\"session_count\": session_count,\n            \"user_email\": current_user.get(\"email\"),\n            \"analyti"
          },
          {
            "line": 1092,
            "context": "SELECT \n                        id, user_email, question, response_text,"
          },
          {
            "line": 1118,
            "context": "),\n                                \"user_email\": row[\"user_email\"] or \"\","
          },
          {
            "line": 1118,
            "context": "\"user_email\": row[\"user_email\"] or \"\",\n                                \"user_na"
          },
          {
            "line": 1119,
            "context": "\"user_name\": (row[\"user_email\"] or \"\")\n                                .split(\""
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [
          531
        ],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\logging_helpers.py",
      "personal_data": {
        "email": [
          {
            "line": 80,
            "context": "manager()\n\n        user_email = current_user.get(\"email\") if current_user else None\n        session_id ="
          }
        ],
        "user_id": [
          {
            "line": 80,
            "context": "analytics = get_analytics_manager()\n\n        user_email = current_user.get(\"email\") if current_user else"
          },
          {
            "line": 109,
            "context": "analytics.log_question_response(\n            user_email=user_email,\n            session_id=session_id,"
          },
          {
            "line": 109,
            "context": "ics.log_question_response(\n            user_email=user_email,\n            session_id=session_id,\n            q"
          },
          {
            "line": 125,
            "context": "logger.info(f\"✅ Question loggée PostgreSQL: {user_email or 'anonymous'}\")\n\n    except Exception as e:"
          },
          {
            "line": 129,
            "context": "\")\n        logger.error(f\"❌ Détails erreur: user={user_email}, session={session_id}\")\n\n\ndef track_openai_call("
          },
          {
            "line": 133,
            "context": "ssion={session_id}\")\n\n\ndef track_openai_call(\n    user_email: str = None,\n    session_id: str = None,\n    ques"
          },
          {
            "line": 149,
            "context": "analytics.log_openai_usage(\n                user_email=user_email,\n                session_id=session_id"
          },
          {
            "line": 149,
            "context": "tics.log_openai_usage(\n                user_email=user_email,\n                session_id=session_id,"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [
          51,
          128,
          163
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\logging_models.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\logging_permissions.py",
      "personal_data": {
        "user_id": [
          {
            "line": 41,
            "context": "if isinstance(arg, dict) and \"user_id\" in arg:\n                        current_user = a"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\stats_admin.py",
      "personal_data": {
        "email": [
          {
            "line": 80,
            "context": "fo(f\"Force update demandé par: {current_user.get('email')}\")\n\n        # Lancer en arrière-plan\n        ba"
          },
          {
            "line": 88,
            "context": "n\",\n            \"initiated_by\": current_user.get(\"email\"),\n            \"timestamp\": datetime.now().isofor"
          },
          {
            "line": 112,
            "context": "(\n            f\"Cache vidé par {current_user.get('email')}: {deleted_count} entrées\"\n        )\n\n        r"
          },
          {
            "line": 118,
            "context": "ount,\n            \"cleared_by\": current_user.get(\"email\"),\n            \"timestamp\": datetime.now().isofor"
          },
          {
            "line": 242,
            "context": ": results,\n        \"tested_by\": current_user.get(\"email\"),\n        \"timestamp\": datetime.now().isoformat("
          }
        ],
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "audit_log": [
          41
        ],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\stats_cache.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "deletion": [
          71,
          101,
          110
        ],
        "audit_log": [
          16
        ],
        "retention": [
          52
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\stats_fast.py",
      "personal_data": {
        "email": [
          {
            "line": 68,
            "context": "liste d'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    logger"
          },
          {
            "line": 80,
            "context": "users_data[user_id] = {\n                \"email\": user.get(\"email\", \"\"),\n                \"first_n"
          },
          {
            "line": 80,
            "context": "a[user_id] = {\n                \"email\": user.get(\"email\", \"\"),\n                \"first_name\": user.get(\"fi"
          },
          {
            "line": 90,
            "context": "users_data[user_id] = {\n                \"email\": user_id,  # Fallback: utiliser l'ID"
          },
          {
            "line": 145,
            "context": "top_users.append({\n                        \"email\": user_info.get(\"email\", user_id)[:50],"
          },
          {
            "line": 145,
            "context": "{\n                        \"email\": user_info.get(\"email\", user_id)[:50],\n                        \"first_n"
          },
          {
            "line": 332,
            "context": "\"\n\n    cache_key = f\"dashboard:{current_user.get('email') if current_user else 'anon'}\"\n    cached = get_"
          },
          {
            "line": 560,
            "context": "\"user_email\": user_info.get(\"email\", \"\") if user_info else \"\","
          }
        ],
        "name": [
          {
            "line": 68,
            "context": "'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    logger.info(f\"🔍 [E"
          },
          {
            "line": 68,
            "context": "eturns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    logger.info(f\"🔍 [ENRICHMENT]"
          },
          {
            "line": 81,
            "context": "\"email\": user.get(\"email\", \"\"),\n                \"first_name\": user.get(\"first_name\", \"\"),\n                \"la"
          },
          {
            "line": 81,
            "context": "il\", \"\"),\n                \"first_name\": user.get(\"first_name\", \"\"),\n                \"last_name\": user.get(\"las"
          },
          {
            "line": 82,
            "context": "me\": user.get(\"first_name\", \"\"),\n                \"last_name\": user.get(\"last_name\", \"\"),\n                \"pla"
          },
          {
            "line": 82,
            "context": "ame\", \"\"),\n                \"last_name\": user.get(\"last_name\", \"\"),\n                \"plan\": user.get(\"plan\", \""
          },
          {
            "line": 91,
            "context": "r_id,  # Fallback: utiliser l'ID\n                \"first_name\": \"\",\n                \"last_name\": \"\","
          },
          {
            "line": 92,
            "context": "\"first_name\": \"\",\n                \"last_name\": \"\",\n                \"plan\": \"free\","
          },
          {
            "line": 146,
            "context": "(\"email\", user_id)[:50],\n                        \"first_name\": user_info.get(\"first_name\", \"\")[:50],"
          },
          {
            "line": 146,
            "context": "\"first_name\": user_info.get(\"first_name\", \"\")[:50],\n                        \"last_name\":"
          },
          {
            "line": 147,
            "context": "(\"first_name\", \"\")[:50],\n                        \"last_name\": user_info.get(\"last_name\", \"\")[:50],"
          },
          {
            "line": 147,
            "context": "\"last_name\": user_info.get(\"last_name\", \"\")[:50],\n                        \"question_cou"
          },
          {
            "line": 561,
            "context": "\"user_name\": f\"{user_info.get('first_name', '')} {user_info.get('last_name', '')}\".strip()"
          },
          {
            "line": 561,
            "context": "{user_info.get('first_name', '')} {user_info.get('last_name', '')}\".strip() if user_info else \"\","
          }
        ],
        "user_id": [
          {
            "line": 68,
            "context": "pour une liste d'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\""
          },
          {
            "line": 73,
            "context": "er IDs: {user_ids}\")\n    users_data = {}\n\n    for user_id in user_ids:\n        logger.info(f\"🔍 [ENRICHMENT]"
          },
          {
            "line": 74,
            "context": "gger.info(f\"🔍 [ENRICHMENT] Fetching user data for user_id: {user_id}\")\n        user = get_user_from_supabas"
          },
          {
            "line": 74,
            "context": "f\"🔍 [ENRICHMENT] Fetching user data for user_id: {user_id}\")\n        user = get_user_from_supabase(user_id)"
          },
          {
            "line": 75,
            "context": "{user_id}\")\n        user = get_user_from_supabase(user_id)\n\n        if user:\n            logger.info(f\"✅ [E"
          },
          {
            "line": 79,
            "context": "MENT] User found: {user}\")\n            users_data[user_id] = {\n                \"email\": user.get(\"email\", \""
          },
          {
            "line": 86,
            "context": "logger.info(f\"✅ [ENRICHMENT] Enriched data for {user_id}: {users_data[user_id]}\")\n        else:"
          },
          {
            "line": 86,
            "context": "ICHMENT] Enriched data for {user_id}: {users_data[user_id]}\")\n        else:\n            logger.warning(f\"❌"
          },
          {
            "line": 88,
            "context": "g(f\"❌ [ENRICHMENT] User NOT found in Supabase for user_id: {user_id}\")\n            users_data[user_id] = {"
          },
          {
            "line": 88,
            "context": "ICHMENT] User NOT found in Supabase for user_id: {user_id}\")\n            users_data[user_id] = {"
          },
          {
            "line": 89,
            "context": "e for user_id: {user_id}\")\n            users_data[user_id] = {\n                \"email\": user_id,  # Fallbac"
          },
          {
            "line": 90,
            "context": "users_data[user_id] = {\n                \"email\": user_id,  # Fallback: utiliser l'ID\n                \"firs"
          },
          {
            "line": 96,
            "context": "arning(f\"⚠️ [ENRICHMENT] Using fallback data for {user_id}: {users_data[user_id]}\")\n\n    logger.info(f\"🔍 [E"
          },
          {
            "line": 96,
            "context": "T] Using fallback data for {user_id}: {users_data[user_id]}\")\n\n    logger.info(f\"🔍 [ENRICHMENT] Enrichment"
          },
          {
            "line": 119,
            "context": "SELECT\n                        user_id,\n                        COUNT(*) as question_cou"
          },
          {
            "line": 123,
            "context": "- INTERVAL '30 days'\n                        AND user_id IS NOT NULL\n                    GROUP BY user_id"
          },
          {
            "line": 124,
            "context": "user_id IS NOT NULL\n                    GROUP BY user_id\n                    ORDER BY question_count DESC"
          },
          {
            "line": 133,
            "context": "les user_ids\n                user_ids = [str(row[\"user_id\"]) for row in top_users_raw]\n\n                # E"
          },
          {
            "line": 141,
            "context": "for row in top_users_raw:\n                    user_id = str(row[\"user_id\"])\n                    user_in"
          },
          {
            "line": 141,
            "context": "users_raw:\n                    user_id = str(row[\"user_id\"])\n                    user_info = users_info.get"
          },
          {
            "line": 142,
            "context": "])\n                    user_info = users_info.get(user_id, {})\n\n                    top_users.append({"
          },
          {
            "line": 145,
            "context": "\"email\": user_info.get(\"email\", user_id)[:50],\n                        \"first_name\": user"
          },
          {
            "line": 155,
            "context": "\"\"\"\n                    SELECT COUNT(DISTINCT user_id) as user_count\n                    FROM conversat"
          },
          {
            "line": 158,
            "context": "- INTERVAL '30 days'\n                        AND user_id IS NOT NULL\n                    \"\"\""
          },
          {
            "line": 197,
            "context": "his_month,\n                        COUNT(DISTINCT user_id) as unique_users\n                    FROM user_qu"
          },
          {
            "line": 439,
            "context": "code=401, detail=\"Authentification requise\")\n\n    user_id = (\n        current_user.get(\"user_id\") or"
          },
          {
            "line": 440,
            "context": "uise\")\n\n    user_id = (\n        current_user.get(\"user_id\") or\n        current_user.get(\"sub\") or\n        c"
          },
          {
            "line": 444,
            "context": "r\n        current_user.get(\"id\")\n    )\n    if not user_id:\n        logger.error(f\"❌ [QUESTIONS] User ID man"
          },
          {
            "line": 448,
            "context": "r.info(f\"🔍 [QUESTIONS] Fetching conversations for user_id: {user_id}\")\n\n    try:\n        with get_pg_connec"
          },
          {
            "line": 448,
            "context": "[QUESTIONS] Fetching conversations for user_id: {user_id}\")\n\n    try:\n        with get_pg_connection() as"
          },
          {
            "line": 460,
            "context": "FROM conversations\n                    WHERE user_id = %s AND status = 'active'\n                    \"\""
          },
          {
            "line": 462,
            "context": "ve'\n                    \"\"\",\n                    (user_id,)\n                )\n                total = cur.f"
          },
          {
            "line": 483,
            "context": "FROM conversations c\n                    WHERE c.user_id = %s AND c.status = 'active'"
          },
          {
            "line": 487,
            "context": "%s\n                    \"\"\",\n                    (user_id, limit, offset)\n                )"
          },
          {
            "line": 555,
            "context": "user_info = get_user_from_supabase(user_id)\n\n                        questions.append({"
          },
          {
            "line": 560,
            "context": "conv[\"created_at\"],\n                            \"user_email\": user_info.get(\"email\", \"\") if user_info else \"\""
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "retention": [
          43
        ],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\stats_fast_fixed.py",
      "personal_data": {
        "email": [
          {
            "line": 68,
            "context": "liste d'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    users_"
          },
          {
            "line": 76,
            "context": "users_data[user_id] = {\n                \"email\": user.get(\"email\", \"\"),\n                \"first_n"
          },
          {
            "line": 76,
            "context": "a[user_id] = {\n                \"email\": user.get(\"email\", \"\"),\n                \"first_name\": user.get(\"fi"
          },
          {
            "line": 84,
            "context": "users_data[user_id] = {\n                \"email\": user_id,  # Fallback: utiliser l'ID"
          },
          {
            "line": 140,
            "context": "top_users.append({\n                        \"email\": user_info.get(\"email\", user_id)[:50],"
          },
          {
            "line": 140,
            "context": "{\n                        \"email\": user_info.get(\"email\", user_id)[:50],\n                        \"first_n"
          },
          {
            "line": 327,
            "context": "\"\n\n    cache_key = f\"dashboard:{current_user.get('email') if current_user else 'anon'}\"\n    cached = get_"
          }
        ],
        "name": [
          {
            "line": 68,
            "context": "'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    users_data = {}"
          },
          {
            "line": 68,
            "context": "eturns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\"\n    users_data = {}\n\n    for user"
          },
          {
            "line": 77,
            "context": "\"email\": user.get(\"email\", \"\"),\n                \"first_name\": user.get(\"first_name\", \"\"),\n                \"la"
          },
          {
            "line": 77,
            "context": "il\", \"\"),\n                \"first_name\": user.get(\"first_name\", \"\"),\n                \"last_name\": user.get(\"las"
          },
          {
            "line": 78,
            "context": "me\": user.get(\"first_name\", \"\"),\n                \"last_name\": user.get(\"last_name\", \"\"),\n                \"pla"
          },
          {
            "line": 78,
            "context": "ame\", \"\"),\n                \"last_name\": user.get(\"last_name\", \"\"),\n                \"plan\": user.get(\"plan\", \""
          },
          {
            "line": 85,
            "context": "r_id,  # Fallback: utiliser l'ID\n                \"first_name\": \"\",\n                \"last_name\": \"\","
          },
          {
            "line": 86,
            "context": "\"first_name\": \"\",\n                \"last_name\": \"\",\n                \"plan\": \"free\","
          },
          {
            "line": 141,
            "context": "(\"email\", user_id)[:50],\n                        \"first_name\": user_info.get(\"first_name\", \"\")[:50],"
          },
          {
            "line": 141,
            "context": "\"first_name\": user_info.get(\"first_name\", \"\")[:50],\n                        \"last_name\":"
          },
          {
            "line": 142,
            "context": "(\"first_name\", \"\")[:50],\n                        \"last_name\": user_info.get(\"last_name\", \"\")[:50],"
          },
          {
            "line": 142,
            "context": "\"last_name\": user_info.get(\"last_name\", \"\")[:50],\n                        \"question_cou"
          }
        ],
        "user_id": [
          {
            "line": 68,
            "context": "pour une liste d'IDs.\n\n    Returns:\n        Dict[user_id, {email, first_name, last_name, plan}]\n    \"\"\""
          },
          {
            "line": 72,
            "context": "name, plan}]\n    \"\"\"\n    users_data = {}\n\n    for user_id in user_ids:\n        user = get_user_from_supabas"
          },
          {
            "line": 73,
            "context": "n user_ids:\n        user = get_user_from_supabase(user_id)\n        if user:\n            users_data[user_id]"
          },
          {
            "line": 75,
            "context": "(user_id)\n        if user:\n            users_data[user_id] = {\n                \"email\": user.get(\"email\", \""
          },
          {
            "line": 83,
            "context": "}\n        else:\n            users_data[user_id] = {\n                \"email\": user_id,  # Fallbac"
          },
          {
            "line": 84,
            "context": "users_data[user_id] = {\n                \"email\": user_id,  # Fallback: utiliser l'ID\n                \"firs"
          },
          {
            "line": 111,
            "context": "SELECT\n                        user_id,\n                        COUNT(*) as question_cou"
          },
          {
            "line": 115,
            "context": "- INTERVAL '30 days'\n                        AND user_id IS NOT NULL\n                        AND question"
          },
          {
            "line": 119,
            "context": "ND status = 'active'\n                    GROUP BY user_id\n                    ORDER BY question_count DESC"
          },
          {
            "line": 128,
            "context": "les user_ids\n                user_ids = [str(row[\"user_id\"]) for row in top_users_raw]\n\n                # E"
          },
          {
            "line": 136,
            "context": "for row in top_users_raw:\n                    user_id = str(row[\"user_id\"])\n                    user_in"
          },
          {
            "line": 136,
            "context": "users_raw:\n                    user_id = str(row[\"user_id\"])\n                    user_info = users_info.get"
          },
          {
            "line": 137,
            "context": "])\n                    user_info = users_info.get(user_id, {})\n\n                    top_users.append({"
          },
          {
            "line": 140,
            "context": "\"email\": user_info.get(\"email\", user_id)[:50],\n                        \"first_name\": user"
          },
          {
            "line": 150,
            "context": "\"\"\"\n                    SELECT COUNT(DISTINCT user_id) as user_count\n                    FROM conversat"
          },
          {
            "line": 153,
            "context": "- INTERVAL '30 days'\n                        AND user_id IS NOT NULL\n                    \"\"\""
          },
          {
            "line": 192,
            "context": "his_month,\n                        COUNT(DISTINCT user_id) as unique_users\n                    FROM convers"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "retention": [
          43
        ],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\stats_fast_OLD_backup.py",
      "personal_data": {
        "email": [
          {
            "line": 263,
            "context": "SELECT\n                        COALESCE(u.email, c.user_id::text) as email,"
          },
          {
            "line": 263,
            "context": "COALESCE(u.email, c.user_id::text) as email,\n                        COALESCE(u.first_name, '"
          },
          {
            "line": 274,
            "context": "OT NULL\n                    GROUP BY c.user_id, u.email, u.first_name, u.last_name\n                    OR"
          },
          {
            "line": 283,
            "context": "user_data = {\n                        \"email\": (\n                            row[\"email\"][:50]"
          },
          {
            "line": 284,
            "context": "\"email\": (\n                            row[\"email\"][:50] if row[\"email\"] else \"unknown\""
          },
          {
            "line": 284,
            "context": "row[\"email\"][:50] if row[\"email\"] else \"unknown\"\n                        ),"
          },
          {
            "line": 479,
            "context": "che_key = f\"dashboard_complete:{current_user.get('email') if current_user else 'anonymous'}\"\n    local_ca"
          },
          {
            "line": 788,
            "context": "f\"invitations_complete:{current_user.get('email') if current_user else 'anon'}\"\n    )\n    local_c"
          }
        ],
        "name": [
          {
            "line": 264,
            "context": "ext) as email,\n                        COALESCE(u.first_name, '') as first_name,\n                        COALE"
          },
          {
            "line": 264,
            "context": "COALESCE(u.first_name, '') as first_name,\n                        COALESCE(u.last_name, ''"
          },
          {
            "line": 265,
            "context": "as first_name,\n                        COALESCE(u.last_name, '') as last_name,\n                        COUNT("
          },
          {
            "line": 265,
            "context": "COALESCE(u.last_name, '') as last_name,\n                        COUNT(*) as question_cou"
          },
          {
            "line": 274,
            "context": "GROUP BY c.user_id, u.email, u.first_name, u.last_name\n                    ORDER BY questio"
          },
          {
            "line": 274,
            "context": "GROUP BY c.user_id, u.email, u.first_name, u.last_name\n                    ORDER BY question_count DESC"
          },
          {
            "line": 286,
            "context": "),\n                        \"first_name\": (row[\"first_name\"] or \"\")[:50],"
          },
          {
            "line": 286,
            "context": "),\n                        \"first_name\": (row[\"first_name\"] or \"\")[:50],\n                        \"last_name"
          },
          {
            "line": 287,
            "context": "irst_name\"] or \"\")[:50],\n                        \"last_name\": (row[\"last_name\"] or \"\")[:50],"
          },
          {
            "line": 287,
            "context": "[:50],\n                        \"last_name\": (row[\"last_name\"] or \"\")[:50],\n                        \"question_"
          }
        ],
        "user_id": [
          {
            "line": 263,
            "context": "ELECT\n                        COALESCE(u.email, c.user_id::text) as email,\n                        COALESCE"
          },
          {
            "line": 269,
            "context": "LEFT JOIN users u ON u.id = c.user_id\n                    WHERE c.created_at >= CURRENT"
          },
          {
            "line": 271,
            "context": "INTERVAL '30 days'\n                        AND c.user_id IS NOT NULL\n                        AND c.questio"
          },
          {
            "line": 274,
            "context": "sponse IS NOT NULL\n                    GROUP BY c.user_id, u.email, u.first_name, u.last_name"
          },
          {
            "line": 296,
            "context": "\"\"\"\n                    SELECT COUNT(DISTINCT user_email) as user_count\n                    FROM user_ques"
          },
          {
            "line": 299,
            "context": "- INTERVAL '30 days'\n                        AND user_email IS NOT NULL\n                \"\"\"\n                )"
          },
          {
            "line": 338,
            "context": "his_month,\n                        COUNT(DISTINCT user_email) as unique_users\n                    FROM user_qu"
          },
          {
            "line": 659,
            "context": "ll\":\n                    where_conditions.append(\"user_email ILIKE %s\")\n                    params.append(f\"%{"
          },
          {
            "line": 682,
            "context": "created_at as timestamp,\n                        user_email,\n                        question,"
          },
          {
            "line": 706,
            "context": "user_name = (\n                        (row[\"user_email\"] or \"\")\n                        .split(\"@\")[0]"
          },
          {
            "line": 719,
            "context": "),\n                        \"user_email\": row[\"user_email\"] or \"unknown\","
          },
          {
            "line": 719,
            "context": "),\n                        \"user_email\": row[\"user_email\"] or \"unknown\",\n                        \"user_nam"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "encryption": [
          632
        ],
        "retention": [
          118
        ],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\stats_updater.py",
      "personal_data": {
        "user_id": [
          {
            "line": 57,
            "context": "month,\n                            COUNT(DISTINCT user_email) as unique_users,\n                            AVG"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [
          22
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\system.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\users.py",
      "personal_data": {
        "email": [
          {
            "line": 92,
            "context": "UserProfileData(BaseModel):\n    user_id: str\n    email: str\n    tenant_id: Optional[str] = None  # 🆕 Pou"
          },
          {
            "line": 137,
            "context": "file] Récupération profil pour {current_user.get('email')}\"\n    )\n\n    try:\n        supabase = get_supaba"
          },
          {
            "line": 156,
            "context": "er_id\": current_user[\"user_id\"],\n                \"email\": current_user[\"email\"],\n                \"full_na"
          },
          {
            "line": 156,
            "context": "user_id\"],\n                \"email\": current_user[\"email\"],\n                \"full_name\": current_user.get("
          },
          {
            "line": 157,
            "context": "],\n                \"full_name\": current_user.get(\"email\", \"\").split(\"@\")[0],\n                \"user_type\":"
          },
          {
            "line": 168,
            "context": "ofile] Profil par défaut créé pour {current_user['email']}\"\n            )\n        else:\n            profi"
          },
          {
            "line": 173,
            "context": "t_user_profile] Profil trouvé pour {current_user['email']}\"\n            )\n\n        # Construire la répons"
          },
          {
            "line": 179,
            "context": "user_id=current_user[\"user_id\"],\n            email=current_user[\"email\"],\n            tenant_id=prof"
          },
          {
            "line": 179,
            "context": "_user[\"user_id\"],\n            email=current_user[\"email\"],\n            tenant_id=profile_data.get(\"tenant"
          },
          {
            "line": 214,
            "context": "ofile] Mise à jour profil pour {current_user.get('email')}\"\n    )\n\n    try:\n        supabase = get_supaba"
          },
          {
            "line": 328,
            "context": "d\": current_user[\"user_id\"],\n                    \"email\": current_user[\"email\"],\n                    **up"
          },
          {
            "line": 328,
            "context": "_id\"],\n                    \"email\": current_user[\"email\"],\n                    **update_data,"
          },
          {
            "line": 337,
            "context": "ate_user_profile] Profil créé pour {current_user['email']}\"\n                )\n            else:"
          },
          {
            "line": 344,
            "context": "er_profile] Profil mis à jour pour {current_user['email']}\"\n            )\n\n        return UserProfileResp"
          },
          {
            "line": 365,
            "context": "ofile] Suppression profil pour {current_user.get('email')}\"\n    )\n\n    try:\n        supabase = get_supaba"
          },
          {
            "line": 381,
            "context": "le] Utilisateur auth supprimé pour {current_user['email']}\"\n            )\n        except Exception as aut"
          },
          {
            "line": 389,
            "context": "user_profile] Profil supprimé pour {current_user['email']}\"\n        )\n\n        return UserProfileResponse"
          },
          {
            "line": 407,
            "context": "user_data] Export données pour {current_user.get('email')}\")\n\n    try:\n        supabase = get_supabase_ad"
          },
          {
            "line": 424,
            "context": "\")\n            .eq(\"inviter_email\", current_user[\"email\"])\n            .execute()\n        )\n\n        # TO"
          },
          {
            "line": 436,
            "context": "\"user_id\": current_user[\"user_id\"],\n            \"email\": current_user[\"email\"],\n        }\n\n        logge"
          },
          {
            "line": 436,
            "context": "er[\"user_id\"],\n            \"email\": current_user[\"email\"],\n        }\n\n        logger.info(\n            f\""
          },
          {
            "line": 440,
            "context": "_user_data] Données exportées pour {current_user['email']}\"\n        )\n\n        return export_data\n\n    ex"
          }
        ],
        "name": [
          {
            "line": 37,
            "context": "=======\n\n\nclass UserProfileUpdate(BaseModel):\n    first_name: Optional[str] = None\n    last_name: Optional[str"
          },
          {
            "line": 38,
            "context": "eModel):\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str"
          },
          {
            "line": 39,
            "context": "r] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str] = None\n    country_code: Optional["
          },
          {
            "line": 51,
            "context": "language: Optional[str] = None\n\n    @validator(\"first_name\", \"last_name\")\n    def validate_names(cls, v):"
          },
          {
            "line": 51,
            "context": "tional[str] = None\n\n    @validator(\"first_name\", \"last_name\")\n    def validate_names(cls, v):\n        if v an"
          },
          {
            "line": 54,
            "context": "(v.strip()) < 2:\n            raise ValueError(\"Le nom doit contenir au moins 2 caractères\")\n        if"
          },
          {
            "line": 56,
            "context": "v.strip()) > 50:\n            raise ValueError(\"Le nom ne peut pas dépasser 50 caractères\")\n        retu"
          },
          {
            "line": 95,
            "context": "onal[str] = None  # 🆕 Fallback pour tenant_id\n    first_name: Optional[str] = None\n    last_name: Optional[str"
          },
          {
            "line": 96,
            "context": "enant_id\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str"
          },
          {
            "line": 97,
            "context": "r] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str] = None\n    country_code: Optional["
          },
          {
            "line": 157,
            "context": "\"email\": current_user[\"email\"],\n                \"full_name\": current_user.get(\"email\", \"\").split(\"@\")[0],"
          },
          {
            "line": 182,
            "context": "get(\"organization_id\"),  # 🆕 Fallback\n            first_name=profile_data.get(\"first_name\"),\n            last_"
          },
          {
            "line": 182,
            "context": "Fallback\n            first_name=profile_data.get(\"first_name\"),\n            last_name=profile_data.get(\"last_n"
          },
          {
            "line": 183,
            "context": "_name=profile_data.get(\"first_name\"),\n            last_name=profile_data.get(\"last_name\"),\n            full_n"
          },
          {
            "line": 183,
            "context": "t_name\"),\n            last_name=profile_data.get(\"last_name\"),\n            full_name=profile_data.get(\"full_n"
          },
          {
            "line": 184,
            "context": "t_name=profile_data.get(\"last_name\"),\n            full_name=profile_data.get(\"full_name\"),\n            countr"
          },
          {
            "line": 184,
            "context": "t_name\"),\n            full_name=profile_data.get(\"full_name\"),\n            country_code=profile_data.get(\"cou"
          },
          {
            "line": 224,
            "context": "champ individuellement\n        if profile_update.first_name is not None:\n            update_data[\"first_name\""
          },
          {
            "line": 225,
            "context": ".first_name is not None:\n            update_data[\"first_name\"] = profile_update.first_name\n\n        if profile"
          },
          {
            "line": 225,
            "context": "update_data[\"first_name\"] = profile_update.first_name\n\n        if profile_update.last_name is not None:"
          },
          {
            "line": 227,
            "context": "file_update.first_name\n\n        if profile_update.last_name is not None:\n            update_data[\"last_name\"]"
          },
          {
            "line": 228,
            "context": "e.last_name is not None:\n            update_data[\"last_name\"] = profile_update.last_name\n\n        # Construir"
          },
          {
            "line": 228,
            "context": "update_data[\"last_name\"] = profile_update.last_name\n\n        # Construire le full_name si les composa"
          },
          {
            "line": 230,
            "context": "profile_update.last_name\n\n        # Construire le full_name si les composants sont fournis\n        if ("
          },
          {
            "line": 232,
            "context": "t fournis\n        if (\n            profile_update.first_name is not None\n            or profile_update.last_na"
          },
          {
            "line": 233,
            "context": "st_name is not None\n            or profile_update.last_name is not None\n        ):\n            # Récupérer le"
          },
          {
            "line": 237,
            "context": "r\n            if (\n                profile_update.first_name is not None\n                and profile_update.la"
          },
          {
            "line": 238,
            "context": "me is not None\n                and profile_update.last_name is not None\n            ):\n                full_n"
          },
          {
            "line": 240,
            "context": "t_name is not None\n            ):\n                full_name = (\n                    f\"{profile_update.first_n"
          },
          {
            "line": 241,
            "context": "ll_name = (\n                    f\"{profile_update.first_name} {profile_update.last_name}\".strip()"
          },
          {
            "line": 241,
            "context": "f\"{profile_update.first_name} {profile_update.last_name}\".strip()\n                )\n            else:"
          },
          {
            "line": 247,
            "context": "abase.table(\"users\")\n                    .select(\"first_name,last_name\")\n                    .eq(\"auth_user_id"
          },
          {
            "line": 247,
            "context": "(\"users\")\n                    .select(\"first_name,last_name\")\n                    .eq(\"auth_user_id\", current"
          },
          {
            "line": 253,
            "context": "= (\n                    current_profile.data.get(\"first_name\", \"\")\n                    if current_profile.data"
          },
          {
            "line": 258,
            "context": "= (\n                    current_profile.data.get(\"last_name\", \"\")\n                    if current_profile.data"
          },
          {
            "line": 264,
            "context": "new_first = (\n                    profile_update.first_name\n                    if profile_update.first_name"
          },
          {
            "line": 265,
            "context": ".first_name\n                    if profile_update.first_name is not None\n                    else current_firs"
          },
          {
            "line": 269,
            "context": "new_last = (\n                    profile_update.last_name\n                    if profile_update.last_name i"
          },
          {
            "line": 270,
            "context": "e.last_name\n                    if profile_update.last_name is not None\n                    else current_last"
          },
          {
            "line": 274,
            "context": "e current_last\n                )\n\n                full_name = f\"{new_first} {new_last}\".strip()"
          },
          {
            "line": 276,
            "context": "st} {new_last}\".strip()\n\n            update_data[\"full_name\"] = full_name\n        elif profile_update.full_na"
          },
          {
            "line": 276,
            "context": "\".strip()\n\n            update_data[\"full_name\"] = full_name\n        elif profile_update.full_name is not None"
          },
          {
            "line": 277,
            "context": "ll_name\"] = full_name\n        elif profile_update.full_name is not None:\n            update_data[\"full_name\"]"
          },
          {
            "line": 278,
            "context": "e.full_name is not None:\n            update_data[\"full_name\"] = profile_update.full_name\n\n        # Autres ch"
          },
          {
            "line": 278,
            "context": "update_data[\"full_name\"] = profile_update.full_name\n\n        # Autres champs\n        for field in ["
          }
        ],
        "user_id": [
          {
            "line": 91,
            "context": "]] = None\n\n\nclass UserProfileData(BaseModel):\n    user_id: str\n    email: str\n    tenant_id: Optional[str]"
          },
          {
            "line": 147,
            "context": "users\")\n            .select(\"*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .single()"
          },
          {
            "line": 147,
            "context": "*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .single()\n            .execute()"
          },
          {
            "line": 155,
            "context": "default_profile = {\n                \"auth_user_id\": current_user[\"user_id\"],\n                \"email"
          },
          {
            "line": 155,
            "context": "= {\n                \"auth_user_id\": current_user[\"user_id\"],\n                \"email\": current_user[\"email\"]"
          },
          {
            "line": 178,
            "context": "disée\n        return UserProfileData(\n            user_id=current_user[\"user_id\"],\n            email=curren"
          },
          {
            "line": 178,
            "context": "serProfileData(\n            user_id=current_user[\"user_id\"],\n            email=current_user[\"email\"],"
          },
          {
            "line": 248,
            "context": "(\"first_name,last_name\")\n                    .eq(\"auth_user_id\", current_user[\"user_id\"])\n                    .s"
          },
          {
            "line": 248,
            "context": ".eq(\"auth_user_id\", current_user[\"user_id\"])\n                    .single()"
          },
          {
            "line": 311,
            "context": ".update(update_data)\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()"
          },
          {
            "line": 311,
            "context": "ta)\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()\n        )\n\n        if n"
          },
          {
            "line": 320,
            "context": ".select(\"id\")\n                .eq(\"auth_user_id\", current_user[\"user_id\"])\n                .execu"
          },
          {
            "line": 320,
            "context": ".eq(\"auth_user_id\", current_user[\"user_id\"])\n                .execute()\n            )"
          },
          {
            "line": 327,
            "context": "create_data = {\n                    \"auth_user_id\": current_user[\"user_id\"],\n                    \"e"
          },
          {
            "line": 327,
            "context": "\"auth_user_id\": current_user[\"user_id\"],\n                    \"email\": current_user[\"ema"
          },
          {
            "line": 374,
            "context": "supabase.table(\"users\").delete().eq(\n            \"auth_user_id\", current_user[\"user_id\"]\n        ).execute()"
          },
          {
            "line": 374,
            "context": "e().eq(\n            \"auth_user_id\", current_user[\"user_id\"]\n        ).execute()\n\n        # Supprimer aussi"
          },
          {
            "line": 379,
            "context": "supabase.auth.admin.delete_user(current_user[\"user_id\"])\n            logger.info(\n                f\"[de"
          },
          {
            "line": 416,
            "context": "users\")\n            .select(\"*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()"
          },
          {
            "line": 416,
            "context": "*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()\n        )\n\n        # Ré"
          },
          {
            "line": 429,
            "context": "= supabase.table('conversations').select('*').eq('user_id', current_user['user_id']).execute()\n\n        exp"
          },
          {
            "line": 429,
            "context": "sations').select('*').eq('user_id', current_user['user_id']).execute()\n\n        export_data = {"
          },
          {
            "line": 435,
            "context": "t_date\": datetime.now().isoformat(),\n            \"user_id\": current_user[\"user_id\"],\n            \"email\": c"
          },
          {
            "line": 435,
            "context": "isoformat(),\n            \"user_id\": current_user[\"user_id\"],\n            \"email\": current_user[\"email\"],"
          },
          {
            "line": 461,
            "context": "users\")\n            .select(\"*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()"
          },
          {
            "line": 461,
            "context": "*\")\n            .eq(\"auth_user_id\", current_user[\"user_id\"])\n            .execute()\n        )\n\n        retu"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "deletion": [
          360,
          371,
          372,
          373,
          377
        ],
        "export": [
          403,
          407,
          447
        ],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\webhooks.py",
      "personal_data": {
        "email": [
          {
            "line": 39,
            "context": "):\n    \"\"\"Utilisateur Supabase\"\"\"\n    id: str\n    email: EmailStr\n    email_confirmed_at: Optional[str] ="
          },
          {
            "line": 71,
            "context": "dated\", \"user.deleted\", etc.\n    user_id: str\n    email: EmailStr\n    email_confirmed: bool\n    user_meta"
          },
          {
            "line": 147,
            "context": "assword.recovery.requested (reset password)\n    - email.change.requested (change email)\n    - user.invite"
          },
          {
            "line": 147,
            "context": "et password)\n    - email.change.requested (change email)\n    - user.invited (invite)\n\n    Documentation:"
          },
          {
            "line": 201,
            "context": "up\"]:\n            # Nouveau compte créé - envoyer email de confirmation\n            await handle_signup_e"
          },
          {
            "line": 205,
            "context": "# Demande de reset password - envoyer email\n            await handle_password_reset_event(use"
          },
          {
            "line": 208,
            "context": "et_event(user_data)\n\n        elif event_type in [\"email.change.requested\", \"user.email_change\"]:"
          },
          {
            "line": 209,
            "context": "l_change\"]:\n            # Demande de changement d'email - envoyer email\n            await handle_email_ch"
          },
          {
            "line": 209,
            "context": "# Demande de changement d'email - envoyer email\n            await handle_email_change_event(user_"
          },
          {
            "line": 213,
            "context": "]:\n            # Invitation utilisateur - envoyer email\n            await handle_invite_event(user_data)"
          },
          {
            "line": 240,
            "context": ":\n    \"\"\"Traite l'événement de signup et envoie l'email de confirmation\"\"\"\n    logger.info(\"[Webhook/Sign"
          },
          {
            "line": 244,
            "context": "# Extraire les informations utilisateur\n    email = user_data.get(\"email\")\n    user_metadata = user"
          },
          {
            "line": 244,
            "context": "formations utilisateur\n    email = user_data.get(\"email\")\n    user_metadata = user_data.get(\"user_metadat"
          },
          {
            "line": 256,
            "context": "h/confirm?token={confirmation_token}\"\n\n    if not email or not confirmation_token:\n        logger.error(f"
          },
          {
            "line": 257,
            "context": "error(f\"[Webhook/Signup] Missing required fields: email={bool(email)}, token={bool(confirmation_token)}\")"
          },
          {
            "line": 257,
            "context": "hook/Signup] Missing required fields: email={bool(email)}, token={bool(confirmation_token)}\")\n        ret"
          },
          {
            "line": 264,
            "context": "logger.info(f\"[Webhook/Signup] Sending signup email to {email} in language '{language}'\")\n\n    # Envo"
          },
          {
            "line": 264,
            "context": ".info(f\"[Webhook/Signup] Sending signup email to {email} in language '{language}'\")\n\n    # Envoyer l'emai"
          },
          {
            "line": 266,
            "context": "mail} in language '{language}'\")\n\n    # Envoyer l'email via notre service\n    email_service = get_email_s"
          },
          {
            "line": 270,
            "context": "e=EmailType.SIGNUP_CONFIRMATION,\n        to_email=email,\n        language=language,\n        confirmation_"
          },
          {
            "line": 278,
            "context": "f success:\n        logger.info(f\"[Webhook/Signup] Email sent successfully to {email}\")\n    else:"
          },
          {
            "line": 278,
            "context": "fo(f\"[Webhook/Signup] Email sent successfully to {email}\")\n    else:\n        logger.error(f\"[Webhook/Sign"
          },
          {
            "line": 280,
            "context": "logger.error(f\"[Webhook/Signup] Failed to send email to {email}\")\n\n\nasync def handle_password_reset_ev"
          },
          {
            "line": 280,
            "context": "error(f\"[Webhook/Signup] Failed to send email to {email}\")\n\n\nasync def handle_password_reset_event(user_d"
          },
          {
            "line": 284,
            "context": "\"Traite l'événement de reset password et envoie l'email\"\"\"\n    logger.info(\"[Webhook/PasswordReset] Proce"
          },
          {
            "line": 288,
            "context": "eset event\")\n\n    # Extraire les informations\n    email = user_data.get(\"email\")\n    user_metadata = user"
          },
          {
            "line": 288,
            "context": "raire les informations\n    email = user_data.get(\"email\")\n    user_metadata = user_data.get(\"user_metadat"
          },
          {
            "line": 298,
            "context": "eset-password?token={recovery_token}\"\n\n    if not email or not recovery_token:\n        logger.error(f\"[We"
          },
          {
            "line": 299,
            "context": "\"[Webhook/PasswordReset] Missing required fields: email={bool(email)}, token={bool(recovery_token)}\")"
          },
          {
            "line": 299,
            "context": "sswordReset] Missing required fields: email={bool(email)}, token={bool(recovery_token)}\")\n        return"
          },
          {
            "line": 305,
            "context": "gger.info(f\"[Webhook/PasswordReset] Sending reset email to {email} in language '{language}'\")\n\n    email_"
          },
          {
            "line": 305,
            "context": "f\"[Webhook/PasswordReset] Sending reset email to {email} in language '{language}'\")\n\n    email_service ="
          },
          {
            "line": 310,
            "context": "l_type=EmailType.PASSWORD_RESET,\n        to_email=email,\n        language=language,\n        confirmation_"
          },
          {
            "line": 318,
            "context": "ss:\n        logger.info(f\"[Webhook/PasswordReset] Email sent successfully to {email}\")\n    else:"
          },
          {
            "line": 318,
            "context": "ebhook/PasswordReset] Email sent successfully to {email}\")\n    else:\n        logger.error(f\"[Webhook/Pass"
          },
          {
            "line": 320,
            "context": "er.error(f\"[Webhook/PasswordReset] Failed to send email to {email}\")\n\n\nasync def handle_email_change_even"
          },
          {
            "line": 320,
            "context": "\"[Webhook/PasswordReset] Failed to send email to {email}\")\n\n\nasync def handle_email_change_event(user_dat"
          },
          {
            "line": 324,
            "context": "Any]):\n    \"\"\"Traite l'événement de changement d'email\"\"\"\n    logger.info(\"[Webhook/EmailChange] Process"
          },
          {
            "line": 325,
            "context": "logger.info(\"[Webhook/EmailChange] Processing email change event\")\n    # TODO: Implémenter si nécessa"
          },
          {
            "line": 369,
            "context": "ecovery.requested (reset password)\",\n            \"email.change.requested (change email)\",\n            \"us"
          },
          {
            "line": 369,
            "context": "rd)\",\n            \"email.change.requested (change email)\",\n            \"user.invited (invite)\",\n        ]"
          }
        ],
        "phone": [
          {
            "line": 33,
            "context": "str] = \"en\"\n    company: Optional[str] = None\n    phone: Optional[str] = None\n\n\nclass SupabaseUser(BaseMo"
          }
        ],
        "name": [
          {
            "line": 28,
            "context": "):\n    \"\"\"Métadonnées utilisateur Supabase\"\"\"\n    first_name: Optional[str] = None\n    last_name: Optional[str"
          },
          {
            "line": 29,
            "context": "abase\"\"\"\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str"
          },
          {
            "line": 30,
            "context": "r] = None\n    last_name: Optional[str] = None\n    full_name: Optional[str] = None\n    preferred_language: Opt"
          },
          {
            "line": 130,
            "context": "return None\n\n    return user_metadata.get(\"first_name\") or user_metadata.get(\"full_name\")\n\n\n# === ENDPO"
          },
          {
            "line": 130,
            "context": "_metadata.get(\"first_name\") or user_metadata.get(\"full_name\")\n\n\n# === ENDPOINTS WEBHOOK ===\n\n\n@router.post(\"/"
          },
          {
            "line": 262,
            "context": "language = get_user_language(user_metadata)\n    first_name = get_user_first_name(user_metadata)\n\n    logger."
          },
          {
            "line": 274,
            "context": "rl,\n        otp_token=confirmation_token,\n        first_name=first_name,\n    )\n\n    if success:\n        logger"
          },
          {
            "line": 274,
            "context": "otp_token=confirmation_token,\n        first_name=first_name,\n    )\n\n    if success:\n        logger.info(f\"[We"
          },
          {
            "line": 303,
            "context": "language = get_user_language(user_metadata)\n    first_name = get_user_first_name(user_metadata)\n\n    logger."
          },
          {
            "line": 314,
            "context": "ry_url,\n        otp_token=recovery_token,\n        first_name=first_name,\n    )\n\n    if success:\n        logger"
          },
          {
            "line": 314,
            "context": "otp_token=recovery_token,\n        first_name=first_name,\n    )\n\n    if success:\n        logger.info(f\"[We"
          }
        ],
        "password": [
          {
            "line": 146,
            "context": "des événements:\n    - user.created (signup)\n    - password.recovery.requested (reset password)\n    - email.c"
          },
          {
            "line": 146,
            "context": "(signup)\n    - password.recovery.requested (reset password)\n    - email.change.requested (change email)"
          },
          {
            "line": 204,
            "context": "up_event(user_data)\n\n        elif event_type in [\"password.recovery.requested\", \"user.password_reset\"]:"
          },
          {
            "line": 205,
            "context": ".password_reset\"]:\n            # Demande de reset password - envoyer email\n            await handle_password"
          },
          {
            "line": 284,
            "context": "ct[str, Any]):\n    \"\"\"Traite l'événement de reset password et envoie l'email\"\"\"\n    logger.info(\"[Webhook/Pa"
          },
          {
            "line": 285,
            "context": "logger.info(\"[Webhook/PasswordReset] Processing password reset event\")\n\n    # Extraire les informations"
          },
          {
            "line": 296,
            "context": "recovery_url = f\"{frontend_url}/auth/reset-password?token={recovery_token}\"\n\n    if not email or not"
          },
          {
            "line": 368,
            "context": "\"user.created (signup)\",\n            \"password.recovery.requested (reset password)\","
          },
          {
            "line": 368,
            "context": ",\n            \"password.recovery.requested (reset password)\",\n            \"email.change.requested (change em"
          }
        ],
        "ip_address": [
          {
            "line": 51,
            "context": "baseUser\n    session_id: Optional[str] = None\n    ip_address: Optional[str] = None\n    user_agent: Optional[st"
          }
        ],
        "user_id": [
          {
            "line": 70,
            "context": "reated\", \"user.updated\", \"user.deleted\", etc.\n    user_id: str\n    email: EmailStr\n    email_confirmed: boo"
          }
        ]
      },
      "gdpr_practices": {
        "encryption": [],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_encryption",
          "severity": "CRITICAL",
          "message": "Mots de passe trouvés sans chiffrement apparent"
        },
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\api\\v1\\__init__.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "export": [
          548
        ],
        "audit_log": [
          558
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\utils\\openai_utils.py",
      "personal_data": {
        "name": [
          {
            "line": 146,
            "context": "model: str) -> str:\n    \"\"\"Return the token param name expected by the API for this model.\n    Historica"
          },
          {
            "line": 227,
            "context": "- Retries once if API says wrong token parameter name.\n    \"\"\"\n    _configure_openai_client()\n\n    extr"
          },
          {
            "line": 264,
            "context": ".text or \"\"\n\n    # Retry on wrong token parameter name\n    if \"unsupported_parameter\" in (err_msg or \"\")"
          },
          {
            "line": 403,
            "context": "t.completions.create\n    - Auto-maps tokens param name\n    - Applies safe temperature\n    - Retries with"
          },
          {
            "line": 406,
            "context": "if unsupported\n    - Retries swapping token param name if API complains\n    \"\"\"\n    if \"model\" not in kw"
          },
          {
            "line": 421,
            "context": "_DEFAULT_MAX_TOKENS)\n\n    # Harmonize token param name\n    param_name = _completion_param_name(model)"
          },
          {
            "line": 449,
            "context": "te(**kwargs)\n        # Retry if wrong token param name\n        elif \"unsupported_parameter\" in msg.lower"
          },
          {
            "line": 480,
            "context": "plan>\", \"<answer>\", \"<recommendations>\"):\n        name = tag.strip(\"<>\")\n        m = re.search("
          },
          {
            "line": 482,
            "context": "rf\"{re.escape(tag)}(.*?){re.escape('</' + name + '>')}\", raw, re.S | re.I\n        )\n        if m"
          },
          {
            "line": 485,
            "context": ".S | re.I\n        )\n        if m:\n            out[name] = m.group(1).strip()\n    return out\n\n\ndef _extra"
          },
          {
            "line": 741,
            "context": "et causait l'erreur d'import:\n    \"cannot import name 'test_cot_pipeline' from 'app.api.v1.utils.openai"
          }
        ],
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "export": [
          490
        ],
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\api\\v1\\utils\\__init__.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\core\\database.py",
      "personal_data": {
        "email": [
          {
            "line": 148,
            "context": "ur (auth_user_id)\n\n    Returns:\n        dict avec email, first_name, last_name, user_type, plan ou None"
          },
          {
            "line": 310,
            "context": "pabase(user_id)\nif user:\n    print(f\"User: {user['email']} ({user['first_name']} {user['last_name']})\")"
          }
        ],
        "name": [
          {
            "line": 148,
            "context": "h_user_id)\n\n    Returns:\n        dict avec email, first_name, last_name, user_type, plan ou None\n    \"\"\"\n    t"
          },
          {
            "line": 148,
            "context": "Returns:\n        dict avec email, first_name, last_name, user_type, plan ou None\n    \"\"\"\n    try:"
          },
          {
            "line": 310,
            "context": "f user:\n    print(f\"User: {user['email']} ({user['first_name']} {user['last_name']})\")\n\n\n3. Query cross-databa"
          },
          {
            "line": 310,
            "context": "ser: {user['email']} ({user['first_name']} {user['last_name']})\")\n\n\n3. Query cross-database (User info + Conv"
          }
        ],
        "user_id": [
          {
            "line": 140,
            "context": "=====================\n\ndef get_user_from_supabase(user_id: str) -> Optional[dict]:\n    \"\"\"\n    Récupère les"
          },
          {
            "line": 145,
            "context": "s utilisateur depuis Supabase.\n\n    Args:\n        user_id: UUID de l'utilisateur (auth_user_id)\n\n    Return"
          },
          {
            "line": 145,
            "context": "Args:\n        user_id: UUID de l'utilisateur (auth_user_id)\n\n    Returns:\n        dict avec email, first_nam"
          },
          {
            "line": 151,
            "context": "fo(f\"🔍 [SUPABASE] Fetching user from Supabase for user_id: {user_id}\")\n        supabase = get_supabase_clie"
          },
          {
            "line": 151,
            "context": "PABASE] Fetching user from Supabase for user_id: {user_id}\")\n        supabase = get_supabase_client()"
          },
          {
            "line": 155,
            "context": "se.supabase_url}\")\n\n        # Essayer d'abord par auth_user_id (cas le plus probable)\n        response = supabas"
          },
          {
            "line": 156,
            "context": "esponse = supabase.table(\"users\").select(\"*\").eq(\"auth_user_id\", user_id).execute()\n        logger.info(f\"🔍 [SUP"
          },
          {
            "line": 156,
            "context": "ase.table(\"users\").select(\"*\").eq(\"auth_user_id\", user_id).execute()\n        logger.info(f\"🔍 [SUPABASE] Que"
          },
          {
            "line": 157,
            "context": "ute()\n        logger.info(f\"🔍 [SUPABASE] Query by auth_user_id response: {response}\")\n\n        # Si aucun résult"
          },
          {
            "line": 161,
            "context": "logger.info(f\"🔍 [SUPABASE] No user found by auth_user_id, trying by id\")\n            response = supabase.t"
          },
          {
            "line": 162,
            "context": "se = supabase.table(\"users\").select(\"*\").eq(\"id\", user_id).execute()\n            logger.info(f\"🔍 [SUPABASE]"
          },
          {
            "line": 170,
            "context": "logger.warning(f\"❌ [SUPABASE] No data found for user_id: {user_id}\")\n            return None\n    except E"
          },
          {
            "line": 170,
            "context": "arning(f\"❌ [SUPABASE] No data found for user_id: {user_id}\")\n            return None\n    except Exception a"
          },
          {
            "line": 173,
            "context": "[SUPABASE] Error fetching user from Supabase for {user_id}: {e}\")\n        logger.error(f\"❌ [SUPABASE] Error"
          },
          {
            "line": 179,
            "context": ")}\")\n        return None\n\n\ndef verify_user_exists(user_id: str) -> bool:\n    \"\"\"Vérifie si un utilisateur e"
          },
          {
            "line": 181,
            "context": "ans Supabase\"\"\"\n    user = get_user_from_supabase(user_id)\n    return user is not None\n\n\ndef get_user_conve"
          },
          {
            "line": 185,
            "context": "er is not None\n\n\ndef get_user_conversations_count(user_id: str) -> int:\n    \"\"\"\n    Compte le nombre de con"
          },
          {
            "line": 190,
            "context": "n utilisateur dans PostgreSQL.\n\n    Args:\n        user_id: UUID de l'utilisateur\n\n    Returns:\n        Nomb"
          },
          {
            "line": 199,
            "context": "\"SELECT COUNT(*) FROM conversations WHERE user_id = %s AND status = 'active'\","
          },
          {
            "line": 200,
            "context": "= %s AND status = 'active'\",\n                    (user_id,)\n                )\n                return cur.fe"
          },
          {
            "line": 295,
            "context": "INSERT INTO conversations (session_id, user_id, question, response)\n            VALUES (%s, %s,"
          },
          {
            "line": 299,
            "context": "NING id\n            ''',\n            (session_id, user_id, question, response)\n        )\n        conversati"
          },
          {
            "line": 308,
            "context": "user_from_supabase\n\nuser = get_user_from_supabase(user_id)\nif user:\n    print(f\"User: {user['email']} ({use"
          },
          {
            "line": 318,
            "context": "user from Supabase\nuser = get_user_from_supabase(user_id)\n\n# 2. Get conversations from PostgreSQL\nwith get"
          },
          {
            "line": 324,
            "context": "e(\n            \"SELECT * FROM conversations WHERE user_id = %s ORDER BY created_at DESC\",\n            (user"
          },
          {
            "line": 325,
            "context": "r_id = %s ORDER BY created_at DESC\",\n            (user_id,)\n        )\n        conversations = cur.fetchall("
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\middleware\\auth_middleware.py",
      "personal_data": {
        "email": [
          {
            "line": 41,
            "context": "1/auth/reset-password\",\n    \"/api/v1/auth/confirm-email\",\n    \"/api/v1/auth/debug/jwt-config\",\n    \"/api/"
          },
          {
            "line": 129,
            "context": "1/auth/reset-password\",\n    \"/api/v1/auth/confirm-email\",\n    \"/api/v1/auth/debug\",\n    \"/api/v1/auth/oau"
          },
          {
            "line": 159,
            "context": ".debug(f\"Token verified for user: {user_info.get('email')}\")\n        return user_info\n\n    except HTTPExc"
          }
        ],
        "password": [
          {
            "line": 40,
            "context": "\"/api/v1/auth/register\",\n    \"/api/v1/auth/reset-password\",\n    \"/api/v1/auth/confirm-email\",\n    \"/api/v1/"
          },
          {
            "line": 128,
            "context": "\"/api/v1/auth/register\",\n    \"/api/v1/auth/reset-password\",\n    \"/api/v1/auth/confirm-email\",\n    \"/api/v1/"
          }
        ],
        "user_id": []
      },
      "gdpr_practices": {
        "deletion": [
          87,
          221
        ],
        "export": [
          98
        ],
        "encryption": [],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_encryption",
          "severity": "CRITICAL",
          "message": "Mots de passe trouvés sans chiffrement apparent"
        }
      ]
    },
    {
      "file": "app\\middleware\\__init__.py",
      "personal_data": {
        "password": [],
        "user_id": []
      },
      "gdpr_practices": {
        "consent": []
      },
      "issues": []
    },
    {
      "file": "app\\services\\conversation_service.py",
      "personal_data": {
        "user_id": [
          {
            "line": 24,
            "context": "te_conversation(\n        session_id: str,\n        user_id: str,\n        user_message: str,\n        assistan"
          },
          {
            "line": 54,
            "context": "session_id,\n                            user_id,\n                            user_message,"
          },
          {
            "line": 69,
            "context": "f\"(session: {session_id}, user: {user_id})\"\n                    )\n\n                    ret"
          },
          {
            "line": 199,
            "context": "ticmethod\n    def get_user_conversations(\n        user_id: str,\n        limit: int = 50,\n        offset: in"
          },
          {
            "line": 223,
            "context": "FROM conversations\n                        WHERE user_id = %s AND status = %s\n                        \"\"\","
          },
          {
            "line": 225,
            "context": "\"\"\",\n                        (user_id, status)\n                    )"
          },
          {
            "line": 236,
            "context": "::text as session_id,\n                            user_id,\n                            title,"
          },
          {
            "line": 247,
            "context": "FROM conversations\n                        WHERE user_id = %s AND status = %s\n                        ORDE"
          },
          {
            "line": 251,
            "context": "\"\"\",\n                        (user_id, status, limit, offset)\n                    )"
          },
          {
            "line": 259,
            "context": ": row[\"session_id\"],\n                            \"user_id\": row[\"user_id\"],\n                            \"ti"
          },
          {
            "line": 259,
            "context": "id\"],\n                            \"user_id\": row[\"user_id\"],\n                            \"title\": row[\"titl"
          },
          {
            "line": 273,
            "context": "ons)}/{total} \"\n                        f\"(user: {user_id})\"\n                    )\n\n                    ret"
          },
          {
            "line": 303,
            "context": "::text as session_id,\n                            user_id,\n                            title,"
          },
          {
            "line": 322,
            "context": ": row[\"session_id\"],\n                            \"user_id\": row[\"user_id\"],\n                            \"ti"
          },
          {
            "line": 322,
            "context": "id\"],\n                            \"user_id\": row[\"user_id\"],\n                            \"title\": row[\"titl"
          }
        ],
        "password": []
      },
      "gdpr_practices": {
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    },
    {
      "file": "app\\services\\email_service.py",
      "personal_data": {
        "email": [
          {
            "line": 12,
            "context": "ptional\nfrom enum import Enum\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipa"
          },
          {
            "line": 13,
            "context": "smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nlogger = log"
          },
          {
            "line": 170,
            "context": "count. To secure your access, please confirm your email address.\",\n                \"signup_button\": \"Conf"
          },
          {
            "line": 171,
            "context": "s.\",\n                \"signup_button\": \"Confirm my email\",\n                \"signup_otp_intro\": \"Or enter t"
          },
          {
            "line": 182,
            "context": "\",\n                \"email_change_title\": \"Confirm email change\",\n                \"email_change_body\": \"Yo"
          },
          {
            "line": 183,
            "context": "\"email_change_body\": \"You requested to update the email address for your Intelia Expert account.\","
          },
          {
            "line": 236,
            "context": "hren Zugang zu sichern, bestätigen Sie bitte Ihre E-Mail-Adresse.\",\n                \"signup_button\": \"Mein"
          },
          {
            "line": 237,
            "context": "dresse.\",\n                \"signup_button\": \"Meine E-Mail bestätigen\",\n                \"signup_otp_intro\":"
          },
          {
            "line": 248,
            "context": "annehmen\",\n                \"email_change_title\": \"E-Mail-Änderung bestätigen\",\n                \"email_chan"
          },
          {
            "line": 249,
            "context": "\"email_change_body\": \"Sie haben beantragt, die E-Mail-Adresse für Ihr Intelia Expert-Konto zu aktualisi"
          },
          {
            "line": 280,
            "context": "ara proteger seu acesso, confirme seu endereço de e-mail.\",\n                \"signup_button\": \"Confirmar me"
          },
          {
            "line": 281,
            "context": ",\n                \"signup_button\": \"Confirmar meu e-mail\",\n                \"signup_otp_intro\": \"Ou insira"
          },
          {
            "line": 292,
            "context": "\"email_change_title\": \"Confirmar mudança de e-mail\",\n                \"email_change_body\": \"Você soli"
          },
          {
            "line": 293,
            "context": "ge_body\": \"Você solicitou atualizar o endereço de e-mail da sua conta Intelia Expert.\",\n                \"e"
          },
          {
            "line": 346,
            "context": "mengamankan akses Anda, silakan konfirmasi alamat email Anda.\",\n                \"signup_button\": \"Konfirm"
          },
          {
            "line": 347,
            "context": "a.\",\n                \"signup_button\": \"Konfirmasi email saya\",\n                \"signup_otp_intro\": \"Atau"
          },
          {
            "line": 358,
            "context": "\"email_change_title\": \"Konfirmasi perubahan email\",\n                \"email_change_body\": \"Anda memi"
          },
          {
            "line": 359,
            "context": "nge_body\": \"Anda meminta untuk memperbarui alamat email untuk akun Intelia Expert Anda.\","
          },
          {
            "line": 368,
            "context": "teggere il tuo accesso, conferma il tuo indirizzo email.\",\n                \"signup_button\": \"Conferma la"
          },
          {
            "line": 369,
            "context": "\"signup_button\": \"Conferma la mia email\",\n                \"signup_otp_intro\": \"Oppure ins"
          },
          {
            "line": 380,
            "context": "\"email_change_title\": \"Conferma modifica email\",\n                \"email_change_body\": \"Hai richi"
          },
          {
            "line": 381,
            "context": "e_body\": \"Hai richiesto di aggiornare l'indirizzo email per il tuo account Intelia Expert.\","
          },
          {
            "line": 391,
            "context": ",\n                \"signup_button\": \"Bevestig mijn e-mail\",\n                \"signup_otp_intro\": \"Of voer de"
          },
          {
            "line": 412,
            "context": "ta. Aby zabezpieczyć dostęp, potwierdź swój adres e-mail.\",\n                \"signup_button\": \"Potwierdź mó"
          },
          {
            "line": 413,
            "context": ",\n                \"signup_button\": \"Potwierdź mój e-mail\",\n                \"signup_otp_intro\": \"Lub wprowa"
          },
          {
            "line": 425,
            "context": "l_change_body\": \"Poprosiłeś o aktualizację adresu e-mail dla twojego konta Intelia Expert.\","
          },
          {
            "line": 441,
            "context": "tuple[str, str]:\n        \"\"\"Génère le HTML pour l'email de confirmation d'inscription\"\"\"\n        translat"
          },
          {
            "line": 503,
            "context": "tuple[str, str]:\n        \"\"\"Génère le HTML pour l'email de reset password\"\"\"\n        translations = Email"
          },
          {
            "line": 572,
            "context": "content: str,\n    ) -> bool:\n        \"\"\"Envoie un email HTML via SMTP\"\"\"\n        try:\n            if not"
          },
          {
            "line": 578,
            "context": "logger.info(f\"[EmailService] Tentative envoi email à {to_email}\")\n            logger.info(f\"[EmailSe"
          },
          {
            "line": 613,
            "context": "envoyé avec succès\")\n\n            logger.info(f\"✅ Email sent successfully to {to_email}\")\n            ret"
          },
          {
            "line": 617,
            "context": "as e:\n            logger.error(f\"❌ Failed to send email to {to_email}: {type(e).__name__}: {e}\")"
          },
          {
            "line": 632,
            "context": "**kwargs,\n    ) -> bool:\n        \"\"\"Envoie un email d'authentification dans la langue de l'utilisateu"
          },
          {
            "line": 643,
            "context": "# Générer le contenu selon le type d'email\n            if email_type == EmailType.SIGNUP_CON"
          },
          {
            "line": 653,
            "context": "else:\n                logger.error(f\"Unsupported email type: {email_type}\")\n                return False"
          },
          {
            "line": 656,
            "context": "return False\n\n            # Envoyer l'email\n            return self.send_email(to_email, subj"
          },
          {
            "line": 660,
            "context": "e:\n            logger.error(f\"Failed to send auth email: {e}\")\n            return False\n\n\n# Singleton ins"
          },
          {
            "line": 669,
            "context": "\"\"\"Récupère l'instance singleton du service d'email\"\"\"\n    global _email_service\n    if _email_servic"
          }
        ],
        "name": [
          {
            "line": 44,
            "context": "\"\n    PL = \"pl\"\n\n\n# Mapping des langues vers leur nom natif\nLANGUAGE_NAMES = {\n    EmailLanguage.FR: \"F"
          },
          {
            "line": 78,
            "context": "pe\" content=\"text/html; charset=UTF-8\" />\n  <meta name=\"x-apple-disable-message-reformatting\" />\n  <meta"
          },
          {
            "line": 79,
            "context": "\"x-apple-disable-message-reformatting\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-s"
          },
          {
            "line": 437,
            "context": ": EmailLanguage,\n        user_email: str,\n        first_name: Optional[str],\n        confirmation_url: str,"
          },
          {
            "line": 446,
            "context": "greeting = f\"{t['signup_greeting']}{' ' + first_name if first_name else ''}\"\n\n        # Contenu princi"
          },
          {
            "line": 446,
            "context": "ng = f\"{t['signup_greeting']}{' ' + first_name if first_name else ''}\"\n\n        # Contenu principal (langue pr"
          },
          {
            "line": 499,
            "context": ": EmailLanguage,\n        user_email: str,\n        first_name: Optional[str],\n        confirmation_url: str,"
          },
          {
            "line": 508,
            "context": "greeting = f\"{t['signup_greeting']}{' ' + first_name if first_name else ''}\"\n\n        primary_content"
          },
          {
            "line": 508,
            "context": "ng = f\"{t['signup_greeting']}{' ' + first_name if first_name else ''}\"\n\n        primary_content = f\"\"\""
          },
          {
            "line": 629,
            "context": "rmation_url: str,\n        otp_token: str,\n        first_name: Optional[str] = None,\n        **kwargs,\n    ) ->"
          },
          {
            "line": 646,
            "context": "signup_email(\n                    lang, to_email, first_name, confirmation_url, otp_token\n                )"
          },
          {
            "line": 650,
            "context": "_reset_email(\n                    lang, to_email, first_name, confirmation_url, otp_token\n                )"
          }
        ],
        "address": [
          {
            "line": 148,
            "context": "r sécuriser votre accès, veuillez confirmer votre adresse courriel.\",\n                \"signup_button\": \"Con"
          },
          {
            "line": 149,
            "context": ",\n                \"signup_button\": \"Confirmer mon adresse\",\n                \"signup_otp_intro\": \"Ou entrez"
          },
          {
            "line": 160,
            "context": "\"email_change_title\": \"Confirmez le changement d'adresse\",\n                \"email_change_body\": \"Vous avez"
          },
          {
            "line": 161,
            "context": "_body\": \"Vous avez demandé de mettre à jour votre adresse courriel pour votre compte Intelia Expert.\","
          },
          {
            "line": 170,
            "context": "To secure your access, please confirm your email address.\",\n                \"signup_button\": \"Confirm my e"
          },
          {
            "line": 183,
            "context": "_change_body\": \"You requested to update the email address for your Intelia Expert account.\","
          },
          {
            "line": 236,
            "context": "gang zu sichern, bestätigen Sie bitte Ihre E-Mail-Adresse.\",\n                \"signup_button\": \"Meine E-Mail"
          },
          {
            "line": 249,
            "context": "il_change_body\": \"Sie haben beantragt, die E-Mail-Adresse für Ihr Intelia Expert-Konto zu aktualisieren.\","
          }
        ],
        "password": [
          {
            "line": 175,
            "context": "age.\",\n                \"reset_title\": \"Reset your password\",\n                \"reset_body\": \"We received a re"
          },
          {
            "line": 176,
            "context": "\"reset_body\": \"We received a request to reset the password for your Intelia Expert account.\","
          },
          {
            "line": 177,
            "context": "ount.\",\n                \"reset_button\": \"Reset my password\",\n                \"invite_title\": \"You've been in"
          },
          {
            "line": 373,
            "context": "\"reset_title\": \"Reimposta la tua password\",\n                \"reset_body\": \"Abbiamo ricevuto"
          },
          {
            "line": 374,
            "context": "Abbiamo ricevuto una richiesta per reimpostare la password del tuo account Intelia Expert.\","
          },
          {
            "line": 375,
            "context": "\"reset_button\": \"Reimposta la mia password\",\n                \"invite_title\": \"Sei stato invi"
          },
          {
            "line": 503,
            "context": ":\n        \"\"\"Génère le HTML pour l'email de reset password\"\"\"\n        translations = EmailTemplates.get_tran"
          },
          {
            "line": 593,
            "context": "# SSL direct (Resend, Gmail avec App Password)\n                logger.info(\"[EmailService] Util"
          }
        ],
        "user_id": [
          {
            "line": 436,
            "context": "ignup_email(\n        lang: EmailLanguage,\n        user_email: str,\n        first_name: Optional[str],"
          },
          {
            "line": 498,
            "context": "reset_email(\n        lang: EmailLanguage,\n        user_email: str,\n        first_name: Optional[str],"
          }
        ]
      },
      "gdpr_practices": {
        "encryption": [],
        "audit_log": [],
        "consent": []
      },
      "issues": [
        {
          "type": "email_logging",
          "severity": "HIGH",
          "message": "Emails potentiellement loggés en clair (violation RGPD Article 32)"
        },
        {
          "type": "missing_encryption",
          "severity": "CRITICAL",
          "message": "Mots de passe trouvés sans chiffrement apparent"
        },
        {
          "type": "missing_audit",
          "severity": "MEDIUM",
          "message": "Accès données utilisateur sans audit log"
        }
      ]
    }
  ],
  "recommendations": [
    {
      "priority": "CRITICAL",
      "action": "Implémenter le chiffrement pour tous les mots de passe",
      "article": "RGPD Article 32 (Sécurité du traitement)"
    },
    {
      "priority": "HIGH",
      "action": "Masquer ou hasher les emails dans les logs",
      "article": "RGPD Article 32 (Sécurité du traitement)"
    },
    {
      "priority": "MEDIUM",
      "action": "Créer un audit log des accès aux données personnelles",
      "article": "RGPD Article 30 (Registre des activités de traitement)"
    },
    {
      "priority": "HIGH",
      "action": "Implémenter mécanisme de consentement explicite",
      "article": "RGPD Article 6 (Licéité du traitement)"
    }
  ]
}