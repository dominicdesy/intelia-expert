# app/middleware/auth_middleware.py
"""
Middleware d'authentification globale pour l'API Intelia Expert
Version corrig√©e - Endpoints auth align√©s avec la configuration r√©elle
"""

from fastapi import HTTPException, Request
from fastapi.security import HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
import logging
from typing import Dict, Any, Optional

# Import de la fonction d'auth existante
from app.api.v1.auth import get_current_user, security

logger = logging.getLogger(__name__)

# üÜï ENDPOINTS PUBLICS CORRIGES (pas d'auth requise)
PUBLIC_ENDPOINTS = {
    # === API ENDPOINTS PUBLICS ===
    "/api/ask-public",
    "/api/v1/ask-public", 
    "/api/v1/system-status", 
    "/api/v1/debug",
    "/api/rag/debug",
    "/api/rag/test",
    "/api/cors-test",
    "/api/",
    "/api/docs",
    "/api/redoc",
    "/api/openapi.json",
    "/api/v1/health",
    
    # === ‚úÖ ENDPOINTS AUTH PUBLICS CORRIGES ===
    "/api/auth/login",              # ‚úÖ Correspond au router r√©el
    "/api/auth/register",           # ‚úÖ Correspond au router r√©el
    "/api/auth/debug/jwt-config",   # ‚úÖ Correspond au router r√©el
    
    # === CONVERSATIONS PUBLIQUES ===
    "/api/v1/conversations/test-public",
    "/api/v1/conversations/test-public-post",
    
    # === ENDPOINTS SANS PREFIX /api (compatibilit√©) ===
    "/ask-public",
    "/v1/ask-public",
    "/system-status", 
    "/debug",
    "/rag/debug",
    "/rag/test",
    "/cors-test",
    "/",
    "/docs",
    "/redoc",
    "/openapi.json",
    "/health",
    "/metrics",                     # Monitoring
    "/admin/stats",                 # Stats admin publiques
    "/health/complete",             # Health check complet
    
    # === ‚úÖ AUTH ENDPOINTS SANS PREFIX (compatibilit√©) ===
    "/auth/login",                  # ‚úÖ Version directe
    "/auth/register",               # ‚úÖ Version directe
    "/auth/debug/jwt-config",       # ‚úÖ Version directe
    
    # === CONVERSATIONS SANS PREFIX ===
    "/v1/conversations/test-public",
    "/v1/conversations/test-public-post"
}

# üîí PATTERNS D'ENDPOINTS PROT√âG√âS (authentification requise)
PROTECTED_PATTERNS = [
    # === ENDPOINTS BUSINESS CORE ===
    "/api/v1/billing/",             # Facturation
    "/api/v1/logging/analytics/",   # Analytics
    "/api/v1/conversations/",       # Conversations (sauf test-public)
    "/api/v1/expert/ask",           # Questions expert
    "/api/v1/admin/",               # Administration
    "/api/v1/invitations/",         # Invitations
    
    # === ‚úÖ ENDPOINTS AUTH PROT√âG√âS CORRIGES ===
    "/api/auth/verify",             # ‚úÖ V√©rification token
    "/api/auth/logout",             # ‚úÖ D√©connexion
    "/api/auth/update-profile",     # ‚úÖ Mise √† jour profil
    "/api/auth/me",                 # ‚úÖ Profil utilisateur
    "/api/auth/delete-data",        # ‚úÖ Suppression donn√©es RGPD
    "/api/auth/export-user",        # ‚úÖ Export donn√©es RGPD
    
    # === PATTERNS SANS PREFIX (compatibilit√©) ===
    "/v1/billing/",
    "/v1/logging/analytics/",
    "/v1/conversations/",
    "/v1/expert/ask",
    "/v1/admin/",
    "/v1/invitations/",
    "/auth/verify",                 # ‚úÖ Sans /api
    "/auth/logout",                 # ‚úÖ Sans /api
    "/auth/update-profile",         # ‚úÖ Sans /api
    "/auth/me",                     # ‚úÖ Sans /api
    "/auth/delete-data",            # ‚úÖ Sans /api
    "/auth/export-user",            # ‚úÖ Sans /api
]

# ‚ùå PATTERNS D'ENDPOINTS INEXISTANTS (retourner 404 au lieu de 405)
NONEXISTENT_PATTERNS = [
    "/api/v1/analytics/",           # N'existe pas
    "/api/v1/user/",                # N'existe pas
    "/api/v1/stats/",               # N'existe pas
    "/api/v1/profile/",             # N'existe pas (utiliser /auth/)
    "/api/v1/account/",             # N'existe pas (utiliser /auth/)
    "/api/v1/users/",               # N'existe pas (utiliser /auth/)
    
    # ‚ùå ANCIENS ENDPOINTS AUTH INCORRECTS (n'existent pas)
    "/api/v1/auth/",                # ‚ùå Le router est sur /auth, pas /v1/auth
    
    # Patterns sans prefix
    "/v1/analytics/",
    "/v1/user/",
    "/v1/stats/",
    "/v1/profile/",
    "/v1/account/",
    "/v1/users/",
    "/v1/auth/",                    # ‚ùå Incorrect aussi
]

# üÜï PATTERNS PUBLICS √âTENDUS (pour la fonction is_public_endpoint)
EXTENDED_PUBLIC_PATTERNS = [
    # === DOCUMENTATION ET MONITORING ===
    "/docs",
    "/redoc", 
    "/openapi.json",
    "/health",
    "/metrics",
    "/static/",
    
    # === ‚úÖ AUTH PUBLICS CORRIGES ===
    "/auth/login",                  # ‚úÖ Chemin r√©el
    "/auth/register",               # ‚úÖ Chemin r√©el
    "/auth/debug",                  # ‚úÖ Chemin r√©el
    
    # === RAG ET TESTS ===
    "/rag/",
    "/cors-test",
    
    # === API PATTERNS ===
    "/api/docs",
    "/api/redoc",
    "/api/openapi.json", 
    "/api/auth/login",              # ‚úÖ Avec prefix /api
    "/api/auth/register",           # ‚úÖ Avec prefix /api
    "/api/auth/debug",              # ‚úÖ Avec prefix /api
    "/api/rag/",
    "/api/cors-test",
    "/api/v1/system-status",
    "/api/v1/debug",
    "/api/v1/ask-public",
    "/api/v1/conversations/test-public",
    "/api/ask-public",
    
    # === PATTERNS SANS VERSION ===
    "/v1/conversations/test-public",
    "/v1/ask-public",
    "/ask-public",
]

async def verify_supabase_token(request: Request) -> Dict[str, Any]:
    """
    Wrapper pour utiliser la logique d'auth existante dans api/v1/auth.py
    Maintient la compatibilit√© avec le syst√®me existant
    """
    try:
        # Extraire le token Authorization
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            logger.debug(f"üîç Missing or invalid auth header for {request.url.path}")
            raise HTTPException(
                status_code=401, 
                detail="Missing or invalid authorization header"
            )
        
        # Cr√©er l'objet credentials comme attendu par get_current_user
        credentials = HTTPAuthorizationCredentials(
            scheme="Bearer",
            credentials=auth_header.replace("Bearer ", "")
        )
        
        # Utiliser la fonction existante (maintient la logique multi-secret)
        user_info = await get_current_user(credentials)
        
        logger.debug(f"‚úÖ Token verified for user: {user_info.get('email')}")
        return user_info
        
    except HTTPException:
        # Re-raise HTTPException as-is
        raise
    except Exception as e:
        logger.error(f"‚ùå Token verification failed: {e}")
        raise HTTPException(
            status_code=401, 
            detail="Invalid or expired token"
        )

async def optional_auth(request: Request) -> Optional[Dict[str, Any]]:
    """
    Authentification optionnelle - ne l√®ve pas d'erreur si pas de token
    Utile pour les endpoints qui peuvent fonctionner avec ou sans auth
    """
    try:
        return await verify_supabase_token(request)
    except HTTPException:
        logger.debug(f"üîç Optional auth failed for {request.url.path} - continuing without auth")
        return None
    except Exception:
        return None

def is_public_endpoint(path: str) -> bool:
    """
    V√©rifie si un endpoint est public (pas d'authentification requise)
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint est public
    """
    # V√©rification exacte d'abord
    if path in PUBLIC_ENDPOINTS:
        logger.debug(f"‚úÖ Exact public endpoint match: {path}")
        return True
    
    # Puis v√©rification par patterns
    for pattern in EXTENDED_PUBLIC_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"‚úÖ Public pattern match: {path} -> {pattern}")
            return True
    
    logger.debug(f"üîí Not a public endpoint: {path}")
    return False

def is_protected_endpoint(path: str) -> bool:
    """
    V√©rifie si un endpoint n√©cessite une authentification
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint n√©cessite une authentification
    """
    for pattern in PROTECTED_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"üîí Protected pattern match: {path} -> {pattern}")
            return True
    
    logger.debug(f"üîì Not a protected endpoint: {path}")
    return False

def is_nonexistent_endpoint(path: str) -> bool:
    """
    V√©rifie si c'est un endpoint qui n'existe pas (pour retourner 404)
    √âvite les erreurs 405 Method Not Allowed pour des endpoints inexistants
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint n'existe pas
    """
    for pattern in NONEXISTENT_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"‚ùå Nonexistent pattern match: {path} -> {pattern}")
            return True
    
    return False

def create_cors_headers() -> Dict[str, str]:
    """
    Cr√©e les headers CORS standard pour les r√©ponses
    
    Returns:
        Dict: Headers CORS complets
    """
    return {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS, PATCH",
        "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Session-ID, Accept, Origin, User-Agent",
        "Access-Control-Allow-Credentials": "true",
    }

async def auth_middleware(request: Request, call_next):
    """
    Middleware d'authentification globale pour l'API Intelia Expert
    
    Logique:
    1. G√®re les endpoints inexistants (404)
    2. Skip l'auth pour les endpoints publics et OPTIONS
    3. V√©rifie l'auth pour les endpoints prot√©g√©s
    4. Laisse passer les autres endpoints (FastAPI g√®re les 404)
    
    Args:
        request: Request FastAPI
        call_next: Fonction suivante dans la cha√Æne
        
    Returns:
        Response: R√©ponse HTTP appropri√©e
    """
    
    # üìä LOG DE DEBUG D√âTAILL√â
    logger.debug(
        f"üîç Auth middleware - Method: {request.method}, "
        f"Path: {request.url.path}, "
        f"Auth Header: {'Present' if request.headers.get('Authorization') else 'Missing'}"
    )
    
    # üö® √âTAPE 1: G√©rer les endpoints inexistants AVANT toute autre logique
    if is_nonexistent_endpoint(request.url.path):
        logger.warning(f"‚ùå Endpoint inexistant d√©tect√©: {request.url.path}")
        return JSONResponse(
            status_code=404,
            content={
                "detail": "Not Found", 
                "error": "endpoint_not_found",
                "path": request.url.path,
                "suggestion": "V√©rifiez l'URL ou consultez /docs pour les endpoints disponibles"
            },
            headers=create_cors_headers()
        )
    
    # ‚úÖ √âTAPE 2: Skip l'auth pour les endpoints publics et requ√™tes OPTIONS
    if is_public_endpoint(request.url.path) or request.method == "OPTIONS":
        logger.debug(f"‚úÖ Public endpoint ou OPTIONS - Skip auth: {request.url.path}")
        
        # Pour OPTIONS, retourner directement les headers CORS
        if request.method == "OPTIONS":
            return JSONResponse(
                status_code=200,
                content={"message": "OK"},
                headers=create_cors_headers()
            )
        
        # Pour les endpoints publics, continuer sans auth
        response = await call_next(request)
        
        # Ajouter les headers CORS aux r√©ponses publiques
        for key, value in create_cors_headers().items():
            response.headers[key] = value
            
        return response
    
    # üîí √âTAPE 3: V√©rifier l'auth pour les endpoints prot√©g√©s
    if is_protected_endpoint(request.url.path):
        try:
            logger.debug(f"üîí Protected endpoint detected: {request.url.path}")
            
            # V√©rifier le token d'authentification
            user_info = await verify_supabase_token(request)
            
            # Ajouter les infos utilisateur √† la request pour les endpoints suivants
            request.state.user = user_info
            
            logger.info(
                f"‚úÖ User authenticated: {user_info.get('email')} "
                f"(type: {user_info.get('user_type')}) "
                f"for {request.url.path}"
            )
            
            # Continuer vers l'endpoint
            response = await call_next(request)
            
            # Ajouter les headers CORS aux r√©ponses prot√©g√©es
            for key, value in create_cors_headers().items():
                response.headers[key] = value
                
            return response
            
        except HTTPException as e:
            logger.warning(
                f"üîí Auth failed for {request.url.path}: "
                f"Status {e.status_code} - {e.detail}"
            )
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "detail": e.detail, 
                    "error": "authentication_failed",
                    "path": request.url.path
                },
                headers=create_cors_headers()
            )
            
        except Exception as e:
            logger.error(f"‚ùå Auth middleware unexpected error for {request.url.path}: {e}")
            return JSONResponse(
                status_code=401,
                content={
                    "detail": "Authentication failed", 
                    "error": "internal_auth_error",
                    "path": request.url.path
                },
                headers=create_cors_headers()
            )
    
    # üîÑ √âTAPE 4: Pour tous les autres endpoints (non prot√©g√©s, non publics)
    # Laisser passer - FastAPI g√©rera naturellement les 404 pour les routes inexistantes
    logger.debug(f"üîÑ Endpoint non-prot√©g√© - Passage libre: {request.url.path}")
    
    # Ajouter une authentification optionnelle pour ces endpoints
    try:
        user_info = await optional_auth(request)
        if user_info:
            request.state.user = user_info
            logger.debug(f"üîç Optional auth successful for {request.url.path}")
    except Exception:
        # Ignorer les erreurs d'auth optionnelle
        pass
    
    response = await call_next(request)
    
    # Ajouter les headers CORS √† toutes les r√©ponses
    for key, value in create_cors_headers().items():
        response.headers[key] = value
        
    return response

# üÜï FONCTION UTILITAIRE POUR LES ENDPOINTS
def get_authenticated_user(request: Request) -> Dict[str, Any]:
    """
    R√©cup√®re l'utilisateur authentifi√© depuis request.state
    √Ä utiliser dans les endpoints qui n√©cessitent une authentification
    
    Args:
        request: Request FastAPI
        
    Returns:
        Dict: Informations utilisateur
        
    Raises:
        HTTPException: Si pas d'utilisateur authentifi√©
    """
    if not hasattr(request.state, 'user') or not request.state.user:
        raise HTTPException(
            status_code=401,
            detail="Authentication required"
        )
    
    return request.state.user

def get_optional_user(request: Request) -> Optional[Dict[str, Any]]:
    """
    R√©cup√®re l'utilisateur authentifi√© si disponible, sinon None
    √Ä utiliser dans les endpoints avec authentification optionnelle
    
    Args:
        request: Request FastAPI
        
    Returns:
        Optional[Dict]: Informations utilisateur ou None
    """
    return getattr(request.state, 'user', None)

# üîß FONCTION DE DEBUG
def debug_middleware_config() -> Dict[str, Any]:
    """
    Retourne la configuration actuelle du middleware pour debug
    
    Returns:
        Dict: Configuration du middleware
    """
    return {
        "public_endpoints_count": len(PUBLIC_ENDPOINTS),
        "protected_patterns_count": len(PROTECTED_PATTERNS),
        "nonexistent_patterns_count": len(NONEXISTENT_PATTERNS),
        "extended_public_patterns_count": len(EXTENDED_PUBLIC_PATTERNS),
        "sample_public_endpoints": list(PUBLIC_ENDPOINTS)[:10],
        "sample_protected_patterns": PROTECTED_PATTERNS[:10],
        "auth_endpoints_corrected": [
            "/api/auth/login",
            "/api/auth/register", 
            "/api/auth/debug/jwt-config"
        ],
        "middleware_version": "2.1-auth-paths-fixed",
        "key_changes": [
            "Fixed auth endpoints paths from /v1/auth to /auth",
            "Added /api/v1/auth to nonexistent patterns", 
            "Improved CORS handling",
            "Enhanced error messages"
        ]
    }