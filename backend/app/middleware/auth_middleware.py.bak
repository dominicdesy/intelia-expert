# app/middleware/auth_middleware.py
"""
Middleware d'authentification globale pour l'API Intelia Expert
Version 4.0 - Int√©gration du syst√®me de cache statistiques
üöÄ NOUVEAU: Support des endpoints de cache ultra-rapides
üîß FIX: Support des endpoints /api/v1/auth/ (vrais endpoints du backend)
üîß CORS FIX: Compatible avec credentials: 'include'
"""

from fastapi import HTTPException, Request
from fastapi.security import HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
import logging
from typing import Dict, Any, Optional

# Import de la fonction d'auth existante
from app.api.v1.auth import get_current_user, security

logger = logging.getLogger(__name__)

# üÜï ENDPOINTS PUBLICS √âTENDUS AVEC CACHE (pas d'auth requise)
PUBLIC_ENDPOINTS = {
    # === API ENDPOINTS PUBLICS ===
    "/api/ask-public",
    "/api/v1/ask-public", 
    "/api/v1/system-status", 
    "/api/v1/debug",
    "/api/rag/debug",
    "/api/rag/test",
    "/api/cors-test",
    "/api/",
    "/api/docs",
    "/api/redoc",
    "/api/openapi.json",
    "/api/v1/health",
    
    # === ‚úÖ ENDPOINTS AUTH PUBLICS CORRIGES - VRAIS ENDPOINTS ===
    "/api/v1/auth/login",              # ‚úÖ VRAI endpoint backend
    "/api/v1/auth/debug/jwt-config",   # ‚úÖ VRAI endpoint backend
    "/api/v1/auth/test-direct",        # ‚úÖ VRAI endpoint backend
    
    # === üöÄ NOUVEAU: ENDPOINTS CACHE PUBLICS (health check) ===
    "/api/v1/stats-fast/health",          # ‚úÖ Health check du cache
    "/api/v1/stats/test",                  # ‚úÖ Test du syst√®me cache (si mont√©s dans main.py)
    
    # === AUTH TEMPORAIRE (auth-temp) ===
    "/api/auth-temp/login",            # ‚úÖ Auth temp
    "/api/auth-temp/me",               # ‚úÖ Auth temp
    "/api/auth-temp/test",             # ‚úÖ Auth temp
    
    # === SYSTEM ENDPOINTS ===
    "/api/v1/system/health",           # ‚úÖ System health
    "/api/v1/system/metrics",          # ‚úÖ System metrics
    "/api/v1/system/status",           # ‚úÖ System status
    "/api/deployment-debug",           # ‚úÖ Deployment debug
    
    # === CONVERSATIONS PUBLIQUES ===
    "/api/v1/conversations/test-public",
    "/api/v1/conversations/test-public-post",
    
    # === ENDPOINTS SANS PREFIX /api (compatibilit√©) ===
    "/ask-public",
    "/v1/ask-public",
    "/system-status", 
    "/debug",
    "/rag/debug",
    "/rag/test",
    "/cors-test",
    "/",
    "/docs",
    "/redoc",
    "/openapi.json",
    "/health",
    "/metrics",                        # Monitoring
    "/admin/stats",                    # Stats admin publiques
    "/health/complete",                # Health check complet
    "/deployment-debug",               # Debug deployment
    
    # === üöÄ NOUVEAU: CACHE ENDPOINTS PUBLICS SANS PREFIX ===
    "/v1/stats-fast/health",              # ‚úÖ Health check cache
    "/v1/stats/test",                     # ‚úÖ Test cache
    "/admin/cache/status",                # ‚úÖ Status cache (si public dans main.py)
    
    # === AUTH ENDPOINTS SANS PREFIX (compatibilit√©) ===
    "/v1/auth/login",                  # ‚úÖ Version directe
    "/v1/auth/debug/jwt-config",       # ‚úÖ Version directe
    "/v1/auth/test-direct",            # ‚úÖ Version directe
    "/auth-temp/login",                # ‚úÖ Auth temp sans /api
    "/auth-temp/me",                   # ‚úÖ Auth temp sans /api
    "/auth-temp/test",                 # ‚úÖ Auth temp sans /api
    
    # === CONVERSATIONS SANS PREFIX ===
    "/v1/conversations/test-public",
    "/v1/conversations/test-public-post"
}

# üîí PATTERNS D'ENDPOINTS PROT√âG√âS √âTENDUS (authentification requise)
PROTECTED_PATTERNS = [
    # === ENDPOINTS BUSINESS CORE ===
    "/api/v1/billing/",                # Facturation
    "/api/v1/logging/analytics/",      # Analytics
    "/api/v1/logging/questions",       # Questions (ancien endpoint)
    "/api/v1/conversations/",          # Conversations (sauf test-public)
    "/api/v1/expert/ask",              # Questions expert
    "/api/v1/admin/",                  # Administration
    "/api/v1/invitations/",            # Invitations
    
    # === üöÄ NOUVEAU: ENDPOINTS CACHE PROT√âG√âS (super admin) ===
    "/api/v1/stats-fast/",                # ‚úÖ Endpoints ultra-rapides (admin+)
    "/api/v1/stats-admin/",               # ‚úÖ Administration cache (super admin)
    "/api/v1/stats-fast/dashboard",       # ‚úÖ Dashboard rapide
    "/api/v1/stats-fast/questions",      # ‚úÖ Questions rapides
    "/api/v1/stats-fast/invitations/stats", # ‚úÖ Invitations rapides
    "/api/v1/stats-fast/openai-costs/",  # ‚úÖ Co√ªts OpenAI rapides
    "/api/v1/stats-fast/performance",    # ‚úÖ Performance rapide
    "/api/v1/stats-fast/my-analytics",   # ‚úÖ Analytics personnelles
    "/api/v1/stats-admin/force-update/", # ‚úÖ Force update cache
    "/api/v1/stats-admin/cache/",        # ‚úÖ Contr√¥le cache
    "/api/v1/stats-admin/status",        # ‚úÖ Status admin cache
    "/api/admin/cache/",                  # ‚úÖ Contr√¥le admin dans main.py
    
    # === ‚úÖ ENDPOINTS AUTH PROT√âG√âS CORRIGES - VRAIS ENDPOINTS ===
    "/api/v1/auth/me",                 # ‚úÖ Profil utilisateur (VRAI endpoint)
    "/api/v1/auth/delete-data",        # ‚úÖ Suppression donn√©es RGPD (VRAI endpoint)
    
    # === AUTH TEMPORAIRE PROT√âG√â ===
    "/api/auth-temp/me",               # ‚úÖ Auth temp - profil
    
    # === PATTERNS SANS PREFIX (compatibilit√©) ===
    "/v1/billing/",
    "/v1/logging/analytics/",
    "/v1/logging/questions",           # Questions
    "/v1/conversations/",
    "/v1/expert/ask",
    "/v1/admin/",
    "/v1/invitations/",
    
    # === üöÄ NOUVEAU: CACHE SANS PREFIX ===
    "/v1/stats-fast/",                    # ‚úÖ Endpoints cache rapides
    "/v1/stats-admin/",                   # ‚úÖ Admin cache
    "/admin/cache/",                      # ‚úÖ Admin cache direct
    
    "/v1/auth/me",                     # ‚úÖ Sans /api
    "/v1/auth/delete-data",            # ‚úÖ Sans /api
    "/auth-temp/me",                   # ‚úÖ Auth temp sans /api
]

# ‚ùå PATTERNS D'ENDPOINTS INEXISTANTS (retourner 404 au lieu de 405)
NONEXISTENT_PATTERNS = [
    "/api/v1/analytics/",              # N'existe pas
    "/api/v1/user/",                   # N'existe pas
    "/api/v1/profile/",                # N'existe pas (utiliser /v1/auth/)
    "/api/v1/account/",                # N'existe pas (utiliser /v1/auth/)
    "/api/v1/users/",                  # N'existe pas (utiliser /v1/auth/)
    
    # ‚ùå ANCIENS ENDPOINTS CACHE INCORRECTS
    "/api/v1/stats/",                  # ‚ùå Ancien - maintenant /v1/stats-fast/ et /v1/stats-admin/
    "/api/v1/cache/",                  # ‚ùå N'existe pas - utiliser /v1/stats-admin/
    "/api/stats/",                     # ‚ùå Ancien pattern
    
    # ‚ùå ANCIENS ENDPOINTS AUTH INCORRECTS (n'existent plus)
    "/api/auth/login",                 # ‚ùå Ancien - maintenant /v1/auth/login
    "/api/auth/register",              # ‚ùå Ancien - n'existe pas
    "/api/auth/me",                    # ‚ùå Ancien - maintenant /v1/auth/me
    "/api/auth/debug/jwt-config",      # ‚ùå Ancien - maintenant /v1/auth/debug/jwt-config
    
    # Patterns sans prefix
    "/v1/analytics/",
    "/v1/user/",
    "/v1/profile/",
    "/v1/account/",
    "/v1/users/",
    "/v1/stats/",                      # ‚ùå Utiliser /v1/stats-fast/ ou /v1/stats-admin/
    "/v1/cache/",                      # ‚ùå Utiliser /v1/stats-admin/
    "/stats/",                         # ‚ùå Ancien
    "/cache/",                         # ‚ùå Ancien
    "/auth/login",                     # ‚ùå Ancien sans /api
    "/auth/register",                  # ‚ùå Ancien sans /api
    "/auth/me",                        # ‚ùå Ancien sans /api
    "/auth/debug/jwt-config",          # ‚ùå Ancien sans /api
]

# üÜï PATTERNS PUBLICS √âTENDUS AVEC CACHE (pour la fonction is_public_endpoint)
EXTENDED_PUBLIC_PATTERNS = [
    # === DOCUMENTATION ET MONITORING ===
    "/docs",
    "/redoc", 
    "/openapi.json",
    "/health",
    "/metrics",
    "/static/",
    
    # === ‚úÖ AUTH PUBLICS CORRIGES - PATTERNS ===
    "/v1/auth/login",                  # ‚úÖ Pattern login
    "/v1/auth/debug",                  # ‚úÖ Pattern debug
    "/v1/auth/test-direct",            # ‚úÖ Pattern test
    "/auth-temp/",                     # ‚úÖ Pattern auth temporaire
    
    # === üöÄ NOUVEAU: PATTERNS CACHE PUBLICS ===
    "/v1/stats-fast/health",              # ‚úÖ Health check cache
    "/v1/stats/test",                     # ‚úÖ Test cache
    "/admin/cache/status",                # ‚úÖ Status cache public (si configur√©)
    
    # === RAG ET TESTS ===
    "/rag/",
    "/cors-test",
    
    # === API PATTERNS ===
    "/api/docs",
    "/api/redoc",
    "/api/openapi.json", 
    "/api/v1/auth/login",              # ‚úÖ Pattern login avec /api
    "/api/v1/auth/debug",              # ‚úÖ Pattern debug avec /api
    "/api/v1/auth/test-direct",        # ‚úÖ Pattern test avec /api
    "/api/auth-temp/",                 # ‚úÖ Pattern auth temp avec /api
    
    # === üöÄ NOUVEAU: PATTERNS CACHE AVEC /API ===
    "/api/v1/stats-fast/health",          # ‚úÖ Health cache
    "/api/v1/stats/test",                 # ‚úÖ Test cache
    "/api/admin/cache/status",            # ‚úÖ Status cache avec /api
    
    "/api/rag/",
    "/api/cors-test",
    "/api/v1/system",                  # ‚úÖ Pattern system
    "/api/v1/debug",
    "/api/v1/ask-public",
    "/api/v1/conversations/test-public",
    "/api/ask-public",
    "/api/deployment-debug",
    
    # === PATTERNS SANS VERSION ===
    "/v1/conversations/test-public",
    "/v1/ask-public",
    "/ask-public",
    "/deployment-debug",
]

async def verify_supabase_token(request: Request) -> Dict[str, Any]:
    """
    Wrapper pour utiliser la logique d'auth existante dans api/v1/auth.py
    Maintient la compatibilit√© avec le syst√®me existant
    """
    try:
        # Extraire le token Authorization
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            logger.debug(f"üîç Missing or invalid auth header for {request.url.path}")
            raise HTTPException(
                status_code=401, 
                detail="Missing or invalid authorization header"
            )
        
        # Cr√©er l'objet credentials comme attendu par get_current_user
        credentials = HTTPAuthorizationCredentials(
            scheme="Bearer",
            credentials=auth_header.replace("Bearer ", "")
        )
        
        # Utiliser la fonction existante (maintient la logique multi-secret)
        user_info = await get_current_user(credentials)
        
        logger.debug(f"‚úÖ Token verified for user: {user_info.get('email')}")
        return user_info
        
    except HTTPException:
        # Re-raise HTTPException as-is
        raise
    except Exception as e:
        logger.error(f"‚ùå Token verification failed: {e}")
        raise HTTPException(
            status_code=401, 
            detail="Invalid or expired token"
        )

async def optional_auth(request: Request) -> Optional[Dict[str, Any]]:
    """
    Authentification optionnelle - ne l√®ve pas d'erreur si pas de token
    Utile pour les endpoints qui peuvent fonctionner avec ou sans auth
    """
    try:
        return await verify_supabase_token(request)
    except HTTPException:
        logger.debug(f"üîç Optional auth failed for {request.url.path} - continuing without auth")
        return None
    except Exception:
        return None

def is_public_endpoint(path: str) -> bool:
    """
    V√©rifie si un endpoint est public (pas d'authentification requise)
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint est public
    """
    # V√©rification exacte d'abord
    if path in PUBLIC_ENDPOINTS:
        logger.debug(f"‚úÖ Exact public endpoint match: {path}")
        return True
    
    # Puis v√©rification par patterns
    for pattern in EXTENDED_PUBLIC_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"‚úÖ Public pattern match: {path} -> {pattern}")
            return True
    
    logger.debug(f"üîí Not a public endpoint: {path}")
    return False

def is_protected_endpoint(path: str) -> bool:
    """
    V√©rifie si un endpoint n√©cessite une authentification
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint n√©cessite une authentification
    """
    for pattern in PROTECTED_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"üîí Protected pattern match: {path} -> {pattern}")
            return True
    
    logger.debug(f"üìÑ Not a protected endpoint: {path}")
    return False

def is_nonexistent_endpoint(path: str) -> bool:
    """
    V√©rifie si c'est un endpoint qui n'existe pas (pour retourner 404)
    √âvite les erreurs 405 Method Not Allowed pour des endpoints inexistants
    
    Args:
        path: Chemin de l'endpoint √† v√©rifier
        
    Returns:
        bool: True si l'endpoint n'existe pas
    """
    for pattern in NONEXISTENT_PATTERNS:
        if path.startswith(pattern):
            logger.debug(f"‚ùå Nonexistent pattern match: {path} -> {pattern}")
            return True
    
    return False

def create_cors_headers(origin: str = None) -> Dict[str, str]:
    """
    üîß CORS CORRIG√â - Compatible avec credentials: 'include'
    Cr√©e les headers CORS standard pour les r√©ponses
    
    Args:
        origin: Origin de la requ√™te (pour √©viter le wildcard avec credentials)
        
    Returns:
        Dict: Headers CORS complets
    """
    # Liste des origins autoris√©s
    allowed_origins = [
        "https://expert.intelia.com",
        "https://expert-app-cngws.ondigitalocean.app", 
        "http://localhost:3000",
        "http://localhost:8080"
    ]
    
    # D√©terminer l'origin √† utiliser
    cors_origin = "*"  # Par d√©faut
    cors_credentials = "false"  # Par d√©faut
    
    if origin and origin in allowed_origins:
        cors_origin = origin  # Origin sp√©cifique pour credentials
        cors_credentials = "true"  # Credentials autoris√©es pour origins sp√©cifiques
    
    return {
        "Access-Control-Allow-Origin": cors_origin,
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS, PATCH",
        "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Session-ID, Accept, Origin, User-Agent",
        "Access-Control-Allow-Credentials": cors_credentials,
    }

# üöÄ NOUVEAU: Fonction pour v√©rifier les permissions cache
def has_cache_admin_permission(user_info: Dict[str, Any]) -> bool:
    """
    V√©rifie si l'utilisateur a les permissions pour les endpoints d'administration cache
    
    Args:
        user_info: Informations utilisateur depuis le token
        
    Returns:
        bool: True si l'utilisateur peut acc√©der aux endpoints admin cache
    """
    user_type = user_info.get("user_type", "user")
    is_admin = user_info.get("is_admin", False)
    
    # Super admin ou admin avec flag explicite
    return user_type in ["super_admin", "admin"] or is_admin

def has_cache_view_permission(user_info: Dict[str, Any]) -> bool:
    """
    V√©rifie si l'utilisateur peut voir les statistiques en cache
    
    Args:
        user_info: Informations utilisateur depuis le token
        
    Returns:
        bool: True si l'utilisateur peut voir les stats
    """
    user_type = user_info.get("user_type", "user")
    
    # Admin+ ou utilisateur avec permissions analytics
    return user_type in ["super_admin", "admin", "moderator"]

async def auth_middleware(request: Request, call_next):
    """
    Middleware d'authentification globale pour l'API Intelia Expert - VERSION 4.0 AVEC CACHE
    
    Logique:
    1. G√®re les endpoints inexistants (404)
    2. Skip l'auth pour les endpoints publics et OPTIONS
    3. V√©rifie l'auth pour les endpoints prot√©g√©s
    4. üöÄ NOUVEAU: Gestion sp√©ciale pour les endpoints de cache
    5. Laisse passer les autres endpoints (FastAPI g√®re les 404)
    
    Args:
        request: Request FastAPI
        call_next: Fonction suivante dans la cha√Æne
        
    Returns:
        Response: R√©ponse HTTP appropri√©e
    """
    
    # üìä LOG DE DEBUG D√âTAILL√â
    logger.debug(
        f"üîç Auth middleware - Method: {request.method}, "
        f"Path: {request.url.path}, "
        f"Auth Header: {'Present' if request.headers.get('Authorization') else 'Missing'}, "
        f"Origin: {request.headers.get('Origin', 'None')}"
    )
    
    # R√©cup√©rer l'origin de la requ√™te pour CORS
    request_origin = request.headers.get("Origin")
    
    # üö® √âTAPE 1: G√©rer les endpoints inexistants AVANT toute autre logique
    if is_nonexistent_endpoint(request.url.path):
        logger.warning(f"‚ùå Endpoint inexistant d√©tect√©: {request.url.path}")
        
        # üöÄ NOUVEAU: Message sp√©cial pour les anciens endpoints cache
        suggestion = "V√©rifiez l'URL ou consultez /docs pour les endpoints disponibles"
        if "/stats/" in request.url.path and "/stats-fast/" not in request.url.path:
            suggestion = "Les endpoints stats sont maintenant sur /v1/stats-fast/ (ultra-rapides) et /v1/stats-admin/ (administration)"
        elif "/cache/" in request.url.path:
            suggestion = "Les endpoints cache sont sur /v1/stats-admin/ pour l'administration"
        elif "/auth/" in request.url.path and "/v1/auth/" not in request.url.path:
            suggestion = "Les endpoints auth sont maintenant sur /v1/auth/ et non /auth/"
        
        return JSONResponse(
            status_code=404,
            content={
                "detail": "Not Found", 
                "error": "endpoint_not_found",
                "path": request.url.path,
                "suggestion": suggestion,
                "available_cache_endpoints": [
                    "/v1/stats-fast/dashboard (ultra-rapide)",
                    "/v1/stats-fast/questions (ultra-rapide)", 
                    "/v1/stats-admin/status (administration)",
                    "/v1/stats-admin/force-update/all (force mise √† jour)"
                ] if "/stats/" in request.url.path or "/cache/" in request.url.path else None
            },
            headers=create_cors_headers(request_origin)
        )
    
    # ‚úÖ √âTAPE 2: Skip l'auth pour les endpoints publics et requ√™tes OPTIONS
    if is_public_endpoint(request.url.path) or request.method == "OPTIONS":
        logger.debug(f"‚úÖ Public endpoint ou OPTIONS - Skip auth: {request.url.path}")
        
        # Pour OPTIONS, retourner directement les headers CORS
        if request.method == "OPTIONS":
            return JSONResponse(
                status_code=200,
                content={"message": "OK"},
                headers=create_cors_headers(request_origin)
            )
        
        # Pour les endpoints publics, continuer sans auth
        response = await call_next(request)
        
        # Ajouter les headers CORS aux r√©ponses publiques
        for key, value in create_cors_headers(request_origin).items():
            response.headers[key] = value
            
        return response
    
    # üîí √âTAPE 3: V√©rifier l'auth pour les endpoints prot√©g√©s
    if is_protected_endpoint(request.url.path):
        try:
            logger.debug(f"üîí Protected endpoint detected: {request.url.path}")
            
            # V√©rifier le token d'authentification
            user_info = await verify_supabase_token(request)
            
            # üöÄ NOUVEAU: V√©rification sp√©ciale pour les endpoints cache admin
            if "/stats-admin/" in request.url.path or "/admin/cache/" in request.url.path:
                if not has_cache_admin_permission(user_info):
                    logger.warning(f"üîí Cache admin permission denied for {user_info.get('email')} on {request.url.path}")
                    return JSONResponse(
                        status_code=403,
                        content={
                            "detail": "Cache administration requires super_admin permissions",
                            "error": "insufficient_permissions",
                            "required_permission": "super_admin",
                            "user_type": user_info.get("user_type"),
                            "path": request.url.path
                        },
                        headers=create_cors_headers(request_origin)
                    )
            
            # üöÄ NOUVEAU: V√©rification pour les endpoints stats-fast
            elif "/stats-fast/" in request.url.path:
                if not has_cache_view_permission(user_info):
                    logger.warning(f"üîí Cache view permission denied for {user_info.get('email')} on {request.url.path}")
                    return JSONResponse(
                        status_code=403,
                        content={
                            "detail": "Statistics access requires admin+ permissions",
                            "error": "insufficient_permissions", 
                            "required_permission": "admin",
                            "user_type": user_info.get("user_type"),
                            "path": request.url.path
                        },
                        headers=create_cors_headers(request_origin)
                    )
            
            # Ajouter les infos utilisateur √† la request pour les endpoints suivants
            request.state.user = user_info
            
            logger.info(
                f"‚úÖ User authenticated: {user_info.get('email')} "
                f"(type: {user_info.get('user_type')}) "
                f"for {request.url.path}"
            )
            
            # Continuer vers l'endpoint
            response = await call_next(request)
            
            # Ajouter les headers CORS aux r√©ponses prot√©g√©es
            for key, value in create_cors_headers(request_origin).items():
                response.headers[key] = value
                
            return response
            
        except HTTPException as e:
            logger.warning(
                f"üîí Auth failed for {request.url.path}: "
                f"Status {e.status_code} - {e.detail}"
            )
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "detail": e.detail, 
                    "error": "authentication_failed",
                    "path": request.url.path
                },
                headers=create_cors_headers(request_origin)
            )
            
        except Exception as e:
            logger.error(f"‚ùå Auth middleware unexpected error for {request.url.path}: {e}")
            return JSONResponse(
                status_code=401,
                content={
                    "detail": "Authentication failed", 
                    "error": "internal_auth_error",
                    "path": request.url.path
                },
                headers=create_cors_headers(request_origin)
            )
    
    # üìÑ √âTAPE 4: Pour tous les autres endpoints (non prot√©g√©s, non publics)
    # Laisser passer - FastAPI g√©rera naturellement les 404 pour les routes inexistantes
    logger.debug(f"üìÑ Endpoint non-prot√©g√© - Passage libre: {request.url.path}")
    
    # Ajouter une authentification optionnelle pour ces endpoints
    try:
        user_info = await optional_auth(request)
        if user_info:
            request.state.user = user_info
            logger.debug(f"üîç Optional auth successful for {request.url.path}")
    except Exception:
        # Ignorer les erreurs d'auth optionnelle
        pass
    
    response = await call_next(request)
    
    # Ajouter les headers CORS √† toutes les r√©ponses
    for key, value in create_cors_headers(request_origin).items():
        response.headers[key] = value
        
    return response

# üÜï FONCTION UTILITAIRE POUR LES ENDPOINTS
def get_authenticated_user(request: Request) -> Dict[str, Any]:
    """
    R√©cup√®re l'utilisateur authentifi√© depuis request.state
    √Ä utiliser dans les endpoints qui n√©cessitent une authentification
    
    Args:
        request: Request FastAPI
        
    Returns:
        Dict: Informations utilisateur
        
    Raises:
        HTTPException: Si pas d'utilisateur authentifi√©
    """
    if not hasattr(request.state, 'user') or not request.state.user:
        raise HTTPException(
            status_code=401,
            detail="Authentication required"
        )
    
    return request.state.user

def get_optional_user(request: Request) -> Optional[Dict[str, Any]]:
    """
    R√©cup√®re l'utilisateur authentifi√© si disponible, sinon None
    √Ä utiliser dans les endpoints avec authentification optionnelle
    
    Args:
        request: Request FastAPI
        
    Returns:
        Optional[Dict]: Informations utilisateur ou None
    """
    return getattr(request.state, 'user', None)

# üîß FONCTION DE DEBUG MISE √Ä JOUR
def debug_middleware_config() -> Dict[str, Any]:
    """
    Retourne la configuration actuelle du middleware pour debug
    
    Returns:
        Dict: Configuration du middleware
    """
    return {
        "public_endpoints_count": len(PUBLIC_ENDPOINTS),
        "protected_patterns_count": len(PROTECTED_PATTERNS),
        "nonexistent_patterns_count": len(NONEXISTENT_PATTERNS),
        "extended_public_patterns_count": len(EXTENDED_PUBLIC_PATTERNS),
        "sample_public_endpoints": list(PUBLIC_ENDPOINTS)[:15],  # Plus d'exemples
        "sample_protected_patterns": PROTECTED_PATTERNS[:15],    # Plus d'exemples
        "cache_endpoints": {
            "stats_fast_public": [
                "/api/v1/stats-fast/health",
                "/v1/stats-fast/health"
            ],
            "stats_fast_protected": [
                "/api/v1/stats-fast/dashboard",
                "/api/v1/stats-fast/questions", 
                "/api/v1/stats-fast/invitations/stats",
                "/api/v1/stats-fast/openai-costs/",
                "/api/v1/stats-fast/performance"
            ],
            "stats_admin_protected": [
                "/api/v1/stats-admin/",
                "/api/v1/stats-admin/force-update/",
                "/api/v1/stats-admin/cache/",
                "/api/v1/stats-admin/status"
            ]
        },
        "auth_endpoints_corrected": [
            "/api/v1/auth/login",                    # ‚úÖ NOUVEAU - VRAI endpoint
            "/api/v1/auth/debug/jwt-config",         # ‚úÖ NOUVEAU - VRAI endpoint
            "/api/v1/auth/me",                       # ‚úÖ NOUVEAU - VRAI endpoint
            "/api/v1/auth/delete-data",              # ‚úÖ NOUVEAU - VRAI endpoint
        ],
        "auth_endpoints_removed": [
            "/api/auth/login",                       # ‚ùå SUPPRIM√â - ancien
            "/api/auth/register",                    # ‚ùå SUPPRIM√â - ancien
            "/api/auth/debug/jwt-config",            # ‚ùå SUPPRIM√â - ancien
        ],
        "cache_endpoints_removed": [
            "/api/v1/stats/",                        # ‚ùå SUPPRIM√â - utiliser /stats-fast/ et /stats-admin/
            "/api/v1/cache/",                        # ‚ùå SUPPRIM√â - utiliser /stats-admin/
        ],
        "cors_fixes": {
            "wildcard_removed": True,
            "credentials_support": True,
            "origin_specific": True,
            "compatible_with_include": True
        },
        "middleware_version": "4.0-with-stats-cache",  # üöÄ UPDATED
        "key_changes": [
            "‚úÖ Fixed: Added /api/v1/auth/* as public endpoints",
            "‚ùå Removed: Old /api/auth/* endpoints marked as nonexistent", 
            "‚úÖ Added: Support for auth-temp endpoints",
            "üîß FIXED: CORS handling compatible with credentials: 'include'",
            "‚úÖ Fixed: System endpoints support",
            "üîß Updated: All patterns align with Swagger docs",
            "üîß NEW: Origin-specific CORS headers for credentials support",
            "üöÄ NEW: Support for /v1/stats-fast/* endpoints (ultra-fast cache)",
            "üöÄ NEW: Support for /v1/stats-admin/* endpoints (cache administration)",
            "üöÄ NEW: Permission checking for cache admin endpoints", 
            "üöÄ NEW: Cache-specific error messages and suggestions",
            "‚ùå Deprecated: /api/v1/stats/* patterns (use /stats-fast/ or /stats-admin/)"
        ]
    }