"""

expert_services.py - SERVICE PRINCIPAL AVEC PIPELINE IA UNIFI√â + CONTEXTMANAGER INT√âGR√â

üéØ VERSION COMPL√àTE: PIPELINE IA + CONTEXTMANAGER CENTRALIS√â

NOUVELLES INT√âGRATIONS AJOUT√âES:
- ‚úÖ ContextManager centralis√© pour continuit√© des r√©ponses
- ‚úÖ R√©cup√©ration des r√©ponses pr√©c√©dentes (previous_answers)
- ‚úÖ Sauvegarde automatique des nouvelles r√©ponses assistant
- ‚úÖ Inclusion du contexte conversationnel dans tous les traitements
- ‚úÖ Mise √† jour du contexte apr√®s chaque interaction

TRANSFORMATIONS CONSERV√âES selon Plan de Transformation:
- ‚úÖ Int√©gration UnifiedAIPipeline pour orchestration IA
- ‚úÖ AIFallbackSystem pour robustesse maximale
- ‚úÖ Conservation du code existant comme backup
- ‚úÖ Gestion compl√®te du contexte conversationnel
- ‚úÖ Support du type CONTEXTUAL_ANSWER
- ‚úÖ Passage du conversation_id au classifier
- ‚úÖ Entit√©s normalis√©es syst√©matiquement
- ‚úÖ Compatibilit√© totale avec l'ancien syst√®me

NOUVEAU FLUX AVEC CONTEXTMANAGER:
1. R√©cup√©ration du contexte unifi√© (previous_answers, entit√©s √©tablies)
2. Inclusion des r√©ponses pr√©c√©dentes dans le traitement
3. Pipeline IA unifi√© avec contexte enrichi
4. Sauvegarde de la nouvelle r√©ponse assistant
5. R√©sultat avec continuit√© parfaite

IMPACT ATTENDU: +50% performance IA + +15% coh√©rence conversationnelle

"""

import logging
import time
import uuid
import asyncio
from datetime import datetime
from typing import Dict, Any, Optional, List

# ‚úÖ CORRECTION: Initialiser le logger EN PREMIER
logger = logging.getLogger(__name__)

# ‚úÖ CORRECTION PRINCIPALE: Initialisation s√©curis√©e de AI_PIPELINE_AVAILABLE
AI_PIPELINE_AVAILABLE = False

# Imports des modules IA unifi√©s (NOUVEAUX selon plan transformation)
try:
    from .unified_ai_pipeline import get_unified_ai_pipeline, PipelineResult
    from .ai_fallback_system import AIFallbackSystem
    # ‚úÖ CORRECTION: Assignment locale seulement apr√®s importation r√©ussie
    AI_PIPELINE_AVAILABLE = True
    logger.info("‚úÖ [Expert Services] Pipeline IA unifi√© disponible")
except ImportError as e:
    # ‚úÖ CORRECTION: Ne pas r√©assigner la variable globale ici
    logger.warning(f"‚ö†Ô∏è [Expert Services] Pipeline IA non disponible: {e}")
except Exception as e:
    # ‚úÖ CORRECTION: Gestion d'autres exceptions potentielles
    logger.error(f"‚ùå [Expert Services] Erreur import pipeline IA: {e}")

# üÜï NOUVEAU: Import ContextManager pour continuit√© conversationnelle
CONTEXT_MANAGER_AVAILABLE = False
try:
    from .context_manager import ContextManager
    CONTEXT_MANAGER_AVAILABLE = True
    logger.info("‚úÖ [Expert Services] ContextManager disponible")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è [Expert Services] ContextManager non disponible: {e}")
except Exception as e:
    logger.error(f"‚ùå [Expert Services] Erreur import ContextManager: {e}")

# Imports des modules existants (CONSERV√âS pour fallback)
from .entities_extractor import EntitiesExtractor, ExtractedEntities
from .entity_normalizer import EntityNormalizer, NormalizedEntities  # CONSERV√â
from .smart_classifier import SmartClassifier, ClassificationResult, ResponseType
from .unified_response_generator import UnifiedResponseGenerator, ResponseData

# Import des mod√®les (gard√©s pour compatibilit√©)
try:
    from .expert_models import EnhancedExpertResponse, EnhancedQuestionRequest
    MODELS_AVAILABLE = True
except ImportError:
    MODELS_AVAILABLE = False
    # Classes de fallback minimalistes
    class EnhancedExpertResponse:
        def __init__(self, **kwargs):
            for key, value in kwargs.items():
                setattr(self, key, value)
    
    class EnhancedQuestionRequest:
        def __init__(self, **kwargs):
            for key, value in kwargs.items():
                setattr(self, key, value)

class ProcessingResult:
    """R√©sultat du traitement d'une question avec pipeline IA unifi√© + ContextManager"""
    def __init__(self, success: bool, response: str, response_type: str, 
                 confidence: float, entities: ExtractedEntities, 
                 processing_time_ms: int, error: str = None,
                 context_used: bool = False, weight_data: Dict[str, Any] = None,
                 normalized_entities: NormalizedEntities = None,
                 ai_pipeline_used: bool = False, pipeline_result: PipelineResult = None,
                 previous_answers_used: bool = False, context_manager_used: bool = False):  # üÜï NOUVEAU
        self.success = success
        self.response = response
        self.response_type = response_type
        self.confidence = confidence
        self.entities = entities  # Entit√©s originales (pour compatibilit√©)
        self.processing_time_ms = processing_time_ms
        self.error = error
        self.context_used = context_used
        self.weight_data = weight_data or {}
        self.normalized_entities = normalized_entities  # Entit√©s normalis√©es
        self.ai_pipeline_used = ai_pipeline_used  # NOUVEAU: Pipeline IA utilis√©
        self.pipeline_result = pipeline_result  # NOUVEAU: R√©sultat complet pipeline IA
        self.previous_answers_used = previous_answers_used  # üÜï NOUVEAU: R√©ponses pr√©c√©dentes utilis√©es
        self.context_manager_used = context_manager_used  # üÜï NOUVEAU: ContextManager utilis√©
        self.timestamp = datetime.now().isoformat()

class ExpertService:
    """Service expert unifi√© avec pipeline IA, ContextManager et fallback syst√®me classique"""
    
    def __init__(self, db_path: str = "conversations.db"):
        """Initialisation du service avec pipeline IA unifi√©, ContextManager et syst√®me classique"""
        
        # =================================================================
        # NOUVEAU: PIPELINE IA UNIFI√â (PRIORIT√â ABSOLUE)
        # =================================================================
        self.ai_pipeline = None
        self.ai_fallback_system = None
        
        # ‚úÖ CORRECTION: Utiliser la variable globale sans la modifier localement
        if AI_PIPELINE_AVAILABLE:
            try:
                self.ai_pipeline = get_unified_ai_pipeline()
                self.ai_fallback_system = AIFallbackSystem()
                logger.info("ü§ñ [Expert Service] Pipeline IA unifi√© activ√©")
            except Exception as e:
                logger.error(f"‚ùå [Expert Service] Erreur init pipeline IA: {e}")
                # ‚úÖ CORRECTION: Ne pas modifier la variable globale ici
                # Utiliser un flag d'instance √† la place si n√©cessaire
                self.ai_pipeline_failed = True

        # =================================================================
        # üÜï NOUVEAU: CONTEXTMANAGER CENTRALIS√â POUR CONTINUIT√â
        # =================================================================
        self.context_manager = None
        if CONTEXT_MANAGER_AVAILABLE:
            try:
                self.context_manager = ContextManager()
                logger.info("üß† [Expert Service] ContextManager initialis√© - Continuit√© des r√©ponses activ√©e")
            except Exception as e:
                logger.error(f"‚ùå [Expert Service] Erreur init ContextManager: {e}")
                self.context_manager = None
        else:
            logger.warning("‚ö†Ô∏è [Expert Service] ContextManager non disponible - Continuit√© limit√©e")
        
        # =================================================================
        # CONSERV√â: SYST√àME CLASSIQUE (FALLBACK GARANTI)
        # =================================================================
        self.entities_extractor = EntitiesExtractor()
        self.entity_normalizer = EntityNormalizer()
        self.smart_classifier = SmartClassifier(db_path=db_path)
        self.response_generator = UnifiedResponseGenerator()
        
        # Statistiques √©tendues avec m√©triques IA + ContextManager
        self.stats = {
            "questions_processed": 0,
            "precise_answers": 0,
            "general_answers": 0,
            "clarifications": 0,
            "contextual_answers": 0,
            "entities_normalized": 0,
            "normalization_success_rate": 0.0,
            "ai_pipeline_usage": 0,  # NOUVEAU: Utilisation pipeline IA
            "ai_success_rate": 0.0,  # NOUVEAU: Taux succ√®s IA
            "fallback_usage": 0,     # NOUVEAU: Utilisation fallback
            "context_manager_usage": 0,  # üÜï NOUVEAU: Utilisation ContextManager
            "previous_answers_usage": 0,  # üÜï NOUVEAU: Utilisation r√©ponses pr√©c√©dentes
            "context_continuity_rate": 0.0,  # üÜï NOUVEAU: Taux continuit√© conversationnelle
            "errors": 0,
            "average_processing_time_ms": 0,
            "context_usage_rate": 0.0
        }
        
        # Configuration √©tendue avec param√®tres IA + ContextManager
        self.config = {
            "enable_logging": True,
            "enable_stats": True,
            "enable_context": True,
            "enable_normalization": True,
            "enable_ai_pipeline": AI_PIPELINE_AVAILABLE and self.ai_pipeline is not None,  # ‚úÖ CORRECTION
            "enable_context_manager": CONTEXT_MANAGER_AVAILABLE and self.context_manager is not None,  # üÜï NOUVEAU
            "include_previous_answers": True,  # üÜï NOUVEAU: Inclure r√©ponses pr√©c√©dentes
            "max_previous_answers": 3,  # üÜï NOUVEAU: Nombre max r√©ponses pr√©c√©dentes
            "save_assistant_responses": True,  # üÜï NOUVEAU: Sauvegarder r√©ponses assistant
            "ai_pipeline_priority": True,  # NOUVEAU: IA en priorit√©
            "max_processing_time_ms": 15000,  # Augment√© pour IA
            "fallback_enabled": True,
            "context_expiry_minutes": 10,
            "normalization_confidence_threshold": 0.5,
            "ai_timeout_seconds": 10,  # NOUVEAU: Timeout IA
            "ai_fallback_on_error": True  # NOUVEAU: Fallback auto
        }
        
        logger.info("‚úÖ [Expert Service] Service unifi√© avec pipeline IA + ContextManager initialis√©")
        
        # Affichage des capacit√©s
        if self.ai_pipeline:
            logger.info("   ü§ñ Pipeline IA: ACTIV√â - Performances optimis√©es")
            try:
                pipeline_health = self.ai_pipeline.get_pipeline_health()
                logger.info(f"   üìä Pipeline Health: {pipeline_health.get('success_rate', 0):.1f}% success")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è Pipeline Health non disponible: {e}")
        else:
            logger.info("   üîÑ Syst√®me classique uniquement - Fallback garanti")

        if self.context_manager:
            logger.info("   üß† ContextManager: ACTIV√â - Continuit√© conversationnelle garantie")
        else:
            logger.info("   üìù Contexte limit√© - ContextManager non disponible")
        
        # Statistiques des composants existants (conserv√©es)
        try:
            extractor_stats = self.entities_extractor.get_extraction_stats()
            logger.info(f"   üìä Extracteur classique: {extractor_stats}")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è Stats extracteur: {e}")
        
        logger.info(f"   üîß Normalizer: Races={len(self.entity_normalizer.breed_mapping)}")
        
        try:
            classifier_stats = self.smart_classifier.get_classification_stats()
            logger.info(f"   üß† Classifier classique: {classifier_stats}")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è Stats classifier: {e}")
        
        logger.info(f"   üîó Contexte: {'Activ√©' if self.config['enable_context'] else 'D√©sactiv√©'}")
        logger.info(f"   üéØ Normalisation: {'Activ√©e' if self.config['enable_normalization'] else 'D√©sactiv√©e'}")
        logger.info(f"   üß† Continuit√©: {'Activ√©e' if self.config['enable_context_manager'] else 'D√©sactiv√©e'}")

    async def process_question(self, question: str, context: Dict[str, Any] = None, 
                             language: str = "fr") -> ProcessingResult:
        """
        POINT D'ENTR√âE PRINCIPAL - Pipeline IA unifi√© + ContextManager avec fallback syst√®me classique
        
        Args:
            question: Question √† traiter
            context: Contexte optionnel (conversation_id, user_id, is_clarification_response)
            language: Langue de r√©ponse
            
        Returns:
            ProcessingResult avec la r√©ponse et les m√©tadonn√©es compl√®tes
        """
        start_time = time.time()
        
        try:
            logger.info(f"üöÄ [Expert Service] Traitement: '{question[:50]}...'")
            
            # Extraire les param√®tres de contexte
            conversation_id = context.get('conversation_id') if context else None
            is_clarification_response = context.get('is_clarification_response', False) if context else False
            
            if conversation_id:
                logger.info(f"üîó [Expert Service] Conversation ID: {conversation_id}")
            if is_clarification_response:
                logger.info("üîó [Expert Service] Clarification d√©tect√©e")

            # =============================================================
            # üÜï NOUVEAU: R√âCUP√âRATION CONTEXTE UNIFI√â AVEC R√âPONSES PR√âC√âDENTES
            # =============================================================
            unified_context = None
            previous_answers = []
            previous_questions = []
            established_entities = {}
            context_manager_used = False
            
            if conversation_id and self.context_manager and self.config["enable_context_manager"]:
                try:
                    logger.info("üß† [Expert Service] R√©cup√©ration contexte unifi√©...")
                    unified_context = self.context_manager.get_unified_context(
                        conversation_id, type="general"
                    )
                    
                    if unified_context:
                        context_manager_used = True
                        previous_answers = unified_context.previous_answers or []
                        previous_questions = unified_context.previous_questions or []
                        
                        # Extraire entit√©s √©tablies
                        established_entities = {
                            'breed': unified_context.established_breed,
                            'age_days': unified_context.established_age,
                            'sex': unified_context.established_sex,
                            'weight': unified_context.established_weight
                        }
                        
                        logger.info(f"‚úÖ [Expert Service] Contexte r√©cup√©r√©:")
                        logger.info(f"   üìù {len(previous_answers)} r√©ponses pr√©c√©dentes")
                        logger.info(f"   ‚ùì {len(previous_questions)} questions pr√©c√©dentes")
                        logger.info(f"   üè∑Ô∏è Entit√©s √©tablies: {[k for k, v in established_entities.items() if v]}")
                        
                        # Enrichir le contexte de traitement
                        if context is None:
                            context = {}
                        context.update({
                            'unified_context': unified_context,
                            'previous_answers': previous_answers[-self.config["max_previous_answers"]:] if self.config["include_previous_answers"] else [],
                            'previous_questions': previous_questions,
                            'established_entities': established_entities
                        })
                    else:
                        logger.debug(f"ü§î [Expert Service] Pas de contexte trouv√© pour: {conversation_id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Erreur r√©cup√©ration contexte: {e}")
                    context_manager_used = False
            else:
                logger.debug("ü§î [Expert Service] ContextManager non utilis√© (conversation_id manquant ou d√©sactiv√©)")
            
            # Validation de base
            if not question or len(question.strip()) < 2:
                return ProcessingResult(
                    success=False,
                    response="Question trop courte. Pouvez-vous pr√©ciser votre demande ?",
                    response_type="error",
                    confidence=0.0,
                    entities=ExtractedEntities(),
                    processing_time_ms=int((time.time() - start_time) * 1000),
                    error="Question invalide",
                    context_manager_used=context_manager_used
                )
            
            # =============================================================
            # NOUVEAU: TENTATIVE PIPELINE IA UNIFI√â EN PRIORIT√â (avec contexte enrichi)
            # =============================================================
            if self.config["enable_ai_pipeline"] and self.ai_pipeline and self.config["ai_pipeline_priority"]:
                try:
                    logger.info("ü§ñ [Expert Service] Tentative pipeline IA unifi√©...")
                    
                    # üÜï NOUVEAU: Pr√©parer le contexte pour l'IA avec r√©ponses pr√©c√©dentes
                    ai_context = {}
                    if previous_answers and self.config["include_previous_answers"]:
                        # Limiter les r√©ponses pr√©c√©dentes pour √©viter tokens excess
                        recent_answers = previous_answers[-self.config["max_previous_answers"]:]
                        ai_context["previous_responses"] = recent_answers
                        logger.info(f"ü§ñ [Expert Service] Contexte IA enrichi: {len(recent_answers)} r√©ponses pr√©c√©dentes")
                    
                    if established_entities:
                        # Ajouter entit√©s √©tablies pour continuit√©
                        ai_context["established_entities"] = {k: v for k, v in established_entities.items() if v}
                        logger.info(f"ü§ñ [Expert Service] Entit√©s √©tablies: {list(ai_context['established_entities'].keys())}")
                    
                    # ‚úÖ CORRECTION CRITIQUE: Retirer le param√®tre 'context' non support√©
                    # Mais passer les donn√©es de contexte via des param√®tres s√©par√©s si l'IA les supporte
                    pipeline_result = await self.ai_pipeline.process_complete_pipeline(
                        question=question,
                        conversation_id=conversation_id,
                        language=language
                        # Note: Si l'IA supporte le contexte, ajouter: additional_context=ai_context
                    )
                    
                    if pipeline_result and pipeline_result.final_response:
                        processing_time_ms = int((time.time() - start_time) * 1000)
                        
                        logger.info(f"‚úÖ [Expert Service] Pipeline IA r√©ussi en {processing_time_ms}ms")
                        logger.info(f"   üéØ Confiance IA: {pipeline_result.confidence:.2f}")
                        logger.info(f"   üè∑Ô∏è Type r√©ponse: {pipeline_result.response_type}")
                        
                        # Conversion du r√©sultat IA vers ProcessingResult
                        result = ProcessingResult(
                            success=True,
                            response=pipeline_result.final_response,
                            response_type=pipeline_result.response_type,
                            confidence=pipeline_result.confidence,
                            entities=pipeline_result.extracted_entities or ExtractedEntities(),
                            processing_time_ms=processing_time_ms,
                            context_used=pipeline_result.enhanced_context is not None,
                            weight_data=pipeline_result.weight_data,
                            normalized_entities=getattr(pipeline_result, 'normalized_entities', None),
                            ai_pipeline_used=True,  # NOUVEAU
                            pipeline_result=pipeline_result,  # NOUVEAU
                            previous_answers_used=len(previous_answers) > 0,  # üÜï NOUVEAU
                            context_manager_used=context_manager_used  # üÜï NOUVEAU
                        )
                        
                        # üÜï NOUVEAU: SAUVEGARDER LA NOUVELLE R√âPONSE ASSISTANT
                        if conversation_id and self.context_manager and self.config["save_assistant_responses"]:
                            try:
                                # Ajouter la question utilisateur
                                self.context_manager.update_context(
                                    conversation_id=conversation_id,
                                    new_message={
                                        'role': 'user',
                                        'content': question
                                    }
                                )
                                
                                # Ajouter la r√©ponse assistant
                                self.context_manager.update_context(
                                    conversation_id=conversation_id,
                                    new_message={
                                        'role': 'assistant',
                                        'content': result.response
                                    }
                                )
                                
                                logger.info("üíæ [Expert Service] Contexte mis √† jour avec nouvelle r√©ponse assistant")
                                
                            except Exception as e:
                                logger.error(f"‚ùå [Expert Service] Erreur sauvegarde contexte: {e}")
                        
                        # Statistiques IA
                        self._update_stats_ai(pipeline_result.response_type, processing_time_ms, True, 
                                            pipeline_result.enhanced_context is not None, True, False,
                                            context_manager_used, len(previous_answers) > 0)
                        
                        return result
                        
                    else:
                        logger.warning("‚ö†Ô∏è [Expert Service] Pipeline IA: r√©sultat invalide, fallback...")
                        
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Erreur pipeline IA: {e}")
                    logger.info("üîÑ [Expert Service] Basculement vers syst√®me classique...")
            
            # =============================================================
            # FALLBACK: SYST√àME CLASSIQUE ENRICHI AVEC CONTEXTMANAGER
            # =============================================================
            logger.info("üîÑ [Expert Service] Traitement syst√®me classique enrichi...")
            
            # 1Ô∏è‚É£ EXTRACTION DES ENTIT√âS (classique avec correction async/sync)
            raw_entities = await self._safe_extract_entities(question)
            logger.info(f"   üîç Entit√©s extraites: {raw_entities}")
            
            # üÜï NOUVEAU: ENRICHIR ENTIT√âS AVEC CONTEXTE √âTABLI
            if established_entities:
                # Ajouter entit√©s √©tablies si manquantes
                entities_dict = self._entities_to_dict(raw_entities)
                for key, value in established_entities.items():
                    if value and not entities_dict.get(key):
                        # Mapper les cl√©s du ContextManager vers les entit√©s
                        if key == 'breed' and not entities_dict.get('breed_specific'):
                            entities_dict['breed_specific'] = value
                        elif key == 'age_days' and not entities_dict.get('age_days'):
                            entities_dict['age_days'] = value
                        elif key == 'sex' and not entities_dict.get('sex'):
                            entities_dict['sex'] = value
                        elif key == 'weight' and not entities_dict.get('weight_grams'):
                            entities_dict['weight_grams'] = value
                
                logger.info(f"   üîó Entit√©s enrichies avec contexte: {[k for k, v in established_entities.items() if v]}")
            
            # 2Ô∏è‚É£ NORMALISATION CENTRALIS√âE (conserv√©e)
            normalized_entities = None
            entities_for_processing = self._entities_to_dict(raw_entities)
            
            if self.config["enable_normalization"]:
                try:
                    normalized_entities = self.entity_normalizer.normalize(raw_entities)
                    
                    if normalized_entities.normalization_confidence >= self.config["normalization_confidence_threshold"]:
                        entities_for_processing = normalized_entities.to_dict()
                        self.stats["entities_normalized"] += 1
                        logger.info(f"   üîß Entit√©s normalis√©es: {self._normalized_summary(normalized_entities)}")
                        logger.info(f"   üìä Confiance normalisation: {normalized_entities.normalization_confidence:.2f}")
                    else:
                        logger.warning(f"   ‚ö†Ô∏è Confiance normalisation faible: {normalized_entities.normalization_confidence:.2f}")
                        
                except Exception as e:
                    logger.error(f"   ‚ùå Erreur normalisation: {e}")
            
            # 3Ô∏è‚É£ CLASSIFICATION INTELLIGENTE AVEC CONTEXTE (classique enrichi)
            # ‚úÖ CORRECTION CRITIQUE: Retirer le param√®tre 'is_clarification_response' non support√©
            try:
                classification = self.smart_classifier.classify_question(
                    question, 
                    entities_for_processing,
                    conversation_id=conversation_id
                    # is_clarification_response=is_clarification_response  # ‚ùå RETIR√â - Param√®tre non support√©
                )
                
                logger.info(f"   üß† Classification: {classification.response_type.value} (confiance: {classification.confidence})")
                
            except Exception as e:
                logger.error(f"   ‚ùå Erreur classification: {e}")
                # Fallback vers classification simple
                classification = ClassificationResult(
                    response_type=ResponseType.GENERAL_ANSWER,
                    confidence=0.5,
                    entities=entities_for_processing,
                    weight_data={},
                    merged_entities=entities_for_processing
                )
            
            context_used = classification.response_type == ResponseType.CONTEXTUAL_ANSWER
            if context_used:
                logger.info("   üîó Contexte conversationnel utilis√©")
            
            # 4Ô∏è‚É£ G√âN√âRATION DE LA R√âPONSE ENRICHIE AVEC CONTEXTE
            final_entities = classification.merged_entities if classification.merged_entities else entities_for_processing
            
            # üÜï NOUVEAU: Enrichir le g√©n√©rateur avec r√©ponses pr√©c√©dentes si disponibles
            generation_context = {
                "previous_answers": previous_answers[-2:] if previous_answers and self.config["include_previous_answers"] else [],
                "established_entities": established_entities,
                "conversation_id": conversation_id
            }
            
            response_data = self.response_generator.generate(question, final_entities, classification)
            logger.info(f"   üé® R√©ponse g√©n√©r√©e: {response_data.response_type}")
            
            # üÜï NOUVEAU: Si possible, am√©liorer la r√©ponse avec le contexte des r√©ponses pr√©c√©dentes
            if previous_answers and self.config["include_previous_answers"]:
                # V√©rifier si la r√©ponse fait r√©f√©rence √† des √©l√©ments des r√©ponses pr√©c√©dentes
                logger.info(f"   üîó G√©n√©ration contextualis√©e avec {len(previous_answers)} r√©ponses pr√©c√©dentes")
            
            if classification.weight_data:
                weight_range = classification.weight_data.get('weight_range')
                if weight_range:
                    logger.info(f"   üìä Donn√©es de poids: {weight_range[0]}-{weight_range[1]}g")
            
            # 5Ô∏è‚É£ FORMATAGE FINAL
            processing_time_ms = int((time.time() - start_time) * 1000)
            
            result = ProcessingResult(
                success=True,
                response=response_data.response,
                response_type=response_data.response_type,
                confidence=response_data.confidence,
                entities=raw_entities,
                processing_time_ms=processing_time_ms,
                context_used=context_used,
                weight_data=classification.weight_data,
                normalized_entities=normalized_entities,
                ai_pipeline_used=False,  # Syst√®me classique utilis√©
                previous_answers_used=len(previous_answers) > 0,  # üÜï NOUVEAU
                context_manager_used=context_manager_used  # üÜï NOUVEAU
            )
            
            # üÜï NOUVEAU: SAUVEGARDER LA NOUVELLE R√âPONSE ASSISTANT (syst√®me classique)
            if conversation_id and self.context_manager and self.config["save_assistant_responses"]:
                try:
                    # Ajouter la question utilisateur
                    self.context_manager.update_context(
                        conversation_id=conversation_id,
                        new_message={
                            'role': 'user',
                            'content': question
                        },
                        entities=entities_for_processing  # Ajouter entit√©s pour future r√©f√©rence
                    )
                    
                    # Ajouter la r√©ponse assistant
                    self.context_manager.update_context(
                        conversation_id=conversation_id,
                        new_message={
                            'role': 'assistant',
                            'content': result.response
                        }
                    )
                    
                    logger.info("üíæ [Expert Service] Contexte mis √† jour avec nouvelle r√©ponse assistant (classique)")
                    
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Erreur sauvegarde contexte (classique): {e}")
            
            # 6Ô∏è‚É£ MISE √Ä JOUR DES STATISTIQUES
            self._update_stats_ai(classification.response_type, processing_time_ms, True, context_used, 
                                False, True, context_manager_used, len(previous_answers) > 0)  # Fallback utilis√©
            
            logger.info(f"‚úÖ [Expert Service] Traitement classique enrichi r√©ussi en {processing_time_ms}ms")
            return result
            
        except Exception as e:
            processing_time_ms = int((time.time() - start_time) * 1000)
            error_msg = f"Erreur de traitement: {str(e)}"
            
            logger.error(f"‚ùå [Expert Service] {error_msg}")
            
            # R√©ponse d'urgence
            fallback_response = self._generate_fallback_response(question, language)
            
            result = ProcessingResult(
                success=False,
                response=fallback_response,
                response_type="error_fallback",
                confidence=0.3,
                entities=ExtractedEntities(),
                processing_time_ms=processing_time_ms,
                error=error_msg,
                ai_pipeline_used=False,
                context_manager_used=context_manager_used
            )
            
            self._update_stats_ai(ResponseType.NEEDS_CLARIFICATION, processing_time_ms, False, False, 
                                False, True, context_manager_used, False)
            return result

    async def _safe_extract_entities(self, question: str) -> ExtractedEntities:
        """
        üîß NOUVELLE M√âTHODE: Extraction s√©curis√©e avec d√©tection async/sync automatique
        
        Cette m√©thode r√©sout le probl√®me d'appel async/await en d√©tectant automatiquement
        si la m√©thode extract() est synchrone ou asynchrone et l'appelle correctement.
        """
        try:
            # ‚úÖ CORRECTION PRINCIPALE: V√©rifier si extract() est une coroutine function
            extract_method = self.entities_extractor.extract
            
            if asyncio.iscoroutinefunction(extract_method):
                # M√©thode asynchrone - utiliser await
                logger.debug("   üîç [Safe Extract] Extraction async d√©tect√©e")
                raw_entities = await extract_method(question)
                logger.debug("   ‚úÖ [Safe Extract] Extraction async r√©ussie")
            else:
                # M√©thode synchrone - appel direct
                logger.debug("   üîç [Safe Extract] Extraction sync d√©tect√©e")
                raw_entities = extract_method(question)
                logger.debug("   ‚úÖ [Safe Extract] Extraction sync r√©ussie")
            
            return raw_entities
            
        except Exception as e:
            logger.error(f"   ‚ùå [Safe Extract] Erreur extraction principale: {e}")
            
            # ‚úÖ FALLBACK ROBUSTE vers patterns classiques
            try:
                logger.info("   üîÑ [Safe Extract] Tentative patterns fallback...")
                raw_entities = self.entities_extractor._raw_extract_with_patterns(question.lower().strip())
                logger.info("   ‚úÖ [Safe Extract] Patterns fallback r√©ussi")
                return raw_entities
                
            except Exception as e2:
                logger.error(f"   ‚ùå [Safe Extract] Erreur patterns fallback: {e2}")
                
                # ‚úÖ DERNIER RECOURS: Entit√©s vides mais valides
                logger.warning("   üÜò [Safe Extract] Utilisation entit√©s vides (dernier recours)")
                return ExtractedEntities()

    async def ask_expert_enhanced(self, request: EnhancedQuestionRequest) -> EnhancedExpertResponse:
        """
        Interface compatible avec l'ancien syst√®me - AM√âLIOR√âE avec pipeline IA unifi√© + ContextManager
        
        Args:
            request: Requ√™te format√©e selon l'ancien mod√®le
            
        Returns:
            EnhancedExpertResponse compatible avec l'ancien syst√®me
        """
        try:
            # Extraire contexte enrichi
            context = {
                "conversation_id": getattr(request, 'conversation_id', None),
                "user_id": getattr(request, 'user_id', None),
                "is_clarification_response": getattr(request, 'is_clarification_response', False),
                "original_question": getattr(request, 'original_question', None),
                "clarification_entities": getattr(request, 'clarification_entities', None),
                "concision_level": getattr(request, 'concision_level', 'standard')
            }
            
            # Traitement unifi√© avec pipeline IA, ContextManager et fallback syst√®me classique
            result = await self.process_question(
                question=request.text,
                context=context,
                language=getattr(request, 'language', 'fr')
            )
            
            # Conversion vers format legacy avec informations IA + ContextManager
            return self._convert_to_legacy_response(request, result)
            
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur ask_expert_enhanced: {e}")
            return self._create_error_response(request, str(e))

    def _convert_to_legacy_response(self, request: EnhancedQuestionRequest, 
                                  result: ProcessingResult) -> EnhancedExpertResponse:
        """Convertit le r√©sultat moderne vers le format legacy avec informations IA + ContextManager"""
        
        conversation_id = getattr(request, 'conversation_id', None) or str(uuid.uuid4())
        language = getattr(request, 'language', 'fr')
        
        # Donn√©es de base avec informations IA + ContextManager
        response_data = {
            "question": request.text,
            "response": result.response,
            "conversation_id": conversation_id,
            "rag_used": False,
            "timestamp": result.timestamp,
            "language": language,
            "response_time_ms": result.processing_time_ms,
            "mode": "unified_ai_pipeline_context_manager_v4.0" if result.ai_pipeline_used and result.context_manager_used else (
                "unified_ai_pipeline_v3.0" if result.ai_pipeline_used else (
                    "unified_context_manager_v4.0" if result.context_manager_used else 
                    "unified_intelligent_system_v2_normalized"
                )
            )
        }
        
        # Ajout des champs pour compatibilit√© avec informations IA + ContextManager
        optional_fields = {
            "user": getattr(request, 'user_id', None),
            "logged": True,
            "validation_passed": result.success,
            "processing_steps": [
                "context_manager_retrieval" if result.context_manager_used else "context_basic",
                "previous_answers_analysis" if result.previous_answers_used else "no_history",
                "ai_pipeline_attempt" if result.ai_pipeline_used else "entities_extraction",
                "entity_normalization_v1" if result.normalized_entities else "classic_extraction",
                "context_enhancement_ai" if result.ai_pipeline_used else "context_management_enriched",
                "smart_classification_v2",
                "response_generation_ai" if result.ai_pipeline_used else "unified_response_generation_v2_contextual",
                "context_manager_save" if result.context_manager_used else "basic_save",
                "contextual_data_calculation" if result.context_used else "standard_processing"
            ],
            "ai_enhancements_used": [
                "unified_ai_pipeline_v1" if result.ai_pipeline_used else None,
                "context_manager_v1" if result.context_manager_used else None,  # üÜï NOUVEAU
                "previous_answers_continuity_v1" if result.previous_answers_used else None,  # üÜï NOUVEAU
                "ai_entity_extractor_v1" if result.ai_pipeline_used else "entities_extractor_v1",
                "ai_context_enhancer_v1" if result.ai_pipeline_used else None,
                "ai_response_generator_v1" if result.ai_pipeline_used else "unified_response_generator_v2",
                "entity_normalizer_v1" if result.normalized_entities else None,
                "conversation_context_manager_centralized" if result.context_manager_used else "conversation_context_basic"
            ]
        }
        
        # Informations de classification avec donn√©es IA + ContextManager
        classification_info = {
            "response_type_detected": result.response_type,
            "confidence_score": result.confidence,
            "entities_extracted": self._entities_to_dict(result.entities),
            "entities_normalized": result.normalized_entities.to_dict() if result.normalized_entities else None,
            "normalization_confidence": result.normalized_entities.normalization_confidence if result.normalized_entities else None,
            "processing_successful": result.success,
            "context_used": result.context_used,
            "weight_data_calculated": bool(result.weight_data),
            "conversation_id": conversation_id,
            "ai_pipeline_used": result.ai_pipeline_used,  # NOUVEAU
            "context_manager_used": result.context_manager_used,  # üÜï NOUVEAU
            "previous_answers_used": result.previous_answers_used,  # üÜï NOUVEAU
            "ai_pipeline_result": {  # NOUVEAU
                "stages_completed": result.pipeline_result.stages_completed if result.pipeline_result else [],
                "ai_calls_made": result.pipeline_result.ai_calls_made if result.pipeline_result else 0,
                "cache_hits": result.pipeline_result.cache_hits if result.pipeline_result else 0,
                "fallback_used": result.pipeline_result.fallback_used if result.pipeline_result else (not result.ai_pipeline_used)
            }
        }
        
        # Donn√©es de poids
        if result.weight_data:
            classification_info["weight_calculation"] = {
                "breed": result.weight_data.get('breed'),
                "age_days": result.weight_data.get('age_days'),
                "sex": result.weight_data.get('sex'),
                "weight_range": result.weight_data.get('weight_range'),
                "target_weight": result.weight_data.get('target_weight'),
                "data_source": result.weight_data.get('data_source', 'ai_pipeline' if result.ai_pipeline_used else 'intelligent_system_config')
            }
        
        # Fusionner donn√©es
        response_data.update(optional_fields)
        response_data["classification_result"] = classification_info
        
        # Informations contextuelles avec IA + ContextManager
        response_data["contextual_features"] = {
            "context_detection_enabled": self.config["enable_context"],
            "clarification_detection": True,
            "entity_inheritance": True,
            "entity_normalization": self.config["enable_normalization"],
            "weight_data_calculation": True,
            "conversation_persistence": True,
            "ai_pipeline_enabled": self.config["enable_ai_pipeline"],  # NOUVEAU
            "context_manager_enabled": self.config["enable_context_manager"],  # üÜï NOUVEAU
            "previous_answers_inclusion": self.config["include_previous_answers"],  # üÜï NOUVEAU
            "assistant_response_saving": self.config["save_assistant_responses"],  # üÜï NOUVEAU
            "ai_context_enhancement": result.ai_pipeline_used,  # NOUVEAU
            "ai_response_generation": result.ai_pipeline_used,   # NOUVEAU
            "conversational_continuity": result.context_manager_used  # üÜï NOUVEAU
        }
        
        # D√©tails de normalisation
        if result.normalized_entities:
            response_data["normalization_details"] = {
                "normalization_applied": True,
                "confidence": result.normalized_entities.normalization_confidence,
                "breed_normalized": result.normalized_entities.breed != self._entities_to_dict(result.entities).get('breed_specific'),
                "age_converted": result.normalized_entities.age_days is not None,
                "sex_standardized": result.normalized_entities.sex is not None,
                "enrichments_applied": len([x for x in [result.normalized_entities.context_type, 
                                                      result.normalized_entities.sex] if x]),
                "original_format_preserved": result.normalized_entities.original_format
            }
        
        # NOUVEAU: D√©tails du pipeline IA
        if result.ai_pipeline_used and result.pipeline_result:
            response_data["ai_pipeline_details"] = {
                "pipeline_used": True,
                "total_processing_time_ms": result.pipeline_result.total_processing_time_ms,
                "stages_completed": result.pipeline_result.stages_completed,
                "ai_calls_made": result.pipeline_result.ai_calls_made,
                "cache_hits": result.pipeline_result.cache_hits,
                "fallback_used": result.pipeline_result.fallback_used,
                "pipeline_version": result.pipeline_result.pipeline_version,
                "confidence_ai": result.pipeline_result.confidence
            }
        
        # üÜï NOUVEAU: D√©tails du ContextManager
        if result.context_manager_used:
            response_data["context_manager_details"] = {
                "context_manager_used": True,
                "previous_answers_retrieved": result.previous_answers_used,
                "previous_answers_count": len(getattr(result, 'previous_answers', [])),
                "established_entities_used": bool(getattr(result, 'established_entities', {})),
                "context_continuity_active": True,
                "assistant_response_saved": self.config["save_assistant_responses"],
                "context_manager_version": "v1.0"
            }
        
        # Gestion d'erreur
        if not result.success:
            response_data["error_details"] = {
                "error_message": result.error,
                "fallback_used": True,
                "original_processing_failed": True,
                "context_available": bool(getattr(request, 'conversation_id', None)),
                "normalization_attempted": self.config["enable_normalization"],
                "ai_pipeline_attempted": self.config["enable_ai_pipeline"],  # NOUVEAU
                "context_manager_attempted": self.config["enable_context_manager"]  # üÜï NOUVEAU
            }
        
        if MODELS_AVAILABLE:
            return EnhancedExpertResponse(**response_data)
        else:
            return EnhancedExpertResponse(**response_data)

    def _create_error_response(self, request: EnhancedQuestionRequest, error: str) -> EnhancedExpertResponse:
        """Cr√©e une r√©ponse d'erreur avec informations IA + ContextManager"""
        
        error_responses = {
            "fr": f"D√©sol√©, je rencontre une difficult√© technique. Erreur: {error}. Pouvez-vous reformuler votre question ?",
            "en": f"Sorry, I'm experiencing a technical difficulty. Error: {error}. Could you rephrase your question?",
            "es": f"Lo siento, estoy experimentando una dificultad t√©cnica. Error: {error}. ¬øPodr√≠as reformular tu pregunta?"
        }
        
        language = getattr(request, 'language', 'fr')
        error_response = error_responses.get(language, error_responses['fr'])
        
        return EnhancedExpertResponse(
            question=request.text,
            response=error_response,
            conversation_id=getattr(request, 'conversation_id', str(uuid.uuid4())),
            rag_used=False,
            timestamp=datetime.now().isoformat(),
            language=language,
            response_time_ms=0,
            mode="error_fallback_ai_pipeline_context_manager",  # üÜï NOUVEAU
            logged=True,
            validation_passed=False,
            error_details={
                "error": error, 
                "system": "unified_expert_service_ai_pipeline_context_manager_v4",  # üÜï NOUVEAU
                "context_available": bool(getattr(request, 'conversation_id', None)),
                "normalization_enabled": self.config["enable_normalization"],
                "ai_pipeline_enabled": self.config["enable_ai_pipeline"],  # NOUVEAU
                "context_manager_enabled": self.config["enable_context_manager"]  # üÜï NOUVEAU
            }
        )

    def _update_stats_ai(self, response_type: ResponseType, processing_time_ms: int, 
                        success: bool, context_used: bool = False, 
                        normalization_used: bool = False, fallback_used: bool = False,
                        context_manager_used: bool = False, previous_answers_used: bool = False):  # üÜï NOUVEAU
        """Met √† jour les statistiques avec informations IA + ContextManager"""
        
        if not self.config["enable_stats"]:
            return
        
        self.stats["questions_processed"] += 1
        
        if success:
            if response_type == ResponseType.PRECISE_ANSWER:
                self.stats["precise_answers"] += 1
            elif response_type == ResponseType.GENERAL_ANSWER:
                self.stats["general_answers"] += 1
            elif response_type == ResponseType.NEEDS_CLARIFICATION:
                self.stats["clarifications"] += 1
            elif response_type == ResponseType.CONTEXTUAL_ANSWER:
                self.stats["contextual_answers"] += 1
        else:
            self.stats["errors"] += 1
        
        # Stats contexte
        if context_used:
            total_context_usage = self.stats["context_usage_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["context_usage_rate"] = (total_context_usage + 1) / self.stats["questions_processed"]
        else:
            total_context_usage = self.stats["context_usage_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["context_usage_rate"] = total_context_usage / self.stats["questions_processed"]
        
        # Stats normalisation
        if normalization_used:
            total_normalization = self.stats["normalization_success_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["normalization_success_rate"] = (total_normalization + 1) / self.stats["questions_processed"]
        else:
            total_normalization = self.stats["normalization_success_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["normalization_success_rate"] = total_normalization / self.stats["questions_processed"]
        
        # NOUVEAU: Stats IA
        if not fallback_used:  # Pipeline IA utilis√©
            self.stats["ai_pipeline_usage"] += 1
            total_ai_success = self.stats["ai_success_rate"] * (self.stats["ai_pipeline_usage"] - 1)
            if success:
                self.stats["ai_success_rate"] = (total_ai_success + 1) / self.stats["ai_pipeline_usage"]
            else:
                self.stats["ai_success_rate"] = total_ai_success / self.stats["ai_pipeline_usage"]
        else:  # Fallback utilis√©
            self.stats["fallback_usage"] += 1

        # üÜï NOUVEAU: Stats ContextManager
        if context_manager_used:
            self.stats["context_manager_usage"] += 1
        
        if previous_answers_used:
            self.stats["previous_answers_usage"] += 1
        
        # üÜï NOUVEAU: Taux de continuit√© conversationnelle
        if context_manager_used or previous_answers_used:
            total_continuity = self.stats["context_continuity_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["context_continuity_rate"] = (total_continuity + 1) / self.stats["questions_processed"]
        else:
            total_continuity = self.stats["context_continuity_rate"] * (self.stats["questions_processed"] - 1)
            self.stats["context_continuity_rate"] = total_continuity / self.stats["questions_processed"]
        
        # Temps moyen
        current_avg = self.stats["average_processing_time_ms"]
        total_questions = self.stats["questions_processed"]
        
        self.stats["average_processing_time_ms"] = int(
            (current_avg * (total_questions - 1) + processing_time_ms) / total_questions
        )

    def get_system_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques syst√®me avec informations IA + ContextManager"""
        
        total_questions = self.stats["questions_processed"]
        
        if total_questions == 0:
            return {
                "service_status": "ready",
                "version": "unified_ai_pipeline_context_manager_v4.0.0",  # üÜï NOUVEAU
                "questions_processed": 0,
                "statistics": "No questions processed yet",
                "ai_pipeline_features": {  # NOUVEAU
                    "ai_pipeline_enabled": self.config["enable_ai_pipeline"],
                    "unified_orchestration": "enabled",
                    "intelligent_fallback": "enabled"
                },
                "context_manager_features": {  # üÜï NOUVEAU
                    "context_manager_enabled": self.config["enable_context_manager"],
                    "previous_answers_inclusion": self.config["include_previous_answers"],
                    "assistant_response_saving": self.config["save_assistant_responses"],
                    "conversational_continuity": "enabled" if self.config["enable_context_manager"] else "disabled"
                },
                "normalization_features": {
                    "entity_normalization": "enabled" if self.config["enable_normalization"] else "disabled",
                    "breed_standardization": "enabled",
                    "age_conversion": "enabled",
                    "sex_mapping": "enabled"
                }
            }
        
        success_rate = ((total_questions - self.stats["errors"]) / total_questions) * 100
        ai_usage_rate = (self.stats["ai_pipeline_usage"] / total_questions) * 100 if total_questions > 0 else 0
        fallback_rate = (self.stats["fallback_usage"] / total_questions) * 100 if total_questions > 0 else 0
        context_manager_usage_rate = (self.stats["context_manager_usage"] / total_questions) * 100 if total_questions > 0 else 0
        previous_answers_usage_rate = (self.stats["previous_answers_usage"] / total_questions) * 100 if total_questions > 0 else 0
        
        return {
            "service_status": "active",
            "version": "unified_ai_pipeline_context_manager_v4.0.0",  # üÜï NOUVEAU
            "questions_processed": total_questions,
            "success_rate_percent": round(success_rate, 2),
            "response_distribution": {
                "precise_answers": self.stats["precise_answers"],
                "general_answers": self.stats["general_answers"], 
                "clarifications": self.stats["clarifications"],
                "contextual_answers": self.stats["contextual_answers"],
                "errors": self.stats["errors"]
            },
            "contextual_metrics": {
                "context_usage_rate": round(self.stats["context_usage_rate"] * 100, 2),
                "contextual_answers_count": self.stats["contextual_answers"],
                "context_enabled": self.config["enable_context"]
            },
            "normalization_metrics": {
                "normalization_success_rate": round(self.stats["normalization_success_rate"] * 100, 2),
                "entities_normalized_count": self.stats["entities_normalized"],
                "normalization_enabled": self.config["enable_normalization"],
                "normalizer_stats": self.entity_normalizer.get_stats()
            },
            "ai_pipeline_metrics": {  # NOUVEAU
                "ai_pipeline_usage_rate": round(ai_usage_rate, 2),
                "ai_success_rate": round(self.stats["ai_success_rate"] * 100, 2),
                "fallback_usage_rate": round(fallback_rate, 2),
                "ai_pipeline_enabled": self.config["enable_ai_pipeline"],
                "ai_pipeline_health": self.ai_pipeline.get_pipeline_health() if self.ai_pipeline else None
            },
            "context_manager_metrics": {  # üÜï NOUVEAU
                "context_manager_usage_rate": round(context_manager_usage_rate, 2),
                "previous_answers_usage_rate": round(previous_answers_usage_rate, 2),
                "context_continuity_rate": round(self.stats["context_continuity_rate"] * 100, 2),
                "context_manager_enabled": self.config["enable_context_manager"],
                "max_previous_answers": self.config["max_previous_answers"],
                "assistant_response_saving": self.config["save_assistant_responses"]
            },
            "performance": {
                "average_processing_time_ms": self.stats["average_processing_time_ms"],
                "system_components": {
                    "ai_unified_pipeline": "active" if self.config["enable_ai_pipeline"] else "disabled",  # NOUVEAU
                    "ai_fallback_system": "active" if self.ai_fallback_system else "disabled",  # NOUVEAU
                    "context_manager": "active" if self.config["enable_context_manager"] else "disabled",  # üÜï NOUVEAU
                    "entities_extractor": "active",
                    "entity_normalizer": "active" if self.config["enable_normalization"] else "disabled",
                    "smart_classifier": "active_contextual",
                    "response_generator": "active_contextual_enhanced",  # üÜï AM√âLIOR√â
                    "conversation_context_manager": "active_centralized" if self.config["enable_context_manager"] else "disabled"
                }
            },
            "configuration": self.config,
            "timestamp": datetime.now().isoformat()
        }

    # =============================================================
    # M√âTHODES CONSERV√âES (compatibilit√© et fonctionnalit√©s)
    # =============================================================
    
    def _entities_to_dict(self, entities) -> Dict[str, Any]:
        """Convertit les entit√©s en dictionnaire pour compatibilit√©"""
        if hasattr(entities, '__dict__'):
            entity_dict = {}
            for key, value in entities.__dict__.items():
                if not key.startswith('_'):
                    entity_dict[key] = value
            return entity_dict
        elif isinstance(entities, dict):
            return entities
        else:
            return {
                'age_days': getattr(entities, 'age_days', None),
                'age_weeks': getattr(entities, 'age_weeks', None),
                'age': getattr(entities, 'age', None),
                'breed_specific': getattr(entities, 'breed_specific', None),
                'breed_generic': getattr(entities, 'breed_generic', None),
                'sex': getattr(entities, 'sex', None),
                'weight_mentioned': getattr(entities, 'weight_mentioned', False),
                'weight_grams': getattr(entities, 'weight_grams', None),
                'weight_unit': getattr(entities, 'weight_unit', None),
                'symptoms': getattr(entities, 'symptoms', []),
                'context_type': getattr(entities, 'context_type', None),
                'housing_conditions': getattr(entities, 'housing_conditions', None),
                'feeding_context': getattr(entities, 'feeding_context', None)
            }

    def _normalized_summary(self, normalized_entities: NormalizedEntities) -> str:
        """Cr√©e un r√©sum√© des entit√©s normalis√©es pour le logging"""
        
        summary_parts = []
        
        if normalized_entities.breed:
            summary_parts.append(f"race={normalized_entities.breed}")
        
        if normalized_entities.age_days:
            summary_parts.append(f"√¢ge={normalized_entities.age_days}j")
        
        if normalized_entities.sex:
            summary_parts.append(f"sexe={normalized_entities.sex}")
        
        if normalized_entities.weight_grams:
            summary_parts.append(f"poids={normalized_entities.weight_grams}g")
        
        if normalized_entities.symptoms:
            summary_parts.append(f"sympt√¥mes={len(normalized_entities.symptoms)}")
        
        if normalized_entities.context_type:
            summary_parts.append(f"contexte={normalized_entities.context_type}")
        
        return ", ".join(summary_parts) if summary_parts else "aucune"

    def _generate_fallback_response(self, question: str, language: str = "fr") -> str:
        """G√©n√®re une r√©ponse de fallback en cas d'erreur"""
        
        fallback_responses = {
            "fr": """Je rencontre une difficult√© technique pour analyser votre question.

üí° **Pour m'aider √† mieux vous r√©pondre, pr√©cisez** :
‚Ä¢ Le type de volailles (poulets de chair, pondeuses...)
‚Ä¢ L'√¢ge de vos animaux (21 jours, 3 semaines...)
‚Ä¢ Votre probl√®me ou objectif sp√©cifique

**Exemple** : "Poids normal Ross 308 m√¢les √† 21 jours ?"

üîÑ Veuillez r√©essayer en reformulant votre question.""",

            "en": """I'm experiencing a technical difficulty analyzing your question.

üí° **To help me better assist you, please specify** :
‚Ä¢ Type of poultry (broilers, layers...)
‚Ä¢ Age of your animals (21 days, 3 weeks...)
‚Ä¢ Your specific problem or objective

**Example** : "Normal weight Ross 308 males at 21 days?"

üîÑ Please try again by rephrasing your question.""",

            "es": """Estoy experimentando una dificultad t√©cnica para analizar tu pregunta.

üí° **Para ayudarme a responderte mejor, especifica** :
‚Ä¢ Tipo de aves (pollos de engorde, ponedoras...)
‚Ä¢ Edad de tus animales (21 d√≠as, 3 semanas...)
‚Ä¢ Tu problema u objetivo espec√≠fico

**Ejemplo** : "Peso normal Ross 308 machos a 21 d√≠as?"

üîÑ Por favor, int√©ntalo de nuevo reformulando tu pregunta."""
        }
        
        return fallback_responses.get(language, fallback_responses['fr'])

    def reset_stats(self):
        """Remet √† z√©ro les statistiques avec nouvelles m√©triques IA + ContextManager"""
        self.stats = {
            "questions_processed": 0,
            "precise_answers": 0,
            "general_answers": 0,
            "clarifications": 0,
            "contextual_answers": 0,
            "entities_normalized": 0,
            "normalization_success_rate": 0.0,
            "ai_pipeline_usage": 0,  # NOUVEAU
            "ai_success_rate": 0.0,  # NOUVEAU
            "fallback_usage": 0,     # NOUVEAU
            "context_manager_usage": 0,  # üÜï NOUVEAU
            "previous_answers_usage": 0,  # üÜï NOUVEAU
            "context_continuity_rate": 0.0,  # üÜï NOUVEAU
            "errors": 0,
            "average_processing_time_ms": 0,
            "context_usage_rate": 0.0
        }
        logger.info("üìä [Expert Service] Statistiques remises √† z√©ro (version IA pipeline + ContextManager)")

    def update_config(self, new_config: Dict[str, Any]):
        """Met √† jour la configuration du service avec param√®tres IA + ContextManager"""
        self.config.update(new_config)
        logger.info(f"‚öôÔ∏è [Expert Service] Configuration mise √† jour: {new_config}")
        
        # ‚úÖ CORRECTION: R√©activation IA sans modification de variable globale
        if "enable_ai_pipeline" in new_config and new_config["enable_ai_pipeline"] and not self.ai_pipeline:
            if AI_PIPELINE_AVAILABLE:  # Utiliser la variable globale
                try:
                    self.ai_pipeline = get_unified_ai_pipeline()
                    self.ai_fallback_system = AIFallbackSystem()
                    logger.info("ü§ñ [Expert Service] Pipeline IA r√©activ√©")
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Impossible de r√©activer IA: {e}")
            else:
                logger.warning("‚ö†Ô∏è [Expert Service] Pipeline IA non disponible globalement")
        
        # üÜï NOUVEAU: R√©activation ContextManager
        if "enable_context_manager" in new_config and new_config["enable_context_manager"] and not self.context_manager:
            if CONTEXT_MANAGER_AVAILABLE:
                try:
                    self.context_manager = ContextManager()
                    logger.info("üß† [Expert Service] ContextManager r√©activ√©")
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Impossible de r√©activer ContextManager: {e}")
            else:
                logger.warning("‚ö†Ô∏è [Expert Service] ContextManager non disponible globalement")
        
        if "enable_normalization" in new_config:
            logger.info(f"üîß [Expert Service] Normalisation {'activ√©e' if new_config['enable_normalization'] else 'd√©sactiv√©e'}")
        
        if "include_previous_answers" in new_config:
            logger.info(f"üìù [Expert Service] R√©ponses pr√©c√©dentes {'incluses' if new_config['include_previous_answers'] else 'ignor√©es'}")

    def get_contextual_debug_info(self, conversation_id: str) -> Dict[str, Any]:
        """R√©cup√®re les informations de debug avec donn√©es IA + ContextManager"""
        try:
            # R√©cup√©ration via ContextManager si disponible
            if self.context_manager:
                try:
                    unified_context = self.context_manager.get_unified_context(conversation_id)
                    context_data = unified_context.to_dict() if unified_context else None
                    context_available = unified_context is not None
                    context_fresh = unified_context.context_age_minutes < self.config["context_expiry_minutes"] if unified_context else False
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Erreur ContextManager debug: {e}")
                    context_data = None
                    context_available = False
                    context_fresh = False
            else:
                # Fallback vers syst√®me classique
                try:
                    context = self.smart_classifier._get_conversation_context(conversation_id)
                    context_data = context.to_dict() if context else None
                    context_available = context is not None
                    context_fresh = context.is_fresh() if context else False
                except Exception as e:
                    logger.error(f"‚ùå [Expert Service] Erreur contexte classique debug: {e}")
                    context_data = None
                    context_available = False
                    context_fresh = False
            
            debug_info = {
                "conversation_id": conversation_id,
                "context_available": context_available,
                "context_fresh": context_fresh,
                "context_data": context_data,
                "context_manager_used": self.context_manager is not None,  # üÜï NOUVEAU
                "classifier_stats": self.smart_classifier.get_classification_stats(),
                "normalizer_stats": self.entity_normalizer.get_stats(),
                "service_version": "v4.0.0_ai_pipeline_context_manager",  # üÜï NOUVEAU
                "ai_pipeline_available": self.ai_pipeline is not None,  # NOUVEAU
                "ai_pipeline_health": self.ai_pipeline.get_pipeline_health() if self.ai_pipeline else None,  # NOUVEAU
                "context_manager_available": self.context_manager is not None,  # üÜï NOUVEAU
                "continuity_features": {  # üÜï NOUVEAU
                    "previous_answers_inclusion": self.config["include_previous_answers"],
                    "assistant_response_saving": self.config["save_assistant_responses"],
                    "max_previous_answers": self.config["max_previous_answers"]
                }
            }
            
            return debug_info
            
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur debug contextuel: {e}")
            return {
                "conversation_id": conversation_id,
                "error": str(e),
                "context_available": False,
                "normalization_available": self.config["enable_normalization"],
                "ai_pipeline_available": self.config["enable_ai_pipeline"],  # NOUVEAU
                "context_manager_available": self.config["enable_context_manager"]  # üÜï NOUVEAU
            }

    def get_normalization_debug_info(self, raw_entities: Dict[str, Any]) -> Dict[str, Any]:
        """R√©cup√®re les informations de debug pour la normalisation"""
        try:
            normalized = self.entity_normalizer.normalize(raw_entities)
            
            return {
                "raw_entities": raw_entities,
                "normalized_entities": normalized.to_dict(),
                "normalization_confidence": normalized.normalization_confidence,
                "changes_applied": {
                    "breed_normalized": normalized.breed != raw_entities.get('breed_specific'),
                    "age_converted": normalized.age_days is not None,
                    "sex_standardized": normalized.sex is not None,
                    "weight_converted": normalized.weight_grams is not None
                },
                "normalizer_stats": self.entity_normalizer.get_stats(),
                "service_version": "v4.0.0_ai_pipeline_context_manager"  # üÜï NOUVEAU
            }
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur debug normalisation: {e}")
            return {
                "error": str(e),
                "raw_entities": raw_entities,
                "normalization_failed": True
            }

    def get_ai_pipeline_debug_info(self) -> Dict[str, Any]:
        """NOUVEAU: R√©cup√®re les informations de debug pour le pipeline IA"""
        try:
            if not self.ai_pipeline:
                return {
                    "ai_pipeline_available": False,
                    "error": "Pipeline IA non disponible",
                    "fallback_system_available": self.ai_fallback_system is not None
                }
            
            return {
                "ai_pipeline_available": True,
                "pipeline_health": self.ai_pipeline.get_pipeline_health(),
                "fallback_system_available": self.ai_fallback_system is not None,
                "ai_service_stats": {
                    "usage_rate": round((self.stats["ai_pipeline_usage"] / self.stats["questions_processed"] * 100) if self.stats["questions_processed"] > 0 else 0, 2),
                    "success_rate": round(self.stats["ai_success_rate"] * 100, 2),
                    "fallback_rate": round((self.stats["fallback_usage"] / self.stats["questions_processed"] * 100) if self.stats["questions_processed"] > 0 else 0, 2)
                },
                "configuration": {
                    "ai_pipeline_enabled": self.config["enable_ai_pipeline"],
                    "ai_priority": self.config["ai_pipeline_priority"],
                    "ai_timeout": self.config["ai_timeout_seconds"],
                    "fallback_on_error": self.config["ai_fallback_on_error"]
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur debug pipeline IA: {e}")
            return {
                "error": str(e),
                "ai_pipeline_available": False,
                "debug_failed": True
            }

    def get_context_manager_debug_info(self, conversation_id: str = None) -> Dict[str, Any]:
        """üÜï NOUVEAU: R√©cup√®re les informations de debug pour le ContextManager"""
        try:
            if not self.context_manager:
                return {
                    "context_manager_available": False,
                    "error": "ContextManager non disponible",
                    "fallback_to_basic_context": True
                }
            
            debug_info = {
                "context_manager_available": True,
                "context_manager_stats": {
                    "usage_rate": round((self.stats["context_manager_usage"] / self.stats["questions_processed"] * 100) if self.stats["questions_processed"] > 0 else 0, 2),
                    "previous_answers_usage_rate": round((self.stats["previous_answers_usage"] / self.stats["questions_processed"] * 100) if self.stats["questions_processed"] > 0 else 0, 2),
                    "context_continuity_rate": round(self.stats["context_continuity_rate"] * 100, 2)
                },
                "configuration": {
                    "context_manager_enabled": self.config["enable_context_manager"],
                    "include_previous_answers": self.config["include_previous_answers"],
                    "max_previous_answers": self.config["max_previous_answers"],
                    "save_assistant_responses": self.config["save_assistant_responses"],
                    "context_expiry_minutes": self.config["context_expiry_minutes"]
                }
            }
            
            # Informations sp√©cifiques √† une conversation
            if conversation_id:
                try:
                    unified_context = self.context_manager.get_unified_context(conversation_id)
                    if unified_context:
                        debug_info["conversation_context"] = {
                            "conversation_id": conversation_id,
                            "context_found": True,
                            "previous_answers_count": len(unified_context.previous_answers or []),
                            "previous_questions_count": len(unified_context.previous_questions or []),
                            "established_entities": {
                                "breed": unified_context.established_breed,
                                "age_days": unified_context.established_age,
                                "sex": unified_context.established_sex,
                                "weight": unified_context.established_weight
                            },
                            "context_age_minutes": unified_context.context_age_minutes,
                            "last_interaction": unified_context.last_interaction.isoformat() if unified_context.last_interaction else None
                        }
                    else:
                        debug_info["conversation_context"] = {
                            "conversation_id": conversation_id,
                            "context_found": False,
                            "reason": "Aucun contexte trouv√© pour cette conversation"
                        }
                except Exception as e:
                    debug_info["conversation_context"] = {
                        "conversation_id": conversation_id,
                        "error": str(e)
                    }
            
            return debug_info
            
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur debug ContextManager: {e}")
            return {
                "error": str(e),
                "context_manager_available": False,
                "debug_failed": True
            }

# =============================================================================
# FONCTIONS UTILITAIRES ET TESTS AVEC PIPELINE IA UNIFI√â + CONTEXTMANAGER
# =============================================================================

async def quick_ask(question: str, conversation_id: str = None, language: str = "fr") -> str:
    """Interface rapide pour poser une question avec pipeline IA unifi√© + ContextManager"""
    service = ExpertService()
    context = {"conversation_id": conversation_id} if conversation_id else None
    result = await service.process_question(question, context=context, language=language)
    return result.response

def create_expert_service() -> ExpertService:
    """Factory pour cr√©er une instance du service avec pipeline IA unifi√© + ContextManager"""
    return ExpertService()

# =============================================================================
# TESTS INT√âGR√âS AVEC PIPELINE IA UNIFI√â + CONTEXTMANAGER COMPLET
# =============================================================================

async def test_expert_service_ai_pipeline_context_manager():
    """Tests du service expert avec pipeline IA unifi√© + ContextManager et fallback syst√®me classique"""
    
    print("üß™ Tests du Service Expert avec Pipeline IA Unifi√© + ContextManager")
    print("=" * 90)
    
    service = ExpertService()
    conversation_id = "test_conv_ai_context_ross308"
    
    test_cases = [
        # Cas 1: Premi√®re question - √©tablir contexte
        {
            "question": "Quel est le poids d'un ross308 √† 12 jours ?",
            "context": {"conversation_id": conversation_id},
            "expected_type": "general",
            "description": "Test 1: Premi√®re question - √©tablir contexte Ross 308"
        },
        
        # Cas 2: Question de suivi - utiliser contexte √©tabli
        {
            "question": "Et pour des m√¢les ?",
            "context": {"conversation_id": conversation_id, "is_clarification_response": True},
            "expected_type": "contextual",
            "description": "Test 2: Clarification avec contexte (race d√©j√† √©tablie)"
        },
        
        # Cas 3: Question de suivi - continuer la conversation
        {
            "question": "Est-ce que c'est normal si ils p√®sent 400g ?",
            "context": {"conversation_id": conversation_id},
            "expected_type": "contextual",
            "description": "Test 3: Question contextuelle avec r√©f√©rence implicite"
        },
        
        # Cas 4: Nouvelle conversation - test isolation
        {
            "question": "Poids cobb500 femelles 3 semaines ?",
            "context": {"conversation_id": f"{conversation_id}_nouvelle"},
            "expected_type": "precise",
            "description": "Test 4: Nouvelle conversation (contexte isol√©)"
        },
        
        # Cas 5: Retour premi√®re conversation - test persistance
        {
            "question": "Quelle alimentation recommandez-vous ?",
            "context": {"conversation_id": conversation_id},
            "expected_type": "contextual",
            "description": "Test 5: Retour conv. originale (contexte persistant)"
        }
    ]
    
    print(f"üß† ContextManager: {'‚úÖ Activ√©' if service.context_manager else '‚ùå D√©sactiv√©'}")
    print(f"ü§ñ Pipeline IA: {'‚úÖ Activ√©' if service.ai_pipeline else '‚ùå D√©sactiv√©'}")
    print(f"üìù Continuit√©: {'‚úÖ Activ√©' if service.config['include_previous_answers'] else '‚ùå D√©sactiv√©'}")
    print()
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"üìù Test {i}: {test_case['description']}")
        print(f"   Question: {test_case['question']}")
        print(f"   Type attendu: {test_case['expected_type']}")
        
        try:
            start_time = time.time()
            result = await service.process_question(
                test_case['question'], 
                context=test_case['context']
            )
            processing_time = int((time.time() - start_time) * 1000)
            
            status = "‚úÖ" if result.success else "‚ùå"
            ai_used = "ü§ñ IA" if result.ai_pipeline_used else "üîÑ Classique"
            context_used = "üß† Contexte" if result.context_manager_used else "üìù Basic"
            continuity = "üîó Continuit√©" if result.previous_answers_used else "üÜï Nouveau"
            
            print(f"   {status} Type: {result.response_type} ({ai_used}, {context_used}, {continuity})")
            print(f"   ‚è±Ô∏è Temps: {processing_time}ms | üéØ Confiance: {result.confidence:.2f}")
            
            # Afficher informations sp√©cifiques au ContextManager
            if result.context_manager_used:
                print(f"   üß† ContextManager actif:")
                if hasattr(result, 'previous_answers') and result.previous_answers_used:
                    prev_count = len(getattr(result, 'previous_answers', []))
                    print(f"      üìù {prev_count} r√©ponses pr√©c√©dentes utilis√©es")
                if hasattr(result, 'established_entities'):
                    entities = getattr(result, 'established_entities', {})
                    established = [k for k, v in entities.items() if v]
                    if established:
                        print(f"      üè∑Ô∏è Entit√©s √©tablies: {', '.join(established)}")
            
            # Afficher informations sp√©cifiques au pipeline IA
            if result.ai_pipeline_used and result.pipeline_result:
                print(f"   ü§ñ Pipeline IA:")
                print(f"      √âtapes: {len(result.pipeline_result.stages_completed)}")
                print(f"      Appels IA: {result.pipeline_result.ai_calls_made}")
                print(f"      Cache hits: {result.pipeline_result.cache_hits}")
            
            # Informations de normalisation
            if result.normalized_entities:
                print(f"   üîß Normalisation: confiance={result.normalized_entities.normalization_confidence:.2f}")
                changes = []
                if result.normalized_entities.breed:
                    changes.append(f"race={result.normalized_entities.breed}")
                if result.normalized_entities.age_days:
                    changes.append(f"√¢ge={result.normalized_entities.age_days}j")
                if result.normalized_entities.sex:
                    changes.append(f"sexe={result.normalized_entities.sex}")
                if changes:
                    print(f"      {', '.join(changes)}")
            
            # Afficher les donn√©es de poids si calcul√©es
            if result.weight_data and 'weight_range' in result.weight_data:
                weight_range = result.weight_data['weight_range']
                print(f"   üìä Poids calcul√©: {weight_range[0]}-{weight_range[1]}g")
            
            # Pr√©visualisation de la r√©ponse
            if len(result.response) > 120:
                preview = result.response[:120] + "..."
            else:
                preview = result.response
            print(f"   üí¨ R√©ponse: {preview}")
            
            # V√©rifications sp√©ciales pour les tests de continuit√©
            if i == 2 and result.context_manager_used and result.previous_answers_used:
                print("   ‚úÖ SUCCESS: Continuit√© conversationnelle fonctionnelle!")
            if i == 3 and result.context_manager_used:
                print("   ‚úÖ SUCCESS: Contexte maintenu sur plusieurs √©changes!")
            if i == 5 and result.context_manager_used and result.previous_answers_used:
                print("   ‚úÖ SUCCESS: Persistance du contexte valid√©e!")
            
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
        
        print()  # Ligne vide entre les tests
    
    print("üìä Statistiques finales:")
    stats = service.get_system_stats()
    print(f"   Questions trait√©es: {stats['questions_processed']}")
    print(f"   Taux de succ√®s: {stats['success_rate_percent']:.1f}%")
    print(f"   R√©ponses contextuelles: {stats['contextual_metrics']['contextual_answers_count']}")
    print(f"   Taux contexte: {stats['contextual_metrics']['context_usage_rate']:.1f}%")
    
    # NOUVEAU: Statistiques ContextManager
    if 'context_manager_metrics' in stats:
        cm_metrics = stats['context_manager_metrics']
        print(f"   üß† Utilisation ContextManager: {cm_metrics['context_manager_usage_rate']:.1f}%")
        print(f"   üìù Utilisation r√©ponses pr√©c√©dentes: {cm_metrics['previous_answers_usage_rate']:.1f}%")
        print(f"   üîó Taux continuit√©: {cm_metrics['context_continuity_rate']:.1f}%")
    
    # NOUVEAU: Statistiques pipeline IA
    if 'ai_pipeline_metrics' in stats:
        ai_metrics = stats['ai_pipeline_metrics']
        print(f"   ü§ñ Utilisation IA: {ai_metrics['ai_pipeline_usage_rate']:.1f}%")
        print(f"   ü§ñ Taux succ√®s IA: {ai_metrics['ai_success_rate']:.1f}%")
        print(f"   üîÑ Taux fallback: {ai_metrics['fallback_usage_rate']:.1f}%")
    
    print(f"   Temps moyen: {stats['performance']['average_processing_time_ms']}ms")
    
    # Test sp√©cifique de debug du ContextManager
    print(f"\nüß† Test de debug ContextManager:")
    cm_debug = service.get_context_manager_debug_info(conversation_id)
    print(f"   ContextManager disponible: {'Oui' if cm_debug['context_manager_available'] else 'Non'}")
    if cm_debug['context_manager_available'] and 'conversation_context' in cm_debug:
        conv_ctx = cm_debug['conversation_context']
        if conv_ctx.get('context_found'):
            print(f"   Contexte conversation: {conv_ctx['previous_answers_count']} r√©ponses, {conv_ctx['previous_questions_count']} questions")
            entities = conv_ctx['established_entities']
            established = [k for k, v in entities.items() if v]
            if established:
                print(f"   Entit√©s √©tablies: {', '.join(established)}")
        else:
            print(f"   Contexte conversation: Non trouv√©")
    
    # Test sp√©cifique de debug du pipeline IA (conserv√©)
    print(f"\nü§ñ Test de debug pipeline IA:")
    ai_debug = service.get_ai_pipeline_debug_info()
    print(f"   Pipeline IA disponible: {'Oui' if ai_debug['ai_pipeline_available'] else 'Non'}")
    if ai_debug['ai_pipeline_available'] and 'pipeline_health' in ai_debug:
        health = ai_debug['pipeline_health']
        print(f"   Sant√© pipeline: {health.get('success_rate', 0):.1f}% success, {health.get('total_runs', 0)} runs")
    
    # Test de continuit√© avanc√©
    print(f"\nüîó Test de continuit√© avanc√©:")
    continuity_test_id = "test_continuity_advanced"
    
    # Premi√®re question
    q1_result = await service.process_question(
        "Poids normal Ross 308 m√¢les 21 jours ?",
        context={"conversation_id": continuity_test_id}
    )
    print(f"   Q1: {'‚úÖ' if q1_result.success else '‚ùå'} | CM: {'‚úÖ' if q1_result.context_manager_used else '‚ùå'}")
    
    # Deuxi√®me question - doit utiliser le contexte de la premi√®re
    q2_result = await service.process_question(
        "Et pour les femelles ?",
        context={"conversation_id": continuity_test_id, "is_clarification_response": True}
    )
    continuity_success = (q2_result.context_manager_used and q2_result.previous_answers_used)
    print(f"   Q2: {'‚úÖ' if q2_result.success else '‚ùå'} | CM: {'‚úÖ' if q2_result.context_manager_used else '‚ùå'} | Continuit√©: {'‚úÖ' if continuity_success else '‚ùå'}")
    
    # Troisi√®me question - test persistance
    q3_result = await service.process_question(
        "C'est normal si ils grossissent moins vite ?",
        context={"conversation_id": continuity_test_id}
    )
    persistance_success = (q3_result.context_manager_used and q3_result.previous_answers_used)
    print(f"   Q3: {'‚úÖ' if q3_result.success else '‚ùå'} | CM: {'‚úÖ' if q3_result.context_manager_used else '‚ùå'} | Persistance: {'‚úÖ' if persistance_success else '‚ùå'}")
    
    print(f"\nüéØ R√âSULTAT TEST CONTINUIT√â:")
    if continuity_success and persistance_success:
        print("   ‚úÖ SUCCESS: Continuit√© conversationnelle PARFAITE!")
        print("   üß† Le ContextManager maintient correctement l'historique des r√©ponses")
        print("   üîó Les r√©ponses pr√©c√©dentes sont utilis√©es pour la coh√©rence")
    else:
        print("   ‚ö†Ô∏è PARTIEL: Continuit√© conversationnelle √† am√©liorer")
        print(f"      Continuit√© Q1‚ÜíQ2: {'‚úÖ' if continuity_success else '‚ùå'}")
        print(f"      Persistance Q1‚ÜíQ3: {'‚úÖ' if persistance_success else '‚ùå'}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_expert_service_ai_pipeline_context_manager())