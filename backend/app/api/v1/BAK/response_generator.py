"""
app/api/v1/general_response_generator.py - G√âN√âRATEUR DE R√âPONSES G√âN√âRALES IA

ü§ñ SERVICE DE G√âN√âRATION DE R√âPONSES G√âN√âRALES AVEC IA
‚úÖ Utilise GPT-4o pour g√©n√©ration de qualit√© professionnelle
‚úÖ G√©n√®re r√©ponses avec fourchettes et standards selon contexte
‚úÖ Support multilingue avec adaptation culturelle
‚úÖ Int√©gration donn√©es techniques avicoles
‚úÖ Gestion robuste des erreurs avec fallbacks intelligents
‚úÖ Optimis√© pour r√©ponses utiles m√™me avec informations partielles

üÜï MODIFICATIONS - INT√âGRATION IA + FALLBACK:
- ‚úÖ Int√©gration AIResponseGenerator en priorit√©
- ‚úÖ Fallback robuste vers templates classiques conserv√©s
- ‚úÖ Gestion d'erreurs centralis√©e avec monitoring
- ‚úÖ Pipeline unifi√© avec le nouveau syst√®me IA
- ‚úÖ Conservation compl√®te du code original comme backup
"""

import logging
import os
import re
from typing import Dict, Any, Optional
from datetime import datetime

# Import OpenAI s√©curis√©
try:
    import openai
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    openai = None
    OpenAI = None

# üÜï NOUVEAU: Import des services IA avec fallback
try:
    from .ai_response_generator import AIResponseGenerator, ResponseData
    AI_RESPONSE_GENERATOR_AVAILABLE = True
except ImportError:
    AI_RESPONSE_GENERATOR_AVAILABLE = False
    logging.warning("AIResponseGenerator non disponible - utilisation templates classiques")

logger = logging.getLogger(__name__)

class GeneralResponseGenerator:
    """
    G√©n√©rateur de r√©ponses g√©n√©rales avec IA
    
    üÜï NOUVEAU: Pipeline IA + fallback intelligent
    - Priorit√©: AIResponseGenerator pour g√©n√©ration intelligente
    - Fallback: Templates classiques conserv√©s intacts
    - Robustesse: Gestion compl√®te des erreurs
    
    Cr√©e des r√©ponses utiles avec fourchettes et standards
    pour questions qui n'ont pas besoin de clarification.
    """
    
    def __init__(self):
        self.model = "gpt-4o"  # Qualit√© maximale pour g√©n√©ration
        self.client = None
        self.available = False
        
        # üÜï NOUVEAU: Int√©gration du g√©n√©rateur IA
        self.ai_generator = None
        self.ai_available = False
        self._initialize_ai_generator()
        
        # Statistiques pour monitoring (enrichies)
        self.stats = {
            "total_generations": 0,
            "successful_generations": 0,
            "ai_generations": 0,        # üÜï NOUVEAU: Compteur IA
            "fallback_used": 0,
            "emergency_fallback": 0,    # üÜï NOUVEAU: Compteur urgence
            "average_response_length": 0,
            "topics_covered": {},
            "ai_success_rate": 0.0,     # üÜï NOUVEAU: Taux succ√®s IA
            "generation_methods": {}    # üÜï NOUVEAU: M√©thodes utilis√©es
        }
        
        # Templates de fallback par sujet (CONSERV√âS intacts)
        self.fallback_templates = self._initialize_fallback_templates()
        
        # Initialiser OpenAI (CONSERV√â pour backward compatibility)
        self._initialize_openai()
        
        logger.info(f"ü§ñ [General Response Generator] Initialis√© - IA: {self.ai_available}, OpenAI: {self.available}")
    
    def _initialize_ai_generator(self) -> bool:
        """üÜï NOUVEAU: Initialise le g√©n√©rateur IA"""
        try:
            if not AI_RESPONSE_GENERATOR_AVAILABLE:
                logger.warning("‚ö†Ô∏è [General Response] AIResponseGenerator non disponible")
                return False
            
            self.ai_generator = AIResponseGenerator()
            self.ai_available = True
            logger.info("‚úÖ [General Response] AIResponseGenerator initialis√©")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [General Response] Erreur initialisation IA: {e}")
            self.ai_available = False
            return False
    
    def _initialize_openai(self) -> bool:
        """CONSERV√â: Initialise le client OpenAI (pour backward compatibility)"""
        try:
            if not OPENAI_AVAILABLE:
                logger.warning("‚ö†Ô∏è [General Response] OpenAI non disponible")
                return False
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                logger.warning("‚ö†Ô∏è [General Response] OPENAI_API_KEY non configur√©")
                return False
            
            self.client = OpenAI(api_key=api_key)
            self.available = True
            logger.info("‚úÖ [General Response] Client OpenAI initialis√©")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [General Response] Erreur initialisation OpenAI: {e}")
            self.available = False
            return False
    
    async def generate_general_response(self, question: str, entities: Dict[str, Any], classification: Dict[str, Any], language: str = "fr") -> str:
        """
        G√©n√®re une r√©ponse g√©n√©rale bas√©e sur la classification IA
        
        üÜï NOUVEAU: Pipeline IA int√©gr√© avec fallback robuste
        1. Priorit√©: Nouveau AIResponseGenerator
        2. Fallback 1: Code original avec am√©liorations IA
        3. Fallback 2: Templates classiques
        4. Fallback 3: R√©ponse d'urgence
        
        Args:
            question: Question originale de l'utilisateur
            entities: Entit√©s extraites (breed, age, sex, etc.)
            classification: R√©sultat de la classification IA
            language: Langue de g√©n√©ration
            
        Returns:
            str: R√©ponse g√©n√©rale compl√®te et utile
        """
        
        start_time = datetime.now()
        self.stats["total_generations"] += 1
        
        try:
            # üÜï PRIORIT√â 1: Nouveau g√©n√©rateur IA
            if self.ai_available:
                try:
                    logger.info("ü§ñ [General Response] Tentative g√©n√©ration avec AIResponseGenerator")
                    
                    ai_response = await self.ai_generator.generate_general_response(
                        question=question,
                        merged_entities=entities,
                        conversation_context=classification.get("context", ""),
                        language=language
                    )
                    
                    if ai_response and isinstance(ai_response, ResponseData) and len(ai_response.content) > 50:
                        self.stats["ai_generations"] += 1
                        self.stats["successful_generations"] += 1
                        self._update_stats(ai_response.content, "ai_generated")
                        logger.info("‚úÖ [General Response] R√©ponse g√©n√©r√©e par IA")
                        return ai_response.content
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [General Response] √âchec AIResponseGenerator: {e}")
            
            # üîÑ FALLBACK 1: Code original avec am√©liorations IA (CONSERV√â)
            # Si l'IA de classification a d√©j√† sugg√©r√© une r√©ponse, la valider et potentiellement l'am√©liorer
            if classification.get("suggested_general_response") and len(classification["suggested_general_response"]) > 50:
                logger.info("ü§ñ [General Response] Utilisation r√©ponse sugg√©r√©e par classificateur")
                suggested_response = classification["suggested_general_response"]
                
                # Am√©liorer la r√©ponse sugg√©r√©e si n√©cessaire
                if self.available:
                    enhanced_response = await self._enhance_suggested_response(suggested_response, question, entities, language)
                    if enhanced_response:
                        self._update_stats(enhanced_response, "enhanced_suggested")
                        return enhanced_response
                
                # Sinon utiliser la r√©ponse sugg√©r√©e telle quelle
                self._update_stats(suggested_response, "suggested_direct")
                return suggested_response
            
            # üîÑ FALLBACK 2: G√©n√©ration classique avec IA (CONSERV√â)
            if self.available:
                generated_response = await self._generate_with_ai(question, entities, classification, language)
                if generated_response:
                    self._update_stats(generated_response, "ai_generated_legacy")
                    return generated_response
            
            # üîÑ FALLBACK 3: Templates intelligents (CONSERV√â)
            fallback_response = self._generate_fallback_response(question, entities, language)
            self._update_stats(fallback_response, "fallback")
            return fallback_response
            
        except Exception as e:
            logger.error(f"‚ùå [General Response] Erreur g√©n√©ration: {e}")
            self.stats["fallback_used"] += 1
            self.stats["emergency_fallback"] += 1
            return self._generate_emergency_fallback(question, language)
    
    # üÜï NOUVEAU: M√©thode pour r√©ponse g√©n√©rale simple (compatible avec AIResponseGenerator)
    async def generate_simple_response(self, question: str, entities: Dict[str, Any], language: str = "fr") -> str:
        """
        üÜï NOUVEAU: Interface simplifi√©e pour le nouveau pipeline IA
        
        Args:
            question: Question de l'utilisateur
            entities: Entit√©s extraites
            language: Langue de g√©n√©ration
            
        Returns:
            str: R√©ponse g√©n√©r√©e
        """
        # Cr√©er une classification minimale pour compatibilit√©
        minimal_classification = {
            "decision": "general_answer",
            "confidence": 0.8,
            "missing_for_precision": [],
            "context": ""
        }
        
        return await self.generate_general_response(question, entities, minimal_classification, language)
    
    # =====================================================================
    # M√âTHODES CONSERV√âES INTACTES (pour backward compatibility)
    # =====================================================================
    
    async def _enhance_suggested_response(self, suggested_response: str, question: str, entities: Dict[str, Any], language: str) -> Optional[str]:
        """CONSERV√â: Am√©liore une r√©ponse sugg√©r√©e par le classificateur"""
        
        prompt = self._build_enhancement_prompt(suggested_response, question, entities, language)
        
        try:
            response = await self.client.chat.completions.acreate(
                model=self.model,
                messages=[
                    {"role": "system", "content": self._get_system_message(language)},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=500,
                timeout=15
            )
            
            enhanced = response.choices[0].message.content.strip()
            
            # Valider que l'am√©lioration est significative
            if len(enhanced) > len(suggested_response) * 1.2:  # Au moins 20% plus long
                logger.info("‚ú® [General Response] R√©ponse am√©lior√©e avec succ√®s")
                return enhanced
            
            return None  # Pas d'am√©lioration significative
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [General Response] Erreur am√©lioration: {e}")
            return None
    
    async def _generate_with_ai(self, question: str, entities: Dict[str, Any], classification: Dict[str, Any], language: str = "fr") -> Optional[str]:
        """CONSERV√â: G√©n√®re une r√©ponse compl√®te avec IA"""
        
        prompt = self._build_generation_prompt(question, entities, classification, language)
        
        try:
            response = await self.client.chat.completions.acreate(
                model=self.model,
                messages=[
                    {"role": "system", "content": self._get_system_message(language)},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,  # √âquilibre cr√©ativit√©/coh√©rence
                max_tokens=600,   # Permet r√©ponses d√©taill√©es
                timeout=20        # Timeout g√©n√©reux pour qualit√©
            )
            
            generated_response = response.choices[0].message.content.strip()
            
            # Validation de base
            if len(generated_response) < 50:
                logger.warning("‚ö†Ô∏è [General Response] R√©ponse g√©n√©r√©e trop courte")
                return None
            
            logger.info(f"‚úÖ [General Response] R√©ponse g√©n√©r√©e ({len(generated_response)} chars)")
            return generated_response
            
        except Exception as e:
            logger.error(f"‚ùå [General Response] Erreur g√©n√©ration IA: {e}")
            return None
    
    def _build_generation_prompt(self, question: str, entities: Dict[str, Any], classification: Dict[str, Any], language: str) -> str:
        """CONSERV√â: Construit le prompt de g√©n√©ration selon la langue et le contexte"""
        
        entities_text = self._format_entities_for_prompt(entities, language)
        missing_info = ", ".join(classification.get("missing_for_precision", []))
        topic = self._detect_topic(question, language)
        
        prompts = {
            "fr": f"""Tu es un v√©t√©rinaire avicole expert. G√©n√®re une r√©ponse g√©n√©rale professionnelle et utile.

QUESTION: "{question}"
SUJET D√âTECT√â: {topic}
ENTIT√âS DISPONIBLES: {entities_text}
INFORMATIONS MANQUANTES POUR PR√âCISION MAXIMALE: {missing_info}

INSTRUCTIONS DE G√âN√âRATION:
1. **R√©ponse directe**: Commence par r√©pondre directement √† la question
2. **Fourchettes et standards**: Donne des valeurs/fourchettes standard avec contexte
3. **Variations importantes**: Mentionne les variations selon race, sexe, √¢ge si pertinent
4. **Conseils pratiques**: Ajoute 1-2 conseils de surveillance ou d'action
5. **R√©f√©rence experte**: Indique quand consulter pour cas sp√©cifique

EXEMPLES DE STRUCTURE:
- Question poids ‚Üí "Le poids normal √† X jours varie de Y-Z grammes selon la race et le sexe. Les races lourdes comme Ross 308 atteignent g√©n√©ralement... Surveillez la croissance hebdomadairement et consultez si √©cart >15%."
- Question croissance ‚Üí "La croissance normale pr√©sente ces caract√©ristiques... Les variations d√©pendent de... Signes d'alerte √† surveiller..."
- Question alimentation ‚Üí "Les besoins nutritionnels √† ce stade sont... Adaptez selon... Consultez un nutritionniste si..."

STYLE:
- Professionnel mais accessible
- Pr√©cis avec chiffres/fourchettes
- Pratique et actionnable
- 150-300 mots id√©alement

G√©n√®re la r√©ponse maintenant:""",

            "en": f"""You are a poultry veterinary expert. Generate a professional and useful general response.

QUESTION: "{question}"
TOPIC DETECTED: {topic}
AVAILABLE ENTITIES: {entities_text}
MISSING INFO FOR MAX PRECISION: {missing_info}

GENERATION INSTRUCTIONS:
1. **Direct answer**: Start by directly answering the question
2. **Ranges and standards**: Provide standard values/ranges with context
3. **Important variations**: Mention variations by breed, sex, age if relevant
4. **Practical advice**: Add 1-2 monitoring or action tips
5. **Expert reference**: Indicate when to consult for specific cases

Generate the response now:""",

            "es": f"""Eres un veterinario av√≠cola experto. Genera una respuesta general profesional y √∫til.

PREGUNTA: "{question}"
TEMA DETECTADO: {topic}
ENTIDADES DISPONIBLES: {entities_text}
INFO FALTANTE PARA M√ÅXIMA PRECISI√ìN: {missing_info}

Genera la respuesta ahora:"""
        }
        
        return prompts.get(language, prompts["fr"])
    
    def _build_enhancement_prompt(self, suggested_response: str, question: str, entities: Dict[str, Any], language: str) -> str:
        """CONSERV√â: Construit prompt pour am√©liorer une r√©ponse sugg√©r√©e"""
        
        prompts = {
            "fr": f"""Am√©liore cette r√©ponse en la rendant plus compl√®te et professionnelle:

QUESTION ORIGINALE: "{question}"
R√âPONSE √Ä AM√âLIORER: "{suggested_response}"
ENTIT√âS DISPONIBLES: {self._format_entities_for_prompt(entities, language)}

AM√âLIORATIONS √Ä APPORTER:
1. Ajouter des fourchettes plus pr√©cises si possible
2. Inclure des conseils pratiques de surveillance
3. Mentionner les variations selon race/sexe/√¢ge
4. Ajouter quand consulter un expert
5. Am√©liorer la structure et la clart√©

Garde le m√™me ton professionnel mais rend la r√©ponse plus compl√®te et utile (200-350 mots):""",

            "en": f"""Improve this response by making it more complete and professional:

ORIGINAL QUESTION: "{question}"
RESPONSE TO IMPROVE: "{suggested_response}"

Make it more complete and useful (200-350 words):""",

            "es": f"""Mejora esta respuesta haci√©ndola m√°s completa y profesional:

PREGUNTA ORIGINAL: "{question}"
RESPUESTA A MEJORAR: "{suggested_response}"

Hazla m√°s completa y √∫til (200-350 palabras):"""
        }
        
        return prompts.get(language, prompts["fr"])
    
    def _get_system_message(self, language: str) -> str:
        """CONSERV√â: Messages syst√®me selon la langue"""
        
        messages = {
            "fr": "Tu es un v√©t√©rinaire avicole expert qui g√©n√®re des r√©ponses g√©n√©rales pr√©cises, utiles et professionnelles. Tu donnes toujours des informations pratiques avec des fourchettes de valeurs standard et des conseils concrets.",
            
            "en": "You are a poultry veterinary expert who generates accurate, useful and professional general responses. You always provide practical information with standard value ranges and concrete advice.",
            
            "es": "Eres un veterinario av√≠cola experto que genera respuestas generales precisas, √∫tiles y profesionales. Siempre proporcionas informaci√≥n pr√°ctica con rangos de valores est√°ndar y consejos concretos."
        }
        
        return messages.get(language, messages["fr"])
    
    def _generate_fallback_response(self, question: str, entities: Dict[str, Any], language: str = "fr") -> str:
        """CONSERV√â: G√©n√®re une r√©ponse fallback intelligente bas√©e sur le sujet"""
        
        topic = self._detect_topic(question, language)
        template = self.fallback_templates[language].get(topic, self.fallback_templates[language]["general"])
        
        # Personnaliser le template avec les entit√©s disponibles
        context = {
            "age": entities.get('age_in_days', entities.get('age', 'X')),
            "breed": entities.get('breed', 'race non sp√©cifi√©e'),
            "sex": entities.get('sex', 'sexe non sp√©cifi√©')
        }
        
        try:
            personalized_response = template.format(**context)
            logger.info(f"üìù [General Response] Fallback g√©n√©r√© pour sujet: {topic}")
            return personalized_response
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [General Response] Erreur personnalisation fallback: {e}")
            return template
    
    def _generate_emergency_fallback(self, question: str, language: str = "fr") -> str:
        """CONSERV√â: Fallback d'urgence minimal"""
        
        emergency_responses = {
            "fr": f"Je comprends votre question sur '{question}'. Pour vous donner la r√©ponse la plus pr√©cise possible, j'aurais besoin de conna√Ætre la race, l'√¢ge et le sexe de vos animaux. Cependant, je peux vous dire que les standards varient g√©n√©ralement selon ces param√®tres. N'h√©sitez pas √† consulter un v√©t√©rinaire pour des conseils personnalis√©s.",
            
            "en": f"I understand your question about '{question}'. To give you the most accurate answer, I would need to know the breed, age and sex of your animals. However, I can tell you that standards generally vary according to these parameters. Don't hesitate to consult a veterinarian for personalized advice.",
            
            "es": f"Entiendo su pregunta sobre '{question}'. Para darle la respuesta m√°s precisa, necesitar√≠a conocer la raza, edad y sexo de sus animales. Sin embargo, puedo decirle que los est√°ndares generalmente var√≠an seg√∫n estos par√°metros. No dude en consultar a un veterinario para consejos personalizados."
        }
        
        return emergency_responses.get(language, emergency_responses["fr"])
    
    def _detect_topic(self, question: str, language: str = "fr") -> str:
        """CONSERV√â: D√©tecte le sujet principal de la question"""
        
        question_lower = question.lower()
        
        topic_keywords = {
            "poids": ["poids", "weight", "peso", "gramme", "kg", "masse"],
            "croissance": ["croissance", "growth", "crecimiento", "d√©veloppement", "development"],
            "alimentation": ["alimentation", "feed", "nutrition", "alimento", "ration"],
            "sant√©": ["maladie", "disease", "enfermedad", "symptom", "mort", "death"],
            "reproduction": ["ponte", "laying", "puesta", "≈ìuf", "egg", "huevo"],
            "environnement": ["temp√©rature", "temperature", "ventilation", "liti√®re"],
            "vaccination": ["vaccin", "vaccine", "vacuna", "immunit√©", "immunity"]
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in question_lower for keyword in keywords):
                return topic
        
        return "g√©n√©ral"
    
    def _format_entities_for_prompt(self, entities: Dict[str, Any], language: str = "fr") -> str:
        """CONSERV√â: Formate les entit√©s pour les prompts"""
        
        if not entities:
            return {"fr": "Aucune", "en": "None", "es": "Ninguna"}.get(language, "Aucune")
        
        parts = []
        if entities.get('breed'):
            parts.append(f"race: {entities['breed']}")
        if entities.get('age_in_days'):
            parts.append(f"√¢ge: {entities['age_in_days']}j")
        elif entities.get('age'):
            parts.append(f"√¢ge: {entities['age']}")
        if entities.get('sex'):
            parts.append(f"sexe: {entities['sex']}")
        if entities.get('weight_in_grams'):
            parts.append(f"poids: {entities['weight_in_grams']}g")
            
        return ", ".join(parts) if parts else "Partielles"
    
    def _initialize_fallback_templates(self) -> Dict[str, Dict[str, str]]:
        """CONSERV√â: Initialise les templates de fallback par sujet et langue"""
        
        return {
            "fr": {
                "poids": "Le poids d'un poulet √† {age} jours varie consid√©rablement selon la race et le sexe. En g√©n√©ral, les fourchettes sont de 250-500g √† cet √¢ge. Les races de chair comme Ross 308 ou Cobb 500 sont plus lourdes que les races pondeuses. Les m√¢les sont g√©n√©ralement 10-15% plus lourds que les femelles. Surveillez la croissance hebdomadairement et consultez si vous observez des √©carts importants.",
                
                "croissance": "La croissance normale des poulets pr√©sente des phases distinctes. √Ä {age} jours, vous devriez observer une activit√© normale, un app√©tit r√©gulier et une prise de poids progressive. Les signes d'alerte incluent: apathie, refus alimentaire, retard de croissance. La race {breed} a ses propres standards de croissance qu'il convient de respecter.",
                
                "alimentation": "Les besoins nutritionnels des poulets √©voluent avec l'√¢ge. √Ä {age} jours, l'alimentation doit √™tre adapt√©e au stade de croissance. Assurez-vous d'un acc√®s constant √† une eau propre et √† un aliment de qualit√©. Les besoins varient selon la race et l'objectif d'√©levage (chair vs ponte).",
                
                "sant√©": "La sant√© des poulets n√©cessite une surveillance constante. Les signes √† surveiller incluent: comportement, app√©tit, aspect des fientes, respiration. En cas de sympt√¥mes anormaux, consultez rapidement un v√©t√©rinaire. La pr√©vention reste le meilleur traitement.",
                
                "g√©n√©ral": "Pour votre question concernant vos poulets, les standards varient selon la race, l'√¢ge et le sexe des animaux. Je recommande de consulter un v√©t√©rinaire avicole ou un technicien sp√©cialis√© pour des conseils personnalis√©s √† votre situation sp√©cifique."
            },
            
            "en": {
                "poids": "Chicken weight at {age} days varies considerably by breed and sex. Generally, ranges are 250-500g at this age. Broiler breeds like Ross 308 or Cobb 500 are heavier than layer breeds. Males are typically 10-15% heavier than females. Monitor growth weekly and consult if you observe significant deviations.",
                
                "g√©n√©ral": "For your question about chickens, standards vary by breed, age and sex. I recommend consulting a poultry veterinarian or specialized technician for advice tailored to your specific situation."
            },
            
            "es": {
                "poids": "El peso del pollo a los {age} d√≠as var√≠a considerablemente seg√∫n la raza y el sexo. Generalmente, los rangos son de 250-500g a esta edad. Las razas de engorde como Ross 308 o Cobb 500 son m√°s pesadas que las razas ponedoras.",
                
                "general": "Para su pregunta sobre pollos, los est√°ndares var√≠an seg√∫n la raza, edad y sexo. Recomiendo consultar a un veterinario av√≠cola para consejos adaptados a su situaci√≥n espec√≠fica."
            }
        }
    
    def _update_stats(self, response: str, method: str) -> None:
        """üÜï AM√âLIOR√â: Met √† jour les statistiques avec nouvelles m√©triques"""
        
        if method not in ["fallback", "emergency_fallback"]:
            self.stats["successful_generations"] += 1
        else:
            self.stats["fallback_used"] += 1
        
        # Compter les m√©thodes utilis√©es
        if method in self.stats["generation_methods"]:
            self.stats["generation_methods"][method] += 1
        else:
            self.stats["generation_methods"][method] = 1
        
        # Longueur moyenne
        current_avg = self.stats["average_response_length"]
        total = self.stats["total_generations"]
        new_length = len(response)
        self.stats["average_response_length"] = ((current_avg * (total - 1)) + new_length) / total
        
        # üÜï NOUVEAU: Taux de succ√®s IA
        if self.stats["total_generations"] > 0:
            self.stats["ai_success_rate"] = self.stats["ai_generations"] / self.stats["total_generations"]
    
    def get_stats(self) -> Dict[str, Any]:
        """üÜï AM√âLIOR√â: Retourne les statistiques enrichies"""
        return {
            **self.stats,
            "availability": {
                "ai_generator": self.ai_available,
                "openai_direct": self.available
            },
            "model": self.model,
            "success_rate": self.stats["successful_generations"] / max(1, self.stats["total_generations"]),
            "generation_pipeline": {
                "ai_generator_priority": self.ai_available,
                "fallback_levels": ["ai_generator", "openai_enhancement", "openai_direct", "templates", "emergency"],
                "current_primary": "ai_generator" if self.ai_available else "openai_direct" if self.available else "templates"
            }
        }

# Instance globale (CONSERV√âE)
general_response_generator = GeneralResponseGenerator()

# Fonction utilitaire (CONSERV√âE + am√©lior√©e)
async def generate_general_response(question: str, entities: Dict[str, Any], classification: Dict[str, Any], language: str = "fr") -> str:
    """
    Fonction utilitaire pour g√©n√©ration de r√©ponse g√©n√©rale
    
    üÜï AM√âLIOR√â: Support du nouveau pipeline IA avec fallback robuste
    
    Usage:
        response = await generate_general_response(
            "Poids poulet 19 jours", 
            {"age_in_days": 19}, 
            {"decision": "general_answer", "missing_for_precision": ["breed", "sex"]}
        )
    """
    return await general_response_generator.generate_general_response(question, entities, classification, language)

# üÜï NOUVELLE fonction utilitaire simplifi√©e pour le pipeline IA
async def generate_simple_general_response(question: str, entities: Dict[str, Any], language: str = "fr") -> str:
    """
    üÜï NOUVEAU: Interface simplifi√©e pour le nouveau pipeline IA
    
    Usage:
        response = await generate_simple_general_response(
            "Poids poulet Ross 308 m√¢le 19 jours",
            {"breed": "Ross 308", "age_in_days": 19, "sex": "m√¢le"}
        )
    """
    return await general_response_generator.generate_simple_response(question, entities, language)

logger.info("ü§ñ [General Response Generator] Module de g√©n√©ration de r√©ponses g√©n√©rales charg√© avec int√©gration IA")