# app/api/v1/whatsapp_users.py
# -*- coding: utf-8 -*-
"""
WhatsApp User Management
Permet aux utilisateurs d'ajouter/v√©rifier leur num√©ro WhatsApp
Version: 1.0
"""

import os
import logging
import psycopg2
import random
from psycopg2.extras import RealDictCursor
from typing import Dict, Any, Optional
from datetime import datetime, timedelta

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from twilio.rest import Client

from app.api.v1.auth import get_current_user

router = APIRouter(prefix="/whatsapp/user", tags=["whatsapp-users"])
logger = logging.getLogger(__name__)

# Configuration
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_NUMBER = os.getenv("TWILIO_WHATSAPP_NUMBER", "whatsapp:+15075195932")
DATABASE_URL = os.getenv("DATABASE_URL")

# Initialiser Twilio
twilio_client = None
if TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN:
    twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
    logger.info("‚úÖ Twilio client initialized for user management")


# ==================== MODELS ====================

class AddWhatsAppNumberRequest(BaseModel):
    whatsapp_number: str  # Format: +1234567890


class VerifyWhatsAppCodeRequest(BaseModel):
    verification_code: str


class WhatsAppStatusResponse(BaseModel):
    has_whatsapp: bool
    whatsapp_number: Optional[str] = None
    whatsapp_verified: bool = False
    verified_at: Optional[str] = None


# ==================== HELPERS ====================

def get_db_connection():
    """Cr√©er une connexion √† la base de donn√©es"""
    return psycopg2.connect(DATABASE_URL)


def normalize_phone_number(phone: str) -> str:
    """
    Normalise un num√©ro de t√©l√©phone
    Entr√©e: +1234567890 ou 1234567890 ou (123) 456-7890
    Sortie: +1234567890
    """
    # Enlever tous les caract√®res non-num√©riques sauf le +
    cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')

    # Ajouter + si manquant
    if not cleaned.startswith('+'):
        cleaned = '+' + cleaned

    return cleaned


def generate_verification_code() -> str:
    """G√©n√®re un code de v√©rification √† 6 chiffres"""
    return str(random.randint(100000, 999999))


def send_verification_code(whatsapp_number: str, code: str) -> bool:
    """
    Envoie un code de v√©rification par WhatsApp

    Args:
        whatsapp_number: Num√©ro WhatsApp (format: +1234567890)
        code: Code de v√©rification √† 6 chiffres

    Returns:
        True si envoy√© avec succ√®s
    """
    try:
        if not twilio_client:
            logger.error("‚ùå Twilio client not initialized")
            return False

        # Format Twilio
        to_number = f"whatsapp:{whatsapp_number}"

        message = twilio_client.messages.create(
            from_=TWILIO_WHATSAPP_NUMBER,
            to=to_number,
            body=f"""üîê Code de v√©rification Intelia Cognito

Votre code : {code}

Ce code expire dans 10 minutes.

Si vous n'avez pas demand√© ce code, ignorez ce message."""
        )

        logger.info(f"‚úÖ Verification code sent to {whatsapp_number}: {message.sid}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error sending verification code: {e}")
        return False


# ==================== ENDPOINTS ====================

@router.get("/status", response_model=WhatsAppStatusResponse)
async def get_whatsapp_status(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    R√©cup√®re le statut WhatsApp de l'utilisateur
    """
    try:
        user_email = current_user.get("email")

        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(
                    """
                    SELECT whatsapp_number, whatsapp_verified, verified_at
                    FROM user_whatsapp_info
                    WHERE user_email = %s
                    """,
                    (user_email,)
                )
                result = cur.fetchone()

                if not result:
                    return WhatsAppStatusResponse(has_whatsapp=False)

                return WhatsAppStatusResponse(
                    has_whatsapp=True,
                    whatsapp_number=result["whatsapp_number"],
                    whatsapp_verified=result["whatsapp_verified"],
                    verified_at=result["verified_at"].isoformat() if result["verified_at"] else None
                )

    except Exception as e:
        logger.error(f"‚ùå Error getting WhatsApp status: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du statut")


@router.post("/add-number")
async def add_whatsapp_number(
    request: AddWhatsAppNumberRequest,
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    Ajoute un num√©ro WhatsApp et envoie un code de v√©rification
    """
    try:
        user_email = current_user.get("email")
        whatsapp_number = normalize_phone_number(request.whatsapp_number)

        # V√©rifier que le num√©ro n'est pas d√©j√† utilis√© par un autre utilisateur
        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(
                    """
                    SELECT user_email FROM user_whatsapp_info
                    WHERE whatsapp_number = %s AND user_email != %s
                    """,
                    (whatsapp_number, user_email)
                )
                existing = cur.fetchone()

                if existing:
                    raise HTTPException(
                        status_code=400,
                        detail="Ce num√©ro WhatsApp est d√©j√† utilis√© par un autre compte"
                    )

                # G√©n√©rer code de v√©rification
                verification_code = generate_verification_code()

                # Envoyer le code
                if not send_verification_code(whatsapp_number, verification_code):
                    raise HTTPException(
                        status_code=500,
                        detail="Impossible d'envoyer le code de v√©rification"
                    )

                # Sauvegarder dans la DB (non v√©rifi√©)
                cur.execute(
                    """
                    INSERT INTO user_whatsapp_info (
                        user_email, whatsapp_number, whatsapp_verified,
                        verification_code, verification_sent_at
                    ) VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT (user_email) DO UPDATE SET
                        whatsapp_number = EXCLUDED.whatsapp_number,
                        whatsapp_verified = FALSE,
                        verification_code = EXCLUDED.verification_code,
                        verification_sent_at = EXCLUDED.verification_sent_at,
                        updated_at = CURRENT_TIMESTAMP
                    """,
                    (user_email, whatsapp_number, False, verification_code, datetime.utcnow())
                )
                conn.commit()

                logger.info(f"‚úÖ WhatsApp number added for {user_email}: {whatsapp_number}")

                return {
                    "success": True,
                    "message": "Code de v√©rification envoy√© par WhatsApp",
                    "whatsapp_number": whatsapp_number
                }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error adding WhatsApp number: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'ajout du num√©ro")


@router.post("/verify-code")
async def verify_whatsapp_code(
    request: VerifyWhatsAppCodeRequest,
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    V√©rifie le code de v√©rification WhatsApp
    """
    try:
        user_email = current_user.get("email")

        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                # R√©cup√©rer les infos de v√©rification
                cur.execute(
                    """
                    SELECT whatsapp_number, verification_code, verification_sent_at
                    FROM user_whatsapp_info
                    WHERE user_email = %s
                    """,
                    (user_email,)
                )
                result = cur.fetchone()

                if not result:
                    raise HTTPException(
                        status_code=404,
                        detail="Aucun num√©ro WhatsApp trouv√©. Ajoutez d'abord un num√©ro."
                    )

                # V√©rifier expiration (10 minutes)
                sent_at = result["verification_sent_at"]
                if sent_at and datetime.utcnow() - sent_at > timedelta(minutes=10):
                    raise HTTPException(
                        status_code=400,
                        detail="Code expir√©. Demandez un nouveau code."
                    )

                # V√©rifier le code
                if result["verification_code"] != request.verification_code:
                    raise HTTPException(
                        status_code=400,
                        detail="Code de v√©rification incorrect"
                    )

                # Marquer comme v√©rifi√©
                cur.execute(
                    """
                    UPDATE user_whatsapp_info
                    SET whatsapp_verified = TRUE,
                        verified_at = CURRENT_TIMESTAMP,
                        verification_code = NULL,
                        verification_sent_at = NULL,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE user_email = %s
                    """,
                    (user_email,)
                )
                conn.commit()

                logger.info(f"‚úÖ WhatsApp verified for {user_email}")

                return {
                    "success": True,
                    "message": "Num√©ro WhatsApp v√©rifi√© avec succ√®s !",
                    "whatsapp_number": result["whatsapp_number"]
                }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error verifying code: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la v√©rification")


@router.post("/resend-code")
async def resend_verification_code(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    Renvoie un code de v√©rification
    """
    try:
        user_email = current_user.get("email")

        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(
                    """
                    SELECT whatsapp_number, whatsapp_verified
                    FROM user_whatsapp_info
                    WHERE user_email = %s
                    """,
                    (user_email,)
                )
                result = cur.fetchone()

                if not result:
                    raise HTTPException(
                        status_code=404,
                        detail="Aucun num√©ro WhatsApp trouv√©"
                    )

                if result["whatsapp_verified"]:
                    raise HTTPException(
                        status_code=400,
                        detail="Num√©ro d√©j√† v√©rifi√©"
                    )

                # G√©n√©rer nouveau code
                verification_code = generate_verification_code()

                # Envoyer
                if not send_verification_code(result["whatsapp_number"], verification_code):
                    raise HTTPException(
                        status_code=500,
                        detail="Impossible d'envoyer le code"
                    )

                # Mettre √† jour
                cur.execute(
                    """
                    UPDATE user_whatsapp_info
                    SET verification_code = %s,
                        verification_sent_at = %s,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE user_email = %s
                    """,
                    (verification_code, datetime.utcnow(), user_email)
                )
                conn.commit()

                return {
                    "success": True,
                    "message": "Nouveau code envoy√©"
                }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error resending code: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'envoi")


@router.delete("/remove-number")
async def remove_whatsapp_number(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    Supprime le num√©ro WhatsApp de l'utilisateur
    """
    try:
        user_email = current_user.get("email")

        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "DELETE FROM user_whatsapp_info WHERE user_email = %s",
                    (user_email,)
                )
                conn.commit()

                if cur.rowcount == 0:
                    raise HTTPException(
                        status_code=404,
                        detail="Aucun num√©ro WhatsApp trouv√©"
                    )

                logger.info(f"‚úÖ WhatsApp number removed for {user_email}")

                return {
                    "success": True,
                    "message": "Num√©ro WhatsApp supprim√©"
                }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error removing WhatsApp number: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la suppression")
