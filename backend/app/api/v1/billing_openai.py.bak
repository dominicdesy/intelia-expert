"""
üî• CORRIG√â: Endpoint pour r√©cup√©rer les co√ªts OpenAI r√©els
Compl√®te les statistiques avec des donn√©es financi√®res pr√©cises
"""

from fastapi import APIRouter, HTTPException, Depends
from datetime import datetime, timedelta
import openai
import logging
from typing import Dict, Any, Optional, List
import os
import requests
from app.api.v1.utils.openai_utils import _get_api_key

router = APIRouter()
logger = logging.getLogger(__name__)

# ==================== CONFIGURATION OPENAI BILLING ====================

def get_openai_organization_id() -> Optional[str]:
    """R√©cup√®re l'ID d'organisation OpenAI depuis les variables d'environnement"""
    return os.getenv("OPENAI_ORG_ID")

async def get_openai_usage_data(
    start_date: str, 
    end_date: str, 
    organization_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    R√©cup√®re les donn√©es d'utilisation OpenAI via leur API
    
    Args:
        start_date: Format YYYY-MM-DD
        end_date: Format YYYY-MM-DD
        organization_id: ID d'organisation OpenAI (optionnel)
    
    Returns:
        Dict contenant les m√©triques d'utilisation et co√ªts
    """
    try:
        api_key = _get_api_key()
        
        # Configuration des headers
        headers = {"Authorization": f"Bearer {api_key}"}
        if organization_id:
            headers["OpenAI-Organization"] = organization_id
        
        # üî• CORRIG√â: L'API OpenAI Usage n√©cessite des appels s√©par√©s par date
        processed_data = {
            "total_cost": 0,
            "total_tokens": 0,
            "models_usage": {},
            "daily_breakdown": {},
            "api_calls": 0,
            "errors": []
        }
        
        # G√©n√©rer la liste des dates entre start_date et end_date
        start_dt = datetime.strptime(start_date, "%Y-%m-%d")
        end_dt = datetime.strptime(end_date, "%Y-%m-%d")
        
        current_date = start_dt
        while current_date <= end_dt:
            date_str = current_date.strftime("%Y-%m-%d")
            
            try:
                # üî• NOUVEAU: Appel correct √† l'API OpenAI Usage avec un seul param√®tre 'date'
                usage_url = "https://api.openai.com/v1/usage"
                params = {"date": date_str}
                
                response = requests.get(usage_url, headers=headers, params=params)
                
                if response.status_code == 200:
                    usage_data = response.json()
                    daily_cost = 0
                    daily_tokens = 0
                    daily_calls = 0
                    
                    # Parser les donn√©es selon la nouvelle structure de r√©ponse OpenAI
                    if "data" in usage_data and usage_data["data"]:
                        for usage_item in usage_data["data"]:
                            # Extraction des m√©triques
                            model_name = usage_item.get("snapshot_id", "unknown")
                            
                            # Les co√ªts sont maintenant dans diff√©rents champs selon le type
                            cost = 0
                            if "n_generated_tokens_total" in usage_item and "n_context_tokens_total" in usage_item:
                                # Estimation bas√©e sur les tokens (vous devrez ajuster selon vos tarifs)
                                total_tokens = usage_item.get("n_generated_tokens_total", 0) + usage_item.get("n_context_tokens_total", 0)
                                # Estimation approximative (√† ajuster selon le mod√®le)
                                cost = total_tokens * 0.00002  # Estimation tr√®s approximative
                            
                            tokens = usage_item.get("n_context_tokens_total", 0) + usage_item.get("n_generated_tokens_total", 0)
                            calls = usage_item.get("n_requests", 0)
                            
                            # Accumulation globale
                            processed_data["total_cost"] += cost
                            processed_data["total_tokens"] += tokens
                            processed_data["api_calls"] += calls
                            
                            # Accumulation quotidienne
                            daily_cost += cost
                            daily_tokens += tokens
                            daily_calls += calls
                            
                            # Par mod√®le
                            if model_name not in processed_data["models_usage"]:
                                processed_data["models_usage"][model_name] = {
                                    "cost": 0,
                                    "tokens": 0,
                                    "calls": 0
                                }
                            
                            processed_data["models_usage"][model_name]["cost"] += cost
                            processed_data["models_usage"][model_name]["tokens"] += tokens
                            processed_data["models_usage"][model_name]["calls"] += calls
                    
                    # Enregistrer le breakdown quotidien
                    processed_data["daily_breakdown"][date_str] = {
                        "cost": daily_cost,
                        "tokens": daily_tokens,
                        "calls": daily_calls
                    }
                
                elif response.status_code == 404:
                    # Pas de donn√©es pour cette date (normal)
                    processed_data["daily_breakdown"][date_str] = {
                        "cost": 0,
                        "tokens": 0,
                        "calls": 0
                    }
                    
                else:
                    error_msg = f"Erreur API pour {date_str}: {response.status_code} - {response.text}"
                    logger.warning(error_msg)
                    processed_data["errors"].append(error_msg)
            
            except Exception as e:
                error_msg = f"Erreur lors du traitement de {date_str}: {str(e)}"
                logger.error(error_msg)
                processed_data["errors"].append(error_msg)
            
            # Passer au jour suivant
            current_date += timedelta(days=1)
        
        return processed_data
            
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration usage OpenAI: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")


async def get_openai_usage_alternative() -> Dict[str, Any]:
    """
    üî• ALTERNATIVE: Utilise l'API de facturation OpenAI (si disponible)
    Cette m√©thode peut √™tre plus fiable pour obtenir les co√ªts r√©els
    """
    try:
        api_key = _get_api_key()
        organization_id = get_openai_organization_id()
        
        headers = {"Authorization": f"Bearer {api_key}"}
        if organization_id:
            headers["OpenAI-Organization"] = organization_id
        
        # Essayer l'endpoint de facturation (si votre compte y a acc√®s)
        billing_url = "https://api.openai.com/v1/dashboard/billing/usage"
        
        # Param√®tres pour le mois en cours
        start_date = datetime.now().replace(day=1).strftime("%Y-%m-%d")
        end_date = datetime.now().strftime("%Y-%m-%d")
        
        params = {
            "start_date": start_date,
            "end_date": end_date
        }
        
        response = requests.get(billing_url, headers=headers, params=params)
        
        if response.status_code == 200:
            billing_data = response.json()
            
            return {
                "total_usage": billing_data.get("total_usage", 0) / 100,  # Conversion cents -> dollars
                "daily_costs": billing_data.get("daily_costs", []),
                "source": "billing_api",
                "note": "Donn√©es r√©elles de facturation OpenAI"
            }
        else:
            logger.warning(f"API Billing non accessible: {response.status_code}")
            return {
                "error": "API Billing non accessible",
                "status_code": response.status_code,
                "source": "billing_api_failed"
            }
            
    except Exception as e:
        logger.error(f"Erreur API Billing alternative: {e}")
        return {
            "error": str(e),
            "source": "billing_api_exception"
        }


# ==================== ENDPOINTS CORRIG√âS ====================

@router.get("/openai-usage/current-month")
async def get_current_month_openai_usage():
    """
    üî• CORRIG√â: R√©cup√®re les co√ªts OpenAI pour le mois en cours
    """
    try:
        # Calculer les dates du mois en cours
        now = datetime.now()
        start_of_month = now.replace(day=1).strftime("%Y-%m-%d")
        today = now.strftime("%Y-%m-%d")
        
        organization_id = get_openai_organization_id()
        
        # Essayer d'abord la m√©thode principale
        try:
            usage_data = await get_openai_usage_data(start_of_month, today, organization_id)
        except HTTPException:
            # En cas d'√©chec, essayer la m√©thode alternative
            logger.info("Tentative m√©thode alternative...")
            usage_data = await get_openai_usage_alternative()
        
        return {
            "status": "success",
            "period": {
                "start": start_of_month,
                "end": today,
                "type": "current_month"
            },
            "organization_id": organization_id,
            **usage_data
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint current-month: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/openai-usage/last-30-days")
async def get_last_30_days_openai_usage():
    """
    üî• CORRIG√â: R√©cup√®re les co√ªts OpenAI des 30 derniers jours
    """
    try:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        start_str = start_date.strftime("%Y-%m-%d")
        end_str = end_date.strftime("%Y-%m-%d")
        
        organization_id = get_openai_organization_id()
        usage_data = await get_openai_usage_data(start_str, end_str, organization_id)
        
        return {
            "status": "success",
            "period": {
                "start": start_str,
                "end": end_str,
                "type": "last_30_days"
            },
            "organization_id": organization_id,
            **usage_data
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint last-30-days: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/openai-usage/custom")
async def get_custom_period_openai_usage(
    start_date: str,
    end_date: str,
    organization_id: Optional[str] = None
):
    """
    üî• CORRIG√â: R√©cup√®re les co√ªts OpenAI pour une p√©riode personnalis√©e
    """
    try:
        # Validation des dates
        try:
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            
            # Limiter la plage pour √©viter trop d'appels API
            if (end_dt - start_dt).days > 90:
                raise HTTPException(
                    status_code=400,
                    detail="P√©riode trop longue. Maximum 90 jours."
                )
                
        except ValueError:
            raise HTTPException(
                status_code=400, 
                detail="Format de date invalide. Utilisez YYYY-MM-DD"
            )
        
        org_id = organization_id or get_openai_organization_id()
        usage_data = await get_openai_usage_data(start_date, end_date, org_id)
        
        return {
            "status": "success",
            "period": {
                "start": start_date,
                "end": end_date,
                "type": "custom"
            },
            "organization_id": org_id,
            **usage_data
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur endpoint custom: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/openai-models-pricing")
async def get_openai_models_pricing():
    """
    üî• MIS √Ä JOUR: R√©cup√®re la liste des mod√®les OpenAI et leurs tarifs actuels
    """
    try:
        api_key = _get_api_key()
        
        # Configuration OpenAI client (nouvelle version)
        client = openai.OpenAI(api_key=api_key)
        
        # R√©cup√©rer la liste des mod√®les
        models = client.models.list()
        
        # Tarifs mis √† jour (ao√ªt 2025)
        pricing_info = {
            # GPT-4 Turbo
            "gpt-4-turbo": {"input": 0.01, "output": 0.03},
            "gpt-4-turbo-2024-04-09": {"input": 0.01, "output": 0.03},
            
            # GPT-4
            "gpt-4": {"input": 0.03, "output": 0.06},
            "gpt-4-32k": {"input": 0.06, "output": 0.12},
            "gpt-4-0613": {"input": 0.03, "output": 0.06},
            
            # GPT-3.5 Turbo
            "gpt-3.5-turbo": {"input": 0.0005, "output": 0.0015},
            "gpt-3.5-turbo-16k": {"input": 0.003, "output": 0.004},
            "gpt-3.5-turbo-0125": {"input": 0.0005, "output": 0.0015},
            
            # Embeddings
            "text-embedding-ada-002": {"input": 0.0001, "output": 0},
            "text-embedding-3-small": {"input": 0.00002, "output": 0},
            "text-embedding-3-large": {"input": 0.00013, "output": 0},
            
            # Legacy
            "text-davinci-003": {"input": 0.02, "output": 0.02},
            "code-davinci-002": {"input": 0.02, "output": 0.02},
        }
        
        models_with_pricing = []
        for model in models.data:
            model_id = model.id
            pricing = pricing_info.get(model_id, {
                "input": 0, 
                "output": 0, 
                "note": "Tarif non disponible - v√©rifiez sur openai.com/pricing"
            })
            
            models_with_pricing.append({
                "id": model_id,
                "created": model.created,
                "owned_by": model.owned_by,
                "pricing_per_1k_tokens": pricing
            })
        
        return {
            "status": "success",
            "models": models_with_pricing,
            "last_updated": datetime.now().isoformat(),
            "note": "Tarifs au 15 ao√ªt 2025 - v√©rifiez sur https://openai.com/pricing pour les derni√®res mises √† jour"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration mod√®les: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/health")
async def health_check():
    """Test de connectivit√© avec l'API OpenAI"""
    try:
        api_key = _get_api_key()
        organization_id = get_openai_organization_id()
        
        # Test de connectivit√© basique
        headers = {"Authorization": f"Bearer {api_key}"}
        if organization_id:
            headers["OpenAI-Organization"] = organization_id
        
        # Test avec l'endpoint models
        test_response = requests.get(
            "https://api.openai.com/v1/models", 
            headers=headers,
            timeout=10
        )
        
        return {
            "status": "healthy" if test_response.status_code == 200 else "degraded",
            "api_key_configured": bool(api_key),
            "organization_id_configured": bool(organization_id),
            "api_connectivity": test_response.status_code == 200,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }