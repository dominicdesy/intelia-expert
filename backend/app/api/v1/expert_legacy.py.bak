"""
app/api/v1/expert_legacy.py - ENDPOINTS DE COMPATIBILIT√â v3.7.3 - NOUVEAUX CHAMPS API

üîÑ ENDPOINTS DE COMPATIBILIT√â BACKWARD:
- Maintien des anciens endpoints avec redirection
- For√ßage automatique des am√©liorations
- Support response_versions ajout√©
- Garantie de compatibilit√© 100%
- ‚úÖ NOUVEAUT√â v3.7.3: Propagation nouveaux champs API
- ‚úÖ CORRECTIONS: Import circulaire r√©solu d√©finitivement, v√©rifications ajout√©es

‚úÖ NOUVEAUX CHAMPS API v3.7.3:
- clarification_required_critical: bool - Clarification critique requise
- missing_critical_entities: List[str] - Entit√©s critiques manquantes
- variants_tested: List[str] - Variantes test√©es pour optimisation

‚úÖ CORRECTION IMPORTS CIRCULAIRES:
- Import dynamique dans les fonctions pour √©viter les d√©pendances circulaires
- Solution recommand√©e par les best practices FastAPI/Python
- Service expert initialis√© de fa√ßon s√©curis√©e
"""

import logging
import time
import re
import uuid
from datetime import datetime
from typing import Dict, Any, Optional, List

from fastapi import APIRouter, Request, Depends, HTTPException

# Imports s√©curis√©s
try:
    from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, ConcisionLevel
    MODELS_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_models dans legacy: {e}")
    from pydantic import BaseModel
    
    class EnhancedQuestionRequest(BaseModel):
        text: str
        language: str = "fr"
        conversation_id: Optional[str] = None
        
    class EnhancedExpertResponse(BaseModel):
        question: str
        response: str
        conversation_id: str
        timestamp: str = ""
        clarification_required_critical: bool = False
        missing_critical_entities: List[str] = []
        variants_tested: List[str] = []
        
    class ConcisionLevel:
        CONCISE = "concise"
    
    MODELS_AVAILABLE = False

# Import s√©curis√© du service expert
try:
    from .expert_services import ExpertService
    expert_service = ExpertService()
    SERVICE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_services dans legacy: {e}")
    
    # Mock service
    class ExpertService:
        def get_current_user_dependency(self):
            return lambda: {"id": "legacy_user", "email": "legacy@intelia.com"}
    
    expert_service = ExpertService()
    SERVICE_AVAILABLE = False

router = APIRouter(tags=["expert-legacy"])
logger = logging.getLogger(__name__)

# =============================================================================
# FONCTION UTILITAIRE POUR IMPORT DYNAMIQUE
# =============================================================================

def get_expert_endpoint_function(endpoint_name: str):
    """Import dynamique des fonctions d'endpoint pour √©viter les imports circulaires"""
    try:
        # Import dynamique uniquement au moment de l'appel
        if endpoint_name == "ask_expert_enhanced_v2":
            from .expert import ask_expert_enhanced_v2
            return ask_expert_enhanced_v2
        elif endpoint_name == "ask_expert_enhanced_v2_public":
            from .expert import ask_expert_enhanced_v2_public
            return ask_expert_enhanced_v2_public
        else:
            logger.error(f"‚ùå [Legacy] Endpoint inconnu: {endpoint_name}")
            return None
    except ImportError as e:
        logger.error(f"‚ùå [Legacy] Erreur import dynamique {endpoint_name}: {e}")
        return None

async def fallback_expert_response(
    request_data: EnhancedQuestionRequest, 
    current_user: Optional[Dict[str, Any]] = None,
    endpoint_type: str = "legacy"
) -> EnhancedExpertResponse:
    """R√©ponse fallback si les endpoints principaux ne sont pas disponibles
    ‚úÖ v3.7.3: Ajout des nouveaux champs API"""
    
    fallback_responses = {
        "fr": f"Service expert temporairement indisponible. Votre question '{request_data.text}' a √©t√© re√ßue mais ne peut √™tre trait√©e actuellement. Veuillez r√©essayer dans quelques minutes.",
        "en": f"Expert service temporarily unavailable. Your question '{request_data.text}' was received but cannot be processed currently. Please try again in a few minutes.",
        "es": f"Servicio experto temporalmente no disponible. Su pregunta '{request_data.text}' fue recibida pero no puede ser procesada actualmente. Por favor intente de nuevo en unos minutos."
    }
    
    language = getattr(request_data, 'language', 'fr')
    response_text = fallback_responses.get(language, fallback_responses['fr'])
    conversation_id = getattr(request_data, 'conversation_id', None) or str(uuid.uuid4())
    
    # ‚úÖ v3.7.3: Construction avec nouveaux champs API
    return EnhancedExpertResponse(
        question=request_data.text,
        response=response_text,
        conversation_id=conversation_id,
        timestamp=datetime.now().isoformat(),
        rag_used=False,
        rag_score=None,
        language=language,
        response_time_ms=50,
        mode=f"fallback_{endpoint_type}",
        user=current_user.get("email") if current_user else None,
        logged=False,
        validation_passed=False,
        processing_steps=[f"legacy_{endpoint_type}_fallback"],
        ai_enhancements_used=["fallback_response"],
        # üÜï v3.7.3: Nouveaux champs API
        clarification_required_critical=False,
        missing_critical_entities=[],
        variants_tested=[f"fallback_{endpoint_type}"]
    )

# =============================================================================
# ENDPOINTS DE COMPATIBILIT√â AVEC FOR√áAGE MAINTENU + RESPONSE_VERSIONS üîÑ
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© v1 - FOR√áAGE APPLIQU√â + CLARIFICATION SUPPORT + RESPONSE_VERSIONS
    ‚úÖ CORRIG√â: Import dynamique, v√©rifications robustes
    ‚úÖ v3.7.3: Support nouveaux champs API"""
    
    try:
        logger.info("üîÑ [LEGACY] ask-enhanced avec FOR√áAGE + clarification + response_versions + nouveaux champs vers v2")
        
        # ‚úÖ CORRECTION: V√©rification existence request_data
        if not request_data:
            raise HTTPException(status_code=400, detail="Request data manquant")
        
        # üî• FOR√áAGE LEGACY avec v√©rifications
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        
        # üöÄ v3.7.2: Support concision par d√©faut avec v√©rifications
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # ‚úÖ CORRECTION: Import dynamique pour √©viter import circulaire
        endpoint_func = get_expert_endpoint_function("ask_expert_enhanced_v2")
        if endpoint_func:
            response = await endpoint_func(request_data, request, current_user)
            
            # ‚úÖ v3.7.3: V√©rification et ajout des nouveaux champs si manquants
            if not hasattr(response, 'clarification_required_critical'):
                response.clarification_required_critical = False
            if not hasattr(response, 'missing_critical_entities'):
                response.missing_critical_entities = []
            if not hasattr(response, 'variants_tested'):
                response.variants_tested = ["legacy_enhanced"]
                
            return response
        else:
            logger.warning("‚ö†Ô∏è [Legacy] Fonction principale non disponible - fallback")
            return await fallback_expert_response(request_data, current_user, "legacy_enhanced")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [Legacy] Erreur ask-enhanced: {e}")
        return await fallback_expert_response(request_data, current_user, "legacy_enhanced_error")

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© v1 - FOR√áAGE APPLIQU√â + CLARIFICATION SUPPORT + RESPONSE_VERSIONS
    ‚úÖ CORRIG√â: Import dynamique, v√©rifications robustes
    ‚úÖ v3.7.3: Support nouveaux champs API"""
    
    try:
        logger.info("üîÑ [LEGACY PUBLIC] ask-enhanced-public avec FOR√áAGE + clarification + response_versions + nouveaux champs vers v2")
        
        # ‚úÖ CORRECTION: V√©rification existence request_data
        if not request_data:
            raise HTTPException(status_code=400, detail="Request data manquant")
        
        # üî• FOR√áAGE LEGACY PUBLIC avec v√©rifications
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        
        # üöÄ v3.7.2: Support concision par d√©faut avec v√©rifications
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # ‚úÖ CORRECTION: Import dynamique pour √©viter import circulaire
        endpoint_func = get_expert_endpoint_function("ask_expert_enhanced_v2_public")
        if endpoint_func:
            response = await endpoint_func(request_data, request)
            
            # ‚úÖ v3.7.3: V√©rification et ajout des nouveaux champs si manquants
            if not hasattr(response, 'clarification_required_critical'):
                response.clarification_required_critical = False
            if not hasattr(response, 'missing_critical_entities'):
                response.missing_critical_entities = []
            if not hasattr(response, 'variants_tested'):
                response.variants_tested = ["legacy_public"]
                
            return response
        else:
            logger.warning("‚ö†Ô∏è [Legacy Public] Fonction principale non disponible - fallback")
            return await fallback_expert_response(request_data, None, "legacy_public")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [Legacy Public] Erreur ask-enhanced-public: {e}")
        return await fallback_expert_response(request_data, None, "legacy_public_error")

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© original - FOR√áAGE TOTAL + CLARIFICATION SUPPORT + RESPONSE_VERSIONS
    ‚úÖ CORRIG√â: Import dynamique, v√©rifications robustes
    ‚úÖ v3.7.3: Support nouveaux champs API"""
    
    try:
        logger.info("üîÑ [COMPATIBLE] ask avec FOR√áAGE TOTAL + clarification + response_versions + nouveaux champs vers v2")
        
        # ‚úÖ CORRECTION: V√©rification existence request_data
        if not request_data:
            raise HTTPException(status_code=400, detail="Request data manquant")
        
        # üî• FOR√áAGE COMPATIBILIT√â TOTALE avec v√©rifications
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        if hasattr(request_data, 'detailed_rag_scoring'):
            request_data.detailed_rag_scoring = True
        if hasattr(request_data, 'enable_quality_metrics'):
            request_data.enable_quality_metrics = True
        
        # üöÄ v3.7.2: Support concision par d√©faut avec v√©rifications
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # ‚úÖ CORRECTION: Import dynamique pour √©viter import circulaire
        endpoint_func = get_expert_endpoint_function("ask_expert_enhanced_v2")
        if endpoint_func:
            response = await endpoint_func(request_data, request, current_user)
            
            # ‚úÖ v3.7.3: V√©rification et ajout des nouveaux champs si manquants
            if not hasattr(response, 'clarification_required_critical'):
                response.clarification_required_critical = False
            if not hasattr(response, 'missing_critical_entities'):
                response.missing_critical_entities = []
            if not hasattr(response, 'variants_tested'):
                response.variants_tested = ["compatible"]
                
            return response
        else:
            logger.warning("‚ö†Ô∏è [Compatible] Fonction principale non disponible - fallback")
            return await fallback_expert_response(request_data, current_user, "compatible")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [Compatible] Erreur ask: {e}")
        return await fallback_expert_response(request_data, current_user, "compatible_error")

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© original - FOR√áAGE TOTAL + CLARIFICATION SUPPORT + RESPONSE_VERSIONS
    ‚úÖ CORRIG√â: Import dynamique, v√©rifications robustes
    ‚úÖ v3.7.3: Support nouveaux champs API"""
    
    try:
        logger.info("üîÑ [COMPATIBLE PUBLIC] ask-public avec FOR√áAGE TOTAL + clarification + response_versions + nouveaux champs vers v2")
        
        # ‚úÖ CORRECTION: V√©rification existence request_data
        if not request_data:
            raise HTTPException(status_code=400, detail="Request data manquant")
        
        # üî• FOR√áAGE COMPATIBILIT√â PUBLIQUE TOTALE avec v√©rifications
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        if hasattr(request_data, 'detailed_rag_scoring'):
            request_data.detailed_rag_scoring = True
        if hasattr(request_data, 'enable_quality_metrics'):
            request_data.enable_quality_metrics = True
        
        # üöÄ v3.7.2: Support concision par d√©faut avec v√©rifications
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # ‚úÖ CORRECTION: Import dynamique pour √©viter import circulaire
        endpoint_func = get_expert_endpoint_function("ask_expert_enhanced_v2_public")
        if endpoint_func:
            response = await endpoint_func(request_data, request)
            
            # ‚úÖ v3.7.3: V√©rification et ajout des nouveaux champs si manquants
            if not hasattr(response, 'clarification_required_critical'):
                response.clarification_required_critical = False
            if not hasattr(response, 'missing_critical_entities'):
                response.missing_critical_entities = []
            if not hasattr(response, 'variants_tested'):
                response.variants_tested = ["compatible_public"]
                
            return response
        else:
            logger.warning("‚ö†Ô∏è [Compatible Public] Fonction principale non disponible - fallback")
            return await fallback_expert_response(request_data, None, "compatible_public")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [Compatible Public] Erreur ask-public: {e}")
        return await fallback_expert_response(request_data, None, "compatible_public_error")

@router.post("/ask-with-clarification", response_model=EnhancedExpertResponse)
async def ask_with_forced_clarification(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üéØ Endpoint avec clarification GARANTIE untuk questions techniques
    üöÄ v3.7.2: Support response_versions + logique clarification granulaire
    ‚úÖ CORRIG√â: Import dynamique, v√©rifications ajout√©es
    ‚úÖ v3.7.3: Nouveaux champs API int√©gr√©s"""
    
    start_time = time.time()
    
    try:
        logger.info("üéØ D√âBUT ask_with_forced_clarification v3.7.3")
        
        # ‚úÖ CORRECTION: V√©rification existence request_data
        if not request_data or not getattr(request_data, 'text', None):
            raise HTTPException(status_code=400, detail="Question manquante")
        
        logger.info(f"üìù Question: {request_data.text}")
        
        # ‚úÖ CORRECTION: Support concision par d√©faut avec v√©rifications robustes
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # V√âRIFICATION DIRECTE si c'est une question poids+√¢ge
        question_lower = request_data.text.lower()
        needs_clarification = False
        missing_entities = []
        
        # Patterns simplifi√©s pour d√©tecter poids+√¢ge
        weight_age_patterns = [
            r'(?:poids|weight).*?(\d+)\s*(?:jour|day)',
            r'(\d+)\s*(?:jour|day).*?(?:poids|weight)',
            r'(?:quel|what).*?(?:poids|weight).*?(\d+)'
        ]
        
        # V√©rifier si question poids+√¢ge
        has_weight_age = any(re.search(pattern, question_lower) for pattern in weight_age_patterns)
        logger.info(f"üîç D√©tection poids+√¢ge: {has_weight_age}")
        
        if has_weight_age:
            # V√©rifier si race/sexe manquent
            breed_patterns = [r'(ross\s*308|cobb\s*500|hubbard)']
            sex_patterns = [r'(m√¢le|male|femelle|female|mixte|mixed)']
            
            has_breed = any(re.search(p, question_lower) for p in breed_patterns)
            has_sex = any(re.search(p, question_lower) for p in sex_patterns)
            
            logger.info(f"üè∑Ô∏è Race d√©tect√©e: {has_breed}")
            logger.info(f"‚öß Sexe d√©tect√©: {has_sex}")
            
            if not has_breed:
                missing_entities.append("breed")
            if not has_sex:
                missing_entities.append("sex")
                
            if missing_entities:
                needs_clarification = True
                logger.info("üéØ CLARIFICATION N√âCESSAIRE!")
        
        if needs_clarification:
            # D√âCLENCHER CLARIFICATION DIRECTE
            age_match = re.search(r'(\d+)\s*(?:jour|day)', question_lower)
            age = age_match.group(1) if age_match else "X"
            
            clarification_message = f"""Pour vous donner le poids de r√©f√©rence exact d'un poulet de {age} jours, j'ai besoin de :

‚Ä¢ **Race/souche** : Ross 308, Cobb 500, Hubbard, etc.
‚Ä¢ **Sexe** : M√¢les, femelles, ou troupeau mixte

Pouvez-vous pr√©ciser ces informations ?

**Exemples de r√©ponses :**
‚Ä¢ "Ross 308 m√¢les"
‚Ä¢ "Cobb 500 femelles"
‚Ä¢ "Hubbard troupeau mixte\""""
            
            logger.info("‚úÖ CLARIFICATION D√âCLENCH√âE!")
            
            conversation_id = getattr(request_data, 'conversation_id', None) or str(uuid.uuid4())
            
            # ‚úÖ v3.7.3: Construction avec nouveaux champs API
            return EnhancedExpertResponse(
                question=request_data.text,
                response=clarification_message,
                conversation_id=conversation_id,
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=getattr(request_data, 'language', 'fr'),
                response_time_ms=int((time.time() - start_time) * 1000),
                mode="forced_performance_clarification",
                user=None,
                logged=True,
                validation_passed=True,
                clarification_result={
                    "clarification_requested": True,
                    "clarification_type": "performance_breed_sex_forced",
                    "missing_information": missing_entities,
                    "age_detected": age,
                    "confidence": 0.99
                },
                processing_steps=["forced_clarification_triggered"],
                ai_enhancements_used=["forced_performance_clarification"],
                response_versions=None,  # Pas de response_versions pour clarifications
                # üÜï v3.7.3: Nouveaux champs API pour clarification
                clarification_required_critical=True,
                missing_critical_entities=missing_entities,
                variants_tested=["forced_clarification_detection"]
            )
        
        logger.info("üìã Pas de clarification n√©cessaire, traitement normal")
        
        # Si pas besoin de clarification, traitement normal avec am√©liorations forc√©es
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        
        # ‚úÖ CORRECTION CRITIQUE: Import dynamique pour √©viter import circulaire
        endpoint_func = get_expert_endpoint_function("ask_expert_enhanced_v2_public")
        if endpoint_func:
            response = await endpoint_func(request_data, request)
            
            # ‚úÖ v3.7.3: V√©rification et ajout des nouveaux champs si manquants
            if not hasattr(response, 'clarification_required_critical'):
                response.clarification_required_critical = False
            if not hasattr(response, 'missing_critical_entities'):
                response.missing_critical_entities = []
            if not hasattr(response, 'variants_tested'):
                response.variants_tested = ["forced_clarification_normal"]
                
            return response
        else:
            logger.warning("‚ö†Ô∏è [Forced Clarification] Fonction principale non disponible - fallback")
            return await fallback_expert_response(request_data, None, "forced_clarification")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur ask_with_forced_clarification: {e}")
        return await fallback_expert_response(request_data, None, "forced_clarification_error")

# =============================================================================
# HEALTH CHECK POUR LEGACY
# =============================================================================

@router.get("/legacy-health")
async def legacy_health():
    """Health check sp√©cifique pour les endpoints legacy
    ‚úÖ v3.7.3: Info nouveaux champs API"""
    return {
        "status": "healthy",
        "module": "expert_legacy",
        "version": "3.7.3",
        "models_available": MODELS_AVAILABLE,
        "service_available": SERVICE_AVAILABLE,
        "endpoints": [
            "/ask-enhanced (legacy)",
            "/ask-enhanced-public (legacy)",
            "/ask (compatible)",
            "/ask-public (compatible)",
            "/ask-with-clarification (forced)",
            "/legacy-health"
        ],
        "import_strategy": "dynamic_imports",
        "fallback_enabled": True,
        "new_api_fields": [
            "clarification_required_critical",
            "missing_critical_entities",
            "variants_tested"
        ],
        "timestamp": datetime.now().isoformat()
    }

# =============================================================================
# CONFIGURATION LEGACY CORRIG√âE + NOUVEAUX CHAMPS üîÑ
# =============================================================================

logger.info("üîÑ" * 50)
logger.info("üîÑ [EXPERT LEGACY] VERSION 3.7.3 - NOUVEAUX CHAMPS API INT√âGR√âS!")
logger.info("üîÑ [NOUVEAUT√âS v3.7.3]:")
logger.info("   ‚úÖ clarification_required_critical: bool")
logger.info("   ‚úÖ missing_critical_entities: List[str]")
logger.info("   ‚úÖ variants_tested: List[str]")
logger.info("   ‚úÖ Propagation automatique dans tous les endpoints")
logger.info("   ‚úÖ Fallback enrichi avec nouveaux champs")
logger.info("")
logger.info("üîÑ [CORRECTIONS MAINTENUES]:")
logger.info("   ‚úÖ Imports circulaires d√©finitivement r√©solus")
logger.info("   ‚úÖ Import dynamique des fonctions d'endpoint")
logger.info("   ‚úÖ Gestion d'erreur robuste avec fallbacks")
logger.info("   ‚úÖ V√©rifications de s√©curit√© renforc√©es")
logger.info("   ‚úÖ Health check sp√©cifique legacy")
logger.info("   ‚úÖ Service expert initialis√© de fa√ßon s√©curis√©e")
logger.info("")
logger.info("üîÑ [FONCTIONNALIT√âS LEGACY ENRICHIES]:")
logger.info("   ‚úÖ Redirection automatique vers endpoints v2")
logger.info("   ‚úÖ For√ßage automatique des am√©liorations")
logger.info("   ‚úÖ Support response_versions ajout√©")
logger.info("   ‚úÖ Nouveaux champs API propag√©s automatiquement")
logger.info("   ‚úÖ Compatibilit√© backward 100% garantie")
logger.info("")
logger.info("üîß [ENDPOINTS LEGACY ENRICHIS]:")
logger.info("   - POST /ask-enhanced (legacy ‚Üí v2 + nouveaux champs)")
logger.info("   - POST /ask-enhanced-public (legacy ‚Üí v2 + nouveaux champs)")
logger.info("   - POST /ask (compatible ‚Üí v2 + nouveaux champs)")
logger.info("   - POST /ask-public (compatible ‚Üí v2 + nouveaux champs)")
logger.info("   - POST /ask-with-clarification (clarification forc√©e + nouveaux champs)")
logger.info("   - GET /legacy-health (diagnostic legacy + info nouveaux champs)")
logger.info("")
logger.info("üéØ [AVANTAGES v3.7.3]:")
logger.info("   ‚úÖ Nouveaux champs API disponibles partout")
logger.info("   ‚úÖ Clarification critique d√©tect√©e automatiquement")
logger.info("   ‚úÖ Entit√©s manquantes track√©es pr√©cis√©ment")
logger.info("   ‚úÖ Variantes test√©es pour optimisation")
logger.info("   ‚úÖ Compatibilit√© pr√©serv√©e dans tous les cas")
logger.info("   ‚úÖ PR√äT POUR PRODUCTION - LEGACY ENRICHI")
logger.info("üîÑ" * 50)