"""
app/api/v1/expert_models.py - MODÈLES PYDANTIC POUR EXPERT SYSTEM

Tous les modèles de données pour le système expert
VERSION AMÉLIORÉE : Ajout des nouvelles fonctionnalités API
🧨 CORRECTION v3.6.1: Ajout du champ clarification_processing
"""

from typing import Optional, List, Dict, Any, Literal
from pydantic import BaseModel, Field, ConfigDict
from enum import Enum

# =============================================================================
# NOUVEAUX ENUMS POUR LES AMÉLIORATIONS
# =============================================================================

class ResponseFormat(str, Enum):
    """Formats de réponse attendus"""
    TEXT = "text"
    TABLE = "table"  
    SUMMARY = "summary"
    PLAN = "plan"
    COMPARISON = "comparison"
    NUMERICAL_DATA = "numerical_data"

class ConfidenceLevel(str, Enum):
    """Niveaux de confiance"""
    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"

class QuestionClarity(str, Enum):
    """Niveaux de clarté des questions"""
    CLEAR = "clear"
    PARTIALLY_CLEAR = "partially_clear"
    UNCLEAR = "unclear"
    VERY_UNCLEAR = "very_unclear"

# =============================================================================
# NOUVEAUX MODÈLES POUR LES AMÉLIORATIONS
# =============================================================================

class ResponsePreferences(BaseModel):
    """Préférences de formatage de réponse"""
    include_ranges: bool = True
    show_male_female_split: bool = False
    include_confidence_scores: bool = False
    preferred_units: Optional[str] = Field("metric", description="metric/imperial")
    detail_level: str = Field("standard", description="minimal/standard/detailed")

    model_config = ConfigDict(extra="ignore")

class DocumentRelevance(BaseModel):
    """Score de pertinence détaillé du document RAG"""
    score: float = Field(..., ge=0.0, le=1.0, description="Score de pertinence du document")
    source_document: Optional[str] = Field(None, description="Nom du document source")
    matched_section: Optional[str] = Field(None, description="Section correspondante")
    confidence_level: ConfidenceLevel = Field(ConfidenceLevel.MEDIUM, description="Niveau de confiance")
    chunk_used: Optional[str] = Field(None, description="Extrait utilisé pour la réponse")
    alternative_documents: Optional[List[str]] = Field(None, description="Documents alternatifs considérés")
    search_query_used: Optional[str] = Field(None, description="Requête de recherche utilisée")

    model_config = ConfigDict(extra="ignore")

class ContextCoherence(BaseModel):
    """Vérification de cohérence entre contexte et RAG"""
    entities_match: bool = Field(..., description="Les entités contextuelles correspondent au RAG")
    missing_critical_info: List[str] = Field(default_factory=list, description="Informations critiques manquantes")
    rag_assumptions: Dict[str, str] = Field(default_factory=dict, description="Hypothèses faites par le RAG")
    coherence_score: float = Field(..., ge=0.0, le=1.0, description="Score de cohérence global")
    warnings: List[str] = Field(default_factory=list, description="Alertes de cohérence")
    recommended_clarification: Optional[str] = Field(None, description="Clarification recommandée")
    entities_used_in_rag: Dict[str, Any] = Field(default_factory=dict, description="Entités utilisées par le RAG")

    model_config = ConfigDict(extra="ignore")

class VaguenessDetection(BaseModel):
    """Détection de questions floues ou imprécises"""
    is_vague: bool = Field(..., description="La question est-elle floue")
    vagueness_score: float = Field(..., ge=0.0, le=1.0, description="Score de flou (1.0 = très flou)")
    missing_specifics: List[str] = Field(default_factory=list, description="Éléments manquants")
    question_clarity: QuestionClarity = Field(QuestionClarity.UNCLEAR, description="Niveau de clarté")
    suggested_clarification: Optional[str] = Field(None, description="Clarification suggérée")
    actionable: bool = Field(True, description="La question peut-elle recevoir une réponse actionnable")
    detected_patterns: List[str] = Field(default_factory=list, description="Patterns de flou détectés")

    model_config = ConfigDict(extra="ignore")

class EnhancedFallbackDetails(BaseModel):
    """Détails enrichis pour les fallbacks"""
    failure_point: str = Field(..., description="Point d'échec dans le pipeline")
    last_known_entities: Dict[str, Any] = Field(default_factory=dict, description="Dernières entités extraites")
    confidence_at_failure: float = Field(..., ge=0.0, le=1.0, description="Confiance au moment de l'échec")
    rag_attempts: List[str] = Field(default_factory=list, description="Tentatives RAG effectuées")
    error_category: str = Field("unknown", description="Catégorie d'erreur")
    recovery_suggestions: List[str] = Field(default_factory=list, description="Suggestions de récupération")
    alternative_approaches: List[str] = Field(default_factory=list, description="Approches alternatives")
    technical_details: Optional[str] = Field(None, description="Détails techniques de l'erreur")

    model_config = ConfigDict(extra="ignore")

class QualityMetrics(BaseModel):
    """Métriques de qualité détaillées"""
    response_completeness: float = Field(..., ge=0.0, le=1.0, description="Complétude de la réponse")
    information_accuracy: float = Field(..., ge=0.0, le=1.0, description="Précision des informations")
    contextual_relevance: float = Field(..., ge=0.0, le=1.0, description="Pertinence contextuelle")
    user_satisfaction_prediction: float = Field(..., ge=0.0, le=1.0, description="Prédiction de satisfaction")
    response_length_appropriateness: float = Field(..., ge=0.0, le=1.0, description="Pertinence de la longueur")
    technical_accuracy: Optional[float] = Field(None, ge=0.0, le=1.0, description="Précision technique")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MODÈLES DE REQUÊTE AMÉLIORÉS
# =============================================================================

class EnhancedQuestionRequest(BaseModel):
    """Request model amélioré avec nouvelles fonctionnalités"""
    text: str = Field(..., min_length=1, max_length=5000)
    language: Optional[str] = Field("fr", description="Response language")
    speed_mode: Optional[str] = Field("balanced", description="Speed mode")
    
    # Contexte conversationnel (existant)
    conversation_id: Optional[str] = Field(None, description="Conversation ID")
    user_id: Optional[str] = Field(None, description="User ID")
    
    # Nouveaux champs pour clarification (existant)
    is_clarification_response: Optional[bool] = Field(False, description="Is this a response to clarification?")
    original_question: Optional[str] = Field(None, description="Original question if this is clarification response")
    clarification_context: Optional[Dict[str, Any]] = Field(None, description="Clarification context")
    
    # 🧨 AJOUT v3.6.1: Support clarification_entities
    clarification_entities: Optional[Dict[str, str]] = Field(None, description="Entités extraites (race, sexe)")
    
    force_reprocess: Optional[bool] = Field(False, description="Force reprocessing even if no clarification needed")

    # ✅ NOUVELLES FONCTIONNALITÉS
    expected_response_format: Optional[ResponseFormat] = Field(ResponseFormat.TEXT, description="Format de réponse attendu")
    response_preferences: Optional[ResponsePreferences] = Field(default_factory=ResponsePreferences, description="Préférences de réponse")
    enable_vagueness_detection: bool = Field(True, description="Activer la détection de questions floues")
    require_coherence_check: bool = Field(True, description="Exiger la vérification de cohérence")
    detailed_rag_scoring: bool = Field(False, description="Scoring RAG détaillé")
    enable_quality_metrics: bool = Field(False, description="Activer les métriques de qualité")
    debug_mode: bool = Field(False, description="Mode debug pour développeurs")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_default=True,
        extra="ignore"
    )

class FeedbackRequest(BaseModel):
    """Feedback model standard"""
    rating: str = Field(..., description="Rating: positive, negative, neutral")
    comment: Optional[str] = Field(None, description="Optional comment")
    conversation_id: Optional[str] = Field(None, description="Conversation ID")
    quality_feedback: Optional[Dict[str, float]] = Field(None, description="Feedback détaillé sur la qualité")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        extra="ignore"
    )

    def model_post_init(self, __context) -> None:
        if self.rating not in ['positive', 'negative', 'neutral']:
            self.rating = 'neutral'

# =============================================================================
# MODÈLES DE RÉPONSE AMÉLIORÉS
# =============================================================================

class EnhancedExpertResponse(BaseModel):
    """Response model amélioré avec toutes les nouvelles fonctionnalités"""
    
    # ✅ CHAMPS EXISTANTS
    question: str
    response: str
    conversation_id: str
    rag_used: bool
    rag_score: Optional[float] = None
    timestamp: str
    language: str
    response_time_ms: int
    mode: str
    user: Optional[str] = None
    logged: bool = False
    validation_passed: Optional[bool] = None
    validation_confidence: Optional[float] = None
    
    # ✅ CHAMPS EXISTANTS AMÉLIORÉS
    clarification_result: Optional[Dict[str, Any]] = None
    reprocessed_after_clarification: Optional[bool] = None
    conversation_state: Optional[str] = None
    extracted_entities: Optional[Dict[str, Any]] = None
    confidence_overall: Optional[float] = None
    processing_steps: Optional[List[str]] = None
    ai_enhancements_used: Optional[List[str]] = None
    
    # 🧨 CORRECTION v3.6.1: Ajout du champ clarification_processing
    clarification_processing: Optional[Dict[str, Any]] = Field(None, description="Métadonnées traitement clarification")
    
    # ✅ NOUVELLES FONCTIONNALITÉS
    document_relevance: Optional[DocumentRelevance] = Field(None, description="Score de pertinence détaillé")
    context_coherence: Optional[ContextCoherence] = Field(None, description="Vérification de cohérence")
    vagueness_detection: Optional[VaguenessDetection] = Field(None, description="Détection de questions floues")
    fallback_details: Optional[EnhancedFallbackDetails] = Field(None, description="Détails de fallback enrichis")
    response_format_applied: Optional[str] = Field(None, description="Format appliqué à la réponse")
    quality_metrics: Optional[QualityMetrics] = Field(None, description="Métriques de qualité détaillées")
    
    # ✅ INFORMATIONS DE DEBUG (si debug_mode activé)
    debug_info: Optional[Dict[str, Any]] = Field(None, description="Informations de debug")
    rag_debug: Optional[Dict[str, Any]] = Field(None, description="Debug détaillé du RAG")
    performance_breakdown: Optional[Dict[str, int]] = Field(None, description="Breakdown des temps de traitement")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MODÈLES UTILITAIRES
# =============================================================================

class ValidationResult(BaseModel):
    """Résultat de validation"""
    is_valid: bool
    rejection_message: str = ""
    confidence: float = 0.0
    validation_details: Optional[Dict[str, Any]] = None

    model_config = ConfigDict(extra="ignore")

class ProcessingContext(BaseModel):
    """Contexte de traitement"""
    user_id: str
    conversation_id: str
    request_ip: str
    processing_steps: List[str] = Field(default_factory=list)
    ai_enhancements_used: List[str] = Field(default_factory=list)
    start_time: Optional[float] = None
    enhancement_flags: Dict[str, bool] = Field(default_factory=dict)

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MODÈLES DE STATS AMÉLIORÉS
# =============================================================================

class SystemStats(BaseModel):
    """Statistiques système"""
    system_available: bool
    timestamp: str
    components: Dict[str, bool]
    enhanced_capabilities: List[str]
    enhanced_endpoints: List[str]
    quality_metrics_enabled: bool = False
    debug_mode_available: bool = False

    model_config = ConfigDict(extra="ignore")

class TestResult(BaseModel):
    """Résultat de test"""
    question: str
    conversation_id: str
    user_id: str
    timestamp: str
    components_tested: Dict[str, Any]
    test_successful: bool
    errors: List[str]
    enhancement_results: Optional[Dict[str, Any]] = None

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MODÈLES POUR RÉPONSES SPÉCIALISÉES
# =============================================================================

class VaguenessResponse(BaseModel):
    """Réponse spécialisée pour questions floues"""
    question: str
    response: str
    conversation_id: str
    vagueness_detection: VaguenessDetection
    suggested_improvements: List[str]
    example_questions: List[str]
    timestamp: str
    language: str
    response_time_ms: int

    model_config = ConfigDict(extra="ignore")

class CoherenceWarningResponse(BaseModel):
    """Réponse avec avertissements de cohérence"""
    original_response: str
    coherence_warnings: List[str]
    suggested_clarifications: List[str]
    confidence_impact: float
    should_ask_clarification: bool

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# CONFIGURATION ET LOGGING
# =============================================================================

import logging
logger = logging.getLogger(__name__)

logger.info("✅ [Expert Models] Modèles Pydantic chargés avec améliorations API")
logger.info("🆕 [Expert Models] Nouvelles fonctionnalités disponibles:")
logger.info("   - 📊 DocumentRelevance: Scoring RAG détaillé")
logger.info("   - 🔍 ContextCoherence: Vérification de cohérence")
logger.info("   - 🎯 VaguenessDetection: Détection de questions floues")
logger.info("   - 🔧 EnhancedFallbackDetails: Fallback enrichi")
logger.info("   - 📈 QualityMetrics: Métriques de qualité")
logger.info("   - 🐛 Debug mode: Support pour développeurs")
logger.info("   - 🧨 clarification_processing: Support métadonnées clarification v3.6.1")