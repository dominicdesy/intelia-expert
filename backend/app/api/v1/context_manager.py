# app/api/v1/context_manager.py
"""
Context Manager - Gestionnaire centralis√© du contexte conversationnel

üéØ OBJECTIF: √âliminer les r√©cup√©rations multiples incoh√©rentes du contexte
‚úÖ R√âSOUT: get_context_for_rag() vs get_context_for_clarification() vs get_conversation_context()
üöÄ IMPACT: +15% de coh√©rence conversationnelle
‚úÖ CORRECTION: Ajout de la m√©thode save_unified_context manquante

PRINCIPE:
- R√©cup√©ration unique du contexte m√©moire
- Cache intelligent pour √©viter les acc√®s redondants
- Interface unifi√©e pour tous les modules  
- Vues sp√©cialis√©es selon le besoin (RAG, clarification, classification)

UTILISATION:
```python
context_manager = ContextManager()
context = context_manager.get_unified_context(conversation_id, type="rag")
# Tous les modules utilisent exactement le m√™me contexte
```
"""

import logging
import sqlite3
import json
import time
from typing import Dict, Any, Optional, List, Union
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from threading import Lock

logger = logging.getLogger(__name__)

@dataclass
class UnifiedContext:
    """Structure unifi√©e pour tout le contexte conversationnel"""
    
    # Contexte conversationnel de base
    conversation_id: str
    last_interaction: Optional[datetime] = None
    
    # Historique des messages
    recent_messages: List[Dict[str, Any]] = None
    conversation_topic: Optional[str] = None
    
    # Entit√©s √©tablies dans la conversation
    established_breed: Optional[str] = None
    established_age: Optional[int] = None
    established_sex: Optional[str] = None
    established_weight: Optional[float] = None
    
    # Contexte s√©mantique  
    previous_questions: List[str] = None
    previous_answers: List[str] = None
    clarification_history: List[Dict[str, Any]] = None
    
    # Donn√©es de performance (pour contexte RAG)
    weight_data: Dict[str, Any] = None
    feeding_context: Dict[str, Any] = None
    health_context: Dict[str, Any] = None
    
    # M√©tadonn√©es
    context_age_minutes: float = 0.0
    confidence: float = 1.0
    cache_hit: bool = False
    
    def __post_init__(self):
        if self.recent_messages is None:
            self.recent_messages = []
        if self.previous_questions is None:
            self.previous_questions = []
        if self.previous_answers is None:
            self.previous_answers = []
        if self.clarification_history is None:
            self.clarification_history = []
        if self.weight_data is None:
            self.weight_data = {}
        if self.feeding_context is None:
            self.feeding_context = {}
        if self.health_context is None:
            self.health_context = {}
    
    def to_dict(self) -> Dict[str, Any]:
        """Conversion pour compatibilit√©"""
        data = asdict(self)
        # Convertir datetime vers string pour JSON
        if self.last_interaction:
            data['last_interaction'] = self.last_interaction.isoformat()
        return data
    
    def has_entities(self) -> bool:
        """V√©rifie si des entit√©s sont √©tablies"""
        return any([
            self.established_breed,
            self.established_age,
            self.established_sex,
            self.established_weight
        ])
    
    def get_context_summary(self) -> str:
        """R√©sum√© textuel du contexte pour logs"""
        parts = []
        
        if self.established_breed:
            parts.append(f"race={self.established_breed}")
        if self.established_age:
            parts.append(f"√¢ge={self.established_age}j")
        if self.established_sex:
            parts.append(f"sexe={self.established_sex}")
        if self.conversation_topic:
            parts.append(f"topic={self.conversation_topic}")
        
        return ", ".join(parts) if parts else "contexte vide"

class ContextManager:
    """Gestionnaire centralis√© du contexte avec cache intelligent"""
    
    def __init__(self, db_path: str = "conversations.db", cache_duration_minutes: int = 5):
        """
        Initialisation du gestionnaire
        
        Args:
            db_path: Chemin vers la base SQLite
            cache_duration_minutes: Dur√©e de validit√© du cache
        """
        
        self.db_path = db_path
        self.cache_duration = cache_duration_minutes
        
        # Cache en m√©moire avec verrou thread-safe
        self._cache: Dict[str, UnifiedContext] = {}
        self._cache_lock = Lock()
        self._last_cleanup = time.time()
        
        # Statistiques pour monitoring
        self.stats = {
            "context_retrievals": 0,
            "cache_hits": 0,
            "cache_misses": 0,
            "database_queries": 0,
            "context_creations": 0,
            "context_updates": 0,
            "cache_cleanups": 0
        }
        
        # Initialiser la base de donn√©es
        self._init_database()
        
        logger.info("üß† [ContextManager] Gestionnaire centralis√© initialis√©")
        logger.info(f"   Base de donn√©es: {self.db_path}")
        logger.info(f"   Cache duration: {self.cache_duration} minutes")
    
    def get_unified_context(
        self, 
        conversation_id: str, 
        context_type: str = "general",
        max_chars: int = 800
    ) -> UnifiedContext:
        """
        Point d'entr√©e principal - r√©cup√©ration unifi√©e du contexte
        
        Args:
            conversation_id: ID de la conversation
            context_type: Type de contexte ("rag", "clarification", "classification", "general")
            max_chars: Limite de caract√®res pour le contexte textuel
            
        Returns:
            UnifiedContext: Contexte complet et unifi√©
        """
        
        self.stats["context_retrievals"] += 1
        
        if not conversation_id:
            logger.debug("üîç [ContextManager] Pas de conversation_id, retour contexte vide")
            return UnifiedContext(conversation_id="")
        
        try:
            # Nettoyage p√©riodique du cache
            self._cleanup_cache_if_needed()
            
            # V√©rifier le cache d'abord
            cached_context = self._get_from_cache(conversation_id)
            if cached_context:
                self.stats["cache_hits"] += 1
                cached_context.cache_hit = True
                
                # Adapter selon le type demand√©
                adapted_context = self._adapt_context_for_type(cached_context, context_type, max_chars)
                
                logger.debug(f"üìã [ContextManager] Cache hit pour {conversation_id} (type: {context_type})")
                return adapted_context
            
            # Cache miss - r√©cup√©rer depuis la base
            self.stats["cache_misses"] += 1
            self.stats["database_queries"] += 1
            
            context = self._load_context_from_database(conversation_id)
            if not context:
                # Cr√©er nouveau contexte
                context = self._create_new_context(conversation_id)
                self.stats["context_creations"] += 1
            
            # Mettre en cache
            self._put_in_cache(conversation_id, context)
            
            # Adapter selon le type demand√©
            adapted_context = self._adapt_context_for_type(context, context_type, max_chars)
            
            logger.debug(f"üìã [ContextManager] Context charg√© depuis DB pour {conversation_id} (type: {context_type})")
            return adapted_context
            
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur r√©cup√©ration contexte: {e}")
            # Retourner contexte minimal en cas d'erreur
            return UnifiedContext(conversation_id=conversation_id)
    
    def update_context(
        self, 
        conversation_id: str, 
        new_message: Dict[str, Any] = None,
        entities: Dict[str, Any] = None,
        topic: str = None
    ) -> bool:
        """
        Met √† jour le contexte avec de nouvelles informations
        
        Args:
            conversation_id: ID de la conversation
            new_message: Nouveau message √† ajouter
            entities: Nouvelles entit√©s d√©tect√©es
            topic: Nouveau topic de conversation
            
        Returns:
            bool: Succ√®s de la mise √† jour
        """
        
        if not conversation_id:
            return False
        
        try:
            self.stats["context_updates"] += 1
            
            # R√©cup√©rer le contexte actuel
            context = self.get_unified_context(conversation_id)
            
            # Mettre √† jour avec nouvelles infos
            if new_message:
                context.recent_messages.append(new_message)
                # Garder seulement les 10 derniers messages
                context.recent_messages = context.recent_messages[-10:]
                
                # Extraire questions/r√©ponses
                if new_message.get('role') == 'user':
                    context.previous_questions.append(new_message.get('content', ''))
                    context.previous_questions = context.previous_questions[-5:]
                elif new_message.get('role') == 'assistant':
                    context.previous_answers.append(new_message.get('content', ''))
                    context.previous_answers = context.previous_answers[-5:]
            
            if entities:
                # Mettre √† jour entit√©s √©tablies
                if entities.get('breed') and not context.established_breed:
                    context.established_breed = entities['breed']
                if entities.get('breed_specific') and not context.established_breed:
                    context.established_breed = entities['breed_specific']
                if entities.get('age_days') and not context.established_age:
                    context.established_age = entities['age_days']
                if entities.get('sex') and not context.established_sex:
                    context.established_sex = entities['sex']
                if entities.get('weight_grams') and not context.established_weight:
                    context.established_weight = entities['weight_grams']
            
            if topic and not context.conversation_topic:
                context.conversation_topic = topic
            
            context.last_interaction = datetime.now()
            
            # Sauvegarder en base et cache
            self._save_context_to_database(context)
            self._put_in_cache(conversation_id, context)
            
            logger.debug(f"üíæ [ContextManager] Contexte mis √† jour: {conversation_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur mise √† jour contexte: {e}")
            return False
    
    def save_unified_context(
        self, 
        conversation_id: str, 
        context_data: Union[Dict[str, Any], object], 
        context_type: str = "general"
    ) -> bool:
        """
        ‚úÖ CORRECTION: M√©thode de compatibilit√© pour save_unified_context
        
        Cette m√©thode √©tait manquante et causait l'erreur dans smart_classifier.py
        Elle redirige vers update_context avec normalisation des donn√©es.
        
        Args:
            conversation_id: ID de la conversation
            context_data: Donn√©es du contexte √† sauvegarder (dict ou objet)
            context_type: Type de contexte
            
        Returns:
            bool: True si la sauvegarde a r√©ussi
        """
        try:
            # ‚úÖ CORRECTION: Normaliser context_data pour g√©rer diff√©rents types
            entities = {}
            topic = None
            
            if isinstance(context_data, dict):
                entities = context_data.copy()
                topic = entities.pop('topic', None) or entities.pop('conversation_topic', None)
            elif hasattr(context_data, '__dict__'):
                # Si c'est un objet avec des attributs
                try:
                    if hasattr(context_data, 'to_dict') and callable(getattr(context_data, 'to_dict')):
                        entities = context_data.to_dict()
                    else:
                        entities = context_data.__dict__.copy()
                    
                    topic = entities.pop('topic', None) or entities.pop('conversation_topic', None)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ContextManager] Erreur conversion objet: {e}")
                    entities = {}
            else:
                # Fallback pour autres types
                logger.warning(f"‚ö†Ô∏è [ContextManager] Type de donn√©es inattendu: {type(context_data)}")
                entities = {"raw_data": str(context_data)}
            
            # Utiliser update_context pour faire la sauvegarde
            success = self.update_context(
                conversation_id=conversation_id,
                entities=entities,
                topic=topic
            )
            
            if success:
                logger.info(f"‚úÖ [ContextManager] Contexte unifi√© sauvegard√©: {conversation_id} (type: {context_type})")
            else:
                logger.warning(f"‚ö†Ô∏è [ContextManager] √âchec sauvegarde contexte unifi√©: {conversation_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur save_unified_context: {e}")
            return False
    
    def _get_from_cache(self, conversation_id: str) -> Optional[UnifiedContext]:
        """R√©cup√©ration depuis le cache avec v√©rification d'expiration"""
        
        with self._cache_lock:
            if conversation_id not in self._cache:
                return None
            
            cached_context = self._cache[conversation_id]
            
            # V√©rifier expiration
            if cached_context.last_interaction:
                age_minutes = (datetime.now() - cached_context.last_interaction).total_seconds() / 60
                if age_minutes > self.cache_duration:
                    # Expir√©, supprimer du cache
                    del self._cache[conversation_id]
                    return None
                
                cached_context.context_age_minutes = age_minutes
            
            return cached_context
    
    def _put_in_cache(self, conversation_id: str, context: UnifiedContext):
        """Mise en cache thread-safe"""
        
        with self._cache_lock:
            self._cache[conversation_id] = context
    
    def _cleanup_cache_if_needed(self):
        """Nettoyage p√©riodique du cache (toutes les 10 minutes)"""
        
        current_time = time.time()
        if current_time - self._last_cleanup > 600:  # 10 minutes
            
            with self._cache_lock:
                expired_keys = []
                cutoff_time = datetime.now() - timedelta(minutes=self.cache_duration)
                
                for key, context in self._cache.items():
                    if context.last_interaction and context.last_interaction < cutoff_time:
                        expired_keys.append(key)
                
                for key in expired_keys:
                    del self._cache[key]
                
                if expired_keys:
                    self.stats["cache_cleanups"] += 1
                    logger.debug(f"üßπ [ContextManager] Cache nettoy√©: {len(expired_keys)} entr√©es expir√©es")
            
            self._last_cleanup = current_time
    
    def _adapt_context_for_type(
        self, 
        context: UnifiedContext, 
        context_type: str,
        max_chars: int
    ) -> UnifiedContext:
        """
        Adapte le contexte selon le type demand√©
        
        Types support√©s:
        - "rag": Contexte optimis√© pour recherche RAG
        - "clarification": Contexte pour g√©n√©ration de clarifications
        - "classification": Contexte pour classification intelligente  
        - "general": Contexte complet
        """
        
        if context_type == "rag":
            return self._adapt_for_rag(context, max_chars)
        elif context_type == "clarification":
            return self._adapt_for_clarification(context, max_chars)
        elif context_type == "classification":
            return self._adapt_for_classification(context, max_chars)
        else:
            return context  # Type "general" ou inconnu = contexte complet
    
    def _adapt_for_rag(self, context: UnifiedContext, max_chars: int) -> UnifiedContext:
        """Adapte le contexte pour recherche RAG (focus sur entit√©s et performance)"""
        
        # Cr√©er une copie adapt√©e
        rag_context = UnifiedContext(
            conversation_id=context.conversation_id,
            last_interaction=context.last_interaction,
            
            # Entit√©s √©tablies (priorit√© pour RAG)
            established_breed=context.established_breed,
            established_age=context.established_age,
            established_sex=context.established_sex,
            established_weight=context.established_weight,
            
            # Topic de conversation
            conversation_topic=context.conversation_topic,
            
            # Donn√©es de performance (essentielles pour RAG)
            weight_data=context.weight_data,
            feeding_context=context.feeding_context,
            
            # Historique limit√© pour RAG
            previous_questions=context.previous_questions[-2:] if context.previous_questions else [],
            
            # M√©tadonn√©es
            context_age_minutes=context.context_age_minutes,
            confidence=context.confidence,
            cache_hit=context.cache_hit
        )
        
        return rag_context
    
    def _adapt_for_clarification(self, context: UnifiedContext, max_chars: int) -> UnifiedContext:
        """Adapte le contexte pour g√©n√©ration de clarifications"""
        
        clarification_context = UnifiedContext(
            conversation_id=context.conversation_id,
            last_interaction=context.last_interaction,
            
            # Entit√©s pour d√©terminer ce qui manque
            established_breed=context.established_breed,
            established_age=context.established_age,
            established_sex=context.established_sex,
            
            # Historique des clarifications (√©viter r√©p√©titions)
            clarification_history=context.clarification_history,
            
            # Topic pour clarifications contextuelles
            conversation_topic=context.conversation_topic,
            
            # Derni√®res questions pour contexte
            previous_questions=context.previous_questions[-3:] if context.previous_questions else [],
            
            # M√©tadonn√©es
            context_age_minutes=context.context_age_minutes,
            confidence=context.confidence,
            cache_hit=context.cache_hit
        )
        
        return clarification_context
    
    def _adapt_for_classification(self, context: UnifiedContext, max_chars: int) -> UnifiedContext:
        """Adapte le contexte pour classification intelligente"""
        
        classification_context = UnifiedContext(
            conversation_id=context.conversation_id,
            last_interaction=context.last_interaction,
            
            # Toutes les entit√©s pour classification
            established_breed=context.established_breed,
            established_age=context.established_age,
            established_sex=context.established_sex,
            established_weight=context.established_weight,
            
            # Topic actuel
            conversation_topic=context.conversation_topic,
            
            # Messages r√©cents pour d√©tecter clarifications
            recent_messages=context.recent_messages[-3:] if context.recent_messages else [],
            
            # Historique des questions pour d√©tecter suites
            previous_questions=context.previous_questions,
            previous_answers=context.previous_answers,
            
            # M√©tadonn√©es
            context_age_minutes=context.context_age_minutes,
            confidence=context.confidence,
            cache_hit=context.cache_hit
        )
        
        return classification_context
    
    def _load_context_from_database(self, conversation_id: str) -> Optional[UnifiedContext]:
        """Charge le contexte depuis la base de donn√©es"""
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT context_data, updated_at 
                    FROM conversation_contexts 
                    WHERE conversation_id = ?
                """, (conversation_id,))
                
                row = cursor.fetchone()
                if not row:
                    return None
                
                # D√©s√©rialiser le contexte
                context_data = json.loads(row['context_data'])
                
                # Convertir vers UnifiedContext
                context = UnifiedContext(
                    conversation_id=conversation_id,
                    **{k: v for k, v in context_data.items() 
                       if k in UnifiedContext.__annotations__}
                )
                
                # Convertir timestamp
                if context_data.get('last_interaction'):
                    context.last_interaction = datetime.fromisoformat(context_data['last_interaction'])
                
                return context
                
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur chargement DB: {e}")
            return None
    
    def _save_context_to_database(self, context: UnifiedContext) -> bool:
        """Sauvegarde le contexte en base de donn√©es"""
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                context_json = json.dumps(context.to_dict())
                now = datetime.now().isoformat()
                
                conn.execute("""
                    INSERT OR REPLACE INTO conversation_contexts 
                    (conversation_id, context_data, created_at, updated_at)
                    VALUES (?, ?, ?, ?)
                """, (context.conversation_id, context_json, now, now))
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur sauvegarde DB: {e}")
            return False
    
    def _create_new_context(self, conversation_id: str) -> UnifiedContext:
        """Cr√©e un nouveau contexte vide"""
        
        return UnifiedContext(
            conversation_id=conversation_id,
            last_interaction=datetime.now()
        )
    
    def _init_database(self):
        """Initialise la base de donn√©es si n√©cessaire"""
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS conversation_contexts (
                        conversation_id TEXT PRIMARY KEY,
                        context_data TEXT NOT NULL,
                        created_at TEXT NOT NULL,
                        updated_at TEXT NOT NULL
                    )
                """)
                
                # Index pour performance
                conn.execute("""
                    CREATE INDEX IF NOT EXISTS idx_conversation_contexts_updated 
                    ON conversation_contexts(updated_at)
                """)
                
        except Exception as e:
            logger.error(f"‚ùå [ContextManager] Erreur init DB: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques du gestionnaire"""
        
        total_retrievals = max(self.stats["context_retrievals"], 1)
        cache_hit_rate = (self.stats["cache_hits"] / total_retrievals) * 100
        
        with self._cache_lock:
            cache_size = len(self._cache)
        
        return {
            **self.stats,
            "cache_hit_rate": f"{cache_hit_rate:.1f}%",
            "cache_size": cache_size,
            "cache_duration_minutes": self.cache_duration,
            "database_path": self.db_path
        }
    
    def clear_cache(self):
        """Vide le cache (pour tests ou maintenance)"""
        
        with self._cache_lock:
            self._cache.clear()
        
        logger.info("üßπ [ContextManager] Cache vid√© manuellement")

# Fonctions utilitaires pour compatibilit√© avec l'ancien syst√®me

def get_context_for_rag(conversation_id: str, max_chars: int = 800) -> str:
    """
    Fonction de compatibilit√© pour get_context_for_rag
    
    Remplace les appels directs aux anciens modules par le ContextManager unifi√©
    """
    if not conversation_id:
        return ""
    
    try:
        # Utiliser le gestionnaire centralis√©
        context_manager = ContextManager()
        unified_context = context_manager.get_unified_context(conversation_id, "rag", max_chars)
        
        # Convertir vers format texte pour compatibilit√©
        context_parts = []
        
        if unified_context.established_breed:
            context_parts.append(f"Race: {unified_context.established_breed}")
        
        if unified_context.established_age:
            context_parts.append(f"√Çge: {unified_context.established_age} jours")
        
        if unified_context.established_sex:
            context_parts.append(f"Sexe: {unified_context.established_sex}")
        
        if unified_context.conversation_topic:
            context_parts.append(f"Topic: {unified_context.conversation_topic}")
        
        if unified_context.previous_questions:
            recent_q = unified_context.previous_questions[-1]
            context_parts.append(f"Derni√®re question: {recent_q[:100]}...")
        
        context_text = " | ".join(context_parts)
        
        # Limiter aux caract√®res demand√©s
        if len(context_text) > max_chars:
            context_text = context_text[:max_chars-3] + "..."
        
        return context_text
        
    except Exception as e:
        logger.error(f"‚ùå [ContextManager] Erreur compatibilit√© RAG: {e}")
        return ""

def get_context_for_clarification(conversation_id: str) -> Dict[str, Any]:
    """
    Fonction de compatibilit√© pour get_context_for_clarification
    """
    if not conversation_id:
        return {}
    
    try:
        context_manager = ContextManager()
        unified_context = context_manager.get_unified_context(conversation_id, "clarification")
        
        # Convertir vers format dict pour compatibilit√©
        return {
            "established_entities": {
                "breed": unified_context.established_breed,
                "age_days": unified_context.established_age,
                "sex": unified_context.established_sex
            },
            "conversation_topic": unified_context.conversation_topic,
            "previous_questions": unified_context.previous_questions,
            "clarification_history": unified_context.clarification_history
        }
        
    except Exception as e:
        logger.error(f"‚ùå [ContextManager] Erreur compatibilit√© clarification: {e}")
        return {}

def get_conversation_context(conversation_id: str) -> Optional[object]:
    """
    Fonction de compatibilit√© pour get_conversation_context
    """
    if not conversation_id:
        return None
    
    try:
        context_manager = ContextManager()
        unified_context = context_manager.get_unified_context(conversation_id, "classification")
        
        # Retourner le contexte unifi√© (compatible avec les attributs attendus)
        return unified_context
        
    except Exception as e:
        logger.error(f"‚ùå [ContextManager] Erreur compatibilit√© conversation: {e}")
        return None

# Instance globale pour r√©utilisation
context_manager = ContextManager()

# Fonction de test
def test_context_manager():
    """Teste le gestionnaire de contexte avec des sc√©narios r√©els"""
    
    print("üß™ Test du gestionnaire de contexte:")
    print("=" * 50)
    
    manager = ContextManager(db_path="test_conversations.db")
    test_conv_id = "test_conv_123"
    
    # Test 1: Contexte nouveau
    print("\nüìù Test 1: Nouveau contexte")
    context1 = manager.get_unified_context(test_conv_id, "rag")
    print(f"   Context cr√©√©: {context1.conversation_id}")
    print(f"   Entit√©s: {context1.has_entities()}")
    print(f"   Cache hit: {context1.cache_hit}")
    
    # Test 2: Mise √† jour avec entit√©s
    print("\nüìù Test 2: Mise √† jour avec entit√©s")
    entities = {"breed": "Ross 308", "age_days": 21, "sex": "male"}
    success = manager.update_context(test_conv_id, entities=entities, topic="performance")
    print(f"   Mise √† jour: {'‚úÖ' if success else '‚ùå'}")
    
    # Test 3: R√©cup√©ration avec cache
    print("\nüìù Test 3: R√©cup√©ration depuis cache")
    context2 = manager.get_unified_context(test_conv_id, "clarification")
    print(f"   Cache hit: {context2.cache_hit}")
    print(f"   Entit√©s √©tablies: {context2.get_context_summary()}")
    
    # Test 4: Types de contexte diff√©rents
    print("\nüìù Test 4: Types de contexte")
    for ctx_type in ["rag", "clarification", "classification", "general"]:
        ctx = manager.get_unified_context(test_conv_id, ctx_type)
        print(f"   Type {ctx_type}: entit√©s={ctx.has_entities()}, √¢ge={ctx.context_age_minutes:.1f}min")
    
    # ‚úÖ NOUVEAU Test 5: Test save_unified_context
    print("\nüìù Test 5: Test save_unified_context")
    test_context_data = {
        "breed_specific": "Cobb 500",
        "age_days": 14,
        "sex": "female",
        "topic": "health"
    }
    success = manager.save_unified_context(test_conv_id, test_context_data, "test")
    print(f"   save_unified_context: {'‚úÖ' if success else '‚ùå'}")
    
    # V√©rifier que les donn√©es ont √©t√© sauvegard√©es
    updated_context = manager.get_unified_context(test_conv_id, "general")
    print(f"   Breed apr√®s save: {updated_context.established_breed}")
    print(f"   Age apr√®s save: {updated_context.established_age}")
    
    # Test 6: Statistiques
    print("\nüìä Statistiques:")
    stats = manager.get_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    print("\n‚úÖ Tests termin√©s!")

if __name__ == "__main__":
    test_context_manager()