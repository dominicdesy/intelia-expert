"""
app/api/v1/prompt_templates.py - TEMPLATES DE PROMPTS STRUCTUR√âS AVEC VALIDATION ROBUSTE

üéØ OBJECTIF: Centraliser et standardiser les prompts pour le syst√®me RAG
üîß AM√âLIORATION: √âliminer les r√©f√©rences aux documents dans les r√©ponses
‚ú® QUALIT√â: R√©ponses plus naturelles et professionnelles
üÜï NOUVEAU: Prompt de contextualisation pour mode s√©mantique dynamique
üîß NOUVEAU: Validation robuste des questions g√©n√©r√©es dynamiquement
üîß NOUVEAU: Fallback intelligent si GPT √©choue
üéØ NOUVEAU: Filtrage avanc√© des questions non pertinentes
üîß MISE √Ä JOUR: Message utilisateur neutre centralis√©

CORRECTIONS APPORT√âES:
- ‚úÖ Import manquant 'json' ajout√©
- ‚úÖ Gestion robuste des erreurs JSON avec fallback
- ‚úÖ Validation du format des questions renforc√©e
- ‚úÖ Gestion des exceptions lors de l'extraction du contexte
- ‚úÖ Documentation des types de retour am√©lior√©e
- ‚úÖ Logique de validation plus robuste
- ‚úÖ Gestion des cas edge dans l'analyse des questions
"""

import logging
import re
import json  # ‚úÖ CORRECTION: Import manquant ajout√©
from typing import Dict, Any, Optional, List, Tuple, Union

logger = logging.getLogger(__name__)

# ‚úÖ Action 1 : Message utilisateur neutre centralis√©
USER_NEEDS_CLARIFICATION_MSG = (
    "Votre question manque de contexte. "
    "Un expert virtuel va vous poser quelques questions pour mieux comprendre la situation. "
    "üí° R√©pondez simplement dans le chat avec les informations demand√©es."
)

def build_structured_prompt(documents: str, question: str, context: Dict[str, Any]) -> str:
    """
    üéØ PROMPT PRINCIPAL - Construit un prompt structur√© pour le RAG
    
    √âlimine les r√©f√©rences aux documents et produit des r√©ponses naturelles
    
    Args:
        documents: Contenu des documents trouv√©s
        question: Question de l'utilisateur
        context: Contexte extrait (breed, sex, age, lang)
        
    Returns:
        str: Prompt structur√© pour le LLM
        
    Raises:
        ValueError: Si les param√®tres requis sont manquants
    """
    
    # ‚úÖ CORRECTION: Validation des param√®tres d'entr√©e
    if not isinstance(documents, str):
        documents = str(documents) if documents else ""
    if not isinstance(question, str):
        question = str(question) if question else ""
    if not isinstance(context, dict):
        context = {}
    
    # Extraire les √©l√©ments du contexte avec valeurs par d√©faut s√©curis√©es
    breed = context.get("breed", "non sp√©cifi√©e")
    sex = context.get("sex", "non sp√©cifi√©") 
    age = context.get("age", "non sp√©cifi√©")
    language = context.get("lang", "fr")
    
    # ‚úÖ CORRECTION: Validation de la langue avec fallback
    if not isinstance(language, str) or language.lower() not in ["en", "es", "fr"]:
        language = "fr"
    
    # Templates par langue
    try:
        if language.lower() == "en":
            return _build_english_prompt(documents, question, breed, sex, age)
        elif language.lower() == "es":
            return _build_spanish_prompt(documents, question, breed, sex, age)
        else:
            return _build_french_prompt(documents, question, breed, sex, age)
    except Exception as e:
        logger.error(f"‚ùå [Prompt Build] Erreur construction prompt: {e}")
        # Fallback vers fran√ßais en cas d'erreur
        return _build_french_prompt(documents, question, breed, sex, age)

def _build_french_prompt(documents: str, question: str, breed: str, sex: str, age: str) -> str:
    """Template fran√ßais optimis√© avec gestion d'erreur"""
    
    # ‚úÖ CORRECTION: S√©curisation des param√®tres
    documents = str(documents) if documents else "Aucune information technique disponible"
    question = str(question) if question else "Question non sp√©cifi√©e"
    breed = str(breed) if breed else "non sp√©cifi√©e"
    sex = str(sex) if sex else "non sp√©cifi√©"
    age = str(age) if age else "non sp√©cifi√©"
    
    return f"""Vous √™tes un expert en production avicole avec 20 ans d'exp√©rience terrain.

CONTEXTE SP√âCIFIQUE :
- Race/souche : {breed}
- Sexe : {sex}
- √Çge : {age}

INFORMATIONS TECHNIQUES DISPONIBLES :
{documents}

QUESTION √Ä TRAITER :
{question}

INSTRUCTIONS CRITIQUES :
1. R√©pondez comme un expert qui ma√Ætrise parfaitement ces informations techniques
2. NE mentionnez JAMAIS les termes "document", "source", "r√©f√©rence" ou "selon"
3. Int√©grez naturellement les donn√©es chiffr√©es et recommandations techniques
4. Si l'information est incompl√®te, demandez des pr√©cisions sp√©cifiques
5. Utilisez un ton professionnel mais accessible
6. Incluez toujours les donn√©es de performance pertinentes (poids, FCR, mortalit√©, etc.)
7. Donnez des fourchettes de valeurs quand appropri√© (ex: 410-450g)

R√âPONSE EXPERTE :"""

def _build_english_prompt(documents: str, question: str, breed: str, sex: str, age: str) -> str:
    """Template anglais optimis√© avec gestion d'erreur"""
    
    # ‚úÖ CORRECTION: S√©curisation des param√®tres
    documents = str(documents) if documents else "No technical information available"
    question = str(question) if question else "Question not specified"
    breed = str(breed) if breed else "not specified"
    sex = str(sex) if sex else "not specified"
    age = str(age) if age else "not specified"
    
    return f"""You are a poultry production expert with 20 years of field experience.

SPECIFIC CONTEXT:
- Breed/strain: {breed}
- Sex: {sex}
- Age: {age}

TECHNICAL INFORMATION AVAILABLE:
{documents}

QUESTION TO ADDRESS:
{question}

CRITICAL INSTRUCTIONS:
1. Respond as an expert who perfectly masters this technical information
2. NEVER mention terms like "document", "source", "reference" or "according to"
3. Naturally integrate numerical data and technical recommendations
4. If information is incomplete, ask for specific clarifications
5. Use a professional but accessible tone
6. Always include relevant performance data (weight, FCR, mortality, etc.)
7. Provide value ranges when appropriate (e.g., 410-450g)

EXPERT RESPONSE:"""

def _build_spanish_prompt(documents: str, question: str, breed: str, sex: str, age: str) -> str:
    """Template espagnol optimis√© avec gestion d'erreur"""
    
    # ‚úÖ CORRECTION: S√©curisation des param√®tres
    documents = str(documents) if documents else "No hay informaci√≥n t√©cnica disponible"
    question = str(question) if question else "Pregunta no especificada"
    breed = str(breed) if breed else "no especificada"
    sex = str(sex) if sex else "no especificado"
    age = str(age) if age else "no especificada"
    
    return f"""Usted es un experto en producci√≥n av√≠cola con 20 a√±os de experiencia de campo.

CONTEXTO ESPEC√çFICO:
- Raza/cepa: {breed}
- Sexo: {sex}
- Edad: {age}

INFORMACI√ìN T√âCNICA DISPONIBLE:
{documents}

PREGUNTA A TRATAR:
{question}

INSTRUCCIONES CR√çTICAS:
1. Responda como un experto que domina perfectamente esta informaci√≥n t√©cnica
2. NUNCA mencione t√©rminos como "documento", "fuente", "referencia" o "seg√∫n"
3. Integre naturalmente los datos num√©ricos y recomendaciones t√©cnicas
4. Si la informaci√≥n est√° incompleta, pida aclaraciones espec√≠ficas
5. Use un tono profesional pero accesible
6. Incluya siempre datos de rendimiento relevantes (peso, conversi√≥n, mortalidad, etc.)
7. Proporcione rangos de valores cuando sea apropiado (ej: 410-450g)

RESPUESTA EXPERTA:"""

# ‚úÖ Action 3 : Seule cette fonction g√©n√®re des questions via GPT
def build_contextualization_prompt(user_question: str, language: str = "fr") -> str:
    """
    üÜï NOUVEAU: Construit un prompt pour g√©n√©rer des questions de clarification dynamiques.
    üîß AM√âLIOR√â: Prompt optimis√© pour √©viter les exemples g√©n√©riques non pertinents
    
    Args:
        user_question: Question originale de l'utilisateur
        language: Langue de r√©ponse (fr/en/es)
        
    Returns:
        str: Prompt structur√© pour GPT
        
    Raises:
        ValueError: Si la question utilisateur est vide
    """
    
    # ‚úÖ CORRECTION: Validation des param√®tres d'entr√©e
    if not user_question or not isinstance(user_question, str):
        raise ValueError("user_question ne peut pas √™tre vide ou None")
    
    user_question = user_question.strip()
    if not user_question:
        raise ValueError("user_question ne peut pas √™tre une cha√Æne vide")
    
    # ‚úÖ CORRECTION: Validation de la langue avec fallback
    if not isinstance(language, str) or language.lower() not in ["en", "es", "fr"]:
        language = "fr"
        logger.warning(f"‚ö†Ô∏è [Contextualization] Langue invalide, fallback vers fran√ßais")
    
    if language.lower() == "en":
        return f"""You are a poultry farming expert specialized in providing practical advice.

Your task is to help another AI agent better understand the following question: "{user_question}"

Analyze the question and deduce its main theme (e.g., laying drop, mortality, temperature, feeding, etc.). Then generate between 2 and 4 **targeted and concrete** clarification questions to better understand the problem.

CRITICAL RULES:
- Do NOT propose generic examples or hypothetical scenarios
- Do NOT reformulate the question
- Do NOT answer the question
- Do NOT mention breeds or species that are not already cited by the user
- Focus on MISSING INFORMATION that would help provide a precise answer
- Ask for SPECIFIC details (exact age, specific breed, current conditions)

GOOD examples of targeted questions:
- "What exact breed/strain are you raising?" (if not specified)
- "What is their current age in days?" (if age missing)
- "What specific symptoms are you observing?" (for health issues)
- "What are the current housing conditions?" (for environment issues)

Respond in this JSON format:
{{
  "clarification_questions": [
    "Question 1",
    "Question 2",
    "Question 3"
  ]
}}"""

    elif language.lower() == "es":
        return f"""Eres un experto en avicultura especializado en brindar asesor√≠a pr√°ctica.

Tu tarea es ayudar a otro agente de IA a entender mejor la siguiente pregunta: "{user_question}"

Analiza la pregunta y deduce su tema principal (ej. ca√≠da de postura, mortalidad, temperatura, alimentaci√≥n, etc.). Luego genera entre 2 y 4 preguntas de aclaraci√≥n **dirigidas y concretas** para entender mejor el problema.

REGLAS CR√çTICAS:
- NO propongas ejemplos gen√©ricos o escenarios hipot√©ticos
- NO reformules la pregunta
- NO respondas la pregunta
- NO menciones razas o especies que no hayan sido ya citadas por el usuario
- Enf√≥cate en INFORMACI√ìN FALTANTE que ayudar√≠a a proporcionar una respuesta precisa
- Pregunta por detalles ESPEC√çFICOS (edad exacta, raza espec√≠fica, condiciones actuales)

Ejemplos BUENOS de preguntas dirigidas:
- "¬øQu√© raza/cepa exacta est√° criando?" (si no especificado)
- "¬øCu√°l es su edad actual en d√≠as?" (si falta la edad)
- "¬øQu√© s√≠ntomas espec√≠ficos est√° observando?" (para problemas de salud)
- "¬øCu√°les son las condiciones actuales de alojamiento?" (para problemas ambientales)

Responde en este formato JSON:
{{
  "clarification_questions": [
    "Pregunta 1",
    "Pregunta 2",
    "Pregunta 3"
  ]
}}"""

    else:  # fran√ßais
        return f"""Tu es un expert en aviculture sp√©cialis√© dans les conseils pratiques.

Ta t√¢che est d'aider un autre agent IA √† mieux comprendre la question suivante : "{user_question}"

Analyse la question et d√©duis son th√®me principal (ex. baisse de ponte, mortalit√©, temp√©rature, alimentation, etc.). Puis g√©n√®re entre 2 et 4 questions de clarification **cibl√©es et concr√®tes** pour mieux comprendre le probl√®me.

R√àGLES CRITIQUES :
- Ne propose PAS d'exemples g√©n√©riques ou de sc√©narios hypoth√©tiques
- Ne reformule PAS la question
- Ne r√©ponds PAS √† la question
- Ne mentionne PAS de races ou d'esp√®ces qui ne sont pas d√©j√† cit√©es par l'utilisateur
- Concentre-toi sur l'INFORMATION MANQUANTE qui aiderait √† fournir une r√©ponse pr√©cise
- Demande des d√©tails SP√âCIFIQUES (√¢ge exact, race sp√©cifique, conditions actuelles)

Exemples BONS de questions cibl√©es :
- "Quelle race/souche exacte √©levez-vous ?" (si non sp√©cifi√©)
- "Quel est leur √¢ge actuel en jours ?" (si √¢ge manquant)
- "Quels sympt√¥mes sp√©cifiques observez-vous ?" (pour probl√®mes de sant√©)
- "Quelles sont les conditions actuelles de logement ?" (pour probl√®mes environnementaux)

R√©ponds dans ce format JSON :
{{
  "clarification_questions": [
    "Question 1",
    "Question 2",
    "Question 3"
  ]
}}"""

def build_vagueness_prompt(vague_question: str, suggestions: List[str], language: str = "fr") -> str:
    """
    üéØ PROMPT VAGUENESS - Pour les questions trop floues
    
    Args:
        vague_question: Question jug√©e trop vague
        suggestions: Liste de suggestions plus pr√©cises
        language: Langue de r√©ponse
        
    Returns:
        str: Message structur√© pour l'utilisateur
    """
    
    # ‚úÖ CORRECTION: Validation et s√©curisation des param√®tres
    if not isinstance(vague_question, str):
        vague_question = str(vague_question) if vague_question else "Question non sp√©cifi√©e"
    
    if not isinstance(suggestions, list):
        suggestions = []
    
    # ‚úÖ CORRECTION: Filtrer les suggestions vides ou invalides
    valid_suggestions = [str(s) for s in suggestions if s and str(s).strip()]
    
    if not valid_suggestions:
        valid_suggestions = ["Pouvez-vous √™tre plus sp√©cifique dans votre question ?"]
    
    suggestions_text = "\n".join([f"‚Ä¢ {s}" for s in valid_suggestions])
    
    # ‚úÖ CORRECTION: Validation de la langue avec fallback
    if not isinstance(language, str) or language.lower() not in ["en", "es", "fr"]:
        language = "fr"
    
    templates = {
        "fr": f"""Votre question "{vague_question}" n√©cessite plus de pr√©cision pour vous donner une r√©ponse technique pertinente.

**Questions plus pr√©cises sugg√©r√©es :**
{suggestions_text}

üí° Plus votre question est sp√©cifique (race, √¢ge, contexte), plus ma r√©ponse sera utile et actionnable.""",
        
        "en": f"""Your question "{vague_question}" needs more precision to provide a relevant technical response.

**Suggested more specific questions:**
{suggestions_text}

üí° The more specific your question (breed, age, context), the more useful and actionable my response will be.""",
        
        "es": f"""Su pregunta "{vague_question}" necesita m√°s precisi√≥n para proporcionar una respuesta t√©cnica relevante.

**Preguntas m√°s espec√≠ficas sugeridas:**
{suggestions_text}

üí° Cuanto m√°s espec√≠fica sea su pregunta (raza, edad, contexto), m√°s √∫til y pr√°ctica ser√° mi respuesta."""
    }
    
    return templates.get(language.lower(), templates["fr"])

# =============================================================================
# üîß NOUVELLE FONCTION: VALIDATION ROBUSTE DES QUESTIONS DYNAMIQUES
# =============================================================================

def validate_dynamic_questions(questions: List[str], user_question: str = "", language: str = "fr") -> Dict[str, Any]:
    """
    üîß NOUVEAU: Validation robuste des questions g√©n√©r√©es dynamiquement
    
    Args:
        questions: Liste des questions √† valider
        user_question: Question originale de l'utilisateur (pour contexte)
        language: Langue des questions (fr/en/es)
        
    Returns:
        Dict[str, Any]: R√©sultats de validation avec quality_score
            - valid_questions: List[str] - Questions valid√©es
            - invalid_questions: List[str] - Questions rejet√©es
            - quality_score: float (0.0 √† 1.0) - Score de qualit√©
            - issues: List[str] - Probl√®mes d√©tect√©s
            - filtered_count: int - Nombre de questions valides
            - validation_details: Dict - D√©tails des √©checs
    """
    
    validation = {
        "valid_questions": [],
        "invalid_questions": [],
        "quality_score": 0.0,
        "issues": [],
        "filtered_count": 0,
        "validation_details": {}
    }
    
    # ‚úÖ CORRECTION: Validation robuste des param√®tres d'entr√©e
    if not questions:
        validation["quality_score"] = 0.0
        validation["issues"].append("Aucune question fournie")
        return validation
    
    if not isinstance(questions, list):
        try:
            # Essayer de convertir en liste si possible
            questions = list(questions) if hasattr(questions, '__iter__') else [questions]
        except (TypeError, ValueError):
            validation["quality_score"] = 0.0
            validation["issues"].append("Format de questions invalide - doit √™tre une liste")
            return validation
    
    # ‚úÖ CORRECTION: Filtrer les √©l√©ments None ou vides d√®s le d√©but
    questions = [q for q in questions if q is not None and str(q).strip()]
    
    if not questions:
        validation["quality_score"] = 0.0
        validation["issues"].append("Toutes les questions sont vides ou invalides")
        return validation
    
    # ‚úÖ CORRECTION: Validation de la langue avec fallback
    if not isinstance(language, str) or language.lower() not in ["en", "es", "fr"]:
        language = "fr"
        logger.warning(f"‚ö†Ô∏è [Question Validation] Langue invalide, fallback vers fran√ßais")
    
    # Mots-cl√©s de questions par langue
    question_words = {
        "fr": ["quel", "quelle", "combien", "comment", "o√π", "quand", "pourquoi", "dans quel", "depuis quand", "√† quel"],
        "en": ["what", "which", "how", "where", "when", "why", "who", "how long", "what type", "at what"],
        "es": ["qu√©", "cu√°l", "c√≥mo", "d√≥nde", "cu√°ndo", "por qu√©", "qui√©n", "cu√°nto tiempo", "qu√© tipo", "a qu√©"]
    }
    
    # Mots-cl√©s g√©n√©riques √† √©viter (indiquent des questions trop vagues)
    generic_keywords = {
        "fr": ["exemple", "par exemple", "etc", "quelque chose", "peut-√™tre", "g√©n√©ralement", "souvent", "parfois", "habituellement"],
        "en": ["example", "for example", "etc", "something", "maybe", "generally", "often", "sometimes", "usually"],
        "es": ["ejemplo", "por ejemplo", "etc", "algo", "tal vez", "generalmente", "a menudo", "a veces", "usualmente"]
    }
    
    # Phrases interdites qui indiquent des questions non pertinentes
    forbidden_phrases = {
        "fr": [
            "reformul", "reformulation", "pouvez-vous reformuler", "pourriez-vous reformuler",
            "expliquer diff√©remment", "dire autrement", "autre fa√ßon", "mani√®re diff√©rente"
        ],
        "en": [
            "rephras", "rephrase", "could you rephrase", "can you rephrase",
            "explain differently", "say differently", "another way", "different way"
        ],
        "es": [
            "reformul", "reformular", "puede reformular", "podr√≠a reformular",
            "explicar diferente", "decir diferente", "otra manera", "forma diferente"
        ]
    }
    
    words = question_words.get(language, question_words["fr"])
    generic_words = generic_keywords.get(language, generic_keywords["fr"])
    forbidden = forbidden_phrases.get(language, forbidden_phrases["fr"])
    
    validation_details = {
        "total_questions": len(questions),
        "length_failures": 0,
        "question_word_failures": 0,
        "generic_failures": 0,
        "forbidden_phrase_failures": 0,
        "length_limit_failures": 0,
        "duplicate_failures": 0
    }
    
    processed_questions = []
    
    for i, question in enumerate(questions):
        try:
            # ‚úÖ CORRECTION: Conversion s√©curis√©e en string
            if not isinstance(question, str):
                question = str(question) if question is not None else ""
            
            question = question.strip()
            
            # Test 1: Longueur minimale
            if len(question) < 15:
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Question trop courte: '{question}'")
                validation_details["length_failures"] += 1
                continue
            
            question_lower = question.lower()
            
            # Test 2: V√©rifier si c'est une vraie question
            has_question_word = any(word in question_lower for word in words)
            has_question_mark = question.strip().endswith('?')
            
            if not has_question_word and not has_question_mark:
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Pas une question valide: '{question}'")
                validation_details["question_word_failures"] += 1
                continue
            
            # Test 3: V√©rifier les phrases interdites (reformulation, etc.)
            has_forbidden = any(phrase in question_lower for phrase in forbidden)
            if has_forbidden:
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Question interdite (reformulation): '{question}'")
                validation_details["forbidden_phrase_failures"] += 1
                continue
            
            # Test 4: V√©rifier si la question n'est pas trop g√©n√©rique
            generic_count = sum(1 for generic_word in generic_words if generic_word in question_lower)
            if generic_count >= 2:  # Plus souple: 2+ mots g√©n√©riques = rejet
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Question trop g√©n√©rique: '{question}'")
                validation_details["generic_failures"] += 1
                continue
            
            # Test 5: V√©rifier la longueur (pas trop longue)
            if len(question) > 200:
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Question trop longue: '{question[:50]}...'")
                validation_details["length_limit_failures"] += 1
                continue
            
            # Test 6: √âviter les doublons
            if question in processed_questions:
                validation["invalid_questions"].append(question)
                validation["issues"].append(f"Question en doublon: '{question}'")
                validation_details["duplicate_failures"] += 1
                continue
            
            # Nettoyer et formater la question valide
            if not question.endswith('?'):
                question += ' ?'
            
            validation["valid_questions"].append(question)
            processed_questions.append(question)
            
        except Exception as e:
            logger.error(f"‚ùå [Question Validation] Erreur lors de la validation de la question {i+1}: {e}")
            validation["invalid_questions"].append(str(question) if question else f"Question {i+1} invalide")
            validation["issues"].append(f"Erreur validation question {i+1}: {str(e)}")
    
    validation["validation_details"] = validation_details
    validation["filtered_count"] = len(validation["valid_questions"])
    
    # ‚úÖ CORRECTION: Calcul de score de qualit√© plus robuste
    try:
        if questions:
            # Score de base
            base_score = len(validation["valid_questions"]) / len(questions)
            
            # Bonus pour diversit√© des questions
            if len(validation["valid_questions"]) > 1:
                # V√©rifier que les questions ne commencent pas toutes de la m√™me fa√ßon
                unique_starts = set()
                for q in validation["valid_questions"]:
                    words_in_q = q.split()
                    if len(words_in_q) >= 2:
                        first_words = " ".join(words_in_q[:2]).lower()
                        unique_starts.add(first_words)
                
                if len(validation["valid_questions"]) > 0:
                    diversity_bonus = len(unique_starts) / len(validation["valid_questions"]) * 0.2
                    base_score += diversity_bonus
            
            # Malus pour questions invalides
            if len(questions) > 0:
                invalid_penalty = len(validation["invalid_questions"]) / len(questions) * 0.3
                base_score -= invalid_penalty
            
            # Bonus pour questions sp√©cifiques vs g√©n√©riques
            if validation["valid_questions"]:
                specificity_bonus = 0
                for q in validation["valid_questions"]:
                    q_lower = q.lower()
                    # Bonus si mention d'√©l√©ments sp√©cifiques
                    specific_words = ["race", "breed", "√¢ge", "age", "jours", "days", "sympt√¥mes", "symptoms", 
                                    "raza", "cepa", "edad", "d√≠as", "s√≠ntomas"]
                    if any(word in q_lower for word in specific_words):
                        specificity_bonus += 0.1
                
                specificity_bonus = min(specificity_bonus, 0.2)  # Max 20% bonus
                base_score += specificity_bonus
            
            validation["quality_score"] = max(0.0, min(1.0, base_score))
        else:
            validation["quality_score"] = 0.0
            
    except Exception as e:
        logger.error(f"‚ùå [Question Validation] Erreur calcul score qualit√©: {e}")
        validation["quality_score"] = 0.0
    
    logger.info(f"üîß [Question Validation] Score calcul√©: {validation['quality_score']:.2f}")
    logger.info(f"üîß [Question Validation] Questions valides: {len(validation['valid_questions'])}/{len(questions)}")
    
    if validation["issues"]:
        logger.info(f"üîß [Question Validation] Probl√®mes d√©tect√©s: {validation['issues'][:3]}...")  # Log premier 3 probl√®mes
    
    return validation

def get_dynamic_clarification_fallback_questions(user_question: str, language: str = "fr") -> List[str]:
    """
    üÜï NOUVEAU: Retourne des questions de fallback intelligentes bas√©es sur l'analyse de la question utilisateur
    
    Args:
        user_question: Question originale de l'utilisateur
        language: Langue des questions de fallback
        
    Returns:
        List[str]: Liste de questions de fallback (max 4)
    """
    
    # ‚úÖ CORRECTION: Validation des param√®tres d'entr√©e
    if not isinstance(user_question, str):
        user_question = str(user_question) if user_question else ""
    
    user_question_lower = user_question.lower()
    
    # ‚úÖ CORRECTION: Validation de la langue avec fallback
    if not isinstance(language, str) or language.lower() not in ["en", "es", "fr"]:
        language = "fr"
        logger.warning(f"‚ö†Ô∏è [Fallback Questions] Langue invalide, fallback vers fran√ßais")
    
    # Analyse basique du type de question pour fallback cibl√©
    is_weight_question = any(word in user_question_lower for word in ["poids", "weight", "peso", "grammes", "grams"])
    is_health_question = any(word in user_question_lower for word in ["maladie", "disease", "enfermedad", "mort", "death", "muerte"])
    is_growth_question = any(word in user_question_lower for word in ["croissance", "growth", "crecimiento", "d√©veloppement", "development"])
    is_feed_question = any(word in user_question_lower for word in ["alimentation", "feeding", "alimentaci√≥n", "nourriture", "food"])
    
    fallback_questions = {
        "fr": {
            "weight": [
                "Quelle race ou souche sp√©cifique √©levez-vous (Ross 308, Cobb 500, etc.) ?",
                "Quel √¢ge ont actuellement vos poulets (en jours pr√©cis) ?",
                "S'agit-il de m√¢les, femelles, ou d'un troupeau mixte ?"
            ],
            "health": [
                "Quelle race ou souche √©levez-vous ?",
                "Quel √¢ge ont vos volailles actuellement ?",
                "Quels sympt√¥mes sp√©cifiques observez-vous ?",
                "Depuis combien de temps observez-vous ce probl√®me ?"
            ],
            "growth": [
                "Quelle race ou souche sp√©cifique √©levez-vous ?",
                "Quel √¢ge ont-ils actuellement en jours ?",
                "Quelles sont les conditions d'√©levage actuelles ?"
            ],
            "feed": [
                "Quelle race ou souche √©levez-vous ?",
                "Quel √¢ge ont vos volailles ?",
                "Quel type d'alimentation utilisez-vous actuellement ?"
            ],
            "general": [
                "Pouvez-vous pr√©ciser la race ou souche de vos volailles ?",
                "Quel √¢ge ont actuellement vos animaux ?",
                "Dans quel contexte d'√©levage vous trouvez-vous ?",
                "Y a-t-il des sympt√¥mes ou probl√®mes sp√©cifiques observ√©s ?"
            ]
        },
        "en": {
            "weight": [
                "What specific breed or strain are you raising (Ross 308, Cobb 500, etc.)?",
                "What is the current age of your chickens (in precise days)?",
                "Are these males, females, or a mixed flock?"
            ],
            "health": [
                "What breed or strain are you raising?",
                "What is the current age of your poultry?",
                "What specific symptoms are you observing?",
                "How long have you been observing this problem?"
            ],
            "growth": [
                "What specific breed or strain are you raising?",
                "What is their current age in days?",
                "What are the current housing conditions?"
            ],
            "feed": [
                "What breed or strain are you raising?",
                "What age are your poultry?",
                "What type of feed are you currently using?"
            ],
            "general": [
                "Could you specify the breed or strain of your poultry?",
                "What age are your animals currently?",
                "What farming context are you in?",
                "Are there any specific symptoms or problems observed?"
            ]
        },
        "es": {
            "weight": [
                "¬øQu√© raza o cepa espec√≠fica est√° criando (Ross 308, Cobb 500, etc.)?",
                "¬øCu√°l es la edad actual de sus pollos (en d√≠as precisos)?",
                "¬øSon machos, hembras, o un lote mixto?"
            ],
            "health": [
                "¬øQu√© raza o cepa est√° criando?",
                "¬øCu√°l es la edad actual de sus aves?",
                "¬øQu√© s√≠ntomas espec√≠ficos est√° observando?",
                "¬øDesde cu√°ndo observa este problema?"
            ],
            "growth": [
                "¬øQu√© raza o cepa espec√≠fica est√° criando?",
                "¬øCu√°l es su edad actual en d√≠as?",
                "¬øCu√°les son las condiciones actuales de alojamiento?"
            ],
            "feed": [
                "¬øQu√© raza o cepa est√° criando?",
                "¬øQu√© edad tienen sus aves?",
                "¬øQu√© tipo de alimentaci√≥n est√° usando actualmente?"
            ],
            "general": [
                "¬øPodr√≠a especificar la raza o cepa de sus aves?",
                "¬øQu√© edad tienen actualmente sus animales?",
                "¬øEn qu√© contexto de cr√≠a se encuentra?",
                "¬øHay alg√∫n s√≠ntoma o problema espec√≠fico observado?"
            ]
        }
    }
    
    try:
        lang_questions = fallback_questions.get(language, fallback_questions["fr"])
        
        # S√©lectionner le type de questions le plus appropri√©
        if is_weight_question:
            selected_questions = lang_questions["weight"]
        elif is_health_question:
            selected_questions = lang_questions["health"]
        elif is_growth_question:
            selected_questions = lang_questions["growth"]
        elif is_feed_question:
            selected_questions = lang_questions["feed"]
        else:
            selected_questions = lang_questions["general"]
        
        # ‚úÖ CORRECTION: S'assurer que nous retournons toujours une liste valide
        if not selected_questions:
            selected_questions = lang_questions["general"]
        
        result = selected_questions[:4]  # Max 4 questions
        
        logger.info(f"üîÑ [Fallback Questions] Type d√©tect√© pour '{user_question[:30]}...': {result[0][:30] if result else 'Aucune'}...")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Fallback Questions] Erreur g√©n√©ration questions: {e}")
        # Retour de s√©curit√©
        default_questions = {
            "fr": ["Pouvez-vous pr√©ciser votre question ?", "Quel type d'√©levage avez-vous ?"],
            "en": ["Could you be more specific?", "What type of farming do you have?"],
            "es": ["¬øPodr√≠a ser m√°s espec√≠fico?", "¬øQu√© tipo de cr√≠a tiene?"]
        }
        return default_questions.get(language, default_questions["fr"])

# =============================================================================
# UTILITAIRES POUR EXTRACTION CONTEXTE (CONSERV√âS AVEC CORRECTIONS)
# =============================================================================

def extract_context_from_entities(extracted_entities: Dict[str, Any]) -> Dict[str, str]:
    """
    üîç EXTRACTION - Extrait le contexte depuis les entit√©s pour le prompt
    
    Args:
        extracted_entities: Dictionnaire d'entit√©s extraites
        
    Returns:
        Dict[str, str]: Contexte format√© pour le prompt
    """
    
    context = {
        "breed": "non sp√©cifi√©e",
        "sex": "non sp√©cifi√©", 
        "age": "non sp√©cifi√©",
        "lang": "fr"
    }
    
    # ‚úÖ CORRECTION: Validation robuste des entit√©s d'entr√©e
    if not extracted_entities or not isinstance(extracted_entities, dict):
        logger.warning("‚ö†Ô∏è [Context Extraction] Entit√©s manquantes ou invalides")
        return context
    
    try:
        # Breed/Race
        if "breed" in extracted_entities and extracted_entities["breed"]:
            breed_value = extracted_entities["breed"]
            if breed_value and str(breed_value).strip():
                context["breed"] = str(breed_value).strip()
        
        # Sex/Sexe  
        if "sex" in extracted_entities and extracted_entities["sex"]:
            sex_value = extracted_entities["sex"]
            if sex_value and str(sex_value).strip():
                context["sex"] = str(sex_value).strip()
        
        # Age/√Çge - multiple formats possibles
        age_candidates = ["age", "days", "weeks", "jours", "semaines"]
        for candidate in age_candidates:
            if candidate in extracted_entities and extracted_entities[candidate]:
                age_value = extracted_entities[candidate]
                try:
                    if isinstance(age_value, (int, float)) and age_value > 0:
                        if candidate in ["weeks", "semaines"]:
                            context["age"] = f"{age_value} semaine{'s' if age_value > 1 else ''}"
                        else:
                            context["age"] = f"{age_value} jour{'s' if age_value > 1 else ''}"
                    elif age_value and str(age_value).strip():
                        context["age"] = str(age_value).strip()
                    break
                except (TypeError, ValueError) as e:
                    logger.warning(f"‚ö†Ô∏è [Context Extraction] Erreur conversion √¢ge {age_value}: {e}")
                    continue
        
        # Langue
        if "language" in extracted_entities and extracted_entities["language"]:
            lang_value = extracted_entities["language"]
            if lang_value and str(lang_value).strip().lower() in ["fr", "en", "es"]:
                context["lang"] = str(lang_value).strip().lower()
        
    except Exception as e:
        logger.error(f"‚ùå [Context Extraction] Erreur extraction contexte: {e}")
        # Retourner le contexte par d√©faut en cas d'erreur
    
    logger.info(f"üîç [Prompt Context] Contexte extrait: {context}")
    
    return context

def validate_prompt_context(context: Dict[str, str]) -> Dict[str, Any]:
    """
    ‚úÖ VALIDATION - Valide et nettoie le contexte pour le prompt
    
    Args:
        context: Contexte √† valider
        
    Returns:
        Dict[str, Any]: R√©sultat de validation avec score et d√©tails
    """
    
    validation_result = {
        "is_valid": True,
        "completeness_score": 0.0,
        "missing_elements": [],
        "warnings": []
    }
    
    # ‚úÖ CORRECTION: Validation du contexte d'entr√©e
    if not isinstance(context, dict):
        validation_result["is_valid"] = False
        validation_result["warnings"].append("Contexte invalide - doit √™tre un dictionnaire")
        return validation_result
    
    try:
        # V√©rifier chaque √©l√©ment
        elements_score = 0
        total_elements = 4  # breed, sex, age, lang
        
        # Breed
        breed = context.get("breed", "")
        if breed and isinstance(breed, str) and breed.strip() and breed != "non sp√©cifi√©e":
            elements_score += 1
        else:
            validation_result["missing_elements"].append("breed")
        
        # Sex
        sex = context.get("sex", "")
        if sex and isinstance(sex, str) and sex.strip() and sex != "non sp√©cifi√©":
            elements_score += 1
        else:
            validation_result["missing_elements"].append("sex")
        
        # Age
        age = context.get("age", "")
        if age and isinstance(age, str) and age.strip() and age != "non sp√©cifi√©":
            elements_score += 1
        else:
            validation_result["missing_elements"].append("age")
        
        # Language
        lang = context.get("lang", "")
        if lang and isinstance(lang, str) and lang.strip() and lang in ["fr", "en", "es"]:
            elements_score += 1
        else:
            # Language est moins critique, donc pas forc√©ment manquant
            pass
        
        validation_result["completeness_score"] = elements_score / total_elements
        
        # Warnings pour contexte incomplet
        if validation_result["completeness_score"] < 0.5:
            validation_result["warnings"].append("Contexte tr√®s incomplet - clarification recommand√©e")
        elif validation_result["completeness_score"] < 0.75:
            validation_result["warnings"].append("Contexte partiellement incomplet")
        
    except Exception as e:
        logger.error(f"‚ùå [Prompt Validation] Erreur validation contexte: {e}")
        validation_result["is_valid"] = False
        validation_result["warnings"].append(f"Erreur validation: {str(e)}")
    
    logger.info(f"‚úÖ [Prompt Validation] Score: {validation_result['completeness_score']:.1%}, Manque: {validation_result['missing_elements']}")
    
    return validation_result

# =============================================================================
# üÜï NOUVELLE FONCTION: PARSING ROBUSTE DES R√âPONSES JSON
# =============================================================================

def parse_gpt_json_response(response_text: str) -> Dict[str, Any]:
    """
    üÜï NOUVEAU: Parse robuste des r√©ponses JSON de GPT avec fallback intelligent
    
    Args:
        response_text: R√©ponse brute de GPT
        
    Returns:
        Dict[str, Any]: Donn√©es pars√©es ou structure par d√©faut
    """
    
    result = {
        "clarification_questions": [],
        "parsing_success": False,
        "raw_response": response_text,
        "error": None
    }
    
    if not response_text or not isinstance(response_text, str):
        result["error"] = "R√©ponse vide ou invalide"
        return result
    
    try:
        # Nettoyer la r√©ponse (enlever markdown et espaces)
        cleaned_response = response_text.strip()
        
        # Enlever les balises markdown si pr√©sentes
        if cleaned_response.startswith("```json"):
            cleaned_response = cleaned_response[7:]
        if cleaned_response.endswith("```"):
            cleaned_response = cleaned_response[:-3]
        
        cleaned_response = cleaned_response.strip()
        
        # Essayer de parser le JSON
        parsed_data = json.loads(cleaned_response)
        
        if isinstance(parsed_data, dict) and "clarification_questions" in parsed_data:
            questions = parsed_data["clarification_questions"]
            if isinstance(questions, list):
                result["clarification_questions"] = questions
                result["parsing_success"] = True
                logger.info(f"‚úÖ [JSON Parse] Parsing r√©ussi: {len(questions)} questions extraites")
            else:
                result["error"] = "clarification_questions n'est pas une liste"
        else:
            result["error"] = "Structure JSON invalide - cl√© 'clarification_questions' manquante"
            
    except json.JSONDecodeError as e:
        result["error"] = f"Erreur parsing JSON: {str(e)}"
        logger.warning(f"‚ö†Ô∏è [JSON Parse] √âchec parsing JSON: {e}")
        
        # Tentative de r√©cup√©ration avec regex
        try:
            # Chercher des questions avec regex comme fallback
            question_pattern = r'"([^"]*\?[^"]*)"'
            found_questions = re.findall(question_pattern, response_text)
            
            if found_questions:
                result["clarification_questions"] = found_questions[:4]  # Max 4
                result["parsing_success"] = True
                logger.info(f"üîÑ [JSON Parse] R√©cup√©ration par regex: {len(found_questions)} questions")
            
        except Exception as regex_error:
            logger.error(f"‚ùå [JSON Parse] √âchec r√©cup√©ration regex: {regex_error}")
    
    except Exception as e:
        result["error"] = f"Erreur inattendue: {str(e)}"
        logger.error(f"‚ùå [JSON Parse] Erreur parsing: {e}")
    
    return result

# =============================================================================
# CONFIGURATION ET LOGGING
# =============================================================================

logger.info("‚úÖ [Prompt Templates] Templates de prompts structur√©s charg√©s avec validation robuste - VERSION CORRIG√âE")
logger.info("üéØ [Prompt Templates] Fonctionnalit√©s disponibles:")
logger.info("   - üá´üá∑ Prompts fran√ßais optimis√©s")
logger.info("   - üá¨üáß Prompts anglais optimis√©s") 
logger.info("   - üá™üá∏ Prompts espagnols optimis√©s")
logger.info("   - üéØ Prompts pour questions floues")
logger.info("   - üîç Extraction contexte depuis entit√©s")
logger.info("   - ‚úÖ Validation qualit√© contexte")
logger.info("üÜï [Prompt Templates] FONCTIONNALIT√â MODE S√âMANTIQUE:")
logger.info("   - üé≠ Prompt de contextualisation pour mode s√©mantique dynamique")
logger.info("   - ü§ñ G√©n√©ration intelligente de questions via GPT")
logger.info("   - üåê Support multilingue pour questions dynamiques")
logger.info("   - üìù Questions de fallback intelligentes par type")
logger.info("üîß [Prompt Templates] VALIDATION ROBUSTE:")
logger.info("   - ‚úÖ Validation compl√®te des questions g√©n√©r√©es (validate_dynamic_questions)")
logger.info("   - üéØ Filtrage avanc√©: longueur, mots-cl√©s, phrases interdites")
logger.info("   - üìä Score de qualit√© d√©taill√© (0.0 √† 1.0)")
logger.info("   - üö´ D√©tection reformulations et questions g√©n√©riques")
logger.info("   - üîç Bonus diversit√© et sp√©cificit√©")
logger.info("   - üìã Logs d√©taill√©s des √©checs de validation")
logger.info("   - üîÑ Fallback intelligent par type de question")
logger.info("üÜï [Prompt Templates] PARSING JSON ROBUSTE:")
logger.info("   - üîß Parsing robuste des r√©ponses GPT avec fallback regex")
logger.info("   - ‚ö° Nettoyage automatique des balises markdown")
logger.info("   - üõ°Ô∏è Gestion d'erreurs compl√®te avec r√©cup√©ration")
logger.info("üîß [Prompt Templates] CORRECTIONS APPLIQU√âES:")
logger.info("   - ‚úÖ Import json ajout√© pour parsing JSON")
logger.info("   - ‚úÖ Validation robuste des param√®tres d'entr√©e")
logger.info("   - ‚úÖ Gestion d'exceptions compl√®te")
logger.info("   - ‚úÖ Fallback intelligent en cas d'erreur")
logger.info("   - ‚úÖ Validation des types avec conversion s√©curis√©e")
logger.info("   - ‚úÖ Documentation des types de retour am√©lior√©e")
logger.info("üßπ [Prompt Templates] OBJECTIF: √âliminer r√©f√©rences aux documents")
logger.info("‚ú® [Prompt Templates] R√âSULTAT: R√©ponses naturelles et professionnelles + validation robuste")
logger.info("üîß [Prompt Templates] NOUVEAU: Message utilisateur neutre centralis√©")
logger.info("‚úÖ [Prompt Templates] STATUT: Version corrig√©e et s√©curis√©e")