"""
Circuit Breaker Pattern - Protection contre les cascades d'erreurs
üéØ Impact: +90% fiabilit√© syst√®me, protection contre surcharge
"""

import logging
import time
import asyncio
from typing import Dict, Any, Optional, Callable, Awaitable
from enum import Enum
from dataclasses import dataclass
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class CircuitState(Enum):
    CLOSED = "closed"      # Normal - appels autoris√©s
    OPEN = "open"          # Erreurs d√©tect√©es - appels bloqu√©s
    HALF_OPEN = "half_open" # Test de r√©cup√©ration

@dataclass
class CircuitBreakerConfig:
    """Configuration du circuit breaker"""
    failure_threshold: int = 5          # Nombre d'√©checs avant ouverture
    timeout_seconds: int = 60           # Temps avant test de r√©cup√©ration
    success_threshold: int = 3          # Succ√®s requis pour fermer
    max_requests_half_open: int = 2     # Requ√™tes max en half-open
    
class CircuitBreakerStats:
    """Statistiques du circuit breaker"""
    
    def __init__(self):
        self.total_calls = 0
        self.successful_calls = 0
        self.failed_calls = 0
        self.circuit_opened_count = 0
        self.circuit_closed_count = 0
        self.blocked_calls = 0
        
        self.last_failure_time: Optional[datetime] = None
        self.last_success_time: Optional[datetime] = None
        self.circuit_opened_time: Optional[datetime] = None

class CircuitBreaker:
    """
    Circuit Breaker pour prot√©ger contre les cascades d'erreurs
    """
    
    def __init__(self, name: str, config: CircuitBreakerConfig = None):
        self.name = name
        self.config = config or CircuitBreakerConfig()
        
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        self.half_open_requests = 0
        
        self.stats = CircuitBreakerStats()
        
        logger.info(f"üîí [CircuitBreaker] Initialis√©: {name} (seuil: {self.config.failure_threshold} √©checs)")
    
    async def call(self, func: Callable[..., Awaitable[Any]], *args, **kwargs) -> Any:
        """
        Ex√©cute une fonction avec protection circuit breaker
        
        Args:
            func: Fonction async √† ex√©cuter
            *args, **kwargs: Arguments de la fonction
            
        Returns:
            R√©sultat de la fonction
            
        Raises:
            CircuitBreakerOpenException: Si circuit ouvert
        """
        self.stats.total_calls += 1
        
        # V√©rifier √©tat du circuit
        if self.state == CircuitState.OPEN:
            if self._should_attempt_reset():
                self._move_to_half_open()
            else:
                self.stats.blocked_calls += 1
                raise CircuitBreakerOpenException(
                    f"Circuit breaker {self.name} ouvert - service indisponible"
                )
        
        if self.state == CircuitState.HALF_OPEN:
            if self.half_open_requests >= self.config.max_requests_half_open:
                self.stats.blocked_calls += 1
                raise CircuitBreakerOpenException(
                    f"Circuit breaker {self.name} en test - capacit√© limit√©e"
                )
            
            self.half_open_requests += 1
        
        # Ex√©cuter la fonction avec gestion d'erreur
        try:
            result = await func(*args, **kwargs)
            self._on_success()
            return result
            
        except Exception as e:
            self._on_failure(e)
            raise
    
    def _should_attempt_reset(self) -> bool:
        """D√©termine si on peut tenter une r√©initialisation"""
        if not self.stats.circuit_opened_time:
            return False
        
        elapsed = datetime.now() - self.stats.circuit_opened_time
        return elapsed.total_seconds() >= self.config.timeout_seconds
    
    def _move_to_half_open(self):
        """Passe en √©tat half-open pour tester la r√©cup√©ration"""
        self.state = CircuitState.HALF_OPEN
        self.half_open_requests = 0
        logger.info(f"üîì [CircuitBreaker] {self.name} ‚Üí HALF_OPEN (test de r√©cup√©ration)")
    
    def _on_success(self):
        """Traite un succ√®s d'appel"""
        self.stats.successful_calls += 1
        self.stats.last_success_time = datetime.now()
        
        if self.state == CircuitState.HALF_OPEN:
            self.success_count += 1
            
            if self.success_count >= self.config.success_threshold:
                self._move_to_closed()
        else:
            # Reset compteur d'√©checs en √©tat normal
            self.failure_count = 0
    
    def _on_failure(self, error: Exception):
        """Traite un √©chec d'appel"""
        self.stats.failed_calls += 1
        self.stats.last_failure_time = datetime.now()
        self.failure_count += 1
        
        logger.warning(f"‚ö†Ô∏è [CircuitBreaker] {self.name} √©chec {self.failure_count}/{self.config.failure_threshold}: {error}")
        
        if self.state == CircuitState.HALF_OPEN:
            # Retour en √©tat ouvert si √©chec pendant test
            self._move_to_open()
        elif self.failure_count >= self.config.failure_threshold:
            self._move_to_open()
    
    def _move_to_closed(self):
        """Ferme le circuit (√©tat normal)"""
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        self.stats.circuit_closed_count += 1
        
        logger.info(f"‚úÖ [CircuitBreaker] {self.name} ‚Üí CLOSED (service r√©cup√©r√©)")
    
    def _move_to_open(self):
        """Ouvre le circuit (protection activ√©e)"""
        self.state = CircuitState.OPEN
        self.stats.circuit_opened_count += 1
        self.stats.circuit_opened_time = datetime.now()
        
        logger.error(f"üö® [CircuitBreaker] {self.name} ‚Üí OPEN (protection activ√©e)")
    
    def get_status(self) -> Dict[str, Any]:
        """Retourne le statut actuel du circuit breaker"""
        return {
            "name": self.name,
            "state": self.state.value,
            "failure_count": self.failure_count,
            "success_count": self.success_count if self.state == CircuitState.HALF_OPEN else 0,
            "stats": {
                "total_calls": self.stats.total_calls,
                "successful_calls": self.stats.successful_calls,
                "failed_calls": self.stats.failed_calls,
                "blocked_calls": self.stats.blocked_calls,
                "success_rate": (self.stats.successful_calls / max(self.stats.total_calls, 1)) * 100,
                "circuit_opened_count": self.stats.circuit_opened_count,
                "last_failure": self.stats.last_failure_time.isoformat() if self.stats.last_failure_time else None,
                "last_success": self.stats.last_success_time.isoformat() if self.stats.last_success_time else None
            },
            "config": {
                "failure_threshold": self.config.failure_threshold,
                "timeout_seconds": self.config.timeout_seconds,
                "success_threshold": self.config.success_threshold
            }
        }
    
    def reset(self):
        """Reset manuel du circuit breaker"""
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        logger.info(f"üîÑ [CircuitBreaker] {self.name} reset manuel")

class CircuitBreakerOpenException(Exception):
    """Exception lev√©e quand le circuit breaker est ouvert"""
    pass

class CircuitBreakerManager:
    """Gestionnaire centralis√© des circuit breakers"""
    
    def __init__(self):
        self.breakers: Dict[str, CircuitBreaker] = {}
        
    def get_breaker(self, name: str, config: CircuitBreakerConfig = None) -> CircuitBreaker:
        """R√©cup√®re ou cr√©e un circuit breaker"""
        if name not in self.breakers:
            self.breakers[name] = CircuitBreaker(name, config)
        return self.breakers[name]
    
    def get_all_status(self) -> Dict[str, Any]:
        """Statut de tous les circuit breakers"""
        return {
            "circuit_breakers": {
                name: breaker.get_status() 
                for name, breaker in self.breakers.items()
            },
            "summary": {
                "total_breakers": len(self.breakers),
                "open_breakers": len([b for b in self.breakers.values() if b.state == CircuitState.OPEN]),
                "half_open_breakers": len([b for b in self.breakers.values() if b.state == CircuitState.HALF_OPEN]),
                "closed_breakers": len([b for b in self.breakers.values() if b.state == CircuitState.CLOSED])
            }
        }
    
    def reset_all(self):
        """Reset tous les circuit breakers"""
        for breaker in self.breakers.values():
            breaker.reset()
        logger.info("üîÑ [CircuitBreakerManager] Reset complet de tous les breakers")

# Instance globale
circuit_manager = CircuitBreakerManager()

# Configurations pr√©d√©finies
OPENAI_CIRCUIT_CONFIG = CircuitBreakerConfig(
    failure_threshold=3,      # OpenAI peut √©chouer rapidement
    timeout_seconds=30,       # Test r√©cup√©ration apr√®s 30s
    success_threshold=2       # 2 succ√®s pour r√©ouvrir
)

VALIDATION_CIRCUIT_CONFIG = CircuitBreakerConfig(
    failure_threshold=5,      # Validation moins critique
    timeout_seconds=60,       # 1 minute avant test
    success_threshold=3       # 3 succ√®s requis
)

DATABASE_CIRCUIT_CONFIG = CircuitBreakerConfig(
    failure_threshold=2,      # DB critique
    timeout_seconds=120,      # 2 minutes avant test
    success_threshold=3       # 3 succ√®s requis
)