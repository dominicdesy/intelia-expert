"""
app/api/v1/expert_integrations.py - GESTIONNAIRE INT√âGRATIONS

G√®re toutes les int√©grations avec les modules externes (clarification, m√©moire, validation, etc.)
üÜï NOUVEAU v3.9.1: Support int√©gration mode s√©mantique dynamique ACTIV√â PAR D√âFAUT
"""

import logging
from typing import Optional, Dict, Any, Callable

logger = logging.getLogger(__name__)

class IntegrationsManager:
    """Gestionnaire central pour toutes les int√©grations externes + semantic dynamic PAR D√âFAUT"""
    
    def __init__(self):
        # √âtat des int√©grations
        self.enhanced_clarification_available = False
        self.intelligent_memory_available = False
        self.agricultural_validator_available = False
        self.auth_available = False
        self.openai_available = False
        self.logging_available = False
        
        # üÜï NOUVEAU: Mode s√©mantique dynamique ACTIV√â PAR D√âFAUT
        self.semantic_dynamic_available = True  # ‚úÖ FOR√áAGE PERMANENT
        self.semantic_dynamic_forced = True     # ‚úÖ Flag pour indiquer le for√ßage
        
        # Fonctions import√©es
        self._auth_functions = {}
        self._clarification_functions = {}
        self._memory_functions = {}
        self._validator_functions = {}
        self._logging_functions = {}
        
        # üÜï NOUVEAU: Fonctions mode s√©mantique dynamique
        self._semantic_dynamic_functions = {}
        
        # Initialiser les int√©grations
        self._initialize_integrations()
    
    def _initialize_integrations(self):
        """Initialise toutes les int√©grations disponibles + semantic dynamic PRIORITAIRE"""
        
        # === INT√âGRATION CLARIFICATION AM√âLIOR√âE + SEMANTIC DYNAMIC PRIORITAIRE ===
        try:
            from app.api.v1.question_clarification_system import (
                analyze_question_for_clarification_enhanced,
                format_clarification_response_enhanced,
                check_for_reprocessing_after_clarification,
                is_enhanced_clarification_system_enabled,
                get_enhanced_clarification_system_stats,
                # üÜï PRIORITAIRE: Import mode s√©mantique dynamique
                analyze_question_for_clarification_semantic_dynamic,
                generate_dynamic_clarification_questions
            )
            
            self._clarification_functions = {
                'analyze_question_for_clarification_enhanced': analyze_question_for_clarification_enhanced,
                'format_clarification_response_enhanced': format_clarification_response_enhanced,
                'check_for_reprocessing_after_clarification': check_for_reprocessing_after_clarification,
                'is_enhanced_clarification_system_enabled': is_enhanced_clarification_system_enabled,
                'get_enhanced_clarification_system_stats': get_enhanced_clarification_system_stats,
                # üÜï PRIORITAIRE: Fonctions mode s√©mantique dynamique
                'analyze_question_for_clarification_semantic_dynamic': analyze_question_for_clarification_semantic_dynamic,
                'generate_dynamic_clarification_questions': generate_dynamic_clarification_questions
            }
            
            self.enhanced_clarification_available = True
            # ‚úÖ Semantic dynamic reste forc√© √† True m√™me si import r√©ussi
            logger.info("‚úÖ [Integrations] Syst√®me de clarification am√©lior√© + mode s√©mantique dynamique import√© (FORC√â ACTIF)")
            
        except ImportError as e:
            self.enhanced_clarification_available = False
            # ‚úÖ Semantic dynamic reste FORC√â m√™me si import √©choue
            logger.warning(f"‚ö†Ô∏è [Integrations] Clarification am√©lior√©e non disponible mais mode s√©mantique dynamique FORC√â ACTIF: {e}")
        
        # === INT√âGRATION M√âMOIRE INTELLIGENTE ===
        try:
            from app.api.v1.conversation_memory import (
                add_message_to_conversation,
                get_conversation_context,
                get_context_for_clarification,
                get_context_for_rag,
                get_conversation_memory_stats
            )
            
            self._memory_functions = {
                'add_message_to_conversation': add_message_to_conversation,
                'get_conversation_context': get_conversation_context,
                'get_context_for_clarification': get_context_for_clarification,
                'get_context_for_rag': get_context_for_rag,
                'get_conversation_memory_stats': get_conversation_memory_stats
            }
            
            self.intelligent_memory_available = True
            logger.info("‚úÖ [Integrations] M√©moire intelligente import√©e")
            
        except ImportError as e:
            self.intelligent_memory_available = False
            logger.warning(f"‚ö†Ô∏è [Integrations] M√©moire intelligente non disponible: {e}")
        
        # === INT√âGRATION VALIDATEUR AGRICOLE ===
        try:
            from app.api.v1.agricultural_domain_validator import (
                validate_agricultural_question,
                get_agricultural_validator_stats,
                is_agricultural_validation_enabled
            )
            
            self._validator_functions = {
                'validate_agricultural_question': validate_agricultural_question,
                'get_agricultural_validator_stats': get_agricultural_validator_stats,
                'is_agricultural_validation_enabled': is_agricultural_validation_enabled
            }
            
            self.agricultural_validator_available = True
            logger.info("‚úÖ [Integrations] Validateur agricole import√©")
            
        except ImportError as e:
            self.agricultural_validator_available = False
            logger.error(f"‚ùå [Integrations] Validateur agricole non disponible: {e}")
        
        # === INT√âGRATION AUTH ===
        try:
            from .auth import get_current_user
            self._auth_functions = {'get_current_user': get_current_user}
            self.auth_available = True
            logger.info("‚úÖ [Integrations] Auth import√©")
        except ImportError:
            try:
                from app.api.v1.auth import get_current_user
                self._auth_functions = {'get_current_user': get_current_user}
                self.auth_available = True
                logger.info("‚úÖ [Integrations] Auth import√© (path alternatif)")
            except ImportError as e:
                self.auth_available = False
                logger.error(f"‚ùå [Integrations] Auth non disponible: {e}")
        
        # === INT√âGRATION OPENAI ===
        try:
            import openai
            self.openai_available = True
            logger.info("‚úÖ [Integrations] OpenAI disponible")
        except ImportError:
            self.openai_available = False
            logger.warning("‚ö†Ô∏è [Integrations] OpenAI non disponible mais mode s√©mantique dynamique FORC√â")
        
        # === INT√âGRATION LOGGING ===
        try:
            from app.api.v1.logging import logger_instance, ConversationCreate
            if logger_instance:
                self._logging_functions = {
                    'logger_instance': logger_instance,
                    'ConversationCreate': ConversationCreate
                }
                self.logging_available = True
                logger.info("‚úÖ [Integrations] Syst√®me de logging int√©gr√©")
            else:
                self.logging_available = False
        except ImportError as e:
            self.logging_available = False
            logger.warning(f"‚ö†Ô∏è [Integrations] Syst√®me de logging non disponible: {e}")
        
        # üÜï TOUJOURS: Initialisation fonctions mode s√©mantique dynamique (m√™me si partiellement disponible)
        self._init_semantic_dynamic_functions()
    
    def _init_semantic_dynamic_functions(self):
        """üÜï NOUVEAU: Initialise les fonctions sp√©cifiques au mode s√©mantique dynamique (TOUJOURS)"""
        try:
            # Import des fonctions sp√©cialis√©es depuis prompt_templates
            from app.api.v1.prompt_templates import (
                build_contextualization_prompt,
                get_dynamic_clarification_examples,
                validate_dynamic_questions
            )
            
            self._semantic_dynamic_functions = {
                'build_contextualization_prompt': build_contextualization_prompt,
                'get_dynamic_clarification_examples': get_dynamic_clarification_examples,
                'validate_dynamic_questions': validate_dynamic_questions
            }
            
            logger.info("‚úÖ [Integrations] Fonctions mode s√©mantique dynamique initialis√©es (FORC√â)")
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è [Integrations] Fonctions s√©mantique dynamique partiellement non disponibles: {e}")
            # ‚úÖ M√™me en cas d'erreur, on garde le mode actif avec fonctions de fallback
            self._semantic_dynamic_functions = {
                'build_contextualization_prompt': self._fallback_build_contextualization_prompt,
                'get_dynamic_clarification_examples': self._fallback_get_examples,
                'validate_dynamic_questions': self._fallback_validate_questions
            }
            logger.info("‚úÖ [Integrations] Fallback mode s√©mantique dynamique activ√©")
    
    # === üÜï NOUVEAUX: M√âTHODES FALLBACK POUR MODE S√âMANTIQUE DYNAMIQUE ===
    
    def _fallback_build_contextualization_prompt(self, question: str, language: str = "fr") -> str:
        """Fallback pour construction de prompt de contextualisation"""
        if language == "fr":
            return f"Contexte de la question agricole: {question}\nVeuillez pr√©ciser votre question pour une r√©ponse optimale."
        elif language == "en":
            return f"Context of the agricultural question: {question}\nPlease specify your question for an optimal response."
        else:
            return f"Contexto de la pregunta agr√≠cola: {question}\nPor favor, especifique su pregunta para una respuesta √≥ptima."
    
    def _fallback_get_examples(self, language: str = "fr") -> list:
        """Fallback pour exemples de questions dynamiques"""
        if language == "fr":
            return [
                "Pouvez-vous pr√©ciser l'esp√®ce animale concern√©e?",
                "Quel est l'√¢ge de vos animaux?",
                "Depuis quand observez-vous ce probl√®me?",
                "Pouvez-vous d√©crire les sympt√¥mes plus pr√©cis√©ment?"
            ]
        elif language == "en":
            return [
                "Can you specify the animal species concerned?",
                "What is the age of your animals?",
                "How long have you been observing this problem?",
                "Can you describe the symptoms more precisely?"
            ]
        else:
            return [
                "¬øPuede especificar la especie animal en cuesti√≥n?",
                "¬øCu√°l es la edad de sus animales?",
                "¬øDesde cu√°ndo observa este problema?",
                "¬øPuede describir los s√≠ntomas con m√°s precisi√≥n?"
            ]
    
    def _fallback_validate_questions(self, questions: list, language: str = "fr") -> Dict[str, Any]:
        """Fallback pour validation des questions"""
        # Validation basique : questions non vides et pas trop courtes
        valid_questions = [q for q in questions if len(q.strip()) > 10]
        invalid_questions = [q for q in questions if len(q.strip()) <= 10]
        
        quality_score = len(valid_questions) / len(questions) if questions else 0.0
        
        return {
            "valid_questions": valid_questions,
            "invalid_questions": invalid_questions,
            "quality_score": quality_score,
            "fallback_validation": True
        }
    
    # === M√âTHODES AUTH ===
    
    def get_current_user_dependency(self) -> Optional[Callable]:
        """Retourne la fonction get_current_user si disponible"""
        if self.auth_available:
            return self._auth_functions.get('get_current_user')
        return lambda: None  # Mock function qui retourne None
    
    # === M√âTHODES CLARIFICATION + SEMANTIC DYNAMIC PRIORITAIRE ===
    
    def is_enhanced_clarification_enabled(self) -> bool:
        """V√©rifie si la clarification am√©lior√©e est activ√©e"""
        if not self.enhanced_clarification_available:
            return False
        
        func = self._clarification_functions.get('is_enhanced_clarification_system_enabled')
        if func:
            return func()
        return False
    
    # üÜï TOUJOURS TRUE: V√©rification disponibilit√© mode s√©mantique dynamique
    def is_semantic_dynamic_available(self) -> bool:
        """V√©rifie si le mode s√©mantique dynamique est disponible (TOUJOURS TRUE)"""
        return True  # ‚úÖ FORC√â PERMANENT
    
    # üÜï NOUVEAU: M√©thode d'analyse SYST√âMATIQUE avant RAG
    async def analyze_question_before_rag(self, question: str, language: str = "fr", **kwargs) -> Dict[str, Any]:
        """
        üéØ M√âTHODE PRINCIPALE: Analyse syst√©matique d'une question AVANT le RAG
        ‚úÖ Utilise TOUJOURS le mode s√©mantique dynamique
        """
        analysis_result = {
            "needs_clarification": False,
            "clarification_questions": [],
            "analysis_method": "semantic_dynamic_forced",
            "question_processed": question,
            "confidence_score": 1.0,
            "fallback_used": False
        }
        
        try:
            # ‚úÖ PRIORIT√â 1: Tentative analyse s√©mantique dynamique
            if self.enhanced_clarification_available:
                func = self._clarification_functions.get('analyze_question_for_clarification_semantic_dynamic')
                if func:
                    logger.info(f"üé≠ [Integrations] Analyse s√©mantique dynamique pour: '{question[:50]}...'")
                    result = await func(question=question, language=language, **kwargs)
                    
                    if result:
                        analysis_result.update(result)
                        analysis_result["analysis_method"] = "semantic_dynamic_full"
                        logger.info("‚úÖ [Integrations] Analyse s√©mantique dynamique compl√®te r√©ussie")
                        return analysis_result
            
            # ‚úÖ FALLBACK 1: G√©n√©ration directe de questions dynamiques
            logger.info("üîÑ [Integrations] Fallback vers g√©n√©ration directe de questions dynamiques")
            dynamic_questions = self.generate_dynamic_clarification_questions(question, language)
            
            if dynamic_questions:
                analysis_result.update({
                    "needs_clarification": len(dynamic_questions) > 0,
                    "clarification_questions": dynamic_questions,
                    "analysis_method": "semantic_dynamic_direct",
                    "confidence_score": 0.8,
                    "fallback_used": True
                })
                logger.info(f"‚úÖ [Integrations] G√©n√©ration directe r√©ussie: {len(dynamic_questions)} questions")
                return analysis_result
            
            # ‚úÖ FALLBACK 2: Questions g√©n√©riques intelligentes
            logger.info("üîÑ [Integrations] Fallback vers questions g√©n√©riques intelligentes")
            generic_questions = self._generate_intelligent_generic_questions(question, language)
            
            analysis_result.update({
                "needs_clarification": len(generic_questions) > 0,
                "clarification_questions": generic_questions,
                "analysis_method": "semantic_dynamic_generic",
                "confidence_score": 0.6,
                "fallback_used": True
            })
            
            logger.info(f"‚úÖ [Integrations] Questions g√©n√©riques g√©n√©r√©es: {len(generic_questions)}")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå [Integrations] Erreur analyse pr√©-RAG: {e}")
            
            # ‚úÖ FALLBACK FINAL: Questions de base par cat√©gorie
            basic_questions = self._generate_basic_clarification_questions(question, language)
            analysis_result.update({
                "needs_clarification": True,
                "clarification_questions": basic_questions,
                "analysis_method": "semantic_dynamic_basic",
                "confidence_score": 0.4,
                "fallback_used": True,
                "error": str(e)
            })
            
            logger.info(f"‚úÖ [Integrations] Fallback final activ√©: {len(basic_questions)} questions de base")
            return analysis_result
    
    def _generate_intelligent_generic_questions(self, question: str, language: str = "fr") -> list:
        """G√©n√®re des questions g√©n√©riques mais intelligentes bas√©es sur l'analyse de la question"""
        question_lower = question.lower()
        questions = []
        
        # D√©tection de mots-cl√©s agricoles
        animals = ["poulet", "porc", "vache", "chicken", "pig", "cow", "pollo", "cerdo", "vaca"]
        problems = ["probl√®me", "maladie", "mort", "problem", "disease", "death", "problema", "enfermedad", "muerte"]
        nutrition = ["aliment", "nourriture", "nutrition", "feed", "food", "alimento", "comida"]
        environment = ["temp√©rature", "ventilation", "climat", "temperature", "climate", "temperatura"]
        
        if language == "fr":
            base_questions = [
                "Pouvez-vous pr√©ciser l'esp√®ce et l'√¢ge des animaux concern√©s?",
                "Depuis combien de temps observez-vous cette situation?",
                "Avez-vous remarqu√© d'autres sympt√¥mes associ√©s?",
                "Pouvez-vous d√©crire l'environnement d'√©levage (temp√©rature, humidit√©, ventilation)?"
            ]
            
            # Questions sp√©cialis√©es selon d√©tection
            if any(animal in question_lower for animal in animals):
                questions.append("Combien d'animaux sont affect√©s par rapport au total du troupeau?")
            
            if any(problem in question_lower for problem in problems):
                questions.extend([
                    "Les sympt√¥mes sont-ils apparus soudainement ou progressivement?",
                    "Y a-t-il eu des changements r√©cents dans l'alimentation ou l'environnement?"
                ])
            
            if any(nutr in question_lower for nutr in nutrition):
                questions.append("Pouvez-vous d√©crire le r√©gime alimentaire actuel des animaux?")
            
            if any(env in question_lower for env in environment):
                questions.append("Quelles sont les conditions exactes de temp√©rature et d'humidit√©?")
                
        elif language == "en":
            base_questions = [
                "Can you specify the species and age of the animals concerned?",
                "How long have you been observing this situation?",
                "Have you noticed any other associated symptoms?",
                "Can you describe the breeding environment (temperature, humidity, ventilation)?"
            ]
            
            if any(animal in question_lower for animal in animals):
                questions.append("How many animals are affected compared to the total herd?")
            
            if any(problem in question_lower for problem in problems):
                questions.extend([
                    "Did the symptoms appear suddenly or gradually?",
                    "Have there been any recent changes in feed or environment?"
                ])
            
            if any(nutr in question_lower for nutr in nutrition):
                questions.append("Can you describe the current diet of the animals?")
            
            if any(env in question_lower for env in environment):
                questions.append("What are the exact temperature and humidity conditions?")
                
        else:  # Spanish
            base_questions = [
                "¬øPuede especificar la especie y edad de los animales en cuesti√≥n?",
                "¬øDesde cu√°ndo observa esta situaci√≥n?",
                "¬øHa notado otros s√≠ntomas asociados?",
                "¬øPuede describir el ambiente de cr√≠a (temperatura, humedad, ventilaci√≥n)?"
            ]
            
            if any(animal in question_lower for animal in animals):
                questions.append("¬øCu√°ntos animales est√°n afectados en comparaci√≥n con el total del reba√±o?")
            
            if any(problem in question_lower for problem in problems):
                questions.extend([
                    "¬øLos s√≠ntomas aparecieron s√∫bitamente o gradualmente?",
                    "¬øHa habido cambios recientes en la alimentaci√≥n o el ambiente?"
                ])
            
            if any(nutr in question_lower for nutr in nutrition):
                questions.append("¬øPuede describir la dieta actual de los animales?")
            
            if any(env in question_lower for env in environment):
                questions.append("¬øCu√°les son las condiciones exactas de temperatura y humedad?")
        
        # Combiner questions de base et sp√©cialis√©es
        all_questions = base_questions + questions
        
        # Limiter √† 4 questions max et √©viter duplicatas
        return list(set(all_questions))[:4]
    
    def _generate_basic_clarification_questions(self, question: str, language: str = "fr") -> list:
        """G√©n√®re des questions de clarification de base (fallback final)"""
        if language == "fr":
            return [
                "Pouvez-vous pr√©ciser votre question?",
                "De quels animaux parlez-vous exactement?",
                "Pouvez-vous donner plus de d√©tails?",
                "Dans quel contexte se situe votre question?"
            ]
        elif language == "en":
            return [
                "Can you clarify your question?",
                "Which animals are you talking about exactly?",
                "Can you provide more details?",
                "In what context is your question?"
            ]
        else:
            return [
                "¬øPuede aclarar su pregunta?",
                "¬øDe qu√© animales habla exactamente?",
                "¬øPuede proporcionar m√°s detalles?",
                "¬øEn qu√© contexto se sit√∫a su pregunta?"
            ]

    async def analyze_question_for_clarification_enhanced(self, **kwargs):
        """Analyse une question pour clarification (m√©thode h√©rit√©e)"""
        if not self.enhanced_clarification_available:
            raise RuntimeError("Syst√®me de clarification non disponible")
        
        func = self._clarification_functions.get('analyze_question_for_clarification_enhanced')
        if func:
            return await func(**kwargs)
        raise RuntimeError("Fonction analyze_question_for_clarification_enhanced non trouv√©e")
    
    # üÜï NOUVEAU: Analyse avec mode s√©mantique dynamique (m√©thode h√©rit√©e)
    async def analyze_question_for_clarification_semantic_dynamic(self, **kwargs):
        """Analyse une question avec le mode s√©mantique dynamique"""
        if not self.enhanced_clarification_available:
            # ‚úÖ M√™me si not available, on essaie avec fallback
            logger.warning("‚ö†Ô∏è [Integrations] Mode s√©mantique dynamique avec fallback")
            return await self.analyze_question_before_rag(**kwargs)
        
        func = self._clarification_functions.get('analyze_question_for_clarification_semantic_dynamic')
        if func:
            return await func(**kwargs)
        
        # ‚úÖ Fallback vers analyse avant RAG
        logger.info("üîÑ [Integrations] Fallback vers analyze_question_before_rag")
        return await self.analyze_question_before_rag(**kwargs)
    
    # üÜï PRIORITAIRE: G√©n√©ration directe de questions dynamiques
    def generate_dynamic_clarification_questions(self, question: str, language: str = "fr") -> list:
        """G√©n√®re des questions de clarification dynamiques (TOUJOURS DISPONIBLE)"""
        try:
            # ‚úÖ Tentative avec fonction import√©e
            func = self._clarification_functions.get('generate_dynamic_clarification_questions')
            if func:
                result = func(question, language)
                if result:
                    logger.info(f"‚úÖ [Integrations] Questions dynamiques g√©n√©r√©es via fonction import√©e: {len(result)}")
                    return result
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [Integrations] Erreur g√©n√©ration dynamique import√©e: {e}")
        
        # ‚úÖ Fallback toujours disponible
        logger.info("üîÑ [Integrations] Fallback g√©n√©ration questions intelligentes")
        return self._generate_intelligent_generic_questions(question, language)
    
    def format_clarification_response_enhanced(self, **kwargs):
        """Formate une r√©ponse de clarification"""
        if not self.enhanced_clarification_available:
            raise RuntimeError("Syst√®me de clarification non disponible")
        
        func = self._clarification_functions.get('format_clarification_response_enhanced')
        if func:
            return func(**kwargs)
        raise RuntimeError("Fonction format_clarification_response_enhanced non trouv√©e")
    
    async def check_for_reprocessing_after_clarification(self, **kwargs):
        """V√©rifie si retraitement n√©cessaire apr√®s clarification"""
        if not self.enhanced_clarification_available:
            return None
        
        func = self._clarification_functions.get('check_for_reprocessing_after_clarification')
        if func:
            return await func(**kwargs)
        return None
    
    def get_enhanced_clarification_system_stats(self):
        """R√©cup√®re les stats du syst√®me de clarification + semantic dynamic"""
        base_stats = {}
        
        if self.enhanced_clarification_available:
            func = self._clarification_functions.get('get_enhanced_clarification_system_stats')
            base_stats = func() if func else {}
        
        # ‚úÖ TOUJOURS: Ajouter stats mode s√©mantique dynamique
        base_stats.update({
            "semantic_dynamic_available": True,  # ‚úÖ FORC√â
            "semantic_dynamic_forced": self.semantic_dynamic_forced,
            "semantic_dynamic_openai_available": self.openai_available,
            "semantic_dynamic_functions_loaded": len(self._semantic_dynamic_functions),
            "fallback_methods_available": True,
            "intelligent_fallback_enabled": True
        })
        
        return base_stats
    
    # === M√âTHODES M√âMOIRE INTELLIGENTE ===
    
    def add_message_to_conversation(self, **kwargs):
        """Ajoute un message √† la conversation"""
        if not self.intelligent_memory_available:
            return None
        
        func = self._memory_functions.get('add_message_to_conversation')
        if func:
            return func(**kwargs)
        return None
    
    def get_conversation_context(self, conversation_id: str):
        """R√©cup√®re le contexte d'une conversation"""
        if not self.intelligent_memory_available:
            return None
        
        func = self._memory_functions.get('get_conversation_context')
        if func:
            return func(conversation_id)
        return None
    
    def get_context_for_clarification(self, conversation_id: str):
        """R√©cup√®re le contexte pour clarification"""
        if not self.intelligent_memory_available:
            return {}
        
        func = self._memory_functions.get('get_context_for_clarification')
        if func:
            return func(conversation_id)
        return {}
    
    def get_context_for_rag(self, conversation_id: str, max_chars: int = 800):
        """R√©cup√®re le contexte pour RAG"""
        if not self.intelligent_memory_available:
            return ""
        
        func = self._memory_functions.get('get_context_for_rag')
        if func:
            return func(conversation_id, max_chars)
        return ""
    
    def get_conversation_memory_stats(self):
        """R√©cup√®re les stats de la m√©moire"""
        if not self.intelligent_memory_available:
            return {}
        
        func = self._memory_functions.get('get_conversation_memory_stats')
        if func:
            return func()
        return {}
    
    # === M√âTHODES VALIDATION AGRICOLE ===
    
    def is_agricultural_validation_enabled(self) -> bool:
        """V√©rifie si la validation agricole est activ√©e"""
        if not self.agricultural_validator_available:
            return False
        
        func = self._validator_functions.get('is_agricultural_validation_enabled')
        if func:
            return func()
        return False
    
    def validate_agricultural_question(self, **kwargs):
        """Valide une question agricole"""
        if not self.agricultural_validator_available:
            raise RuntimeError("Validateur agricole non disponible")
        
        func = self._validator_functions.get('validate_agricultural_question')
        if func:
            return func(**kwargs)
        raise RuntimeError("Fonction validate_agricultural_question non trouv√©e")
    
    def get_agricultural_validator_stats(self):
        """R√©cup√®re les stats du validateur"""
        if not self.agricultural_validator_available:
            return {}
        
        func = self._validator_functions.get('get_agricultural_validator_stats')
        if func:
            return func()
        return {}
    
    # === M√âTHODES LOGGING ===
    
    async def update_feedback(self, conversation_id: str, rating_numeric: int) -> bool:
        """Met √† jour le feedback d'une conversation"""
        if not self.logging_available:
            return False
        
        logger_instance = self._logging_functions.get('logger_instance')
        if not logger_instance:
            return False
        
        try:
            # Essayer update_feedback si disponible
            if hasattr(logger_instance, 'update_feedback'):
                return logger_instance.update_feedback(conversation_id, rating_numeric)
            
            # Fallback vers SQL direct
            import sqlite3
            with sqlite3.connect(logger_instance.db_path) as conn:
                cursor = conn.execute("""
                    UPDATE conversations 
                    SET feedback = ?, updated_at = CURRENT_TIMESTAMP 
                    WHERE conversation_id = ?
                """, (rating_numeric, conversation_id))
                
                return cursor.rowcount > 0
        
        except Exception as e:
            logger.error(f"‚ùå [Integrations] Erreur update_feedback: {e}")
            return False
    
    # === üÜï NOUVELLES M√âTHODES MODE S√âMANTIQUE DYNAMIQUE (TOUJOURS DISPONIBLES) ===
    
    def build_contextualization_prompt(self, question: str, language: str = "fr") -> str:
        """Construit un prompt de contextualisation pour le mode s√©mantique dynamique"""
        func = self._semantic_dynamic_functions.get('build_contextualization_prompt')
        if func:
            return func(question, language)
        
        # ‚úÖ Fallback toujours disponible
        return self._fallback_build_contextualization_prompt(question, language)
    
    def get_dynamic_clarification_examples(self, language: str = "fr") -> list:
        """R√©cup√®re des exemples de questions dynamiques"""
        func = self._semantic_dynamic_functions.get('get_dynamic_clarification_examples')
        if func:
            return func(language)
        
        # ‚úÖ Fallback toujours disponible
        return self._fallback_get_examples(language)
    
    def validate_dynamic_questions(self, questions: list, language: str = "fr") -> Dict[str, Any]:
        """Valide la qualit√© des questions g√©n√©r√©es dynamiquement"""
        func = self._semantic_dynamic_functions.get('validate_dynamic_questions')
        if func:
            return func(questions, language)
        
        # ‚úÖ Fallback toujours disponible
        return self._fallback_validate_questions(questions, language)
    
    # === M√âTHODES UTILITAIRES + SEMANTIC DYNAMIC FORC√â ===
    
    def get_system_status(self) -> Dict[str, Any]:
        """Retourne le statut de toutes les int√©grations + semantic dynamic FORC√â"""
        return {
            "enhanced_clarification": self.enhanced_clarification_available,
            "intelligent_memory": self.intelligent_memory_available,
            "agricultural_validation": self.agricultural_validator_available,
            "auth": self.auth_available,
            "openai": self.openai_available,
            "logging": self.logging_available,
            # ‚úÖ TOUJOURS TRUE
            "semantic_dynamic": True,
            "semantic_dynamic_forced": True
        }
    
    def get_available_enhancements(self) -> list:
        """Retourne la liste des am√©liorations disponibles + semantic dynamic FORC√â"""
        enhancements = []
        
        if self.enhanced_clarification_available:
            enhancements.extend([
                "automatic_reprocessing_after_clarification",
                "multi_mode_clarification",
                "adaptive_clarification"
            ])
        
        # ‚úÖ TOUJOURS: Am√©liorations mode s√©mantique dynamique
        enhancements.extend([
            "semantic_dynamic_clarification_forced",
            "intelligent_question_generation",
            "contextual_clarification_questions",
            "intelligent_clarification_fallback",
            "pre_rag_analysis_systematic",
            "multi_level_fallback_system"
        ])
        
        if self.intelligent_memory_available:
            enhancements.extend([
                "intelligent_entity_extraction",
                "contextual_reasoning",
                "conversation_state_tracking"
            ])
        
        if self.intelligent_memory_available and self.enhanced_clarification_available:
            enhancements.append("ai_powered_enhancements")
        
        if self.openai_available:
            enhancements.append("enhanced_prompts_with_numerical_data")
        
        # ‚úÖ TOUJOURS: Suite compl√®te forc√©e
        enhancements.append("complete_ai_assistant_suite_forced")
        
        return enhancements
    
    # üÜï FORC√â: Configuration mode s√©mantique dynamique
    def get_semantic_dynamic_config(self) -> Dict[str, Any]:
        """Retourne la configuration du mode s√©mantique dynamique (FORC√â ACTIF)"""
        return {
            "available": True,  # ‚úÖ FORC√â
            "forced_active": True,
            "openai_available": self.openai_available,
            "max_questions_default": 4,
            "supported_languages": ["fr", "en", "es"],
            "fallback_enabled": True,
            "context_aware_generation": True,
            "intelligent_fallback_layers": 3,
            "functions_loaded": list(self._semantic_dynamic_functions.keys()),
            "clarification_functions_loaded": len([k for k in self._clarification_functions.keys() if "semantic_dynamic" in k]),
            "systematic_pre_rag_analysis": True
        }
    
    # üÜï FORC√â: Test complet du mode s√©mantique dynamique
    async def test_semantic_dynamic_system(self, test_question: str = "J'ai un probl√®me avec mes poulets") -> Dict[str, Any]:
        """Teste compl√®tement le syst√®me s√©mantique dynamique (FORC√â ACTIF)"""
        test_results = {
            "system_available": True,  # ‚úÖ FORC√â
            "system_forced": True,
            "openai_available": self.openai_available,
            "test_successful": False,
            "generation_test": None,
            "validation_test": None,
            "prompt_test": None,
            "pre_rag_analysis_test": None,
            "errors": []
        }
        
        try:
            # Test 1: Analyse pr√©-RAG (m√©thode principale)
            pre_rag_result = await self.analyze_question_before_rag(test_question, "fr")
            test_results["pre_rag_analysis_test"] = {
                "analysis_completed": bool(pre_rag_result),
                "method_used": pre_rag_result.get("analysis_method", "unknown"),
                "questions_generated": len(pre_rag_result.get("clarification_questions", [])),
                "confidence_score": pre_rag_result.get("confidence_score", 0),
                "successful": bool(pre_rag_result) and len(pre_rag_result.get("clarification_questions", [])) > 0
            }
            
            # Test 2: G√©n√©ration de questions
            generated_questions = self.generate_dynamic_clarification_questions(test_question, "fr")
            test_results["generation_test"] = {
                "questions_generated": len(generated_questions),
                "questions": generated_questions,
                "successful": len(generated_questions) > 0
            }
            
            # Test 3: Validation des questions
            if generated_questions:
                validation_result = self.validate_dynamic_questions(generated_questions, "fr")
                test_results["validation_test"] = {
                    "validation_result": validation_result,
                    "quality_score": validation_result.get("quality_score", 0),
                    "successful": validation_result.get("quality_score", 0) > 0.3  # Seuil plus bas car fallback
                }
            
            # Test 4: Construction prompt
            prompt = self.build_contextualization_prompt(test_question, "fr")
            test_results["prompt_test"] = {
                "prompt_length": len(prompt),
                "prompt_generated": bool(prompt),
                "successful": len(prompt) > 20  # Seuil plus bas car fallback
            }
            
            # R√©sultat global
            test_results["test_successful"] = all([
                test_results["pre_rag_analysis_test"]["successful"],
                test_results["generation_test"]["successful"],
                test_results.get("validation_test", {}).get("successful", True),
                test_results["prompt_test"]["successful"]
            ])
            
            logger.info(f"‚úÖ [Integrations] Test s√©mantique dynamique: {'SUCC√àS' if test_results['test_successful'] else 'PARTIEL'}")
            
        except Exception as e:
            test_results["errors"].append(f"Erreur test: {str(e)}")
            test_results["test_successful"] = False
            logger.error(f"‚ùå [Integrations] Erreur test s√©mantique dynamique: {e}")
        
        return test_results

# =============================================================================
# CONFIGURATION FINALE + SEMANTIC DYNAMIC FORC√â
# =============================================================================

logger.info("‚úÖ [Integrations Manager] Gestionnaire d'int√©grations initialis√© avec mode s√©mantique dynamique FORC√â ACTIF")
logger.info("üÜï [Integrations Manager] NOUVELLES FONCTIONNALIT√âS v3.9.1 - MODE S√âMANTIQUE DYNAMIQUE FORC√â:")
logger.info("   - üé≠ Mode s√©mantique dynamique TOUJOURS ACTIF (forc√©)")
logger.info("   - üéØ Analyse syst√©matique pr√©-RAG obligatoire")
logger.info("   - ü§ñ G√©n√©ration questions intelligentes multi-niveau")
logger.info("   - üîÑ Syst√®me fallback robuste 3 niveaux")
logger.info("   - ‚öôÔ∏è Configuration et test syst√®me s√©mantique dynamique permanent")
logger.info("   - üìä Statistiques √©tendues mode s√©mantique dynamique")
logger.info("   - üîß Fonctions utilitaires fallback int√©gr√©es")
logger.info("   - ‚úÖ Validation et exemples questions dynamiques garantis")
logger.info("üéØ [Integrations Manager] WORKFLOW FORC√â:")
logger.info("   1. analyze_question_before_rag() -> SYST√âMATIQUE avant RAG")
logger.info("   2. Tentative fonctions import√©es -> Fallback intelligent")
logger.info("   3. Questions g√©n√©riques intelligentes -> Questions de base")
logger.info("   4. Toujours au moins 2-4 questions de clarification g√©n√©r√©es")
logger.info("‚ú® [Integrations Manager] GARANTIE: Mode s√©mantique dynamique OP√âRATIONNEL en permanence!")