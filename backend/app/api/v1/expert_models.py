"""
app/api/v1/expert_models.py - MOD√àLES PYDANTIC POUR EXPERT SYSTEM

Tous les mod√®les de donn√©es pour le syst√®me expert
VERSION CORRIG√âE v3.9.7: Ajout champs tra√ßage d√©cisions IA
üîß CORRECTION v3.9.7: Ajout ai_classification_used, ai_decision, ai_confidence, ai_reasoning, response_generation_method
üîß CORRECTION v3.9.6: Ajout clarification_details, enhancement_info, conversation_context, pipeline_version, pipeline_improvements
üß® CORRECTION v3.6.1: Ajout du champ clarification_processing
üöÄ NOUVEAU v3.7.0: Support response_versions pour concision backend
üÜï NOUVEAU v3.9.0: Support mode s√©mantique dynamique avec DynamicClarification
üîß CORRECTION v3.9.1: Validation am√©lior√©e + valeurs par d√©faut + documentation
üîß CORRECTION v3.9.2: Ajout du champ contextualization_info manquant + corrections diverses
üîß CORRECTION v3.9.3: Ajout de ClarificationResult avec missing_entities pour √©viter l'erreur
üîß CORRECTION v3.9.4: Ajout enriched_question dans EnhancedExpertResponse et weight dans IntelligentEntities
üîß CORRECTION v3.9.5: Ajout mortality dans IntelligentEntities + champs suppl√©mentaires demand√©s
"""

from typing import Optional, List, Dict, Any, Literal
from pydantic import BaseModel, Field, ConfigDict, field_validator, model_validator
from enum import Enum
import logging

# =============================================================================
# NOUVEAUX ENUMS POUR LES AM√âLIORATIONS + CONCISION + SEMANTIC DYNAMIC
# =============================================================================

class ResponseFormat(str, Enum):
    """Formats de r√©ponse attendus pour structurer les r√©ponses de l'IA"""
    TEXT = "text"
    TABLE = "table"  
    SUMMARY = "summary"
    PLAN = "plan"
    COMPARISON = "comparison"
    NUMERICAL_DATA = "numerical_data"

class ConfidenceLevel(str, Enum):
    """Niveaux de confiance pour les r√©ponses et analyses"""
    VERY_LOW = "very_low"      # < 0.2
    LOW = "low"                # 0.2 - 0.4
    MEDIUM = "medium"          # 0.4 - 0.7
    HIGH = "high"              # 0.7 - 0.9
    VERY_HIGH = "very_high"    # > 0.9

class QuestionClarity(str, Enum):
    """Niveaux de clart√© des questions pour la d√©tection de flou"""
    CLEAR = "clear"                        # Question pr√©cise et compl√®te
    PARTIALLY_CLEAR = "partially_clear"    # Quelques √©l√©ments manquants
    UNCLEAR = "unclear"                    # Plusieurs √©l√©ments flous
    VERY_UNCLEAR = "very_unclear"          # Question tr√®s impr√©cise

class ConcisionLevel(str, Enum):
    """Niveaux de concision pour les r√©ponses optimis√©es"""
    ULTRA_CONCISE = "ultra_concise"  # R√©ponse minimale (ex: "350-400g")
    CONCISE = "concise"              # R√©ponse courte (1-2 phrases)
    STANDARD = "standard"            # R√©ponse √©quilibr√©e 
    DETAILED = "detailed"            # R√©ponse compl√®te et d√©taill√©e

# =============================================================================
# üß† NOUVEAUX ENUMS POUR TRA√áAGE D√âCISIONS IA - v3.9.7
# =============================================================================

class AiDecisionType(str, Enum):
    """Types de d√©cisions prises par l'IA pour tra√ßabilit√©"""
    CLASSIFICATION = "classification"           # Classification de la question
    RAG_SELECTION = "rag_selection"            # S√©lection des documents RAG
    RESPONSE_GENERATION = "response_generation" # G√©n√©ration de la r√©ponse
    CLARIFICATION = "clarification"            # Demande de clarification
    FALLBACK = "fallback"                      # Utilisation du fallback
    ENHANCEMENT = "enhancement"                # Am√©lioration de la question

class ResponseGenerationMethod(str, Enum):
    """M√©thodes de g√©n√©ration de r√©ponse pour tra√ßabilit√©"""
    RAG_DIRECT = "rag_direct"                  # RAG direct
    RAG_ENHANCED = "rag_enhanced"              # RAG avec am√©lioration
    GPT_GENERATION = "gpt_generation"          # G√©n√©ration GPT pure
    HYBRID = "hybrid"                          # M√©thode hybride
    TEMPLATE_BASED = "template_based"          # Bas√© sur template
    FALLBACK = "fallback"                      # M√©thode de fallback

# =============================================================================
# MOD√àLES POUR LES AM√âLIORATIONS (CONSERV√âS AVEC CORRECTIONS)
# =============================================================================

class ResponsePreferences(BaseModel):
    """Pr√©f√©rences de formatage de r√©ponse avec valeurs par d√©faut optimis√©es"""
    include_ranges: bool = Field(default=True, description="Inclure les fourchettes de valeurs")
    show_male_female_split: bool = Field(default=False, description="Diff√©rencier m√¢les/femelles")
    include_confidence_scores: bool = Field(default=False, description="Afficher les scores de confiance")
    preferred_units: str = Field(default="metric", description="Unit√©s pr√©f√©r√©es: metric/imperial")
    detail_level: str = Field(default="standard", description="Niveau de d√©tail: minimal/standard/detailed")

    @field_validator('preferred_units')
    @classmethod
    def validate_units(cls, v):
        if v not in ['metric', 'imperial']:
            raise ValueError('preferred_units must be "metric" or "imperial"')
        return v

    @field_validator('detail_level')
    @classmethod
    def validate_detail_level(cls, v):
        if v not in ['minimal', 'standard', 'detailed']:
            raise ValueError('detail_level must be "minimal", "standard", or "detailed"')
        return v

    model_config = ConfigDict(extra="ignore")

class ConcisionPreferences(BaseModel):
    """Pr√©f√©rences de concision pour les r√©ponses avec validation am√©lior√©e"""
    level: ConcisionLevel = Field(default=ConcisionLevel.CONCISE, description="Niveau de concision souhait√©")
    generate_all_versions: bool = Field(default=True, description="G√©n√©rer toutes les versions de concision")
    auto_detect_optimal: bool = Field(default=True, description="D√©tecter automatiquement le niveau optimal")
    cache_versions: bool = Field(default=True, description="Mettre en cache les versions g√©n√©r√©es")

    model_config = ConfigDict(extra="ignore")

class SemanticDynamicPreferences(BaseModel):
    """Pr√©f√©rences pour le mode s√©mantique dynamique avec validation"""
    enabled: bool = Field(default=False, description="Activer le mode s√©mantique dynamique")
    max_questions: int = Field(default=4, ge=1, le=10, description="Nombre maximum de questions √† g√©n√©rer")
    fallback_enabled: bool = Field(default=True, description="Utiliser questions de fallback si g√©n√©ration √©choue")
    context_aware: bool = Field(default=True, description="G√©n√©ration contextuelle intelligente")

    model_config = ConfigDict(extra="ignore")

class DocumentRelevance(BaseModel):
    """Score de pertinence d√©taill√© du document RAG avec m√©tadonn√©es enrichies"""
    score: float = Field(..., ge=0.0, le=1.0, description="Score de pertinence du document")
    source_document: Optional[str] = Field(default=None, description="Nom du document source")
    matched_section: Optional[str] = Field(default=None, description="Section correspondante")
    confidence_level: ConfidenceLevel = Field(default=ConfidenceLevel.MEDIUM, description="Niveau de confiance")
    chunk_used: Optional[str] = Field(default=None, description="Extrait utilis√© pour la r√©ponse")
    alternative_documents: List[str] = Field(default_factory=list, description="Documents alternatifs consid√©r√©s")
    search_query_used: Optional[str] = Field(default=None, description="Requ√™te de recherche utilis√©e")

    model_config = ConfigDict(extra="ignore")

class ContextCoherence(BaseModel):
    """V√©rification de coh√©rence entre contexte et RAG avec diagnostics d√©taill√©s"""
    entities_match: bool = Field(..., description="Les entit√©s contextuelles correspondent au RAG")
    missing_critical_info: List[str] = Field(default_factory=list, description="Informations critiques manquantes")
    rag_assumptions: Dict[str, str] = Field(default_factory=dict, description="Hypoth√®ses faites par le RAG")
    coherence_score: float = Field(..., ge=0.0, le=1.0, description="Score de coh√©rence global")
    warnings: List[str] = Field(default_factory=list, description="Alertes de coh√©rence")
    recommended_clarification: Optional[str] = Field(default=None, description="Clarification recommand√©e")
    entities_used_in_rag: Dict[str, Any] = Field(default_factory=dict, description="Entit√©s utilis√©es par le RAG")

    model_config = ConfigDict(extra="ignore")

class VaguenessDetection(BaseModel):
    """D√©tection de questions floues ou impr√©cises avec suggestions d'am√©lioration"""
    is_vague: bool = Field(..., description="La question est-elle floue")
    vagueness_score: float = Field(..., ge=0.0, le=1.0, description="Score de flou (1.0 = tr√®s flou)")
    missing_specifics: List[str] = Field(default_factory=list, description="√âl√©ments manquants")
    question_clarity: QuestionClarity = Field(default=QuestionClarity.UNCLEAR, description="Niveau de clart√©")
    suggested_clarification: Optional[str] = Field(default=None, description="Clarification sugg√©r√©e")
    actionable: bool = Field(default=True, description="La question peut-elle recevoir une r√©ponse actionnable")
    detected_patterns: List[str] = Field(default_factory=list, description="Patterns de flou d√©tect√©s")

    model_config = ConfigDict(extra="ignore")

class EnhancedFallbackDetails(BaseModel):
    """D√©tails enrichis pour les fallbacks avec diagnostics techniques"""
    failure_point: str = Field(..., description="Point d'√©chec dans le pipeline")
    last_known_entities: Dict[str, Any] = Field(default_factory=dict, description="Derni√®res entit√©s extraites")
    confidence_at_failure: float = Field(..., ge=0.0, le=1.0, description="Confiance au moment de l'√©chec")
    rag_attempts: List[str] = Field(default_factory=list, description="Tentatives RAG effectu√©es")
    error_category: str = Field(default="unknown", description="Cat√©gorie d'erreur")
    recovery_suggestions: List[str] = Field(default_factory=list, description="Suggestions de r√©cup√©ration")
    alternative_approaches: List[str] = Field(default_factory=list, description="Approches alternatives")
    technical_details: Optional[str] = Field(default=None, description="D√©tails techniques de l'erreur")

    model_config = ConfigDict(extra="ignore")

class QualityMetrics(BaseModel):
    """M√©triques de qualit√© d√©taill√©es pour l'√©valuation des r√©ponses"""
    response_completeness: float = Field(..., ge=0.0, le=1.0, description="Compl√©tude de la r√©ponse")
    information_accuracy: float = Field(..., ge=0.0, le=1.0, description="Pr√©cision des informations")
    contextual_relevance: float = Field(..., ge=0.0, le=1.0, description="Pertinence contextuelle")
    user_satisfaction_prediction: float = Field(..., ge=0.0, le=1.0, description="Pr√©diction de satisfaction")
    response_length_appropriateness: float = Field(..., ge=0.0, le=1.0, description="Pertinence de la longueur")
    technical_accuracy: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="Pr√©cision technique")

    model_config = ConfigDict(extra="ignore")

class ConcisionMetrics(BaseModel):
    """M√©triques pour √©valuer la qualit√© des versions de concision"""
    generation_time_ms: int = Field(..., ge=0, description="Temps de g√©n√©ration des versions en ms")
    versions_generated: int = Field(..., ge=0, le=4, description="Nombre de versions g√©n√©r√©es")
    cache_hit: bool = Field(default=False, description="Versions r√©cup√©r√©es depuis le cache")
    fallback_used: bool = Field(default=False, description="Fallback utilis√© pour certaines versions")
    compression_ratios: Dict[str, float] = Field(default_factory=dict, description="Ratios de compression par version")
    quality_scores: Dict[str, float] = Field(default_factory=dict, description="Scores de qualit√© par version")

    model_config = ConfigDict(extra="ignore")

class DynamicClarification(BaseModel):
    """Clarification g√©n√©r√©e dynamiquement via mode s√©mantique avec m√©tadonn√©es"""
    original_question: str = Field(..., min_length=1, description="Question originale de l'utilisateur")
    clarification_questions: List[str] = Field(..., min_length=1, description="Questions de clarification g√©n√©r√©es")
    confidence: float = Field(default=0.9, ge=0.0, le=1.0, description="Confiance dans la g√©n√©ration")
    generation_method: str = Field(default="gpt_semantic", description="M√©thode de g√©n√©ration utilis√©e")
    generation_time_ms: Optional[int] = Field(default=None, ge=0, description="Temps de g√©n√©ration en ms")
    fallback_used: bool = Field(default=False, description="Questions de fallback utilis√©es")

    @field_validator('clarification_questions')
    @classmethod
    def validate_clarification_questions(cls, v):
        if not v:
            raise ValueError('clarification_questions cannot be empty')
        return v

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# üß† NOUVEAUX MOD√àLES POUR TRA√áAGE D√âCISIONS IA - v3.9.7
# =============================================================================

class AiDecisionTrace(BaseModel):
    """
    Tra√ßage complet d'une d√©cision IA pour auditabilit√©
    
    Permet de comprendre pourquoi l'IA a pris une d√©cision sp√©cifique
    """
    decision_type: AiDecisionType = Field(..., description="Type de d√©cision prise")
    decision_value: str = Field(..., description="D√©cision prise par l'IA")
    confidence_score: float = Field(..., ge=0.0, le=1.0, description="Confiance dans la d√©cision")
    reasoning: str = Field(..., description="Raisonnement d√©taill√© de l'IA")
    alternatives_considered: List[str] = Field(default_factory=list, description="Alternatives consid√©r√©es")
    decision_time_ms: Optional[int] = Field(default=None, ge=0, description="Temps pour prendre la d√©cision")
    input_factors: Dict[str, Any] = Field(default_factory=dict, description="Facteurs d'entr√©e influen√ßant la d√©cision")
    model_used: Optional[str] = Field(default=None, description="Mod√®le IA utilis√© pour la d√©cision")

    model_config = ConfigDict(extra="ignore")

class ResponseGenerationTrace(BaseModel):
    """
    Tra√ßage sp√©cifique de la g√©n√©ration de r√©ponse
    
    D√©taille comment la r√©ponse finale a √©t√© g√©n√©r√©e
    """
    method_used: ResponseGenerationMethod = Field(..., description="M√©thode de g√©n√©ration utilis√©e")
    primary_sources: List[str] = Field(default_factory=list, description="Sources principales utilis√©es")
    fallback_triggered: bool = Field(default=False, description="Fallback d√©clench√©")
    enhancement_applied: bool = Field(default=False, description="Am√©lioration appliqu√©e")
    quality_checks_passed: List[str] = Field(default_factory=list, description="V√©rifications qualit√© r√©ussies")
    generation_steps: List[str] = Field(default_factory=list, description="√âtapes de g√©n√©ration")
    final_confidence: float = Field(..., ge=0.0, le=1.0, description="Confiance finale dans la r√©ponse")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES DE REQU√äTE AM√âLIOR√âS AVEC VALIDATION RENFORC√âE
# =============================================================================

class EnhancedQuestionRequest(BaseModel):
    """Request model am√©lior√© avec nouvelles fonctionnalit√©s + validation renforc√©e"""
    text: str = Field(..., min_length=1, max_length=5000, description="Texte de la question")
    language: str = Field(default="fr", description="Langue de r√©ponse")
    speed_mode: str = Field(default="balanced", description="Mode de vitesse")
    
    # Contexte conversationnel
    conversation_id: Optional[str] = Field(default=None, description="ID de conversation")
    user_id: Optional[str] = Field(default=None, description="ID utilisateur")
    
    # Champs pour clarification (am√©lior√©s)
    is_clarification_response: bool = Field(default=False, description="R√©ponse √† une clarification?")
    original_question: Optional[str] = Field(default=None, description="Question originale si clarification")
    clarification_context: Optional[Dict[str, Any]] = Field(default=None, description="Contexte de clarification")
    clarification_entities: Optional[Dict[str, str]] = Field(default=None, description="Entit√©s extraites (race, sexe)")
    force_reprocess: bool = Field(default=False, description="Forcer le retraitement")

    # Champs concision
    concision_level: ConcisionLevel = Field(default=ConcisionLevel.CONCISE, description="Niveau de concision souhait√©")
    generate_all_versions: bool = Field(default=True, description="G√©n√©rer toutes les versions de concision")
    concision_preferences: ConcisionPreferences = Field(default_factory=ConcisionPreferences, description="Pr√©f√©rences avanc√©es de concision")

    # Champs mode s√©mantique dynamique
    semantic_dynamic_mode: bool = Field(default=False, description="Activer le mode s√©mantique dynamique")
    semantic_dynamic_preferences: SemanticDynamicPreferences = Field(default_factory=SemanticDynamicPreferences, description="Pr√©f√©rences du mode s√©mantique dynamique")

    # üß† NOUVEAUX CHAMPS TRA√áAGE IA - v3.9.7
    enable_ai_tracing: bool = Field(default=True, description="Activer le tra√ßage des d√©cisions IA")
    trace_level: str = Field(default="standard", description="Niveau de tra√ßage: minimal/standard/detailed")

    # Fonctionnalit√©s existantes
    expected_response_format: ResponseFormat = Field(default=ResponseFormat.TEXT, description="Format de r√©ponse attendu")
    response_preferences: ResponsePreferences = Field(default_factory=ResponsePreferences, description="Pr√©f√©rences de r√©ponse")
    enable_vagueness_detection: bool = Field(default=True, description="Activer la d√©tection de questions floues")
    require_coherence_check: bool = Field(default=True, description="Exiger la v√©rification de coh√©rence")
    detailed_rag_scoring: bool = Field(default=False, description="Scoring RAG d√©taill√©")
    enable_quality_metrics: bool = Field(default=False, description="Activer les m√©triques de qualit√©")
    debug_mode: bool = Field(default=False, description="Mode debug pour d√©veloppeurs")

    @field_validator('language')
    @classmethod
    def validate_language(cls, v):
        supported_languages = ['fr', 'en', 'es']
        if v not in supported_languages:
            raise ValueError(f'language must be one of {supported_languages}')
        return v

    @field_validator('speed_mode')
    @classmethod
    def validate_speed_mode(cls, v):
        supported_modes = ['fast', 'balanced', 'quality']
        if v not in supported_modes:
            raise ValueError(f'speed_mode must be one of {supported_modes}')
        return v

    @field_validator('trace_level')
    @classmethod
    def validate_trace_level(cls, v):
        supported_levels = ['minimal', 'standard', 'detailed']
        if v not in supported_levels:
            raise ValueError(f'trace_level must be one of {supported_levels}')
        return v

    @model_validator(mode='after')
    def validate_clarification_consistency(self):
        if self.is_clarification_response and not self.original_question:
            raise ValueError('original_question is required when is_clarification_response is True')
        return self

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_default=True,
        extra="ignore"
    )

class FeedbackRequest(BaseModel):
    """Request model pour feedback avec validation am√©lior√©e"""
    rating: str = Field(..., description="Rating: positive, negative, neutral")
    comment: Optional[str] = Field(default=None, max_length=1000, description="Commentaire optionnel")
    conversation_id: Optional[str] = Field(default=None, description="ID de conversation")
    quality_feedback: Optional[Dict[str, float]] = Field(default=None, description="Feedback d√©taill√© sur la qualit√©")

    @field_validator('rating')
    @classmethod
    def validate_rating(cls, v):
        valid_ratings = ['positive', 'negative', 'neutral']
        if v not in valid_ratings:
            raise ValueError(f'rating must be one of {valid_ratings}')
        return v

    @field_validator('quality_feedback')
    @classmethod
    def validate_quality_feedback(cls, v):
        if v is not None:
            for key, value in v.items():
                if not isinstance(value, (int, float)) or not (0.0 <= value <= 1.0):
                    raise ValueError(f'quality_feedback values must be numbers between 0.0 and 1.0')
        return v

    model_config = ConfigDict(
        str_strip_whitespace=True,
        extra="ignore"
    )

# =============================================================================
# MOD√àLES DE R√âPONSE AM√âLIOR√âS AVEC DOCUMENTATION ENRICHIE + CHAMPS MANQUANTS + TRA√áAGE IA v3.9.7
# =============================================================================

class EnhancedExpertResponse(BaseModel):
    """
    Response model complet avec toutes les fonctionnalit√©s avanc√©es + tra√ßage IA
    
    üß† NOUVEAU v3.9.7: Ajout des champs de tra√ßage des d√©cisions IA:
    - ai_classification_used: Bool si classification IA utilis√©e
    - ai_decision: D√©cision principale prise par l'IA
    - ai_confidence: Niveau de confiance global de l'IA
    - ai_reasoning: Raisonnement d√©taill√© de l'IA
    - response_generation_method: M√©thode de g√©n√©ration utilis√©e
    
    üîß CORRECTION v3.9.6: Ajout des champs manquants pour correction compl√®te:
    - clarification_details: Dict des d√©tails de clarification
    - enhancement_info: Dict des informations d'am√©lioration
    - conversation_context: Dict du contexte conversationnel
    - pipeline_version: Version du pipeline utilis√©
    - pipeline_improvements: Liste des am√©liorations appliqu√©es
    
    Exemple d'utilisation:
    ```python
    response = EnhancedExpertResponse(
        question="Quel est le poids normal d'un poulet √† 20 jours?",
        response="Le poids normal est de 350-400g √† cet √¢ge.",
        conversation_id="conv_123",
        rag_used=True,
        timestamp="2024-01-01T12:00:00Z",
        language="fr",
        response_time_ms=1500,
        mode="standard",
        enriched_question="Quel est le poids normal d'un poulet de race Ross 308 √† 20 jours d'√¢ge?",
        # Nouveaux champs IA v3.9.7
        ai_classification_used=True,
        ai_decision="rag_with_enhancement",
        ai_confidence=0.85,
        ai_reasoning="Question claire sur poids poulet - Race d√©tect√©e automatiquement comme Ross 308 bas√© sur contexte standard",
        response_generation_method="rag_enhanced",
        # Champs existants v3.9.6
        clarification_details={"method": "dynamic_gpt", "confidence": 0.9},
        enhancement_info={"rag_enhancer": "applied", "method_used": "contextual"},
        conversation_context={"previous_topics": ["alimentation", "croissance"]},
        pipeline_version="expert_models_aligned_v4.1.0",
        pipeline_improvements=["agents_always_active", "critical_clarification_blocking"],
        response_versions={
            "ultra_concise": "350-400g",
            "concise": "Le poids normal est de 350-400g √† cet √¢ge.",
            "standard": "Le poids normal d'un poulet √† 20 jours est de 350-400g. Surveillez la croissance.",
            "detailed": "Le poids normal d'un poulet Ross 308 √† 20 jours se situe entre 350-400g pour les m√¢les..."
        }
    )
    ```
    """
    
    # Champs principaux (obligatoires)
    question: str = Field(..., description="Question pos√©e par l'utilisateur")
    response: str = Field(..., description="R√©ponse g√©n√©r√©e par l'IA")
    conversation_id: str = Field(..., description="ID unique de conversation")
    rag_used: Optional[bool] = Field(default=None, description="RAG utilis√© pour cette r√©ponse")
    timestamp: str = Field(..., description="Timestamp ISO de la r√©ponse")
    language: str = Field(..., description="Langue de la r√©ponse")
    response_time_ms: int = Field(..., ge=0, description="Temps de r√©ponse en millisecondes")
    mode: str = Field(..., description="Mode de traitement utilis√©")
    
    # üîß CORRECTION v3.9.5: Ajout du champ enriched_question demand√©
    enriched_question: Optional[str] = Field(default=None, description="Question enrichie par agent_rag_enhancer")
    
    # üß† NOUVEAUX CHAMPS TRA√áAGE IA - v3.9.7
    ai_classification_used: Optional[bool] = Field(default=None, description="Classification IA utilis√©e")
    ai_decision: Optional[str] = Field(default=None, description="D√©cision prise par l'IA")
    ai_confidence: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="Confiance de l'IA")
    ai_reasoning: Optional[str] = Field(default=None, description="Raisonnement de l'IA")
    response_generation_method: Optional[str] = Field(default=None, description="M√©thode g√©n√©ration r√©ponse")
    
    # üß† TRA√áAGE AVANC√â IA - v3.9.7 (optionnel pour compatibilit√©)
    ai_decision_traces: Optional[List[AiDecisionTrace]] = Field(default=None, description="Traces d√©taill√©es des d√©cisions IA")
    response_generation_trace: Optional[ResponseGenerationTrace] = Field(default=None, description="Trace de g√©n√©ration de r√©ponse")
    
    # üîß CORRECTION v3.9.6: AJOUTS OBLIGATOIRES pour correction demand√©e
    clarification_details: Optional[Dict[str, Any]] = Field(default=None, description="D√©tails de clarification")
    enhancement_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations d'am√©lioration")
    
    # üîß CORRECTION v3.9.6: CHAMPS OPTIONNELS SUPPL√âMENTAIRES pour correction demand√©e
    conversation_context: Optional[Dict[str, Any]] = Field(default=None, description="Contexte de conversation")
    pipeline_version: Optional[str] = Field(default=None, description="Version du pipeline")
    pipeline_improvements: Optional[List[str]] = Field(default=None, description="Am√©liorations appliqu√©es")
    
    # üîß CORRECTION v3.9.5: Ajout des champs demand√©s dans les sp√©cifications
    clarification_required_critical: Optional[bool] = Field(default=None, description="Clarification critique requise")
    missing_critical_entities: Optional[List[str]] = Field(default=None, description="Entit√©s critiques manquantes")
    variants_tested: Optional[List[str]] = Field(default=None, description="Variantes test√©es par le syst√®me")
    
    # Champs optionnels avec valeurs par d√©faut
    rag_score: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="Score de pertinence RAG")
    user: Optional[str] = Field(default=None, description="Utilisateur ayant pos√© la question")
    logged: bool = Field(default=False, description="R√©ponse logg√©e dans le syst√®me")
    validation_passed: Optional[bool] = Field(default=None, description="Validation r√©ussie")
    validation_confidence: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="Confiance dans la validation")
    
    # Versions de concision
    response_versions: Optional[Dict[str, str]] = Field(
        default=None,
        description="Toutes les versions de concision de la r√©ponse",
        example={
            "ultra_concise": "350-400g",
            "concise": "Le poids normal est de 350-400g √† cet √¢ge.",
            "standard": "Le poids normal d'un poulet √† 20 jours est de 350-400g. Surveillez la croissance r√©guli√®rement.",
            "detailed": "Le poids normal d'un poulet Ross 308 √† 20 jours se situe entre 350-400g pour les m√¢les et 320-380g pour les femelles. Il est important de surveiller la croissance hebdomadairement et d'ajuster l'alimentation si n√©cessaire. Contactez votre v√©t√©rinaire si les √©carts d√©passent 15%."
        }
    )
    
    # M√©triques et informations techniques
    concision_metrics: Optional[ConcisionMetrics] = Field(default=None, description="M√©triques d√©taill√©es sur la g√©n√©ration des versions de concision")
    dynamic_clarification: Optional[DynamicClarification] = Field(default=None, description="Informations sur la clarification s√©mantique dynamique g√©n√©r√©e")
    
    # Traitement de clarification
    clarification_result: Optional[Dict[str, Any]] = Field(default=None, description="R√©sultat du traitement de clarification")
    reprocessed_after_clarification: Optional[bool] = Field(default=None, description="Retrait√© apr√®s clarification")
    conversation_state: Optional[str] = Field(default=None, description="√âtat de la conversation")
    extracted_entities: Optional[Dict[str, Any]] = Field(default=None, description="Entit√©s extraites de la question")
    confidence_overall: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="Confiance globale dans la r√©ponse")
    processing_steps: List[str] = Field(default_factory=list, description="√âtapes de traitement effectu√©es")
    ai_enhancements_used: List[str] = Field(default_factory=list, description="Am√©liorations IA utilis√©es")
    clarification_processing: Optional[Dict[str, Any]] = Field(default=None, description="M√©tadonn√©es traitement clarification")
    
    # Ajout du champ manquant contextualization_info
    contextualization_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations de contextualisation")
    
    # Fonctionnalit√©s avanc√©es
    document_relevance: Optional[DocumentRelevance] = Field(default=None, description="Score de pertinence d√©taill√©")
    context_coherence: Optional[ContextCoherence] = Field(default=None, description="V√©rification de coh√©rence")
    vagueness_detection: Optional[VaguenessDetection] = Field(default=None, description="D√©tection de questions floues")
    fallback_details: Optional[EnhancedFallbackDetails] = Field(default=None, description="D√©tails de fallback enrichis")
    response_format_applied: Optional[str] = Field(default=None, description="Format appliqu√© √† la r√©ponse")
    quality_metrics: Optional[QualityMetrics] = Field(default=None, description="M√©triques de qualit√© d√©taill√©es")
    
    # Debug et d√©veloppement
    debug_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations de debug")
    rag_debug: Optional[Dict[str, Any]] = Field(default=None, description="Debug d√©taill√© du RAG")
    performance_breakdown: Optional[Dict[str, int]] = Field(default=None, description="Breakdown des temps de traitement")

    # Informations sp√©cifiques nouvelles fonctionnalit√©s
    concision_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations syst√®me de concision")
    original_response: Optional[str] = Field(default=None, description="R√©ponse originale avant concision")
    taxonomy_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations taxonomiques")
    semantic_dynamic_info: Optional[Dict[str, Any]] = Field(default=None, description="Informations mode s√©mantique dynamique")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES UTILITAIRES AVEC VALIDATION AM√âLIOR√âE
# =============================================================================

class ClarificationResult(BaseModel):
    """R√©sultat de clarification avec entit√©s manquantes d√©taill√©es"""
    missing_entities: Optional[List[str]] = Field(default=None, description="Entit√©s manquantes identifi√©es")
    missing_critical_entities: Optional[List[str]] = Field(default=None, description="Entit√©s critiques manquantes")
    clarification_required_critical: Optional[bool] = Field(default=None, description="Clarification critique requise")
    critical_entities_for_type: Optional[List[str]] = Field(default=None, description="Entit√©s critiques pour ce type")
    clarification_needed: bool = Field(default=False, description="Clarification n√©cessaire")
    confidence_score: float = Field(default=0.0, ge=0.0, le=1.0, description="Score de confiance")
    suggested_questions: List[str] = Field(default_factory=list, description="Questions sugg√©r√©es")

    model_config = ConfigDict(extra="ignore")

class ValidationResult(BaseModel):
    """R√©sultat de validation avec diagnostics d√©taill√©s"""
    is_valid: bool = Field(..., description="La validation a-t-elle r√©ussi")
    rejection_message: str = Field(default="", description="Message d'erreur en cas de rejet")
    confidence: float = Field(default=0.0, ge=0.0, le=1.0, description="Confiance dans la validation")
    validation_details: Optional[Dict[str, Any]] = Field(default=None, description="D√©tails de validation")

    model_config = ConfigDict(extra="ignore")

class ProcessingContext(BaseModel):
    """Contexte de traitement avec suivi d√©taill√©"""
    user_id: str = Field(..., description="ID utilisateur")
    conversation_id: str = Field(..., description="ID conversation")
    request_ip: str = Field(..., description="IP de la requ√™te")
    processing_steps: List[str] = Field(default_factory=list, description="√âtapes de traitement")
    ai_enhancements_used: List[str] = Field(default_factory=list, description="Am√©liorations IA utilis√©es")
    start_time: Optional[float] = Field(default=None, description="Timestamp de d√©but")
    enhancement_flags: Dict[str, bool] = Field(default_factory=dict, description="Flags d'am√©lioration")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES POUR AM√âLIORER LA M√âMOIRE CONVERSATIONNELLE - CORRECTIONS v3.9.5
# =============================================================================

class IntelligentEntities(BaseModel):
    """
    Entit√©s intelligentes pour am√©liorer la m√©moire conversationnelle
    üîß CORRECTION v3.9.5: Ajout des champs weight et mortality demand√©s
    """
    # Attributs existants conserv√©s
    age: Optional[str] = Field(default=None, description="Age de l'animal")
    breed: Optional[str] = Field(default=None, description="Race de l'animal")
    sex: Optional[str] = Field(default=None, description="Sexe de l'animal")
    species: Optional[str] = Field(default=None, description="Esp√®ce de l'animal")
    production_type: Optional[str] = Field(default=None, description="Type de production")
    housing_system: Optional[str] = Field(default=None, description="Syst√®me d'√©levage")
    feed_type: Optional[str] = Field(default=None, description="Type d'alimentation")
    health_status: Optional[str] = Field(default=None, description="√âtat de sant√©")
    environment_conditions: Optional[Dict[str, Any]] = Field(default_factory=dict, description="Conditions environnementales")
    
    # üîß CORRECTION v3.9.5: Ajout des champs demand√©s dans les sp√©cifications
    age_in_days: Optional[int] = Field(default=None, description="Age en jours")
    age_in_weeks: Optional[int] = Field(default=None, description="Age en semaines")
    weight: Optional[float] = Field(default=None, description="Poids de l'animal en grammes")
    mortality: Optional[float] = Field(default=None, description="Taux de mortalit√© observ√©")
    
    # Champs suppl√©mentaires pour compatibilit√© avec conversation_memory
    temperature: Optional[float] = Field(default=None, description="Temp√©rature ambiante")
    humidity: Optional[float] = Field(default=None, description="Humidit√© relative")
    density: Optional[float] = Field(default=None, description="Densit√© d'√©levage")
    mortality_rate: Optional[float] = Field(default=None, description="Taux de mortalit√© (alias de mortality)")
    growth_rate: Optional[float] = Field(default=None, description="Taux de croissance")
    feed_conversion_ratio: Optional[float] = Field(default=None, description="Indice de consommation")
    
    # M√©tadonn√©es de confiance
    confidence_scores: Dict[str, float] = Field(default_factory=dict, description="Scores de confiance par entit√©")
    extraction_method: str = Field(default="nlp", description="M√©thode d'extraction utilis√©e")
    last_updated: Optional[str] = Field(default=None, description="Derni√®re mise √† jour")
    
    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES DE STATS ET CONFIGURATION SYST√àME
# =============================================================================

class SystemStats(BaseModel):
    """Statistiques syst√®me avec √©tat complet des fonctionnalit√©s"""
    system_available: bool = Field(..., description="Syst√®me disponible")
    timestamp: str = Field(..., description="Timestamp de l'√©tat")
    components: Dict[str, bool] = Field(..., description="√âtat des composants")
    enhanced_capabilities: List[str] = Field(default_factory=list, description="Capacit√©s am√©lior√©es")
    enhanced_endpoints: List[str] = Field(default_factory=list, description="Endpoints am√©lior√©s")
    quality_metrics_enabled: bool = Field(default=False, description="M√©triques de qualit√© activ√©es")
    debug_mode_available: bool = Field(default=False, description="Mode debug disponible")
    concision_system_enabled: bool = Field(default=True, description="Syst√®me de concision activ√©")
    semantic_dynamic_enabled: bool = Field(default=True, description="Mode s√©mantique dynamique activ√©")
    # üß† NOUVEAU v3.9.7
    ai_tracing_enabled: bool = Field(default=True, description="Tra√ßage IA activ√©")

    model_config = ConfigDict(extra="ignore")

class TestResult(BaseModel):
    """R√©sultat de test complet avec diagnostics"""
    question: str = Field(..., description="Question test√©e")
    conversation_id: str = Field(..., description="ID conversation de test")
    user_id: str = Field(..., description="ID utilisateur de test")
    timestamp: str = Field(..., description="Timestamp du test")
    components_tested: Dict[str, Any] = Field(..., description="Composants test√©s")
    test_successful: bool = Field(..., description="Test r√©ussi")
    errors: List[str] = Field(default_factory=list, description="Erreurs rencontr√©es")
    enhancement_results: Optional[Dict[str, Any]] = Field(default=None, description="R√©sultats des am√©liorations")
    concision_test_results: Optional[Dict[str, Any]] = Field(default=None, description="R√©sultats test concision")
    semantic_dynamic_test_results: Optional[Dict[str, Any]] = Field(default=None, description="R√©sultats test mode s√©mantique dynamique")
    # üß† NOUVEAU v3.9.7
    ai_tracing_test_results: Optional[Dict[str, Any]] = Field(default=None, description="R√©sultats test tra√ßage IA")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES POUR R√âPONSES SP√âCIALIS√âES
# =============================================================================

class VaguenessResponse(BaseModel):
    """R√©ponse sp√©cialis√©e pour questions floues avec suggestions"""
    question: str = Field(..., description="Question analys√©e")
    response: str = Field(..., description="R√©ponse g√©n√©r√©e")
    conversation_id: str = Field(..., description="ID conversation")
    vagueness_detection: VaguenessDetection = Field(..., description="D√©tection de flou")
    suggested_improvements: List[str] = Field(default_factory=list, description="Am√©liorations sugg√©r√©es")
    example_questions: List[str] = Field(default_factory=list, description="Exemples de questions")
    timestamp: str = Field(..., description="Timestamp")
    language: str = Field(..., description="Langue")
    response_time_ms: int = Field(..., ge=0, description="Temps de r√©ponse")

    model_config = ConfigDict(extra="ignore")

class CoherenceWarningResponse(BaseModel):
    """R√©ponse avec avertissements de coh√©rence d√©taill√©s"""
    original_response: str = Field(..., description="R√©ponse originale")
    coherence_warnings: List[str] = Field(default_factory=list, description="Avertissements de coh√©rence")
    suggested_clarifications: List[str] = Field(default_factory=list, description="Clarifications sugg√©r√©es")
    confidence_impact: float = Field(..., ge=0.0, le=1.0, description="Impact sur la confiance")
    should_ask_clarification: bool = Field(..., description="Demander une clarification")

    model_config = ConfigDict(extra="ignore")

class ConcisionResponse(BaseModel):
    """R√©ponse sp√©cialis√©e avec focus sur les versions de concision"""
    question: str = Field(..., description="Question pos√©e")
    selected_response: str = Field(..., description="R√©ponse s√©lectionn√©e")
    selected_level: ConcisionLevel = Field(..., description="Niveau de concision s√©lectionn√©")
    all_versions: Dict[str, str] = Field(..., description="Toutes les versions g√©n√©r√©es")
    conversation_id: str = Field(..., description="ID conversation")
    generation_details: ConcisionMetrics = Field(..., description="D√©tails de g√©n√©ration")
    timestamp: str = Field(..., description="Timestamp")
    language: str = Field(..., description="Langue")
    response_time_ms: int = Field(..., ge=0, description="Temps de r√©ponse")

    model_config = ConfigDict(extra="ignore")

class SemanticDynamicResponse(BaseModel):
    """R√©ponse sp√©cialis√©e pour clarification s√©mantique dynamique"""
    question: str = Field(..., description="Question originale")
    clarification_questions: List[str] = Field(..., min_length=1, description="Questions de clarification")
    conversation_id: str = Field(..., description="ID conversation")
    dynamic_clarification: DynamicClarification = Field(..., description="D√©tails clarification dynamique")
    generation_method: str = Field(..., description="M√©thode de g√©n√©ration")
    confidence_score: float = Field(..., ge=0.0, le=1.0, description="Score de confiance")
    timestamp: str = Field(..., description="Timestamp")
    language: str = Field(..., description="Langue")
    response_time_ms: int = Field(..., ge=0, description="Temps de r√©ponse")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# MOD√àLES DE CONFIGURATION SYST√àME
# =============================================================================

class SemanticDynamicConfig(BaseModel):
    """Configuration du syst√®me s√©mantique dynamique avec validation"""
    enabled: bool = Field(default=True, description="Syst√®me activ√©")
    max_questions: int = Field(default=4, ge=1, le=10, description="Nombre max de questions")
    supported_languages: List[str] = Field(default=["fr", "en", "es"], description="Langues support√©es")
    gpt_model: str = Field(default="gpt-4o-mini", description="Mod√®le GPT utilis√©")
    fallback_enabled: bool = Field(default=True, description="Fallback activ√©")
    context_aware: bool = Field(default=True, description="Prise en compte du contexte")
    timeout_seconds: int = Field(default=25, ge=5, le=60, description="Timeout en secondes")

    model_config = ConfigDict(extra="ignore")

class TaxonomicFilteringConfig(BaseModel):
    """Configuration du filtrage taxonomique avec validation"""
    enabled: bool = Field(default=True, description="Filtrage activ√©")
    supported_taxonomies: List[str] = Field(
        default=["broiler", "layer", "swine", "dairy", "general"], 
        description="Taxonomies support√©es"
    )
    auto_detection: bool = Field(default=True, description="D√©tection automatique")
    filter_fallback: bool = Field(default=True, description="Fallback de filtrage")
    question_enhancement: bool = Field(default=True, description="Am√©lioration des questions")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# üß† NOUVEAU: CONFIGURATION TRA√áAGE IA - v3.9.7
# =============================================================================

class AiTracingConfig(BaseModel):
    """Configuration du syst√®me de tra√ßage des d√©cisions IA"""
    enabled: bool = Field(default=True, description="Tra√ßage IA activ√©")
    trace_level: str = Field(default="standard", description="Niveau de tra√ßage: minimal/standard/detailed")
    store_traces: bool = Field(default=True, description="Stocker les traces pour audit")
    trace_timeout_ms: int = Field(default=1000, ge=100, le=5000, description="Timeout pour g√©n√©ration des traces")
    include_alternatives: bool = Field(default=True, description="Inclure les alternatives consid√©r√©es")
    include_reasoning: bool = Field(default=True, description="Inclure le raisonnement d√©taill√©")
    
    @field_validator('trace_level')
    @classmethod
    def validate_trace_level(cls, v):
        supported_levels = ['minimal', 'standard', 'detailed']
        if v not in supported_levels:
            raise ValueError(f'trace_level must be one of {supported_levels}')
        return v

    model_config = ConfigDict(extra="ignore")

class EnhancedSystemConfig(BaseModel):
    """Configuration syst√®me compl√®te avec tous les modules"""
    concision_config: Optional[Dict[str, Any]] = Field(default=None, description="Configuration concision")
    semantic_dynamic_config: SemanticDynamicConfig = Field(default_factory=SemanticDynamicConfig, description="Config s√©mantique dynamique")
    taxonomic_filtering_config: TaxonomicFilteringConfig = Field(default_factory=TaxonomicFilteringConfig, description="Config filtrage taxonomique")
    # üß† NOUVEAU v3.9.7
    ai_tracing_config: AiTracingConfig = Field(default_factory=AiTracingConfig, description="Config tra√ßage IA")
    
    response_versions_enabled: bool = Field(default=True, description="Versions de r√©ponses activ√©es")
    advanced_clarification_enabled: bool = Field(default=True, description="Clarification avanc√©e activ√©e")

    model_config = ConfigDict(extra="ignore")

# =============================================================================
# CONFIGURATION ET LOGGING
# =============================================================================

logger = logging.getLogger(__name__)

logger.info("‚úÖ [Expert Models] Mod√®les Pydantic charg√©s avec corrections compl√®tes v3.9.7")
logger.info("üß† [Expert Models] NOUVEAUT√âS v3.9.7 - TRA√áAGE D√âCISIONS IA:")
logger.info("   - ‚úÖ ai_classification_used: Optional[bool] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ ai_decision: Optional[str] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ ai_confidence: Optional[float] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ ai_reasoning: Optional[str] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ response_generation_method: Optional[str] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ AiDecisionTrace: Nouveau mod√®le pour tra√ßage d√©taill√©")
logger.info("   - ‚úÖ ResponseGenerationTrace: Nouveau mod√®le pour tra√ßage g√©n√©ration")
logger.info("   - ‚úÖ AiDecisionType: Enum pour types de d√©cisions")
logger.info("   - ‚úÖ ResponseGenerationMethod: Enum pour m√©thodes de g√©n√©ration")
logger.info("   - ‚úÖ AiTracingConfig: Configuration du tra√ßage IA")
logger.info("   - ‚úÖ enable_ai_tracing: Param√®tre dans EnhancedQuestionRequest")
logger.info("üîß [Expert Models] CORRECTIONS v3.9.6 conserv√©es (selon demande sp√©cifique):")
logger.info("   - ‚úÖ clarification_details: Optional[Dict[str, Any]] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ enhancement_info: Optional[Dict[str, Any]] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ conversation_context: Optional[Dict[str, Any]] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ pipeline_version: Optional[str] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ pipeline_improvements: Optional[List[str]] dans EnhancedExpertResponse")
logger.info("üîß [Expert Models] CORRECTIONS PR√âC√âDENTES conserv√©es:")
logger.info("   - ‚úÖ enriched_question: Optional[str] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ clarification_required_critical: Optional[bool] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ missing_critical_entities: Optional[List[str]] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ variants_tested: Optional[List[str]] dans EnhancedExpertResponse")
logger.info("   - ‚úÖ age_in_days, age_in_weeks, weight, mortality dans IntelligentEntities")
logger.info("   - ‚úÖ ClarificationResult avec missing_entities pour √©viter l'erreur")
logger.info("   - ‚úÖ contextualization_info ajout√© √† EnhancedExpertResponse")
logger.info("   - ‚úÖ clarification_processing ajout√© pour m√©tadonn√©es")
logger.info("   - ‚úÖ Validation robuste pour tous les mod√®les")
logger.info("üÜï [Expert Models] Fonctionnalit√©s compl√®tes:")
logger.info("   - üìä DocumentRelevance: Scoring RAG d√©taill√©")
logger.info("   - üîç ContextCoherence: V√©rification de coh√©rence")
logger.info("   - üéØ VaguenessDetection: D√©tection de questions floues")
logger.info("   - üîß EnhancedFallbackDetails: Fallback enrichi")
logger.info("   - üìà QualityMetrics: M√©triques de qualit√©")
logger.info("   - üêõ Debug mode: Support pour d√©veloppeurs")
logger.info("üöÄ [Expert Models] FONCTIONNALIT√âS RESPONSE VERSIONS:")
logger.info("   - üìù ConcisionLevel: 4 niveaux valid√©s")
logger.info("   - üéõÔ∏è response_versions: Toutes les versions dans la r√©ponse")
logger.info("   - üìä ConcisionMetrics: M√©triques g√©n√©ration valid√©es")
logger.info("üÜï [Expert Models] FONCTIONNALIT√âS SEMANTIC DYNAMIC:")
logger.info("   - üé≠ DynamicClarification: Mod√®le valid√©")
logger.info("   - ü§ñ semantic_dynamic_mode: Param√®tre valid√©")
logger.info("   - ‚öôÔ∏è SemanticDynamicConfig: Configuration valid√©e")
logger.info("üß† [Expert Models] AVANTAGES TRA√áAGE IA v3.9.7:")
logger.info("   - üîç Auditabilit√© compl√®te des d√©cisions IA")
logger.info("   - üìä M√©triques de confiance d√©taill√©es")
logger.info("   - üéØ Tra√ßage des m√©thodes de g√©n√©ration")
logger.info("   - üîß Debug avanc√© pour les d√©veloppeurs")
logger.info("   - üìã Compatibilit√© ascendante 100%")
logger.info("‚ú® [Expert Models] R√âSULTAT v3.9.7: Tra√ßage IA complet ajout√© avec succ√®s!")
logger.info("üéØ [Expert Models] UTILISATION TRA√áAGE IA:")
logger.info("   ‚Üí Activer: enable_ai_tracing=True dans la requ√™te")
logger.info("   ‚Üí Niveau: trace_level='standard/detailed' pour plus de d√©tails")
logger.info("   ‚Üí Acc√®s: Champs ai_* dans EnhancedExpertResponse")
logger.info("   ‚Üí Debug: ai_decision_traces pour tra√ßage complet")
logger.info("üöÄ [Expert Models] PR√äT POUR PRODUCTION AVEC TRA√áAGE IA COMPLET!")