"""
unified_response_generator.py - G√âN√âRATEUR AVEC SUPPORT CONTEXTUAL_ANSWER

üéØ AM√âLIORATIONS AJOUT√âES:
- ‚úÖ Support du type CONTEXTUAL_ANSWER
- ‚úÖ Utilisation des weight_data calcul√©es par le classifier
- ‚úÖ G√©n√©ration de r√©ponses pr√©cises Ross 308 m√¢le 12j
- ‚úÖ Interpolation automatique des √¢ges interm√©diaires
- ‚úÖ Templates sp√©cialis√©s pour r√©ponses contextuelles

Nouveau flux:
1. Classification ‚Üí CONTEXTUAL_ANSWER avec weight_data
2. Response Generator ‚Üí Utilise weight_data pour r√©ponse pr√©cise
3. Output ‚Üí "Ross 308 m√¢le √† 12 jours : 380-420g" üéØ
"""

import logging
import re
from typing import Dict, Any, Optional, List
from datetime import datetime

# Import des fonctions de calcul de poids
from .intelligent_system_config import get_weight_range, validate_weight_range

logger = logging.getLogger(__name__)

class ResponseData:
    """Structure pour les donn√©es de r√©ponse"""
    def __init__(self, response: str, response_type: str, confidence: float = 0.8, 
                 precision_offer: str = None, examples: List[str] = None,
                 weight_data: Dict[str, Any] = None):
        self.response = response
        self.response_type = response_type
        self.confidence = confidence
        self.precision_offer = precision_offer
        self.examples = examples or []
        self.weight_data = weight_data or {}
        self.generated_at = datetime.now().isoformat()

class UnifiedResponseGenerator:
    """G√©n√©rateur unique pour tous les types de r√©ponse avec support contextuel"""
    
    def __init__(self):
        # Configuration des fourchettes de poids par race et √¢ge (garde pour compatibilit√©)
        self.weight_ranges = {
            "ross_308": {
                7: {"male": (180, 220), "female": (160, 200), "mixed": (170, 210)},
                14: {"male": (450, 550), "female": (400, 500), "mixed": (425, 525)},
                21: {"male": (850, 1050), "female": (750, 950), "mixed": (800, 1000)},
                28: {"male": (1400, 1700), "female": (1200, 1500), "mixed": (1300, 1600)},
                35: {"male": (2000, 2400), "female": (1800, 2200), "mixed": (1900, 2300)}
            },
            "cobb_500": {
                7: {"male": (175, 215), "female": (155, 195), "mixed": (165, 205)},
                14: {"male": (440, 540), "female": (390, 490), "mixed": (415, 515)},
                21: {"male": (830, 1030), "female": (730, 930), "mixed": (780, 980)},
                28: {"male": (1380, 1680), "female": (1180, 1480), "mixed": (1280, 1580)},
                35: {"male": (1980, 2380), "female": (1780, 2180), "mixed": (1880, 2280)}
            },
            "hubbard": {
                7: {"male": (170, 210), "female": (150, 190), "mixed": (160, 200)},
                14: {"male": (420, 520), "female": (370, 470), "mixed": (395, 495)},
                21: {"male": (800, 1000), "female": (700, 900), "mixed": (750, 950)},
                28: {"male": (1350, 1650), "female": (1150, 1450), "mixed": (1250, 1550)},
                35: {"male": (1950, 2350), "female": (1750, 2150), "mixed": (1850, 2250)}
            },
            "standard": {
                7: {"male": (160, 200), "female": (140, 180), "mixed": (150, 190)},
                14: {"male": (400, 500), "female": (350, 450), "mixed": (375, 475)},
                21: {"male": (750, 950), "female": (650, 850), "mixed": (700, 900)},
                28: {"male": (1250, 1550), "female": (1050, 1350), "mixed": (1150, 1450)},
                35: {"male": (1850, 2250), "female": (1650, 2050), "mixed": (1750, 2150)}
            }
        }

    def generate(self, question: str, entities: Dict[str, Any], classification_result) -> ResponseData:
        """
        POINT D'ENTR√âE UNIQUE - G√©n√®re la r√©ponse selon la classification
        
        Args:
            question: Question originale
            entities: Entit√©s extraites
            classification_result: R√©sultat du classifier
            
        Returns:
            ResponseData avec la r√©ponse g√©n√©r√©e
        """
        try:
            logger.info(f"üé® [Response Generator] Type: {classification_result.response_type.value}")
            
            # NOUVEAU: Support du type CONTEXTUAL_ANSWER
            if classification_result.response_type.value == "contextual_answer":
                return self._generate_contextual_answer(question, classification_result)
            
            elif classification_result.response_type.value == "precise_answer":
                return self._generate_precise(question, entities)
            
            elif classification_result.response_type.value == "general_answer":
                base_response = self._generate_general(question, entities)
                precision_offer = self._generate_precision_offer(entities, classification_result.missing_entities)
                
                # Combiner r√©ponse + offre de pr√©cision
                if precision_offer:
                    full_response = f"{base_response}\n\nüí° **Pour plus de pr√©cision**: {precision_offer}"
                else:
                    full_response = base_response
                
                return ResponseData(
                    response=full_response,
                    response_type="general_with_offer",
                    confidence=0.8,
                    precision_offer=precision_offer
                )
            
            else:  # needs_clarification
                return self._generate_clarification(question, entities, classification_result.missing_entities)
                
        except Exception as e:
            logger.error(f"‚ùå [Response Generator] Erreur g√©n√©ration: {e}")
            return self._generate_fallback_response(question)

    def _generate_contextual_answer(self, question: str, classification_result) -> ResponseData:
        """NOUVEAU: G√©n√®re une r√©ponse contextuelle bas√©e sur les donn√©es fusionn√©es"""
        
        merged_entities = classification_result.merged_entities
        weight_data = classification_result.weight_data
        
        logger.info(f"üîó [Contextual] G√©n√©ration r√©ponse avec donn√©es: {weight_data}")
        
        # Si on a des donn√©es de poids pr√©calcul√©es, les utiliser
        if weight_data and 'weight_range' in weight_data:
            return self._generate_contextual_weight_response(merged_entities, weight_data)
        
        # Sinon, g√©n√©rer une r√©ponse contextuelle standard
        else:
            return self._generate_contextual_standard_response(merged_entities)

    def _generate_contextual_weight_response(self, entities: Dict[str, Any], weight_data: Dict[str, Any]) -> ResponseData:
        """G√©n√®re une r√©ponse de poids contextuelle avec donn√©es pr√©cises"""
        
        breed = weight_data.get('breed', 'Race non sp√©cifi√©e')
        age_days = weight_data.get('age_days', 0)
        sex = weight_data.get('sex', 'mixed')
        min_weight, max_weight = weight_data.get('weight_range', (0, 0))
        target_weight = weight_data.get('target_weight', (min_weight + max_weight) // 2)
        
        # Conversion du sexe pour affichage
        sex_display = {
            'male': 'm√¢le',
            'female': 'femelle', 
            'mixed': 'mixte'
        }.get(sex, sex)
        
        # Indicateurs d'h√©ritage contextuel
        context_indicators = []
        if entities.get('age_context_inherited'):
            context_indicators.append("√¢ge du contexte")
        if entities.get('breed_context_inherited'):
            context_indicators.append("race du contexte")
        if entities.get('sex_context_inherited'):
            context_indicators.append("sexe du contexte")
        
        context_info = ""
        if context_indicators:
            context_info = f"\nüîó **Contexte utilis√©** : {', '.join(context_indicators)}"
        
        response = f"""**Poids cible pour {breed} {sex_display} √† {age_days} jours :**

üéØ **Fourchette pr√©cise** : **{min_weight}-{max_weight} grammes**

üìä **D√©tails sp√©cifiques** :
‚Ä¢ Poids minimum : {min_weight}g
‚Ä¢ Poids cible optimal : {target_weight}g  
‚Ä¢ Poids maximum : {max_weight}g

‚ö° **Surveillance recommand√©e** :
‚Ä¢ Pes√©e hebdomadaire d'un √©chantillon repr√©sentatif
‚Ä¢ V√©rification de l'homog√©n√©it√© du troupeau
‚Ä¢ Ajustement alimentaire si √©cart >15%

üö® **Signaux d'alerte** :
‚Ä¢ <{weight_data.get('alert_thresholds', {}).get('low', int(min_weight * 0.85))}g : Retard de croissance
‚Ä¢ >{weight_data.get('alert_thresholds', {}).get('high', int(max_weight * 1.15))}g : Croissance excessive{context_info}

üí° **Standards bas√©s sur** : Donn√©es de r√©f√©rence {breed} officielles"""

        return ResponseData(
            response=response,
            response_type="contextual_weight_precise",
            confidence=0.95,
            weight_data=weight_data
        )

    def _generate_contextual_standard_response(self, entities: Dict[str, Any]) -> ResponseData:
        """G√©n√®re une r√©ponse contextuelle standard (sans donn√©es de poids)"""
        
        breed = entities.get('breed_specific', 'Race sp√©cifi√©e')
        age = entities.get('age_days', '√Çge sp√©cifi√©')
        sex = entities.get('sex', 'Sexe sp√©cifi√©')
        
        # Indicateurs d'h√©ritage contextuel
        context_parts = []
        if entities.get('age_context_inherited'):
            context_parts.append(f"√¢ge ({age} jours)")
        if entities.get('breed_context_inherited'):
            context_parts.append(f"race ({breed})")
        if entities.get('sex_context_inherited'):
            context_parts.append(f"sexe ({sex})")
        
        if context_parts:
            context_info = f"En me basant sur le contexte de notre conversation ({', '.join(context_parts)}), "
        else:
            context_info = f"Pour {breed} {sex} √† {age} jours, "
        
        response = f"""**R√©ponse contextuelle bas√©e sur votre clarification :**

{context_info}voici les informations demand√©es :

üîó **Contexte de conversation d√©tect√©** :
‚Ä¢ Race : {breed}
‚Ä¢ Sexe : {sex}  
‚Ä¢ √Çge : {age} jours
‚Ä¢ Type de question : Performance/Poids

üìä **Recommandations g√©n√©rales** :
‚Ä¢ Surveillance des standards de croissance
‚Ä¢ Ajustement selon les performances observ√©es
‚Ä¢ Consultation sp√©cialis√©e si √©carts significatifs

üí° **Pour des valeurs pr√©cises**, consultez les standards de votre souche sp√©cifique ou votre v√©t√©rinaire avicole."""

        return ResponseData(
            response=response,
            response_type="contextual_standard",
            confidence=0.8
        )

    def _generate_precise(self, question: str, entities: Dict[str, Any]) -> ResponseData:
        """G√©n√®re une r√©ponse pr√©cise avec donn√©es sp√©cifiques (m√©thode existante am√©lior√©e)"""
        
        breed = entities.get('breed_specific', '').lower().replace(' ', '_')
        age_days = entities.get('age_days')
        sex = entities.get('sex', 'mixed').lower()
        
        # Normaliser le sexe
        if sex in ['m√¢le', 'male', 'coq']:
            sex = 'male'
        elif sex in ['femelle', 'female', 'poule']:
            sex = 'female'
        else:
            sex = 'mixed'
        
        # Questions de poids
        if any(word in question.lower() for word in ['poids', 'weight', 'gramme', 'cible']):
            # NOUVEAU: Utiliser la fonction de config au lieu des donn√©es locales
            try:
                weight_range = get_weight_range(breed, age_days, sex)
                min_weight, max_weight = weight_range
                
                return self._generate_precise_weight_response_enhanced(breed, age_days, sex, weight_range)
                
            except Exception as e:
                logger.error(f"‚ùå [Precise] Erreur calcul poids: {e}")
                return self._generate_precise_weight_response(breed, age_days, sex)
        
        # Questions de croissance
        elif any(word in question.lower() for word in ['croissance', 'd√©veloppement', 'grandir']):
            return self._generate_precise_growth_response(breed, age_days, sex)
        
        # Fallback g√©n√©ral pr√©cis
        else:
            return ResponseData(
                response=f"Pour un {breed.replace('_', ' ').title()} {sex} de {age_days} jours, "
                        f"les param√®tres normaux d√©pendent du contexte sp√©cifique. "
                        f"Consultez les standards de la race pour des valeurs pr√©cises.",
                response_type="precise_general",
                confidence=0.7
            )

    def _generate_precise_weight_response_enhanced(self, breed: str, age_days: int, sex: str, weight_range: tuple) -> ResponseData:
        """NOUVEAU: G√©n√®re r√©ponse pr√©cise avec donn√©es de la config"""
        
        min_weight, max_weight = weight_range
        target_weight = (min_weight + max_weight) // 2
        
        # Calculer les seuils d'alerte
        alert_low = int(min_weight * 0.85)
        alert_high = int(max_weight * 1.15)
        
        breed_name = breed.replace('_', ' ').title()
        sex_str = {'male': 'm√¢les', 'female': 'femelles', 'mixed': 'mixtes'}[sex]
        
        response = f"""**Poids cible pour {breed_name} {sex_str} √† {age_days} jours :**

üéØ **Fourchette officielle** : **{min_weight}-{max_weight} grammes**

üìä **D√©tails sp√©cifiques** :
‚Ä¢ Poids minimum acceptable : {min_weight}g
‚Ä¢ Poids cible optimal : {target_weight}g  
‚Ä¢ Poids maximum normal : {max_weight}g

‚ö° **Surveillance recommand√©e** :
‚Ä¢ Pes√©e hebdomadaire d'√©chantillon repr√©sentatif (10-20 sujets)
‚Ä¢ V√©rification homog√©n√©it√© du troupeau
‚Ä¢ Ajustement alimentaire si n√©cessaire

üö® **Signaux d'alerte** :
‚Ä¢ <{alert_low}g : Retard de croissance - V√©rifier alimentation et sant√©
‚Ä¢ >{alert_high}g : Croissance excessive - Contr√¥ler distribution alimentaire
‚Ä¢ H√©t√©rog√©n√©it√© >20% : Probl√®me de gestion du troupeau

üí° **Standards bas√©s sur** : Donn√©es de r√©f√©rence {breed_name} officielles avec interpolation pr√©cise"""

        return ResponseData(
            response=response,
            response_type="precise_weight_enhanced",
            confidence=0.95,
            weight_data={
                "breed": breed_name,
                "age_days": age_days,
                "sex": sex,
                "weight_range": weight_range,
                "target_weight": target_weight,
                "alert_thresholds": {"low": alert_low, "high": alert_high}
            }
        )

    def _generate_precise_weight_response(self, breed: str, age_days: int, sex: str) -> ResponseData:
        """G√©n√®re r√©ponse pr√©cise pour le poids (m√©thode existante de fallback)"""
        
        # Trouver la tranche d'√¢ge la plus proche
        closest_age = self._find_closest_age(age_days)
        
        # Obtenir les donn√©es de poids
        breed_data = self.weight_ranges.get(breed, self.weight_ranges['standard'])
        weight_range = breed_data.get(closest_age, {}).get(sex, (300, 500))
        
        min_weight, max_weight = weight_range
        
        # Ajuster pour l'√¢ge exact si diff√©rent
        if age_days != closest_age:
            adjustment_factor = age_days / closest_age
            min_weight = int(min_weight * adjustment_factor)
            max_weight = int(max_weight * adjustment_factor)
        
        breed_name = breed.replace('_', ' ').title()
        sex_str = {'male': 'm√¢les', 'female': 'femelles', 'mixed': 'mixtes'}[sex]
        
        response = f"""**Poids cible pour {breed_name} {sex_str} √† {age_days} jours :**

üéØ **Fourchette normale** : {min_weight}-{max_weight} grammes

üìä **D√©tails sp√©cifiques** :
‚Ä¢ Poids minimum acceptable : {min_weight}g
‚Ä¢ Poids optimal : {int((min_weight + max_weight) / 2)}g  
‚Ä¢ Poids maximum normal : {max_weight}g

‚ö° **Surveillance recommand√©e** :
‚Ä¢ Pes√©e hebdomadaire du troupeau
‚Ä¢ Alerte si √©cart >15% de la fourchette
‚Ä¢ Ajustement alimentaire si n√©cessaire

ü©∫ **Action si hors fourchette** :
‚Ä¢ <{min_weight}g : V√©rifier alimentation et sant√©
‚Ä¢ >{max_weight}g : Contr√¥ler la distribution alimentaire"""

        return ResponseData(
            response=response,
            response_type="precise_weight",
            confidence=0.95
        )

    def _generate_general(self, question: str, entities: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse g√©n√©rale utile (m√©thode existante conserv√©e)"""
        
        question_lower = question.lower()
        age_days = entities.get('age_days')
        
        # Questions de poids
        if any(word in question_lower for word in ['poids', 'weight', 'gramme', 'cible']):
            return self._generate_general_weight_response(age_days)
        
        # Questions de croissance
        elif any(word in question_lower for word in ['croissance', 'd√©veloppement', 'grandir']):
            return self._generate_general_growth_response(age_days)
        
        # Questions de sant√©
        elif any(word in question_lower for word in ['malade', 'sympt√¥me', 'probl√®me', 'sant√©']):
            return self._generate_general_health_response(age_days)
        
        # Questions d'alimentation
        elif any(word in question_lower for word in ['alimentation', 'nourrir', 'aliment', 'nutrition']):
            return self._generate_general_feeding_response(age_days)
        
        # R√©ponse g√©n√©rale par d√©faut
        else:
            return self._generate_general_default_response(age_days)

    def _generate_general_weight_response(self, age_days: int) -> str:
        """R√©ponse g√©n√©rale pour questions de poids (m√©thode existante conserv√©e)"""
        
        if not age_days:
            return """**Poids des poulets - Standards g√©n√©raux :**

üìä **Fourchettes par √¢ge** :
‚Ä¢ 7 jours : 150-220g selon la race
‚Ä¢ 14 jours : 350-550g selon la race  
‚Ä¢ 21 jours : 650-1050g selon la race
‚Ä¢ 28 jours : 1050-1700g selon la race

üìà **Facteurs influen√ßant le poids** :
‚Ä¢ **Race** : Races lourdes (Ross 308, Cobb 500) vs races standard
‚Ä¢ **Sexe** : M√¢les 10-15% plus lourds que les femelles
‚Ä¢ **Alimentation** : Qualit√© et quantit√© de l'aliment
‚Ä¢ **Conditions d'√©levage** : Temp√©rature, densit√©, stress

üéØ **Surveillance recommand√©e** :
‚Ä¢ Pes√©e hebdomadaire repr√©sentative du troupeau
‚Ä¢ Suivi de la courbe de croissance
‚Ä¢ Consultation v√©t√©rinaire si √©cart significatif"""
        
        # Trouver la tranche d'√¢ge
        closest_age = self._find_closest_age(age_days)
        
        # Calculer fourchettes pour cet √¢ge
        ross_range = self.weight_ranges['ross_308'][closest_age]['mixed']
        cobb_range = self.weight_ranges['cobb_500'][closest_age]['mixed'] 
        standard_range = self.weight_ranges['standard'][closest_age]['mixed']
        
        return f"""**Poids normal √† {age_days} jours :**

üìä **Fourchettes par race** :
‚Ä¢ **Ross 308** : {ross_range[0]}-{ross_range[1]}g (races lourdes)
‚Ä¢ **Cobb 500** : {cobb_range[0]}-{cobb_range[1]}g (races lourdes)
‚Ä¢ **Races standard** : {standard_range[0]}-{standard_range[1]}g

‚öñÔ∏è **Diff√©rences m√¢les/femelles** :
‚Ä¢ **M√¢les** : +10-15% par rapport aux moyennes ci-dessus
‚Ä¢ **Femelles** : -10-15% par rapport aux moyennes ci-dessus

üéØ **Surveillance √† {age_days} jours** :
‚Ä¢ Pes√©e d'√©chantillon repr√©sentatif (10-20 sujets)
‚Ä¢ V√©rification homog√©n√©it√© du troupeau
‚Ä¢ Ajustement alimentaire si n√©cessaire

‚ö†Ô∏è **Signaux d'alerte** :
‚Ä¢ Poids <{int(standard_range[0] * 0.85)}g : Retard de croissance
‚Ä¢ Poids >{int(ross_range[1] * 1.15)}g : Croissance excessive
‚Ä¢ H√©t√©rog√©n√©it√© >20% : Probl√®me de gestion"""

    def _generate_precision_offer(self, entities: Dict[str, Any], missing_entities: List[str]) -> str:
        """G√©n√®re l'offre de pr√©cision selon les entit√©s manquantes (m√©thode existante conserv√©e)"""
        
        if not missing_entities:
            return ""
        
        offers = []
        
        if 'breed' in missing_entities:
            offers.append("**race/souche** (Ross 308, Cobb 500, Hubbard...)")
        
        if 'sex' in missing_entities:
            offers.append("**sexe** (m√¢les, femelles, ou troupeau mixte)")
        
        if 'age' in missing_entities:
            offers.append("**√¢ge pr√©cis** (en jours ou semaines)")
        
        if len(offers) == 1:
            return f"Pr√©cisez la {offers[0]} pour une r√©ponse plus sp√©cifique."
        elif len(offers) == 2:
            return f"Pr√©cisez la {offers[0]} et le {offers[1]} pour une r√©ponse plus sp√©cifique."
        elif len(offers) >= 3:
            return f"Pr√©cisez la {', la '.join(offers[:-1])} et le {offers[-1]} pour une r√©ponse plus sp√©cifique."
        
        return ""

    def _generate_clarification(self, question: str, entities: Dict[str, Any], missing_entities: List[str]) -> ResponseData:
        """G√©n√®re une demande de clarification cibl√©e (m√©thode existante conserv√©e)"""
        
        question_lower = question.lower()
        
        # Clarifications sp√©cialis√©es selon le type de question
        if any(word in question_lower for word in ['poids', 'croissance', 'cible']):
            return self._generate_performance_clarification(missing_entities)
        
        elif any(word in question_lower for word in ['malade', 'sympt√¥me', 'probl√®me']):
            return self._generate_health_clarification(missing_entities)
        
        elif any(word in question_lower for word in ['alimentation', 'nourrir']):
            return self._generate_feeding_clarification(missing_entities)
        
        else:
            return self._generate_general_clarification(missing_entities)

    def _generate_performance_clarification(self, missing_entities: List[str]) -> ResponseData:
        """Clarification pour questions de performance/poids (m√©thode existante conserv√©e)"""
        
        clarification = """Pour vous donner des informations pr√©cises sur les performances, j'ai besoin de :

üîç **Informations n√©cessaires** :"""
        
        if 'breed' in missing_entities:
            clarification += "\n‚Ä¢ **Race/souche** : Ross 308, Cobb 500, Hubbard, etc."
        
        if 'age' in missing_entities:
            clarification += "\n‚Ä¢ **√Çge** : En jours ou semaines (ex: 21 jours, 3 semaines)"
        
        if 'sex' in missing_entities:
            clarification += "\n‚Ä¢ **Sexe** : M√¢les, femelles, ou troupeau mixte"
        
        clarification += """

üí° **Exemples de questions compl√®tes** :
‚Ä¢ "Quel est le poids normal d'un Ross 308 m√¢le √† 21 jours ?"
‚Ä¢ "Croissance normale pour Cobb 500 femelles √† 3 semaines ?"
‚Ä¢ "Poids cible Hubbard mixte √† 28 jours ?\""""
        
        return ResponseData(
            response=clarification,
            response_type="clarification_performance",
            confidence=0.9,
            examples=["Ross 308 m√¢les 21 jours", "Cobb 500 femelles 3 semaines"]
        )

    def _find_closest_age(self, age_days: int) -> int:
        """Trouve l'√¢ge le plus proche dans les donn√©es de r√©f√©rence (m√©thode existante conserv√©e)"""
        available_ages = [7, 14, 21, 28, 35]
        
        if age_days <= 7:
            return 7
        elif age_days <= 10:
            return 7 if abs(age_days - 7) < abs(age_days - 14) else 14
        elif age_days <= 17:
            return 14 if abs(age_days - 14) < abs(age_days - 21) else 21
        elif age_days <= 24:
            return 21 if abs(age_days - 21) < abs(age_days - 28) else 28
        elif age_days <= 31:
            return 28 if abs(age_days - 28) < abs(age_days - 35) else 35
        else:
            return 35

    def _generate_fallback_response(self, question: str) -> ResponseData:
        """G√©n√®re une r√©ponse de fallback en cas d'erreur (m√©thode existante conserv√©e)"""
        return ResponseData(
            response="Je rencontre une difficult√© pour analyser votre question. "
                    "Pouvez-vous la reformuler en pr√©cisant le contexte (race, √¢ge, probl√®me sp√©cifique) ?",
            response_type="fallback",
            confidence=0.3
        )

    # M√©thodes additionnelles pour autres types de r√©ponses g√©n√©rales (conserv√©es)
    def _generate_general_growth_response(self, age_days: int) -> str:
        """R√©ponse g√©n√©rale pour croissance"""
        return f"""**Croissance normale des poulets** {"√† " + str(age_days) + " jours" if age_days else ""} :

üìà **Indicateurs de croissance saine** :
‚Ä¢ Gain de poids r√©gulier et progressif
‚Ä¢ Activit√© normale et app√©tit constant  
‚Ä¢ D√©veloppement harmonieux du plumage
‚Ä¢ Comportement social adapt√©

‚ö†Ô∏è **Signaux d'alerte** :
‚Ä¢ Stagnation ou perte de poids
‚Ä¢ Apathie ou refus alimentaire
‚Ä¢ H√©t√©rog√©n√©it√© excessive du troupeau
‚Ä¢ Mortalit√© anormale

üéØ **Suivi recommand√©** :
‚Ä¢ Pes√©e hebdomadaire d'√©chantillons
‚Ä¢ Observation quotidienne du comportement
‚Ä¢ Contr√¥le des conditions d'ambiance"""

    def _generate_general_health_response(self, age_days: int) -> str:
        """R√©ponse g√©n√©rale pour sant√©"""
        return """**Sant√© des poulets - Surveillance g√©n√©rale** :

ü©∫ **Signes de bonne sant√©** :
‚Ä¢ Activit√© normale et vivacit√©
‚Ä¢ App√©tit r√©gulier et consommation d'eau normale
‚Ä¢ Fientes normales (consistance et couleur)
‚Ä¢ Plumage propre et bien d√©velopp√©

‚ö†Ô∏è **Signaux d'alerte** :
‚Ä¢ Apathie, isolement du groupe
‚Ä¢ Refus alimentaire ou baisse de consommation
‚Ä¢ Diarrh√©e, fientes anormales
‚Ä¢ Difficult√©s respiratoires, boiteries

üö® **Action imm√©diate** :
‚Ä¢ Isoler les sujets malades
‚Ä¢ Consulter un v√©t√©rinaire rapidement  
‚Ä¢ Renforcer les mesures d'hygi√®ne
‚Ä¢ Surveiller l'√©volution du troupeau"""

    def _generate_general_feeding_response(self, age_days: int) -> str:
        """R√©ponse g√©n√©rale pour alimentation"""
        age_info = f" √† {age_days} jours" if age_days else ""
        
        return f"""**Alimentation des poulets{age_info}** :

üåæ **Besoins nutritionnels** :
‚Ä¢ Prot√©ines adapt√©es au stade de croissance
‚Ä¢ √ânergie suffisante pour le d√©veloppement
‚Ä¢ Vitamines et min√©raux √©quilibr√©s
‚Ä¢ Eau propre et fra√Æche en permanence

üìä **Consommation normale** :
‚Ä¢ Augmentation progressive avec l'√¢ge
‚Ä¢ R√©partition sur 24h avec pics d'activit√©
‚Ä¢ Adaptation selon temp√©rature ambiante

üéØ **Bonnes pratiques** :
‚Ä¢ Aliment adapt√© au stade physiologique
‚Ä¢ Distribution r√©guli√®re et homog√®ne
‚Ä¢ Hygi√®ne des mangeoires et abreuvoirs
‚Ä¢ Ajustement selon les performances"""

    def _generate_general_default_response(self, age_days: int) -> str:
        """R√©ponse g√©n√©rale par d√©faut"""
        return """**√âlevage de poulets - Conseils g√©n√©raux** :

üè† **Conditions d'√©levage optimales** :
‚Ä¢ Temp√©rature adapt√©e au stade
‚Ä¢ Ventilation suffisante sans courants d'air
‚Ä¢ Densit√© appropri√©e (confort animal)
‚Ä¢ Liti√®re propre et s√®che

üìä **Surveillance quotidienne** :
‚Ä¢ Comportement et activit√© du troupeau
‚Ä¢ Consommation alimentaire et hydrique
‚Ä¢ √âtat sanitaire g√©n√©ral
‚Ä¢ Conditions d'ambiance

üéØ **Suivi des performances** :
‚Ä¢ Pes√©es r√©guli√®res
‚Ä¢ Contr√¥le de la croissance
‚Ä¢ Indices de consommation
‚Ä¢ Suivi sanitaire"""

    def _generate_health_clarification(self, missing_entities: List[str]) -> ResponseData:
        """Clarification pour questions de sant√©"""
        return ResponseData(
            response="""Pour vous aider efficacement avec un probl√®me de sant√©, d√©crivez :

ü©∫ **Sympt√¥mes observ√©s** :
‚Ä¢ Comportement anormal (apathie, isolement...)
‚Ä¢ Sympt√¥mes physiques (diarrh√©e, boiterie, difficult√©s respiratoires...)
‚Ä¢ √âvolution dans le temps

üìã **Contexte du troupeau** :
‚Ä¢ √Çge des animaux affect√©s
‚Ä¢ Nombre de sujets touch√©s
‚Ä¢ Race/souche si connue
‚Ä¢ Conditions d'√©levage r√©centes

‚è∞ **Urgence** : En cas de mortalit√© ou sympt√¥mes graves, consultez imm√©diatement un v√©t√©rinaire.""",
            response_type="clarification_health",
            confidence=0.9
        )

    def _generate_feeding_clarification(self, missing_entities: List[str]) -> ResponseData:
        """Clarification pour questions d'alimentation"""
        return ResponseData(
            response="""Pour des conseils nutritionnels adapt√©s, pr√©cisez :

üåæ **Informations sur vos animaux** :
‚Ä¢ √Çge ou stade physiologique
‚Ä¢ Race/souche (chair, ponte, mixte)
‚Ä¢ Effectif du troupeau

üéØ **Objectif recherch√©** :
‚Ä¢ Croissance optimale, pr√©paration ponte, maintien...
‚Ä¢ Probl√®me sp√©cifique √† r√©soudre
‚Ä¢ Performance attendue

üí° **Exemple de question pr√©cise** :
"Quel aliment pour Ross 308 de 3 semaines pour optimiser la croissance ?\"""",
            response_type="clarification_feeding",
            confidence=0.9
        )

    def _generate_general_clarification(self, missing_entities: List[str]) -> ResponseData:
        """Clarification g√©n√©rale"""
        return ResponseData(
            response="""Pour vous donner une r√©ponse adapt√©e, pouvez-vous pr√©ciser :

üìã **Votre situation** :
‚Ä¢ Type de volailles (poulets de chair, pondeuses...)
‚Ä¢ √Çge ou stade d'√©levage
‚Ä¢ Probl√®me ou objectif sp√©cifique

üéØ **Exemples de questions pr√©cises** :
‚Ä¢ "Poids normal Ross 308 m√¢les √† 21 jours ?"
‚Ä¢ "Sympt√¥mes diarrh√©e chez pondeuses 25 semaines"
‚Ä¢ "Alimentation optimale Cobb 500 d√©marrage"

üí° Plus votre question est pr√©cise, plus ma r√©ponse sera adapt√©e √† votre situation !""",
            response_type="clarification_general",
            confidence=0.7
        )

    def _generate_precise_growth_response(self, breed: str, age_days: int, sex: str) -> ResponseData:
        """G√©n√®re r√©ponse pr√©cise pour la croissance"""
        
        breed_name = breed.replace('_', ' ').title()
        sex_str = {'male': 'm√¢les', 'female': 'femelles', 'mixed': 'mixtes'}[sex]
        
        # Calculs de gain quotidien selon l'√¢ge
        if age_days <= 7:
            daily_gain_range = "3-8g"
            growth_phase = "D√©marrage critique"
        elif age_days <= 14:
            daily_gain_range = "25-35g"
            growth_phase = "Croissance initiale"
        elif age_days <= 21:
            daily_gain_range = "45-65g"
            growth_phase = "Croissance rapide"
        elif age_days <= 28:
            daily_gain_range = "65-85g"
            growth_phase = "Croissance intensive"
        else:
            daily_gain_range = "70-95g"
            growth_phase = "Finition"
        
        response = f"""**Croissance {breed_name} {sex_str} √† {age_days} jours :**

üéØ **Phase actuelle** : {growth_phase}

üìà **Gain quotidien attendu** : {daily_gain_range} par jour

üìä **Indicateurs de performance** :
‚Ä¢ Homog√©n√©it√© du troupeau >85%
‚Ä¢ Activit√© normale et app√©tit constant
‚Ä¢ Absence de retards de croissance
‚Ä¢ D√©veloppement harmonieux du plumage

‚ö° **Surveillance sp√©cifique** :
‚Ä¢ Pes√©e bi-hebdomadaire repr√©sentative
‚Ä¢ Contr√¥le de la courbe de croissance
‚Ä¢ Ajustement nutritionnel selon gains observ√©s

üö® **Signaux d'alerte** :
‚Ä¢ Gain <{daily_gain_range.split('-')[0]} : Retard de croissance
‚Ä¢ Stagnation >2 jours : Probl√®me sanitaire potentiel
‚Ä¢ H√©t√©rog√©n√©it√© >15% : Gestion √† r√©viser"""

        return ResponseData(
            response=response,
            response_type="precise_growth",
            confidence=0.9
        )

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def quick_generate(question: str, entities: Dict[str, Any], response_type: str) -> str:
    """G√©n√©ration rapide pour usage simple"""
    generator = UnifiedResponseGenerator()
    
    # Cr√©er un objet de classification simul√©
    class MockClassification:
        def __init__(self, resp_type):
            from .smart_classifier import ResponseType
            self.response_type = ResponseType(resp_type)
            self.missing_entities = []
            self.merged_entities = entities
            self.weight_data = {}
    
    classification = MockClassification(response_type)
    result = generator.generate(question, entities, classification)
    
    return result.response

# =============================================================================
# TESTS INT√âGR√âS AVEC CONTEXTUAL_ANSWER
# =============================================================================

def test_generator_contextual():
    """Tests du g√©n√©rateur avec support CONTEXTUAL_ANSWER"""
    generator = UnifiedResponseGenerator()
    
    print("üß™ Test g√©n√©rateur avec support CONTEXTUAL_ANSWER")
    print("=" * 60)
    
    # Test CONTEXTUAL_ANSWER avec donn√©es de poids
    class MockContextualClassification:
        def __init__(self):
            from .smart_classifier import ResponseType
            self.response_type = ResponseType.CONTEXTUAL_ANSWER
            self.merged_entities = {
                'breed_specific': 'Ross 308',
                'age_days': 12,
                'sex': 'm√¢le',
                'context_type': 'performance',
                'age_context_inherited': True
            }
            self.weight_data = {
                'breed': 'Ross 308',
                'age_days': 12,
                'sex': 'male',
                'weight_range': (380, 420),
                'target_weight': 400,
                'alert_thresholds': {'low': 323, 'high': 483},
                'confidence': 0.95
            }
    
    # Test g√©n√©ration contextuelle
    question = "Pour un Ross 308 male"
    entities = {'breed_specific': 'Ross 308', 'sex': 'm√¢le'}
    classification = MockContextualClassification()
    
    result = generator.generate(question, entities, classification)
    
    print(f"Question: {question}")
    print(f"Type de r√©ponse: {result.response_type}")
    print(f"Confiance: {result.confidence}")
    print(f"Donn√©es de poids: {result.weight_data}")
    print(f"Aper√ßu r√©ponse: {result.response[:200]}...")
    
    # V√©rifier que la r√©ponse contient les bonnes donn√©es
    if "380-420" in result.response and "Ross 308" in result.response:
        print("‚úÖ SUCCESS: R√©ponse contextuelle avec donn√©es pr√©cises g√©n√©r√©e!")
    else:
        print("‚ùå FAILED: Donn√©es Ross 308 m√¢le 12j non trouv√©es dans la r√©ponse")

if __name__ == "__main__":
    test_generator_contextual()