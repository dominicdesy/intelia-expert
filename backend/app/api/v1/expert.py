"""
app/api/v1/expert.py - EXPERT ENDPOINTS PRINCIPAUX v3.7.2 - CORRIG√â

üöÄ FICHIER PRINCIPAL MAINTENU POUR COMPATIBILIT√â:
- Garde le nom expert.py pour √©viter les changements de liens
- Endpoints principaux avec clarification granulaire
- Support response_versions complet
- Code all√©g√© et maintenable
- ‚úÖ CORRECTIONS: Variables initialis√©es, v√©rifications robustes

VERSION COMPL√àTE + SYNTAXE 100% CORRIG√âE + SUPPORT RESPONSE_VERSIONS + CLARIFICATION INTELLIGENTE
"""

import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest, ConcisionLevel
from .expert_services import ExpertService
from .expert_utils import get_user_id_from_request, extract_breed_and_sex_from_clarification

router = APIRouter(tags=["expert-main"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Service principal
expert_service = ExpertService()

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC CLARIFICATION GRANULAIRE v3.7.2 üöÄ
# =============================================================================

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    üß® ENDPOINT EXPERT FINAL avec D√âTECTION CLARIFICATION GRANULAIRE v3.7.2:
    - Support explicite du flag is_clarification_response
    - Logique clarification granulaire et adaptative
    - M√©tadonn√©es propag√©es correctement
    - G√©n√©ration multi-versions des r√©ponses
    - Messages de clarification adaptatifs selon ce qui manque r√©ellement
    ‚úÖ CORRIG√â: Variables initialis√©es, v√©rifications robustes
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 v3.7.2 - SUPPORT RESPONSE_VERSIONS + CLARIFICATION INTELLIGENTE")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        
        # ‚úÖ CORRECTION: V√©rification robuste des param√®tres concision
        concision_level = ConcisionLevel.CONCISE
        generate_all_versions = True
        
        if request_data and hasattr(request_data, 'concision_level') and request_data.concision_level is not None:
            concision_level = request_data.concision_level
        if request_data and hasattr(request_data, 'generate_all_versions') and request_data.generate_all_versions is not None:
            generate_all_versions = request_data.generate_all_versions
        
        logger.info("üöÄ [RESPONSE_VERSIONS v3.7.2] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # D√âTECTION EXPLICITE MODE CLARIFICATION
        is_clarification = False
        original_question = None
        clarification_entities = None
        
        if request_data:
            is_clarification = getattr(request_data, 'is_clarification_response', False)
            original_question = getattr(request_data, 'original_question', None)
            clarification_entities = getattr(request_data, 'clarification_entities', None)
        
        logger.info("üß® [D√âTECTION CLARIFICATION v3.7.2] Analyse du mode:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - original_question fournie: {original_question is not None}")
        logger.info(f"   - clarification_entities: {clarification_entities}")
        
        # Variables pour m√©tadonn√©es de clarification
        clarification_metadata = {}
        
        if is_clarification:
            logger.info("üé™ [FLUX CLARIFICATION] Mode R√âPONSE de clarification d√©tect√©")
            logger.info(f"   - R√©ponse utilisateur: '{request_data.text}'")
            logger.info(f"   - Question originale: '{original_question}'")
            
            # ‚úÖ CORRECTION: Initialisation s√©curis√©e des variables breed/sex
            breed = None
            sex = None
            
            # TRAITEMENT SP√âCIALIS√â R√âPONSE CLARIFICATION
            if clarification_entities:
                logger.info(f"   - Entit√©s pr√©-extraites: {clarification_entities}")
                breed = clarification_entities.get('breed')
                sex = clarification_entities.get('sex')
            else:
                # Extraction automatique si pas fournie
                logger.info("   - Extraction automatique entit√©s depuis r√©ponse")
                try:
                    extracted = extract_breed_and_sex_from_clarification(request_data.text, request_data.language)
                    if extracted is None:
                        extracted = {"breed": None, "sex": None}
                    breed = extracted.get('breed')
                    sex = extracted.get('sex')
                    logger.info(f"   - Entit√©s extraites: breed='{breed}', sex='{sex}'")
                except Exception as e:
                    logger.error(f"‚ùå Erreur extraction entit√©s: {e}")
                    breed, sex = None, None
            
            # VALIDATION entit√©s compl√®tes AVANT enrichissement
            clarified_entities = {"breed": breed, "sex": sex}
            
            # üéØ NOUVELLE LOGIQUE GRANULAIRE v3.7.2: Validation granulaire breed vs sex
            if not breed or not sex:
                # ‚úÖ CORRECTION: Protection contre None dans le logging
                breed_safe = breed or "None"
                sex_safe = sex or "None"
                logger.warning(f"‚ö†Ô∏è [FLUX CLARIFICATION] Entit√©s incompl√®tes: breed='{breed_safe}', sex='{sex_safe}'")
                
                # Validation granulaire des informations manquantes
                missing_info = []
                missing_details = []
                provided_parts = []
                
                # V√©rification breed avec plus de nuances
                if not breed:
                    missing_info.append("race/souche")
                    missing_details.append("la race/souche (Ross 308, Cobb 500, Hubbard, etc.)")
                elif len(breed.strip()) < 3:  # Breed trop court/vague
                    missing_info.append("race/souche compl√®te")
                    missing_details.append("la race/souche compl√®te (ex: 'Ross' ‚Üí 'Ross 308')")
                    provided_parts.append(f"Race partielle d√©tect√©e: {breed}")
                else:
                    provided_parts.append(f"Race d√©tect√©e: {breed}")
                
                # V√©rification sex
                if not sex:
                    missing_info.append("sexe")
                    missing_details.append("le sexe (m√¢les, femelles, ou mixte)")
                else:
                    provided_parts.append(f"Sexe d√©tect√©: {sex}")
                
                # üéØ MESSAGE ADAPTATIF selon ce qui manque r√©ellement
                if len(missing_info) == 2:
                    error_message = f"Information incompl√®te. Il manque encore : {' et '.join(missing_info)}.\n\n"
                elif len(missing_info) == 1:
                    error_message = f"Information incompl√®te. Il manque encore : {missing_info[0]}.\n\n"
                else:
                    error_message = "Information incompl√®te.\n\n"
                
                # Ajouter contexte de ce qui a √©t√© fourni VS ce qui manque
                if provided_parts:
                    error_message += f"Votre r√©ponse '{request_data.text}' contient : {', '.join(provided_parts)}.\n"
                    error_message += f"Mais il manque encore : {', '.join(missing_details)}.\n\n"
                else:
                    error_message += f"Votre r√©ponse '{request_data.text}' ne contient pas tous les √©l√©ments n√©cessaires.\n\n"
                
                # Exemples contextuels selon ce qui manque
                error_message += "**Exemples complets :**\n"
                
                if "race" in str(missing_info):
                    error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
                    error_message += "‚Ä¢ 'Cobb 500 femelles'\n" 
                    error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
                elif "sexe" in str(missing_info):
                    # Si seul le sexe manque, adapter les exemples avec la race d√©tect√©e
                    if breed and len(breed.strip()) >= 3:
                        error_message += f"‚Ä¢ '{breed} m√¢les'\n"
                        error_message += f"‚Ä¢ '{breed} femelles'\n"
                        error_message += f"‚Ä¢ '{breed} troupeau mixte'\n\n"
                    else:
                        error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
                        error_message += "‚Ä¢ 'Cobb 500 femelles'\n"
                        error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
                
                error_message += "Pouvez-vous pr√©ciser les informations manquantes ?"
                
                # Retourner erreur clarification incompl√®te GRANULAIRE
                incomplete_clarification_response = EnhancedExpertResponse(
                    question=request_data.text,
                    response=error_message,
                    conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                    rag_used=False,
                    rag_score=None,
                    timestamp=datetime.now().isoformat(),
                    language=request_data.language,
                    response_time_ms=int((time.time() - start_time) * 1000),
                    mode="incomplete_clarification_response",
                    user=current_user.get("email") if current_user else None,
                    logged=True,
                    validation_passed=False,
                    clarification_result={
                        "clarification_requested": True,
                        "clarification_type": "incomplete_entities_retry",
                        "missing_information": missing_info,
                        "provided_entities": clarified_entities,
                        "provided_parts": provided_parts,
                        "missing_details": missing_details,
                        "retry_required": True,
                        "confidence": 0.3
                    },
                    processing_steps=["incomplete_clarification_detected", "retry_requested"],
                    ai_enhancements_used=["incomplete_clarification_handling"],
                    response_versions=None  # Pas de response_versions pour erreurs
                )
                
                logger.info(f"‚ùå [FLUX CLARIFICATION v3.7.2] Retour erreur entit√©s incompl√®tes: {missing_info}")
                logger.info(f"üí° [FLUX CLARIFICATION v3.7.2] Parties d√©tect√©es: {provided_parts}")
                return incomplete_clarification_response
            
            # Enrichir la question originale avec les informations COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                logger.info(f"   - Question enrichie: '{enriched_question}'")
                
                # M√©tadonn√©es sauvegard√©es pour response
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier la question pour traitement RAG
                request_data.text = enriched_question
                
                # Marquer comme traitement post-clarification (√©viter boucle)
                request_data.is_clarification_response = False
                
                logger.info("üéØ [FLUX CLARIFICATION] Question enrichie, passage au traitement RAG")
            else:
                logger.warning("‚ö†Ô∏è [FLUX CLARIFICATION] Question originale manquante - impossible enrichir")
        else:
            logger.info("üéØ [FLUX CLARIFICATION] Mode QUESTION INITIALE - d√©tection vagueness active")
        
        # ‚úÖ CORRECTION: Validation et d√©fauts concision robuste
        if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
            request_data.concision_level = ConcisionLevel.CONCISE
            logger.info("üöÄ [CONCISION] Niveau par d√©faut appliqu√©: CONCISE")
        
        if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
            request_data.generate_all_versions = True
            logger.info("üöÄ [CONCISION] generate_all_versions activ√© par d√©faut")
        
        # FOR√áAGE SYST√âMATIQUE DES AM√âLIORATIONS
        original_vagueness = getattr(request_data, 'enable_vagueness_detection', None)
        original_coherence = getattr(request_data, 'require_coherence_check', None)
        
        # FORCER l'activation - AUCUNE EXCEPTION
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        
        logger.info("üî• [CLARIFICATION FORC√âE v3.7.2] Param√®tres forc√©s:")
        logger.info(f"   - enable_vagueness_detection: {original_vagueness} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - require_coherence_check: {original_coherence} ‚Üí TRUE (FORC√â)")
        
        # D√âL√âGUER AU SERVICE
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=current_user,
            start_time=start_time
        )
        
        # AJOUT M√âTADONN√âES CLARIFICATION dans response
        if clarification_metadata:
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES v3.7.2] Clarification metadata ajout√©es √† response")
        
        # Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # LOGGING R√âSULTATS CLARIFICATION D√âTAILL√â
        logger.info("üß® [R√âSULTATS CLARIFICATION v3.7.2]:")
        logger.info(f"   - Mode final: {response.mode}")
        logger.info(f"   - Clarification d√©clench√©e: {response.clarification_result is not None}")
        logger.info(f"   - RAG utilis√©: {response.rag_used}")
        logger.info(f"   - Question finale trait√©e: '{response.question[:100]}...'")
        
        if response.clarification_result:
            clarif = response.clarification_result
            logger.info(f"   - Type clarification: {clarif.get('clarification_type', 'N/A')}")
            logger.info(f"   - Infos manquantes: {clarif.get('missing_information', [])}")
            logger.info(f"   - Confiance: {clarif.get('confidence', 0)}")
            if 'provided_parts' in clarif:
                logger.info(f"   - Parties d√©tect√©es: {clarif.get('provided_parts', [])}")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 v3.7.2 - Temps: {response.response_time_ms}ms")
        logger.info(f"ü§ñ Am√©liorations: {len(response.ai_enhancements_used or [])} features")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2 v3.7.2: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üß® ENDPOINT PUBLIC avec D√âTECTION CLARIFICATION GRANULAIRE v3.7.2
    ‚úÖ CORRIG√â: Variables initialis√©es, v√©rifications robustes"""
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public v3.7.2 - SUPPORT RESPONSE_VERSIONS + CLARIFICATION INTELLIGENTE")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        
        # ‚úÖ CORRECTION: Param√®tres concision pour endpoint public avec v√©rifications
        concision_level = ConcisionLevel.CONCISE
        generate_all_versions = True
        
        if request_data and hasattr(request_data, 'concision_level') and request_data.concision_level is not None:
            concision_level = request_data.concision_level
        if request_data and hasattr(request_data, 'generate_all_versions') and request_data.generate_all_versions is not None:
            generate_all_versions = request_data.generate_all_versions
        
        logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # D√âTECTION PUBLIQUE CLARIFICATION
        is_clarification = False
        clarification_metadata = {}
        
        if request_data:
            is_clarification = getattr(request_data, 'is_clarification_response', False)
        
        logger.info("üß® [D√âTECTION PUBLIQUE v3.7.2] Analyse mode clarification:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - conversation_id: {request_data.conversation_id}")
        
        if is_clarification:
            logger.info("üé™ [FLUX PUBLIC] Traitement r√©ponse clarification")
            
            # Logique similaire √† l'endpoint priv√©
            original_question = getattr(request_data, 'original_question', None)
            clarification_entities = getattr(request_data, 'clarification_entities', None)
            
            logger.info(f"   - Question originale: '{original_question}'")
            logger.info(f"   - Entit√©s fournies: {clarification_entities}")
            
            # ‚úÖ CORRECTION: Initialisation s√©curis√©e des variables breed/sex
            breed = None
            sex = None
            
            if clarification_entities:
                breed = clarification_entities.get('breed')
                sex = clarification_entities.get('sex')
                logger.info(f"   - Utilisation entit√©s pr√©-extraites: breed='{breed}', sex='{sex}'")
            else:
                # Extraction automatique
                try:
                    extracted = extract_breed_and_sex_from_clarification(request_data.text, request_data.language)
                    if extracted is None:
                        extracted = {"breed": None, "sex": None}
                    breed = extracted.get('breed')
                    sex = extracted.get('sex')
                    logger.info(f"   - Extraction automatique: breed='{breed}', sex='{sex}'")
                except Exception as e:
                    logger.error(f"‚ùå Erreur extraction entit√©s publique: {e}")
                    breed, sex = None, None
            
            # VALIDATION entit√©s compl√®tes
            clarified_entities = {"breed": breed, "sex": sex}
            
            # üéØ LOGIQUE GRANULAIRE PUBLIQUE v3.7.2
            if not breed or not sex:
                breed_safe = breed or "None"
                sex_safe = sex or "None"
                logger.warning(f"‚ö†Ô∏è [FLUX PUBLIC] Entit√©s incompl√®tes: breed='{breed_safe}', sex='{sex_safe}'")
                
                # Validation granulaire des informations manquantes
                missing_info = []
                missing_details = []
                provided_parts = []
                
                # V√©rification breed avec plus de nuances
                if not breed:
                    missing_info.append("race/souche")
                    missing_details.append("la race/souche (Ross 308, Cobb 500, Hubbard, etc.)")
                elif len(breed.strip()) < 3:
                    missing_info.append("race/souche compl√®te")
                    missing_details.append("la race/souche compl√®te (ex: 'Ross' ‚Üí 'Ross 308')")
                    provided_parts.append(f"Race partielle d√©tect√©e: {breed}")
                else:
                    provided_parts.append(f"Race d√©tect√©e: {breed}")
                
                # V√©rification sex
                if not sex:
                    missing_info.append("sexe")
                    missing_details.append("le sexe (m√¢les, femelles, ou mixte)")
                else:
                    provided_parts.append(f"Sexe d√©tect√©: {sex}")
                
                # MESSAGE ADAPTATIF selon ce qui manque r√©ellement
                if len(missing_info) == 2:
                    error_message = f"Information incompl√®te. Il manque encore : {' et '.join(missing_info)}.\n\n"
                elif len(missing_info) == 1:
                    error_message = f"Information incompl√®te. Il manque encore : {missing_info[0]}.\n\n"
                else:
                    error_message = "Information incompl√®te.\n\n"
                
                # Ajouter contexte
                if provided_parts:
                    error_message += f"Votre r√©ponse '{request_data.text}' contient : {', '.join(provided_parts)}.\n"
                    error_message += f"Mais il manque encore : {', '.join(missing_details)}.\n\n"
                else:
                    error_message += f"Votre r√©ponse '{request_data.text}' ne contient pas tous les √©l√©ments n√©cessaires.\n\n"
                
                # Exemples contextuels selon ce qui manque
                error_message += "**Exemples complets :**\n"
                
                if "race" in str(missing_info):
                    error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
                    error_message += "‚Ä¢ 'Cobb 500 femelles'\n" 
                    error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
                elif "sexe" in str(missing_info):
                    if breed and len(breed.strip()) >= 3:
                        error_message += f"‚Ä¢ '{breed} m√¢les'\n"
                        error_message += f"‚Ä¢ '{breed} femelles'\n"
                        error_message += f"‚Ä¢ '{breed} troupeau mixte'\n\n"
                    else:
                        error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
                        error_message += "‚Ä¢ 'Cobb 500 femelles'\n"
                        error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
                
                error_message += "Pouvez-vous pr√©ciser les informations manquantes ?"
                
                # Retourner erreur clarification incompl√®te publique
                return EnhancedExpertResponse(
                    question=request_data.text,
                    response=error_message,
                    conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                    rag_used=False,
                    rag_score=None,
                    timestamp=datetime.now().isoformat(),
                    language=request_data.language,
                    response_time_ms=int((time.time() - start_time) * 1000),
                    mode="incomplete_clarification_response_public",
                    user=None,
                    logged=True,
                    validation_passed=False,
                    clarification_result={
                        "clarification_requested": True,
                        "clarification_type": "incomplete_entities_retry_public",
                        "missing_information": missing_info,
                        "provided_entities": clarified_entities,
                        "provided_parts": provided_parts,
                        "missing_details": missing_details,
                        "retry_required": True,
                        "confidence": 0.3
                    },
                    processing_steps=["incomplete_clarification_detected_public", "retry_requested"],
                    ai_enhancements_used=["incomplete_clarification_handling_public"],
                    response_versions=None
                )
            
            # Enrichissement question avec entit√©s COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                # M√©tadonn√©es pour response (endpoint public)
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier question pour RAG
                request_data.text = enriched_question
                request_data.is_clarification_response = False  # √âviter boucle
                
                logger.info(f"   - Question enrichie publique: '{enriched_question}'")
                logger.info(f"   - M√©tadonn√©es sauvegard√©es: {clarification_metadata}")
        else:
            logger.info("üéØ [FLUX PUBLIC] Question initiale - d√©tection vagueness")
        
        # ‚úÖ CORRECTION: Validation et d√©fauts concision pour public
        if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        
        if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
            request_data.generate_all_versions = True
        
        # FOR√áAGE MAXIMAL pour endpoint public
        logger.info("üî• [PUBLIC ENDPOINT v3.7.2] Activation FORC√âE des am√©liorations:")
        
        original_settings = {
            'vagueness': getattr(request_data, 'enable_vagueness_detection', None),
            'coherence': getattr(request_data, 'require_coherence_check', None),
            'detailed_rag': getattr(request_data, 'detailed_rag_scoring', None),
            'quality_metrics': getattr(request_data, 'enable_quality_metrics', None)
        }
        
        # FOR√áAGE MAXIMAL pour endpoint public
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        request_data.detailed_rag_scoring = True
        request_data.enable_quality_metrics = True
        
        logger.info("üî• [FOR√áAGE PUBLIC v3.7.2] Changements appliqu√©s:")
        for key, (old_val, new_val) in {
            'vagueness_detection': (original_settings['vagueness'], True),
            'coherence_check': (original_settings['coherence'], True),
            'detailed_rag': (original_settings['detailed_rag'], True),
            'quality_metrics': (original_settings['quality_metrics'], True)
        }.items():
            logger.info(f"   - {key}: {old_val} ‚Üí {new_val} (FORC√â)")
        
        # D√âL√âGUER AU SERVICE avec support response_versions
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=None,  # Mode public
            start_time=start_time
        )
        
        # Ajout m√©tadonn√©es clarification
        if clarification_metadata:
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES PUBLIC v3.7.2] Clarification metadata ajout√©es")
        
        # Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # VALIDATION R√âSULTATS CLARIFICATION PUBLIQUE
        logger.info("üß® [VALIDATION PUBLIQUE v3.7.2]:")
        logger.info(f"   - Clarification syst√®me actif: {'clarification' in response.mode}")
        logger.info(f"   - Am√©liorations appliqu√©es: {response.ai_enhancements_used}")
        logger.info(f"   - Mode final: {response.mode}")
        logger.info(f"   - RAG utilis√©: {response.rag_used}")
        
        # V√©rification critique
        if not response.ai_enhancements_used:
            logger.warning("‚ö†Ô∏è [ALERTE] Aucune am√©lioration d√©tect√©e - possible probl√®me!")
        
        if response.enable_vagueness_detection is False:
            logger.warning("‚ö†Ô∏è [ALERTE] Vagueness detection non activ√©e - v√©rifier for√ßage!")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public v3.7.2 - Mode: {response.mode}")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public v3.7.2: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINT FEEDBACK ET TOPICS
# =============================================================================

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION FINALE avec support qualit√©"""
    try:
        logger.info(f"üìä [Feedback] Re√ßu: {feedback_data.rating} pour {feedback_data.conversation_id}")
        
        if feedback_data.quality_feedback:
            logger.info(f"üìà [Feedback] Qualit√© d√©taill√©e: {len(feedback_data.quality_feedback)} m√©triques")
        
        result = await expert_service.process_feedback(feedback_data)
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Feedback] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur feedback: {str(e)}")

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION FINALE"""
    try:
        return await expert_service.get_suggested_topics(language)
    except Exception as e:
        logger.error(f"‚ùå [Topics] Erreur: {e}")
        raise HTTPException(status_code=500, detail="Erreur topics")

# =============================================================================
# CONFIGURATION FINALE v3.7.2 üöÄ
# =============================================================================

logger.info("üöÄ" * 50)
logger.info("üöÄ [EXPERT ENDPOINTS MAIN] VERSION 3.7.2 - LOGIQUE CLARIFICATION GRANULAIRE!")
logger.info("üöÄ [FONCTIONNALIT√âS PRINCIPALES]:")
logger.info("   ‚úÖ Support concision_level et generate_all_versions")
logger.info("   ‚úÖ response_versions dans les r√©ponses")
logger.info("   ‚úÖ Logique clarification GRANULAIRE et adaptative")
logger.info("   ‚úÖ Messages adaptatifs selon ce qui manque r√©ellement")
logger.info("   ‚úÖ Exemples contextuels avec race d√©tect√©e")
logger.info("   ‚úÖ M√©tadonn√©es enrichies (provided_parts, missing_details)")
logger.info("   ‚úÖ Validation granulaire breed vs sex")
logger.info("   ‚úÖ UX clarification grandement am√©lior√©e")
logger.info("   ‚úÖ CORRECTIONS: Variables initialis√©es, v√©rifications robustes")
logger.info("")
logger.info("üîß [ENDPOINTS PRINCIPAUX]:")
logger.info("   - POST /ask-enhanced-v2 (priv√© + auth)")
logger.info("   - POST /ask-enhanced-v2-public (public)")
logger.info("   - POST /feedback (qualit√© d√©taill√©e)")
logger.info("   - GET /topics (suggestions enrichies)")
logger.info("")
logger.info("üéØ [FICHIER ALL√âG√â ET MAINTENABLE]:")
logger.info("   ‚úÖ Endpoints principaux uniquement")
logger.info("   ‚úÖ Code propre et comment√©")
logger.info("   ‚úÖ Logique clarification granulaire v3.7.2")
logger.info("   ‚úÖ Support response_versions complet")
logger.info("   ‚úÖ CORRECTIONS APPLIQU√âES - Variables, v√©rifications")
logger.info("   ‚úÖ READY FOR PRODUCTION")
logger.info("üöÄ" * 50)