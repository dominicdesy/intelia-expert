"""
app/api/v1/expert.py - ENDPOINTS PRINCIPAUX EXPERT SYSTEM

Endpoints core pour le syst√®me expert avec fonctionnalit√©s am√©lior√©es
VERSION FINALE : Support complet des nouvelles am√©liorations API
"""

import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest
from .expert_services import ExpertService
from .expert_utils import get_user_id_from_request

router = APIRouter(tags=["expert-enhanced"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Service principal
expert_service = ExpertService()

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC AM√âLIORATIONS
# =============================================================================

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    Endpoint expert FINAL avec toutes les am√©liorations:
    - D√©tection de questions floues avec clarification imm√©diate
    - V√©rification de coh√©rence contextuelle
    - Scoring RAG d√©taill√© avec m√©tadonn√©es
    - Fallback enrichi avec diagnostics
    - M√©triques de qualit√© pr√©dictives
    - Mode debug pour d√©veloppeurs
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 80)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 - VERSION FINALE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        logger.info(f"üéØ D√©tection flou: {request_data.enable_vagueness_detection}")
        logger.info(f"üîç V√©rif coh√©rence: {request_data.require_coherence_check}")
        logger.info(f"üìä RAG d√©taill√©: {request_data.detailed_rag_scoring}")
        logger.info(f"üìà M√©triques qualit√©: {request_data.enable_quality_metrics}")
        logger.info(f"üêõ Mode debug: {request_data.debug_mode}")
        
        # D√©l√©guer le traitement au service am√©lior√©
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=current_user,
            start_time=start_time
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 - conversation_id: {response.conversation_id}")
        logger.info(f"ü§ñ Am√©liorations utilis√©es: {len(response.ai_enhancements_used or [])} features")
        logger.info(f"‚ö° Temps total: {response.response_time_ms}ms")
        
        if request_data.debug_mode and response.debug_info:
            logger.info(f"üêõ Debug info disponible: {len(response.debug_info)} √©l√©ments")
        
        logger.info("=" * 80)
        
        return response
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2: {e}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public avec toutes les am√©liorations"""
    start_time = time.time()
    
    try:
        logger.info("=" * 80)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public - VERSION FINALE PUBLIQUE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        
        # D√©l√©guer le traitement au service (mode public)
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public - conversation_id: {response.conversation_id}")
        logger.info(f"ü§ñ Am√©liorations publiques utilis√©es: {len(response.ai_enhancements_used or [])} features")
        logger.info("=" * 80)
        
        return response
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public: {e}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINTS DE COMPATIBILIT√â (VERSIONS PR√âC√âDENTES)
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    Endpoint de compatibilit√© v1 - Redirige vers v2 avec am√©liorations
    """
    logger.info("üîÑ [Expert Enhanced] Redirection legacy vers v2")
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """
    Endpoint public de compatibilit√© v1 - Redirige vers v2
    """
    logger.info("üîÑ [Expert Enhanced] Redirection legacy public vers v2")
    return await ask_expert_enhanced_v2_public(request_data, request)

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    Endpoint de compatibilit√© original - Avec nouvelles fonctionnalit√©s par d√©faut
    """
    logger.info("üîÑ [Expert Enhanced] Redirection compatibilit√© vers v2 am√©lior√©")
    
    # Activer les am√©liorations par d√©faut pour compatibilit√©
    if not hasattr(request_data, 'enable_vagueness_detection'):
        request_data.enable_vagueness_detection = True
    if not hasattr(request_data, 'require_coherence_check'):
        request_data.require_coherence_check = True
    
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """
    Endpoint public de compatibilit√© original - Avec am√©liorations
    """
    logger.info("üîÑ [Expert Enhanced] Redirection compatibilit√© public vers v2")
    
    # Activer les am√©liorations par d√©faut
    if not hasattr(request_data, 'enable_vagueness_detection'):
        request_data.enable_vagueness_detection = True
    if not hasattr(request_data, 'require_coherence_check'):
        request_data.require_coherence_check = True
    
    return await ask_expert_enhanced_v2_public(request_data, request)

# =============================================================================
# ENDPOINT FEEDBACK AM√âLIOR√â
# =============================================================================

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION FINALE avec support qualit√©"""
    try:
        logger.info(f"üìä [Expert Enhanced] Feedback re√ßu: {feedback_data.rating}")
        logger.info(f"üìä [Expert Enhanced] Conversation ID: {feedback_data.conversation_id}")
        
        if feedback_data.quality_feedback:
            logger.info(f"üìà [Expert Enhanced] Feedback qualit√© d√©taill√©: {len(feedback_data.quality_feedback)} m√©triques")
        
        # D√©l√©guer au service
        result = await expert_service.process_feedback(feedback_data)
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur feedback critique: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur enregistrement feedback: {str(e)}")

# =============================================================================
# ENDPOINT TOPICS AM√âLIOR√â
# =============================================================================

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION FINALE avec statut am√©liorations"""
    try:
        return await expert_service.get_suggested_topics(language)
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur topics: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration topics")

# =============================================================================
# NOUVEAUX ENDPOINTS DE DEBUG ET MONITORING
# =============================================================================

@router.get("/system-status")
async def get_system_status():
    """Retourne le statut complet du syst√®me avec am√©liorations"""
    try:
        # V√©rifier la disponibilit√© de tous les services
        status = {
            "system_available": True,
            "timestamp": datetime.now().isoformat(),
            "components": {
                "expert_service": True,
                "rag_system": True,  # √Ä v√©rifier r√©ellement
                "enhancement_service": True,
                "integrations_manager": expert_service.integrations.get_system_status()
            },
            "enhanced_capabilities": [
                "vagueness_detection",
                "context_coherence_check", 
                "detailed_rag_scoring",
                "enhanced_fallback",
                "quality_metrics",
                "debug_mode",
                "performance_breakdown"
            ],
            "enhanced_endpoints": [
                "/ask-enhanced-v2",
                "/ask-enhanced-v2-public", 
                "/feedback (with quality)",
                "/topics (enhanced)",
                "/system-status",
                "/debug/test-enhancements"
            ],
            "api_version": "v2_enhanced",
            "backward_compatibility": True
        }
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur system status: {e}")
        return {
            "system_available": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.post("/debug/test-enhancements")
async def test_enhancements(request: Request):
    """Test toutes les am√©liorations avec une question de test"""
    try:
        # Question de test qui active toutes les am√©liorations
        test_question = EnhancedQuestionRequest(
            text="Quel est leur poids au jour 18 ?",  # Question avec pronom contextuel
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            require_coherence_check=True,
            detailed_rag_scoring=True,
            enable_quality_metrics=True,
            debug_mode=True
        )
        
        # Simuler contexte conversationnel (Ross 308 mentionn√© avant)
        if expert_service.integrations.intelligent_memory_available:
            try:
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user",
                    message="Qu'est-ce que Ross 308 ?",
                    role="user",
                    language="fr"
                )
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user", 
                    message="Le Ross 308 est une race de poulet de chair...",
                    role="assistant",
                    language="fr"
                )
            except Exception:
                pass  # Pas critique pour le test
        
        start_time = time.time()
        
        # Traiter la question de test
        result = await expert_service.process_expert_question(
            request_data=test_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        # Analyser les r√©sultats
        test_results = {
            "test_successful": True,
            "question": test_question.text,
            "conversation_id": test_question.conversation_id,
            "user_id": "test_user",
            "timestamp": datetime.now().isoformat(),
            "components_tested": {
                "vagueness_detection": result.vagueness_detection is not None,
                "context_coherence": result.context_coherence is not None,
                "document_relevance": result.document_relevance is not None,
                "quality_metrics": result.quality_metrics is not None,
                "debug_info": result.debug_info is not None,
                "performance_breakdown": result.performance_breakdown is not None,
                "ai_enhancements_used": len(result.ai_enhancements_used or []) > 0
            },
            "enhancement_results": {
                "ai_enhancements_count": len(result.ai_enhancements_used or []),
                "processing_steps_count": len(result.processing_steps or []),
                "response_time_ms": result.response_time_ms,
                "mode": result.mode
            },
            "errors": []
        }
        
        # V√©rifications de qualit√©
        if not result.ai_enhancements_used:
            test_results["errors"].append("Aucune am√©lioration IA utilis√©e")
        
        if result.response_time_ms > 10000:  # 10 secondes
            test_results["errors"].append(f"Temps de r√©ponse trop √©lev√©: {result.response_time_ms}ms")
        
        if len(test_results["errors"]) > 0:
            test_results["test_successful"] = False
        
        logger.info(f"‚úÖ [Expert Enhanced] Test des am√©liorations: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test am√©liorations: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "components_tested": {},
            "errors": [f"Erreur critique: {str(e)}"]
        }

# =============================================================================
# CONFIGURATION & LOGGING
# =============================================================================

logger.info("üöÄ [EXPERT ENDPOINTS] Endpoints FINAUX initialis√©s avec succ√®s!")
logger.info("üîß [EXPERT ENDPOINTS] ENDPOINTS DISPONIBLES:")
logger.info("   - POST /ask-enhanced-v2 (VERSION FINALE avec toutes am√©liorations)")
logger.info("   - POST /ask-enhanced-v2-public (VERSION FINALE publique)")
logger.info("   - POST /ask-enhanced (compatibilit√© v1 ‚Üí v2)")
logger.info("   - POST /ask-enhanced-public (compatibilit√© v1 public ‚Üí v2)")
logger.info("   - POST /ask (compatibilit√© original ‚Üí v2)")
logger.info("   - POST /ask-public (compatibilit√© original public ‚Üí v2)")
logger.info("   - POST /feedback (am√©lior√© avec qualit√© d√©taill√©e)")
logger.info("   - GET /topics (enrichi avec statut am√©liorations)")
logger.info("   - GET /system-status (monitoring complet)")
logger.info("   - POST /debug/test-enhancements (tests automatiques)")
logger.info("‚úÖ [EXPERT ENDPOINTS] R√©trocompatibilit√© totale assur√©e")
logger.info("üöÄ [EXPERT ENDPOINTS] Nouvelles fonctionnalit√©s pr√™tes pour production")