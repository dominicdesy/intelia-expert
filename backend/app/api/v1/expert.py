"""
app/api/v1/expert.py - EXPERT ENDPOINTS PRINCIPAUX v3.7.3 - PROPAGATION CHAMPS

üöÄ MODIFICATIONS APPLIQU√âES v3.7.3:
- Propagation clarification_required_critical dans toutes les r√©ponses
- Propagation missing_critical_entities dans les m√©tadonn√©es
- Propagation variants_tested depuis les am√©liorations RAG
- Int√©gration compl√®te dans EnhancedExpertResponse
- Support dans les endpoints publics et priv√©s
- Gestion dans les r√©ponses de clarification incompl√®te

VERSION COMPL√àTE + PROPAGATION NOUVEAUX CHAMPS + SUPPORT RESPONSE_VERSIONS + CLARIFICATION INTELLIGENTE
"""

import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

# Imports s√©curis√©s avec gestion d'erreurs
try:
    from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest, ConcisionLevel
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_models: {e}")
    # Fallback vers des mod√®les de base
    from pydantic import BaseModel
    
    class EnhancedQuestionRequest(BaseModel):
        text: str
        language: str = "fr"
        conversation_id: Optional[str] = None
        is_clarification_response: bool = False
        original_question: Optional[str] = None
        clarification_context: Optional[Dict[str, Any]] = None
        clarification_entities: Optional[Dict[str, str]] = None
        
    class EnhancedExpertResponse(BaseModel):
        question: str
        response: str
        conversation_id: str
        rag_used: bool = False
        rag_score: Optional[float] = None
        timestamp: str
        language: str
        response_time_ms: int
        mode: str
        user: Optional[str] = None
        logged: bool = False
        validation_passed: Optional[bool] = None
        # NOUVEAUX CHAMPS v3.7.3
        clarification_required_critical: bool = False
        missing_critical_entities: List[str] = []
        variants_tested: List[str] = []
        
    class FeedbackRequest(BaseModel):
        rating: str
        comment: Optional[str] = None
        conversation_id: Optional[str] = None
        
    class ConcisionLevel:
        CONCISE = "concise"

try:
    from .expert_services import ExpertService
    EXPERT_SERVICE_AVAILABLE = True
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_services: {e}")
    EXPERT_SERVICE_AVAILABLE = False

try:
    from .expert_utils import get_user_id_from_request, extract_breed_and_sex_from_clarification
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_utils: {e}")
    # Fonctions fallback
    def get_user_id_from_request(request):
        return getattr(request.client, 'host', 'unknown') if request.client else 'unknown'
    
    def extract_breed_and_sex_from_clarification(text, language):
        return {"breed": None, "sex": None}

router = APIRouter(tags=["expert-main"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Initialisation du service avec gestion d'erreur
expert_service = None
if EXPERT_SERVICE_AVAILABLE:
    try:
        expert_service = ExpertService()
        logger.info("‚úÖ [Expert] Service expert initialis√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå [Expert] Erreur initialisation service: {e}")
        expert_service = None
else:
    logger.warning("‚ö†Ô∏è [Expert] Service expert non disponible - utilisation du mode fallback")

# Mock auth dependency si service non disponible
def get_current_user_mock():
    return {"id": "fallback_user", "email": "fallback@intelia.com"}

def get_current_user_dependency():
    if expert_service and hasattr(expert_service, 'get_current_user_dependency'):
        return expert_service.get_current_user_dependency()
    return get_current_user_mock

# =============================================================================
# UTILITAIRES PROPAGATION CHAMPS v3.7.3
# =============================================================================

def _extract_propagation_fields(response_data: Any) -> Dict[str, Any]:
    """Extrait les nouveaux champs √† propager depuis la r√©ponse du service"""
    
    propagation_fields = {
        "clarification_required_critical": False,
        "missing_critical_entities": [],
        "variants_tested": []
    }
    
    try:
        # Extraction clarification_required_critical
        if hasattr(response_data, 'clarification_result') and response_data.clarification_result:
            clarification_result = response_data.clarification_result
            propagation_fields["clarification_required_critical"] = clarification_result.get("clarification_required_critical", False)
            propagation_fields["missing_critical_entities"] = clarification_result.get("missing_critical_entities", [])
            
            logger.info(f"üìã [PROPAGATION v3.7.3] Clarification critique: {propagation_fields['clarification_required_critical']}")
            logger.info(f"üìã [PROPAGATION v3.7.3] Entit√©s critiques manquantes: {propagation_fields['missing_critical_entities']}")
        
        # Extraction variants_tested depuis RAG enhancements
        if hasattr(response_data, 'rag_enhancement_info') and response_data.rag_enhancement_info:
            rag_enhancement_info = response_data.rag_enhancement_info
            propagation_fields["variants_tested"] = rag_enhancement_info.get("variants_tested", [])
            
            logger.info(f"üìã [PROPAGATION v3.7.3] Variantes test√©es: {propagation_fields['variants_tested']}")
        
        # Extraction alternative depuis processing_metadata
        elif hasattr(response_data, 'processing_metadata') and response_data.processing_metadata:
            processing_metadata = response_data.processing_metadata
            if "rag_enhancement_info" in processing_metadata:
                rag_info = processing_metadata["rag_enhancement_info"]
                propagation_fields["variants_tested"] = rag_info.get("variants_tested", [])
                
                logger.info(f"üìã [PROPAGATION v3.7.3] Variantes depuis metadata: {propagation_fields['variants_tested']}")
        
        # Extraction depuis ai_enhancements_used (fallback)
        elif hasattr(response_data, 'ai_enhancements_used') and response_data.ai_enhancements_used:
            # Filtrer les am√©liorations li√©es aux variantes
            variant_enhancements = [
                enhancement for enhancement in response_data.ai_enhancements_used 
                if "variant" in enhancement.lower() or "reformulation" in enhancement.lower()
            ]
            if variant_enhancements:
                propagation_fields["variants_tested"] = variant_enhancements
                logger.info(f"üìã [PROPAGATION v3.7.3] Variantes inf√©r√©es: {variant_enhancements}")
        
        logger.info("‚úÖ [PROPAGATION v3.7.3] Champs extraits avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå [PROPAGATION v3.7.3] Erreur extraction champs: {e}")
        # Garder les valeurs par d√©faut en cas d'erreur
    
    return propagation_fields

def _apply_propagation_fields(response: EnhancedExpertResponse, propagation_fields: Dict[str, Any]) -> EnhancedExpertResponse:
    """Applique les champs de propagation √† la r√©ponse finale"""
    
    try:
        # Application des nouveaux champs
        if hasattr(response, 'clarification_required_critical'):
            response.clarification_required_critical = propagation_fields.get("clarification_required_critical", False)
        
        if hasattr(response, 'missing_critical_entities'):
            response.missing_critical_entities = propagation_fields.get("missing_critical_entities", [])
        
        if hasattr(response, 'variants_tested'):
            response.variants_tested = propagation_fields.get("variants_tested", [])
        
        logger.info("‚úÖ [PROPAGATION v3.7.3] Champs appliqu√©s √† la r√©ponse finale")
        
        # Log des valeurs appliqu√©es
        logger.info(f"üìã [PROPAGATION v3.7.3] Appliqu√© clarification critique: {getattr(response, 'clarification_required_critical', 'N/A')}")
        logger.info(f"üìã [PROPAGATION v3.7.3] Appliqu√© entit√©s manquantes: {getattr(response, 'missing_critical_entities', 'N/A')}")
        logger.info(f"üìã [PROPAGATION v3.7.3] Appliqu√© variantes test√©es: {getattr(response, 'variants_tested', 'N/A')}")
        
    except Exception as e:
        logger.error(f"‚ùå [PROPAGATION v3.7.3] Erreur application champs: {e}")
    
    return response

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC PROPAGATION v3.7.3
# =============================================================================

@router.get("/health")
async def expert_health():
    """Health check pour diagnostiquer les probl√®mes"""
    return {
        "status": "healthy",
        "version": "3.7.3",
        "expert_service_available": EXPERT_SERVICE_AVAILABLE,
        "expert_service_initialized": expert_service is not None,
        "timestamp": datetime.now().isoformat(),
        "propagation_fields_supported": [
            "clarification_required_critical",
            "missing_critical_entities", 
            "variants_tested"
        ],
        "endpoints": [
            "/health",
            "/ask-enhanced-v2", 
            "/ask-enhanced-v2-public",
            "/feedback",
            "/topics"
        ]
    }

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user_dependency())
):
    """
    üß® ENDPOINT EXPERT FINAL avec PROPAGATION CHAMPS v3.7.3:
    - Support explicite du flag is_clarification_response
    - Logique clarification granulaire et adaptative
    - M√©tadonn√©es propag√©es correctement
    - G√©n√©ration multi-versions des r√©ponses
    - NOUVEAUX CHAMPS: clarification_required_critical, missing_critical_entities, variants_tested
    ‚úÖ CORRIG√â: Variables initialis√©es, v√©rifications robustes, propagation compl√®te
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 v3.7.3 - PROPAGATION CHAMPS + CLARIFICATION INTELLIGENTE")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üÜî Conversation ID: {getattr(request_data, 'conversation_id', 'None')}")
        logger.info(f"üõ†Ô∏è Service disponible: {expert_service is not None}")
        
        # V√©rification service disponible
        if not expert_service:
            logger.error("‚ùå [Expert] Service expert non disponible - mode fallback")
            return await _fallback_expert_response(request_data, start_time, current_user)
        
        # ‚úÖ CORRECTION: V√©rification robuste des param√®tres concision
        concision_level = getattr(request_data, 'concision_level', ConcisionLevel.CONCISE)
        generate_all_versions = getattr(request_data, 'generate_all_versions', True)
        
        if concision_level is None:
            concision_level = ConcisionLevel.CONCISE
        if generate_all_versions is None:
            generate_all_versions = True
        
        logger.info("üöÄ [RESPONSE_VERSIONS v3.7.3] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # D√âTECTION EXPLICITE MODE CLARIFICATION avec gestion d'erreur
        is_clarification = getattr(request_data, 'is_clarification_response', False)
        original_question = getattr(request_data, 'original_question', None)
        clarification_entities = getattr(request_data, 'clarification_entities', None)
        
        logger.info("üß® [D√âTECTION CLARIFICATION v3.7.3] Analyse du mode:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - original_question fournie: {original_question is not None}")
        logger.info(f"   - clarification_entities: {clarification_entities}")
        
        # Variables pour m√©tadonn√©es de clarification
        clarification_metadata = {}
        
        if is_clarification:
            logger.info("üé™ [FLUX CLARIFICATION] Mode R√âPONSE de clarification d√©tect√©")
            logger.info(f"   - R√©ponse utilisateur: '{request_data.text}'")
            logger.info(f"   - Question originale: '{original_question}'")
            
            # ‚úÖ CORRECTION: Initialisation s√©curis√©e des variables breed/sex
            breed = None
            sex = None
            
            # TRAITEMENT SP√âCIALIS√â R√âPONSE CLARIFICATION avec gestion d'erreur
            try:
                if clarification_entities:
                    logger.info(f"   - Entit√©s pr√©-extraites: {clarification_entities}")
                    breed = clarification_entities.get('breed')
                    sex = clarification_entities.get('sex')
                else:
                    # Extraction automatique si pas fournie
                    logger.info("   - Extraction automatique entit√©s depuis r√©ponse")
                    extracted = extract_breed_and_sex_from_clarification(
                        request_data.text, 
                        getattr(request_data, 'language', 'fr')
                    )
                    if extracted is None:
                        extracted = {"breed": None, "sex": None}
                    breed = extracted.get('breed')
                    sex = extracted.get('sex')
                    logger.info(f"   - Entit√©s extraites: breed='{breed}', sex='{sex}'")
            except Exception as e:
                logger.error(f"‚ùå Erreur extraction entit√©s: {e}")
                breed, sex = None, None
            
            # VALIDATION entit√©s compl√®tes AVANT enrichissement
            clarified_entities = {"breed": breed, "sex": sex}
            
            # üéØ NOUVELLE LOGIQUE GRANULAIRE v3.7.3: Validation granulaire breed vs sex
            if not breed or not sex:
                # ‚úÖ CORRECTION: Protection contre None dans le logging
                breed_safe = breed or "None"
                sex_safe = sex or "None"
                logger.warning(f"‚ö†Ô∏è [FLUX CLARIFICATION] Entit√©s incompl√®tes: breed='{breed_safe}', sex='{sex_safe}'")
                
                return _create_incomplete_clarification_response(
                    request_data, clarified_entities, breed, sex, start_time
                )
            
            # Enrichir la question originale avec les informations COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                logger.info(f"   - Question enrichie: '{enriched_question}'")
                
                # M√©tadonn√©es sauvegard√©es pour response
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier la question pour traitement RAG
                request_data.text = enriched_question
                
                # Marquer comme traitement post-clarification (√©viter boucle)
                if hasattr(request_data, 'is_clarification_response'):
                    request_data.is_clarification_response = False
                
                logger.info("üéØ [FLUX CLARIFICATION] Question enrichie, passage au traitement RAG")
            else:
                logger.warning("‚ö†Ô∏è [FLUX CLARIFICATION] Question originale manquante - impossible enrichir")
        else:
            logger.info("üéØ [FLUX CLARIFICATION] Mode QUESTION INITIALE - d√©tection vagueness active")
        
        # ‚úÖ CORRECTION: Validation et d√©fauts concision robuste
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
            logger.info("üöÄ [CONCISION] Niveau par d√©faut appliqu√©: CONCISE")
        
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
            logger.info("üöÄ [CONCISION] generate_all_versions activ√© par d√©faut")
        
        # FOR√áAGE SYST√âMATIQUE DES AM√âLIORATIONS avec gestion d'erreur
        original_vagueness = getattr(request_data, 'enable_vagueness_detection', None)
        original_coherence = getattr(request_data, 'require_coherence_check', None)
        
        # FORCER l'activation - AUCUNE EXCEPTION
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        
        logger.info("üî• [CLARIFICATION FORC√âE v3.7.3] Param√®tres forc√©s:")
        logger.info(f"   - enable_vagueness_detection: {original_vagueness} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - require_coherence_check: {original_coherence} ‚Üí TRUE (FORC√â)")
        
        # D√âL√âGUER AU SERVICE avec gestion d'erreur
        try:
            response = await expert_service.process_expert_question(
                request_data=request_data,
                request=request,
                current_user=current_user,
                start_time=start_time
            )
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur traitement: {e}")
            return await _fallback_expert_response(request_data, start_time, current_user, str(e))
        
        # üöÄ PROPAGATION NOUVEAUX CHAMPS v3.7.3
        logger.info("üìã [PROPAGATION v3.7.3] Extraction et application nouveaux champs")
        propagation_fields = _extract_propagation_fields(response)
        response = _apply_propagation_fields(response, propagation_fields)
        
        # AJOUT M√âTADONN√âES CLARIFICATION dans response
        if clarification_metadata and hasattr(response, 'clarification_processing'):
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES v3.7.3] Clarification metadata ajout√©es √† response")
        
        # Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # LOGGING R√âSULTATS CLARIFICATION D√âTAILL√â
        logger.info("üß® [R√âSULTATS CLARIFICATION v3.7.3]:")
        logger.info(f"   - Mode final: {getattr(response, 'mode', 'unknown')}")
        logger.info(f"   - Clarification d√©clench√©e: {getattr(response, 'clarification_result', None) is not None}")
        logger.info(f"   - RAG utilis√©: {getattr(response, 'rag_used', False)}")
        logger.info(f"   - Question finale trait√©e: '{getattr(response, 'question', '')[:100]}...'")
        
        clarification_result = getattr(response, 'clarification_result', None)
        if clarification_result:
            logger.info(f"   - Type clarification: {clarification_result.get('clarification_type', 'N/A')}")
            logger.info(f"   - Infos manquantes: {clarification_result.get('missing_information', [])}")
            logger.info(f"   - Confiance: {clarification_result.get('confidence', 0)}")
            if 'provided_parts' in clarification_result:
                logger.info(f"   - Parties d√©tect√©es: {clarification_result.get('provided_parts', [])}")
        
        # üìã LOGGING NOUVEAUX CHAMPS v3.7.3
        logger.info("üìã [NOUVEAUX CHAMPS v3.7.3] Valeurs finales:")
        logger.info(f"   - clarification_required_critical: {getattr(response, 'clarification_required_critical', 'N/A')}")
        logger.info(f"   - missing_critical_entities: {getattr(response, 'missing_critical_entities', 'N/A')}")
        logger.info(f"   - variants_tested: {getattr(response, 'variants_tested', 'N/A')}")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 v3.7.3 - Temps: {getattr(response, 'response_time_ms', 0)}ms")
        logger.info(f"ü§ñ Am√©liorations: {len(getattr(response, 'ai_enhancements_used', []))} features")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2 v3.7.3: {e}")
        logger.info("=" * 100)
        return await _fallback_expert_response(request_data, start_time, current_user, str(e))

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üß® ENDPOINT PUBLIC avec PROPAGATION CHAMPS v3.7.3
    ‚úÖ CORRIG√â: Variables initialis√©es, v√©rifications robustes, propagation compl√®te"""
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public v3.7.3 - PROPAGATION CHAMPS + CLARIFICATION INTELLIGENTE")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üõ†Ô∏è Service disponible: {expert_service is not None}")
        
        # V√©rification service disponible
        if not expert_service:
            logger.error("‚ùå [Expert Public] Service expert non disponible - mode fallback")
            return await _fallback_expert_response(request_data, start_time, None)
        
        # ‚úÖ CORRECTION: Param√®tres concision pour endpoint public avec v√©rifications
        concision_level = getattr(request_data, 'concision_level', ConcisionLevel.CONCISE)
        generate_all_versions = getattr(request_data, 'generate_all_versions', True)
        
        if concision_level is None:
            concision_level = ConcisionLevel.CONCISE
        if generate_all_versions is None:
            generate_all_versions = True
        
        logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # D√âTECTION PUBLIQUE CLARIFICATION avec gestion d'erreur
        is_clarification = getattr(request_data, 'is_clarification_response', False)
        clarification_metadata = {}
        
        logger.info("üß® [D√âTECTION PUBLIQUE v3.7.3] Analyse mode clarification:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - conversation_id: {getattr(request_data, 'conversation_id', 'None')}")
        
        if is_clarification:
            logger.info("üé™ [FLUX PUBLIC] Traitement r√©ponse clarification")
            
            # Logique similaire √† l'endpoint priv√© avec gestion d'erreur
            original_question = getattr(request_data, 'original_question', None)
            clarification_entities = getattr(request_data, 'clarification_entities', None)
            
            logger.info(f"   - Question originale: '{original_question}'")
            logger.info(f"   - Entit√©s fournies: {clarification_entities}")
            
            # ‚úÖ CORRECTION: Initialisation s√©curis√©e des variables breed/sex
            breed = None
            sex = None
            
            try:
                if clarification_entities:
                    breed = clarification_entities.get('breed')
                    sex = clarification_entities.get('sex')
                    logger.info(f"   - Utilisation entit√©s pr√©-extraites: breed='{breed}', sex='{sex}'")
                else:
                    # Extraction automatique
                    extracted = extract_breed_and_sex_from_clarification(
                        request_data.text, 
                        getattr(request_data, 'language', 'fr')
                    )
                    if extracted is None:
                        extracted = {"breed": None, "sex": None}
                    breed = extracted.get('breed')
                    sex = extracted.get('sex')
                    logger.info(f"   - Extraction automatique: breed='{breed}', sex='{sex}'")
            except Exception as e:
                logger.error(f"‚ùå Erreur extraction entit√©s publique: {e}")
                breed, sex = None, None
            
            # VALIDATION entit√©s compl√®tes
            clarified_entities = {"breed": breed, "sex": sex}
            
            # üéØ LOGIQUE GRANULAIRE PUBLIQUE v3.7.3
            if not breed or not sex:
                breed_safe = breed or "None"
                sex_safe = sex or "None"
                logger.warning(f"‚ö†Ô∏è [FLUX PUBLIC] Entit√©s incompl√®tes: breed='{breed_safe}', sex='{sex_safe}'")
                
                return _create_incomplete_clarification_response(
                    request_data, clarified_entities, breed, sex, start_time, public=True
                )
            
            # Enrichissement question avec entit√©s COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                # M√©tadonn√©es pour response (endpoint public)
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier question pour RAG
                request_data.text = enriched_question
                if hasattr(request_data, 'is_clarification_response'):
                    request_data.is_clarification_response = False  # √âviter boucle
                
                logger.info(f"   - Question enrichie publique: '{enriched_question}'")
                logger.info(f"   - M√©tadonn√©es sauvegard√©es: {clarification_metadata}")
        else:
            logger.info("üéØ [FLUX PUBLIC] Question initiale - d√©tection vagueness")
        
        # ‚úÖ CORRECTION: Validation et d√©fauts concision pour public
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
        
        # FOR√áAGE MAXIMAL pour endpoint public avec gestion d'erreur
        logger.info("üî• [PUBLIC ENDPOINT v3.7.3] Activation FORC√âE des am√©liorations:")
        
        original_settings = {
            'vagueness': getattr(request_data, 'enable_vagueness_detection', None),
            'coherence': getattr(request_data, 'require_coherence_check', None),
            'detailed_rag': getattr(request_data, 'detailed_rag_scoring', None),
            'quality_metrics': getattr(request_data, 'enable_quality_metrics', None)
        }
        
        # FOR√áAGE MAXIMAL pour endpoint public
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        if hasattr(request_data, 'detailed_rag_scoring'):
            request_data.detailed_rag_scoring = True
        if hasattr(request_data, 'enable_quality_metrics'):
            request_data.enable_quality_metrics = True
        
        logger.info("üî• [FOR√áAGE PUBLIC v3.7.3] Changements appliqu√©s:")
        for key, (old_val, new_val) in {
            'vagueness_detection': (original_settings['vagueness'], True),
            'coherence_check': (original_settings['coherence'], True),
            'detailed_rag': (original_settings['detailed_rag'], True),
            'quality_metrics': (original_settings['quality_metrics'], True)
        }.items():
            logger.info(f"   - {key}: {old_val} ‚Üí {new_val} (FORC√â)")
        
        # D√âL√âGUER AU SERVICE avec support response_versions et gestion d'erreur
        try:
            response = await expert_service.process_expert_question(
                request_data=request_data,
                request=request,
                current_user=None,  # Mode public
                start_time=start_time
            )
        except Exception as e:
            logger.error(f"‚ùå [Expert Service Public] Erreur traitement: {e}")
            return await _fallback_expert_response(request_data, start_time, None, str(e))
        
        # üöÄ PROPAGATION NOUVEAUX CHAMPS v3.7.3 - ENDPOINT PUBLIC
        logger.info("üìã [PROPAGATION PUBLIC v3.7.3] Extraction et application nouveaux champs")
        propagation_fields = _extract_propagation_fields(response)
        response = _apply_propagation_fields(response, propagation_fields)
        
        # Ajout m√©tadonn√©es clarification
        if clarification_metadata and hasattr(response, 'clarification_processing'):
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES PUBLIC v3.7.3] Clarification metadata ajout√©es")
        
        # Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # VALIDATION R√âSULTATS CLARIFICATION PUBLIQUE
        logger.info("üß® [VALIDATION PUBLIQUE v3.7.3]:")
        logger.info(f"   - Clarification syst√®me actif: {'clarification' in getattr(response, 'mode', '')}")
        logger.info(f"   - Am√©liorations appliqu√©es: {getattr(response, 'ai_enhancements_used', [])}")
        logger.info(f"   - Mode final: {getattr(response, 'mode', 'unknown')}")
        logger.info(f"   - RAG utilis√©: {getattr(response, 'rag_used', False)}")
        
        # üìã LOGGING NOUVEAUX CHAMPS PUBLIC v3.7.3
        logger.info("üìã [NOUVEAUX CHAMPS PUBLIC v3.7.3] Valeurs finales:")
        logger.info(f"   - clarification_required_critical: {getattr(response, 'clarification_required_critical', 'N/A')}")
        logger.info(f"   - missing_critical_entities: {getattr(response, 'missing_critical_entities', 'N/A')}")
        logger.info(f"   - variants_tested: {getattr(response, 'variants_tested', 'N/A')}")
        
        # V√©rification critique
        ai_enhancements = getattr(response, 'ai_enhancements_used', [])
        if not ai_enhancements:
            logger.warning("‚ö†Ô∏è [ALERTE] Aucune am√©lioration d√©tect√©e - possible probl√®me!")
        
        if hasattr(response, 'enable_vagueness_detection') and getattr(response, 'enable_vagueness_detection', True) is False:
            logger.warning("‚ö†Ô∏è [ALERTE] Vagueness detection non activ√©e - v√©rifier for√ßage!")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public v3.7.3 - Mode: {getattr(response, 'mode', 'unknown')}")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public v3.7.3: {e}")
        logger.info("=" * 100)
        return await _fallback_expert_response(request_data, start_time, None, str(e))

# =============================================================================
# ENDPOINT FEEDBACK ET TOPICS AVEC GESTION D'ERREUR
# =============================================================================

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION FINALE avec support qualit√© et gestion d'erreur"""
    try:
        logger.info(f"üìä [Feedback] Re√ßu: {feedback_data.rating} pour {getattr(feedback_data, 'conversation_id', 'None')}")
        
        if hasattr(feedback_data, 'quality_feedback') and feedback_data.quality_feedback:
            logger.info(f"üìà [Feedback] Qualit√© d√©taill√©e: {len(feedback_data.quality_feedback)} m√©triques")
        
        if expert_service and hasattr(expert_service, 'process_feedback'):
            result = await expert_service.process_feedback(feedback_data)
        else:
            # Fallback si service non disponible
            result = {
                "success": True,
                "message": "Feedback enregistr√© (mode fallback)",
                "rating": feedback_data.rating,
                "comment": getattr(feedback_data, 'comment', None),
                "conversation_id": getattr(feedback_data, 'conversation_id', None),
                "fallback_mode": True,
                "timestamp": datetime.now().isoformat()
            }
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Feedback] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur feedback: {str(e)}")

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION FINALE avec gestion d'erreur"""
    try:
        if expert_service and hasattr(expert_service, 'get_suggested_topics'):
            return await expert_service.get_suggested_topics(language)
        else:
            # Fallback si service non disponible
            fallback_topics = {
                "fr": [
                    "Probl√®mes de croissance poulets",
                    "Conditions environnementales optimales", 
                    "Protocoles vaccination",
                    "Diagnostic probl√®mes sant√©",
                    "Nutrition et alimentation",
                    "Mortalit√© √©lev√©e - causes"
                ],
                "en": [
                    "Chicken growth problems",
                    "Optimal environmental conditions",
                    "Vaccination protocols", 
                    "Health problem diagnosis",
                    "Nutrition and feeding",
                    "High mortality - causes"
                ],
                "es": [
                    "Problemas de crecimiento pollos",
                    "Condiciones ambientales √≥ptimas",
                    "Protocolos de vacunaci√≥n",
                    "Diagn√≥stico problemas de salud", 
                    "Nutrici√≥n y alimentaci√≥n",
                    "Alta mortalidad - causas"
                ]
            }
            
            lang = language.lower() if language else "fr"
            if lang not in fallback_topics:
                lang = "fr"
            
            return {
                "topics": fallback_topics[lang],
                "language": lang,
                "count": len(fallback_topics[lang]),
                "fallback_mode": True,
                "expert_service_available": False,
                "timestamp": datetime.now().isoformat()
            }
            
    except Exception as e:
        logger.error(f"‚ùå [Topics] Erreur: {e}")
        raise HTTPException(status_code=500, detail="Erreur topics")

# =============================================================================
# FONCTIONS UTILITAIRES AVEC PROPAGATION v3.7.3
# =============================================================================

def _create_incomplete_clarification_response(
    request_data: EnhancedQuestionRequest, 
    clarified_entities: Dict[str, str], 
    breed: Optional[str], 
    sex: Optional[str], 
    start_time: float,
    public: bool = False
) -> EnhancedExpertResponse:
    """Cr√©e une r√©ponse pour clarification incompl√®te avec PROPAGATION CHAMPS v3.7.3"""
    
    # Validation granulaire des informations manquantes
    missing_info = []
    missing_details = []
    provided_parts = []
    missing_critical_entities = []  # NOUVEAU CHAMP v3.7.3
    
    # V√©rification breed avec plus de nuances
    if not breed:
        missing_info.append("race/souche")
        missing_details.append("la race/souche (Ross 308, Cobb 500, Hubbard, etc.)")
        missing_critical_entities.append("breed")  # NOUVEAU v3.7.3
    elif len(breed.strip()) < 3:  # Breed trop court/vague
        missing_info.append("race/souche compl√®te")
        missing_details.append("la race/souche compl√®te (ex: 'Ross' ‚Üí 'Ross 308')")
        provided_parts.append(f"Race partielle d√©tect√©e: {breed}")
        missing_critical_entities.append("breed_complete")  # NOUVEAU v3.7.3
    else:
        provided_parts.append(f"Race d√©tect√©e: {breed}")
    
    # V√©rification sex
    if not sex:
        missing_info.append("sexe")
        missing_details.append("le sexe (m√¢les, femelles, ou mixte)")
        missing_critical_entities.append("sex")  # NOUVEAU v3.7.3
    else:
        provided_parts.append(f"Sexe d√©tect√©: {sex}")
    
    # üéØ MESSAGE ADAPTATIF selon ce qui manque r√©ellement
    if len(missing_info) == 2:
        error_message = f"Information incompl√®te. Il manque encore : {' et '.join(missing_info)}.\n\n"
    elif len(missing_info) == 1:
        error_message = f"Information incompl√®te. Il manque encore : {missing_info[0]}.\n\n"
    else:
        error_message = "Information incompl√®te.\n\n"
    
    # Ajouter contexte de ce qui a √©t√© fourni VS ce qui manque
    if provided_parts:
        error_message += f"Votre r√©ponse '{request_data.text}' contient : {', '.join(provided_parts)}.\n"
        error_message += f"Mais il manque encore : {', '.join(missing_details)}.\n\n"
    else:
        error_message += f"Votre r√©ponse '{request_data.text}' ne contient pas tous les √©l√©ments n√©cessaires.\n\n"
    
    # Exemples contextuels selon ce qui manque
    error_message += "**Exemples complets :**\n"
    
    if "race" in str(missing_info):
        error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
        error_message += "‚Ä¢ 'Cobb 500 femelles'\n" 
        error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
    elif "sexe" in str(missing_info):
        # Si seul le sexe manque, adapter les exemples avec la race d√©tect√©e
        if breed and len(breed.strip()) >= 3:
            error_message += f"‚Ä¢ '{breed} m√¢les'\n"
            error_message += f"‚Ä¢ '{breed} femelles'\n"
            error_message += f"‚Ä¢ '{breed} troupeau mixte'\n\n"
        else:
            error_message += "‚Ä¢ 'Ross 308 m√¢les'\n"
            error_message += "‚Ä¢ 'Cobb 500 femelles'\n"
            error_message += "‚Ä¢ 'Hubbard troupeau mixte'\n\n"
    
    error_message += "Pouvez-vous pr√©ciser les informations manquantes ?"
    
    # Retourner erreur clarification incompl√®te AVEC NOUVEAUX CHAMPS v3.7.3
    mode_suffix = "_public" if public else ""
    
    logger.info(f"üìã [CLARIFICATION INCOMPL√àTE v3.7.3] Entit√©s critiques manquantes: {missing_critical_entities}")
    
    return EnhancedExpertResponse(
        question=request_data.text,
        response=error_message,
        conversation_id=getattr(request_data, 'conversation_id', None) or str(uuid.uuid4()),
        rag_used=False,
        rag_score=None,
        timestamp=datetime.now().isoformat(),
        language=getattr(request_data, 'language', 'fr'),
        response_time_ms=int((time.time() - start_time) * 1000),
        mode=f"incomplete_clarification_response{mode_suffix}",
        user=None,
        logged=True,
        validation_passed=False,
        # üöÄ NOUVEAUX CHAMPS v3.7.3 POUR CLARIFICATION INCOMPL√àTE
        clarification_required_critical=True,  # NOUVEAU v3.7.3
        missing_critical_entities=missing_critical_entities,  # NOUVEAU v3.7.3
        variants_tested=[],  # NOUVEAU v3.7.3 - vide pour clarification incompl√®te
        clarification_result={
            "clarification_requested": True,
            "clarification_type": f"incomplete_entities_retry{mode_suffix}",
            "missing_information": missing_info,
            "provided_entities": clarified_entities,
            "provided_parts": provided_parts,
            "missing_details": missing_details,
            "retry_required": True,
            "confidence": 0.3,
            # üöÄ NOUVEAUX CHAMPS DANS CLARIFICATION_RESULT v3.7.3
            "clarification_required_critical": True,
            "missing_critical_entities": missing_critical_entities
        },
        processing_steps=[f"incomplete_clarification_detected{mode_suffix}", "retry_requested"],
        ai_enhancements_used=[f"incomplete_clarification_handling{mode_suffix}"],
        response_versions=None  # Pas de response_versions pour erreurs
    )

async def _fallback_expert_response(
    request_data: EnhancedQuestionRequest, 
    start_time: float, 
    current_user: Optional[Dict[str, Any]] = None,
    error_message: str = "Service expert temporairement indisponible"
) -> EnhancedExpertResponse:
    """R√©ponse de fallback quand le service expert n'est pas disponible AVEC NOUVEAUX CHAMPS v3.7.3"""
    
    logger.info("üîÑ [Fallback v3.7.3] G√©n√©ration r√©ponse de fallback avec nouveaux champs")
    
    fallback_responses = {
        "fr": f"Je m'excuse, {error_message}. Votre question '{request_data.text}' a √©t√© re√ßue mais je ne peux pas la traiter actuellement. Veuillez r√©essayer dans quelques minutes.",
        "en": f"I apologize, {error_message}. Your question '{request_data.text}' was received but I cannot process it currently. Please try again in a few minutes.",
        "es": f"Me disculpo, {error_message}. Su pregunta '{request_data.text}' fue recibida pero no puedo procesarla actualmente. Por favor intente de nuevo en unos minutos."
    }
    
    language = getattr(request_data, 'language', 'fr')
    response_text = fallback_responses.get(language, fallback_responses['fr'])
    
    return EnhancedExpertResponse(
        question=request_data.text,
        response=response_text,
        conversation_id=getattr(request_data, 'conversation_id', None) or str(uuid.uuid4()),
        rag_used=False,
        rag_score=None,
        timestamp=datetime.now().isoformat(),
        language=language,
        response_time_ms=int((time.time() - start_time) * 1000),
        mode="fallback_service_unavailable",
        user=current_user.get("email") if current_user else None,
        logged=False,
        validation_passed=False,
        # üöÄ NOUVEAUX CHAMPS v3.7.3 POUR FALLBACK
        clarification_required_critical=False,  # NOUVEAU v3.7.3
        missing_critical_entities=[],  # NOUVEAU v3.7.3
        variants_tested=[],  # NOUVEAU v3.7.3
        processing_steps=["service_unavailable", "fallback_response_generated"],
        ai_enhancements_used=["fallback_handling"],
        response_versions=None
    )

# =============================================================================
# CONFIGURATION FINALE v3.7.3 AVEC PROPAGATION NOUVEAUX CHAMPS üöÄ
# =============================================================================

logger.info("üöÄ" * 50)
logger.info("üöÄ [EXPERT ENDPOINTS MAIN] VERSION 3.7.3 - PROPAGATION NOUVEAUX CHAMPS + CLARIFICATION GRANULAIRE!")
logger.info("üöÄ [NOUVEAUX CHAMPS PROPAG√âS v3.7.3]:")
logger.info("   ‚úÖ clarification_required_critical - Indique si clarification critique requise")
logger.info("   ‚úÖ missing_critical_entities - Liste entit√©s critiques manquantes")
logger.info("   ‚úÖ variants_tested - Liste variantes test√©es par RAG enhancement")
logger.info("")
logger.info("üöÄ [PROPAGATION INT√âGR√âE]:")
logger.info("   ‚úÖ Extraction automatique depuis clarification_result")
logger.info("   ‚úÖ Extraction automatique depuis rag_enhancement_info")
logger.info("   ‚úÖ Application dans toutes les r√©ponses (priv√©/public)")
logger.info("   ‚úÖ Support dans clarification incompl√®te")
logger.info("   ‚úÖ Support dans r√©ponses fallback")
logger.info("")
logger.info("üöÄ [FONCTIONNALIT√âS CONSERV√âES]:")
logger.info("   ‚úÖ Support concision_level et generate_all_versions")
logger.info("   ‚úÖ response_versions dans les r√©ponses")
logger.info("   ‚úÖ Logique clarification GRANULAIRE et adaptative")
logger.info("   ‚úÖ Messages adaptatifs selon ce qui manque r√©ellement")
logger.info("   ‚úÖ Exemples contextuels avec race d√©tect√©e")
logger.info("   ‚úÖ M√©tadonn√©es enrichies (provided_parts, missing_details)")
logger.info("   ‚úÖ Validation granulaire breed vs sex")
logger.info("   ‚úÖ UX clarification grandement am√©lior√©e")
logger.info("   ‚úÖ Gestion d'erreur robuste compl√®te")
logger.info("")
logger.info("üîß [ENDPOINTS DISPONIBLES]:")
logger.info("   - GET /health (diagnostic + version)")
logger.info("   - POST /ask-enhanced-v2 (priv√© + auth + propagation)")
logger.info("   - POST /ask-enhanced-v2-public (public + propagation)")
logger.info("   - POST /feedback (qualit√© d√©taill√©e)")
logger.info("   - GET /topics (suggestions enrichies)")
logger.info("")
logger.info("üéØ [PROPAGATION PROCESS v3.7.3]:")
logger.info("   1. _extract_propagation_fields() - Extraction depuis response")
logger.info("   2. _apply_propagation_fields() - Application √† EnhancedExpertResponse")
logger.info("   3. Logging d√©taill√© des valeurs propag√©es")
logger.info("   4. Support dans tous les types de r√©ponses")
logger.info("   ‚úÖ READY FOR PRODUCTION - NOUVEAUX CHAMPS PROPAG√âS")
logger.info("üöÄ" * 50)