"""
app/api/v1/expert_enhanced.py - VERSION AM√âLIOR√âE AVEC RETRAITEMENT AUTOMATIQUE

NOUVELLES FONCTIONNALIT√âS:
1. Retraitement automatique apr√®s clarification compl√©t√©e
2. Int√©gration syst√®me de clarification am√©lior√©
3. Gestion intelligente des r√©ponses avec donn√©es num√©riques
4. D√©tection automatique des questions enrichies
5. Suivi d'√©tat conversationnel avanc√©
"""

import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends, Query, Body
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field, ConfigDict

router = APIRouter(tags=["expert-enhanced"])
logger = logging.getLogger(__name__)

# =============================================================================
# IMPORT SYST√àME DE CLARIFICATION AM√âLIOR√â - CORRIG√â
# =============================================================================

try:
    from app.api.v1.question_clarification_system_enhanced import (
        analyze_question_for_clarification_enhanced,
        format_clarification_response_enhanced,
        check_for_reprocessing_after_clarification,
        is_enhanced_clarification_system_enabled,
        get_enhanced_clarification_system_stats,
        ClarificationResult,
        ClarificationState,
        ClarificationMode
    )
    ENHANCED_CLARIFICATION_AVAILABLE = True
    logger.info("‚úÖ [Expert Enhanced] Syst√®me de clarification am√©lior√© import√©")
except ImportError as e:
    ENHANCED_CLARIFICATION_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Clarification am√©lior√©e non disponible: {e}")

# =============================================================================
# IMPORT M√âMOIRE CONVERSATIONNELLE INTELLIGENTE - CORRIG√â
# =============================================================================

try:
    from app.api.v1.conversation_memory_enhanced import (
        add_message_to_conversation,
        get_conversation_context,
        get_context_for_clarification,
        get_context_for_rag,
        get_conversation_memory_stats,
        cleanup_expired_conversations,
        IntelligentConversationContext
    )
    INTELLIGENT_MEMORY_AVAILABLE = True
    logger.info("‚úÖ [Expert Enhanced] M√©moire intelligente import√©e")
except ImportError as e:
    INTELLIGENT_MEMORY_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è [Expert Enhanced] M√©moire intelligente non disponible: {e}")

# =============================================================================
# IMPORT VALIDATEUR AGRICOLE (EXISTANT)
# =============================================================================

try:
    from app.api.v1.agricultural_domain_validator import (
        validate_agricultural_question,
        get_agricultural_validator_stats,
        is_agricultural_validation_enabled
    )
    AGRICULTURAL_VALIDATOR_AVAILABLE = True
    logger.info("‚úÖ [Expert Enhanced] Validateur agricole import√©")
except ImportError as e:
    AGRICULTURAL_VALIDATOR_AVAILABLE = False
    logger.error(f"‚ùå [Expert Enhanced] Validateur agricole non disponible: {e}")

# =============================================================================
# IMPORT AUTH (EXISTANT)
# =============================================================================

AUTH_AVAILABLE = False
get_current_user = None

try:
    from .auth import get_current_user
    AUTH_AVAILABLE = True
    logger.info("‚úÖ [Expert Enhanced] Auth import√©")
except ImportError:
    try:
        from app.api.v1.auth import get_current_user
        AUTH_AVAILABLE = True
        logger.info("‚úÖ [Expert Enhanced] Auth import√© (path alternatif)")
    except ImportError as e:
        logger.error(f"‚ùå [Expert Enhanced] Auth non disponible: {e}")

# =============================================================================
# IMPORT OPENAI
# =============================================================================

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    openai = None

# =============================================================================
# MOD√àLES PYDANTIC AM√âLIOR√âS
# =============================================================================

class EnhancedQuestionRequest(BaseModel):
    """Request model am√©lior√© avec support √©tat conversationnel"""
    text: str = Field(..., min_length=1, max_length=5000)
    language: Optional[str] = Field("fr", description="Response language")
    speed_mode: Optional[str] = Field("balanced", description="Speed mode")
    
    # Contexte conversationnel
    conversation_id: Optional[str] = Field(None, description="Conversation ID")
    user_id: Optional[str] = Field(None, description="User ID")
    
    # ‚úÖ NOUVEAUX CHAMPS
    is_clarification_response: Optional[bool] = Field(False, description="Is this a response to clarification?")
    original_question: Optional[str] = Field(None, description="Original question if this is clarification response")
    clarification_context: Optional[Dict[str, Any]] = Field(None, description="Clarification context")
    force_reprocess: Optional[bool] = Field(False, description="Force reprocessing even if no clarification needed")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_default=True,
        extra="ignore"
    )

class EnhancedExpertResponse(BaseModel):
    """Response model am√©lior√© avec √©tat conversationnel"""
    question: str
    response: str
    conversation_id: str
    rag_used: bool
    rag_score: Optional[float] = None
    timestamp: str
    language: str
    response_time_ms: int
    mode: str
    user: Optional[str] = None
    logged: bool = False
    validation_passed: Optional[bool] = None
    validation_confidence: Optional[float] = None
    
    # ‚úÖ NOUVEAUX CHAMPS
    clarification_result: Optional[Dict[str, Any]] = None
    reprocessed_after_clarification: Optional[bool] = None
    conversation_state: Optional[str] = None
    extracted_entities: Optional[Dict[str, Any]] = None
    confidence_overall: Optional[float] = None
    
    # M√©triques avanc√©es
    processing_steps: Optional[List[str]] = None
    ai_enhancements_used: Optional[List[str]] = None

# =============================================================================
# FONCTIONS UTILITAIRES AM√âLIOR√âES
# =============================================================================

def get_user_id_from_request(fastapi_request: Request) -> str:
    """Extrait l'ID utilisateur"""
    try:
        user = getattr(fastapi_request.state, "user", None)
        if user:
            return str(user.get("id", user.get("user_id", "authenticated_user")))
        
        client_ip = fastapi_request.client.host if fastapi_request.client else "unknown"
        user_agent = fastapi_request.headers.get("user-agent", "unknown")
        
        import hashlib
        anonymous_data = f"{client_ip}_{user_agent}_{datetime.now().strftime('%Y-%m-%d')}"
        anonymous_id = f"anon_{hashlib.md5(anonymous_data.encode()).hexdigest()[:8]}"
        
        return anonymous_id
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Erreur g√©n√©ration user_id: {e}")
        return f"anon_{uuid.uuid4().hex[:8]}"

async def validate_question_agricultural_domain_enhanced(
    question: str, 
    language: str, 
    user_id: str, 
    request_ip: str,
    conversation_id: str = None
) -> tuple[bool, str, float]:
    """Validation agricole avec contexte intelligent"""
    
    if not AGRICULTURAL_VALIDATOR_AVAILABLE:
        logger.error("‚ùå [Expert Enhanced] Validateur agricole non disponible")
        
        rejection_messages = {
            "fr": "Service temporairement indisponible. Veuillez r√©essayer plus tard.",
            "en": "Service temporarily unavailable. Please try again later.",
            "es": "Servicio temporalmente no disponible. Por favor, int√©ntelo m√°s tarde."
        }
        
        return False, rejection_messages.get(language, rejection_messages["fr"]), 0.0
    
    # Enrichir avec contexte intelligent
    enriched_question = question
    if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
        try:
            rag_context = get_context_for_rag(conversation_id)
            if rag_context:
                enriched_question = f"{question}\n\nContexte conversationnel:\n{rag_context}"
                logger.info(f"üß† [Expert Enhanced] Question enrichie avec contexte intelligent")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Erreur enrichissement contexte: {e}")
    
    if not is_agricultural_validation_enabled():
        logger.info("üîß [Expert Enhanced] Validation agricole d√©sactiv√©e")
        return True, "", 100.0
    
    try:
        validation_result = validate_agricultural_question(
            question=enriched_question,
            language=language,
            user_id=user_id,
            request_ip=request_ip
        )
        
        logger.info(f"üîç [Expert Enhanced] Validation: {validation_result.is_valid} (confiance: {validation_result.confidence:.1f}%)")
        
        if validation_result.is_valid:
            return True, "", validation_result.confidence
        else:
            return False, validation_result.reason or "Question hors domaine agricole", validation_result.confidence
    
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur validateur: {e}")
        
        rejection_messages = {
            "fr": "Erreur de validation. Veuillez reformuler votre question sur le domaine avicole.",
            "en": "Validation error. Please rephrase your question about the poultry domain.",
            "es": "Error de validaci√≥n. Por favor, reformule su pregunta sobre el dominio av√≠cola."
        }
        
        return False, rejection_messages.get(language, rejection_messages["fr"]), 0.0

async def process_question_with_enhanced_prompt(
    question: str, 
    language: str = "fr", 
    speed_mode: str = "balanced",
    extracted_entities: Dict = None,
    conversation_context: str = ""
) -> str:
    """Traite une question avec prompt am√©lior√© pour donn√©es num√©riques"""
    
    if not OPENAI_AVAILABLE or not openai:
        return get_fallback_response_enhanced(question, language)
    
    try:
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            return get_fallback_response_enhanced(question, language)
        
        openai.api_key = api_key
        
        # ‚úÖ PROMPT AM√âLIOR√â avec donn√©es num√©riques
        enhanced_prompts = {
            "fr": f"""Tu es un expert v√©t√©rinaire sp√©cialis√© en sant√© et nutrition animale, particuli√®rement pour les poulets de chair. 

CONSIGNES CRITIQUES:
1. Si la question porte sur le poids, la croissance ou des valeurs num√©riques, donne TOUJOURS une r√©ponse chiffr√©e pr√©cise
2. Utilise le contexte conversationnel fourni pour personnaliser ta r√©ponse
3. Commence par r√©pondre directement √† la question, puis donne des conseils compl√©mentaires
4. Utilise tous les caract√®res fran√ßais (√©, √®, √†, √ß, √π, etc.) et symboles (¬∞C, %, g, kg)

Contexte conversationnel disponible:
{conversation_context}

IMPORTANT: Si des informations sp√©cifiques sont mentionn√©es (race, √¢ge), utilise-les pour donner une r√©ponse pr√©cise et chiffr√©e.""",

            "en": f"""You are a veterinary expert specialized in animal health and nutrition, particularly for broiler chickens.

CRITICAL INSTRUCTIONS:
1. If the question is about weight, growth or numerical values, ALWAYS provide precise numerical answers
2. Use the provided conversational context to personalize your response  
3. Start by directly answering the question, then provide additional advice
4. Provide industry-standard data and recommendations

Available conversational context:
{conversation_context}

IMPORTANT: If specific information is mentioned (breed, age), use it to provide precise, numerical answers.""",

            "es": f"""Eres un experto veterinario especializado en salud y nutrici√≥n animal, particularmente para pollos de engorde.

INSTRUCCIONES CR√çTICAS:
1. Si la pregunta es sobre peso, crecimiento o valores num√©ricos, da SIEMPRE una respuesta num√©rica precisa
2. Usa el contexto conversacional proporcionado para personalizar tu respuesta
3. Comienza respondiendo directamente a la pregunta, luego da consejos adicionales  
4. Usa todos los caracteres especiales del espa√±ol (√±, ¬ø, ¬°, acentos)

Contexto conversacional disponible:
{conversation_context}

IMPORTANTE: Si se menciona informaci√≥n espec√≠fica (raza, edad), √∫sala para dar una respuesta precisa y num√©rica."""
        }
        
        system_prompt = enhanced_prompts.get(language.lower(), enhanced_prompts["fr"])
        
        # Configuration par mode
        model_config = {
            "fast": {"model": "gpt-3.5-turbo", "max_tokens": 400},
            "balanced": {"model": "gpt-4o-mini", "max_tokens": 600},
            "quality": {"model": "gpt-4o-mini", "max_tokens": 800}
        }
        
        config = model_config.get(speed_mode, model_config["balanced"])
        
        response = openai.chat.completions.create(
            model=config["model"],
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": str(question)}
            ],
            temperature=0.7,
            max_tokens=config["max_tokens"],
            timeout=20
        )
        
        answer = response.choices[0].message.content
        return str(answer) if answer else get_fallback_response_enhanced(question, language)
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur OpenAI: {e}")
        return get_fallback_response_enhanced(question, language)

def get_fallback_response_enhanced(question: str, language: str = "fr") -> str:
    """R√©ponse de fallback am√©lior√©e"""
    try:
        safe_question = str(question)[:50] if question else "votre question"
    except:
        safe_question = "votre question"
    
    fallback_responses = {
        "fr": f"Je suis un expert v√©t√©rinaire sp√©cialis√© en aviculture. Pour votre question '{safe_question}...', je recommande de surveiller attentivement les param√®tres de performance et de maintenir des conditions d'√©levage optimales. Pour une r√©ponse plus pr√©cise, pourriez-vous sp√©cifier la race et l'√¢ge de vos poulets ?",
        "en": f"I am a veterinary expert specialized in poultry. For your question '{safe_question}...', I recommend closely monitoring performance parameters and maintaining optimal breeding conditions. For a more precise answer, could you specify the breed and age of your chickens?",
        "es": f"Soy un experto veterinario especializado en avicultura. Para su pregunta '{safe_question}...', recomiendo monitorear cuidadosamente los par√°metros de rendimiento y mantener condiciones √≥ptimas de crianza. Para una respuesta m√°s precisa, ¬øpodr√≠a especificar la raza y edad de sus pollos?"
    }
    return fallback_responses.get(language.lower(), fallback_responses["fr"])

def build_enriched_question_from_clarification(
    original_question: str,
    clarification_response: str,
    conversation_context: str = ""
) -> str:
    """Construit une question enrichie apr√®s clarification"""
    
    enriched_parts = [original_question]
    
    if clarification_response.strip():
        enriched_parts.append(f"Information suppl√©mentaire: {clarification_response.strip()}")
    
    if conversation_context.strip():
        enriched_parts.append(f"Contexte: {conversation_context.strip()}")
    
    return "\n\n".join(enriched_parts)

# =============================================================================
# ENDPOINT PRINCIPAL AM√âLIOR√â AVEC RETRAITEMENT AUTOMATIQUE
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """
    Endpoint expert am√©lior√© avec:
    - Retraitement automatique apr√®s clarification
    - Gestion intelligente du contexte conversationnel  
    - R√©ponses avec donn√©es num√©riques optimis√©es
    - Suivi d'√©tat conversationnel avanc√©
    """
    start_time = time.time()
    processing_steps = []
    ai_enhancements_used = []
    
    try:
        logger.info("=" * 80)
        logger.info("üöÄ D√âBUT ask_expert_enhanced - VERSION INTELLIGENTE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        logger.info(f"üîÑ Is clarification response: {request_data.is_clarification_response}")
        logger.info(f"‚ö° Force reprocess: {request_data.force_reprocess}")
        
        processing_steps.append("initialization")
        
        # ===üîê AUTHENTIFICATION===
        if not AUTH_AVAILABLE:
            raise HTTPException(status_code=503, detail="Service d'authentification non disponible")
        
        if not current_user:
            raise HTTPException(status_code=401, detail="Authentification requise")
        
        user_id = current_user.get("user_id") or request_data.user_id
        user_email = current_user.get("email")
        request_ip = request.client.host if request.client else "unknown"
        
        logger.info(f"‚úÖ Authentifi√©: {user_email} ({user_id[:8] if user_id else 'N/A'}...)")
        request.state.user = current_user
        processing_steps.append("authentication")
        
        # ===üÜî GESTION CONVERSATION ID===
        if request_data.conversation_id and request_data.conversation_id.strip():
            conversation_id = request_data.conversation_id.strip()
            logger.info(f"üîÑ [Conversation] CONTINUATION: {conversation_id}")
        else:
            conversation_id = str(uuid.uuid4())
            logger.info(f"üÜï [Conversation] NOUVELLE: {conversation_id}")
        
        # ===üìù VALIDATION QUESTION===
        question_text = request_data.text.strip()
        if not question_text:
            raise HTTPException(status_code=400, detail="Question text is required")
        
        processing_steps.append("question_validation")
        
        # ===üß† ENREGISTREMENT MESSAGE DANS M√âMOIRE INTELLIGENTE===
        conversation_context = None
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id or "authenticated_user",
                    message=question_text,
                    role="user",
                    language=request_data.language,
                    message_type="clarification_response" if request_data.is_clarification_response else "question"
                )
                logger.info(f"üß† [Memory] Message enregistr√© avec extraction intelligente")
                logger.info(f"üß† [Memory] Entit√©s d√©tect√©es: {conversation_context.consolidated_entities.to_dict()}")
                ai_enhancements_used.append("intelligent_memory")
                processing_steps.append("memory_storage")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement: {e}")
        
        # ===üåæ VALIDATION AGRICOLE AVEC CONTEXTE INTELLIGENT===
        logger.info("üåæ [VALIDATION] D√©marrage validation avec contexte intelligent...")
        
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain_enhanced(
            question=question_text,
            language=request_data.language,
            user_id=user_id or "authenticated_user",
            request_ip=request_ip,
            conversation_id=conversation_id
        )
        
        processing_steps.append("agricultural_validation")
        
        if not is_valid:
            logger.warning(f"üö´ [VALIDATION] Question rejet√©e: {rejection_message}")
            
            response_time_ms = int((time.time() - start_time) * 1000)
            
            # Enregistrer rejet dans m√©moire
            if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                try:
                    add_message_to_conversation(
                        conversation_id=conversation_id,
                        user_id=user_id or "authenticated_user",
                        message=rejection_message,
                        role="assistant",
                        language=request_data.language,
                        message_type="rejection"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement rejet: {e}")
            
            return EnhancedExpertResponse(
                question=str(question_text),
                response=str(rejection_message),
                conversation_id=conversation_id,
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=response_time_ms,
                mode="enhanced_agricultural_validation_rejected",
                user=user_email,
                logged=True,
                validation_passed=False,
                validation_confidence=validation_confidence,
                processing_steps=processing_steps,
                ai_enhancements_used=ai_enhancements_used
            )
        
        logger.info(f"‚úÖ [VALIDATION] Question valid√©e (confiance: {validation_confidence:.1f}%)")
        
        # ===‚ùì SYST√àME DE CLARIFICATION AM√âLIOR√â===
        clarification_result = None
        needs_clarification = False
        
        # V√©rifier si c'est une r√©ponse √† une clarification
        if request_data.is_clarification_response and request_data.original_question:
            logger.info("üîÑ [CLARIFICATION] R√©ponse √† clarification d√©tect√©e - v√©rification retraitement...")
            
            if ENHANCED_CLARIFICATION_AVAILABLE:
                try:
                    # Construire la question enrichie
                    enriched_question = build_enriched_question_from_clarification(
                        original_question=request_data.original_question,
                        clarification_response=question_text,
                        conversation_context=get_context_for_rag(conversation_id) if INTELLIGENT_MEMORY_AVAILABLE else ""
                    )
                    
                    # V√©rifier si retraitement possible
                    if hasattr(request_data, 'clarification_context') and request_data.clarification_context:
                        original_clarification = ClarificationResult(**request_data.clarification_context)
                        reprocess_result = await check_for_reprocessing_after_clarification(
                            conversation_id=conversation_id,
                            user_response=question_text,
                            original_clarification_result=original_clarification
                        )
                        
                        if reprocess_result and reprocess_result.should_reprocess:
                            logger.info("‚úÖ [CLARIFICATION] Retraitement automatique activ√©")
                            question_text = enriched_question  # Utiliser la question enrichie
                            ai_enhancements_used.append("automatic_reprocessing")
                            processing_steps.append("automatic_reprocessing")
                        else:
                            logger.info("‚ö†Ô∏è [CLARIFICATION] Retraitement non possible - clarification suppl√©mentaire n√©cessaire")
                            needs_clarification = True
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [CLARIFICATION] Erreur v√©rification retraitement: {e}")
            
        # Analyse de clarification normale si pas de retraitement
        if not request_data.is_clarification_response and not request_data.force_reprocess:
            if ENHANCED_CLARIFICATION_AVAILABLE and is_enhanced_clarification_system_enabled():
                logger.info("‚ùì [CLARIFICATION] Analyse avec syst√®me am√©lior√©...")
                
                # R√©cup√©rer contexte conversationnel pour clarification
                clarification_context = {}
                if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                    try:
                        clarification_context = get_context_for_clarification(conversation_id)
                        ai_enhancements_used.append("intelligent_clarification_context")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [CLARIFICATION] Erreur contexte: {e}")
                
                clarification_result = await analyze_question_for_clarification_enhanced(
                    question=question_text,
                    language=request_data.language,
                    user_id=user_id or "authenticated_user",
                    conversation_id=conversation_id,
                    conversation_context=clarification_context,
                    original_question=question_text
                )
                
                processing_steps.append("enhanced_clarification_analysis")
                
                if clarification_result.needs_clarification:
                    logger.info(f"‚ùì [CLARIFICATION] {len(clarification_result.questions)} questions g√©n√©r√©es (mode: {clarification_result.clarification_mode.value if clarification_result.clarification_mode else 'N/A'})")
                    
                    clarification_response = format_clarification_response_enhanced(
                        result=clarification_result,
                        language=request_data.language
                    )
                    
                    response_time_ms = int((time.time() - start_time) * 1000)
                    
                    # Enregistrer clarification dans m√©moire
                    if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                        try:
                            add_message_to_conversation(
                                conversation_id=conversation_id,
                                user_id=user_id or "authenticated_user",
                                message=clarification_response,
                                role="assistant",
                                language=request_data.language,
                                message_type="clarification"
                            )
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement clarification: {e}")
                    
                    return EnhancedExpertResponse(
                        question=str(question_text),
                        response=str(clarification_response),
                        conversation_id=conversation_id,
                        rag_used=False,
                        rag_score=None,
                        timestamp=datetime.now().isoformat(),
                        language=request_data.language,
                        response_time_ms=response_time_ms,
                        mode="enhanced_clarification_needed",
                        user=user_email,
                        logged=True,
                        validation_passed=True,
                        validation_confidence=validation_confidence,
                        clarification_result=clarification_result.to_dict(),
                        processing_steps=processing_steps,
                        ai_enhancements_used=ai_enhancements_used,
                        extracted_entities=clarification_result.extracted_entities.to_dict() if clarification_result.extracted_entities else None
                    )
                
                logger.info("‚úÖ [CLARIFICATION] Question suffisamment claire")
                
        # ===üéØ TRAITEMENT EXPERT AVEC CONTEXTE INTELLIGENT===
        rag_used = False
        rag_score = None
        answer = ""
        mode = "enhanced_direct_processing"
        
        # R√©cup√©rer contexte pour traitement
        conversation_context_str = ""
        if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
            try:
                conversation_context_str = get_context_for_rag(conversation_id, max_chars=800)
                ai_enhancements_used.append("contextual_rag")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Context] Erreur r√©cup√©ration contexte: {e}")
        
        # Essayer RAG d'abord
        app = request.app
        process_rag = getattr(app.state, 'process_question_with_rag', None)
        
        if process_rag:
            try:
                logger.info("üîç Utilisation du syst√®me RAG avec contexte intelligent...")
                
                try:
                    result = await process_rag(
                        question=question_text,
                        user=current_user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id,
                        context=conversation_context_str
                    )
                except TypeError:
                    # Si process_rag ne supporte pas le param√®tre context
                    result = await process_rag(
                        question=question_text,
                        user=current_user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id
                    )
                
                answer = str(result.get("response", ""))
                rag_used = result.get("mode", "").startswith("rag")
                rag_score = result.get("score")
                mode = f"enhanced_{result.get('mode', 'rag_processing')}"
                
                logger.info(f"‚úÖ RAG trait√© avec contexte intelligent - Mode: {mode}, Score: {rag_score}")
                processing_steps.append("rag_processing")
                
            except Exception as rag_error:
                logger.error(f"‚ùå Erreur RAG: {rag_error}")
                answer = await process_question_with_enhanced_prompt(
                    question_text, 
                    request_data.language,
                    request_data.speed_mode,
                    conversation_context=conversation_context_str
                )
                mode = "enhanced_fallback_openai"
                processing_steps.append("fallback_openai")
        else:
            logger.info("‚ö†Ô∏è RAG non disponible, utilisation OpenAI avec contexte intelligent")
            answer = await process_question_with_enhanced_prompt(
                question_text,
                request_data.language,
                request_data.speed_mode,
                conversation_context=conversation_context_str
            )
            mode = "enhanced_direct_openai"
            processing_steps.append("direct_openai")
        
        if conversation_context_str:
            ai_enhancements_used.append("enhanced_prompts")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        logger.info(f"‚è±Ô∏è Temps de traitement: {response_time_ms}ms")
        
        # ===üß† ENREGISTREMENT R√âPONSE DANS M√âMOIRE===
        if INTELLIGENT_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id or "authenticated_user",
                    message=answer,
                    role="assistant",
                    language=request_data.language,
                    message_type="response"
                )
                logger.info(f"üß† [Memory] R√©ponse enregistr√©e avec analyse intelligente")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement r√©ponse: {e}")
        
        processing_steps.append("response_storage")
        
        # ===üìä M√âTRIQUES FINALES===
        extracted_entities = None
        confidence_overall = None
        conversation_state = None
        
        if conversation_context and hasattr(conversation_context, 'consolidated_entities'):
            extracted_entities = conversation_context.consolidated_entities.to_dict()
            confidence_overall = conversation_context.consolidated_entities.confidence_overall
            conversation_state = conversation_context.conversation_urgency
        
        # Retourner la r√©ponse enrichie
        response_obj = EnhancedExpertResponse(
            question=str(question_text),
            response=str(answer),
            conversation_id=conversation_id,
            rag_used=rag_used,
            rag_score=rag_score,
            timestamp=datetime.now().isoformat(),
            language=request_data.language,
            response_time_ms=response_time_ms,
            mode=mode,
            user=user_email,
            logged=True,
            validation_passed=True,
            validation_confidence=validation_confidence,
            clarification_result=clarification_result.to_dict() if clarification_result else None,
            reprocessed_after_clarification=request_data.is_clarification_response,
            conversation_state=conversation_state,
            extracted_entities=extracted_entities,
            confidence_overall=confidence_overall,
            processing_steps=processing_steps,
            ai_enhancements_used=ai_enhancements_used
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced - conversation_id: {conversation_id}")
        logger.info(f"ü§ñ IA enhancements utilis√©s: {ai_enhancements_used}")
        logger.info(f"üìà √âtapes de traitement: {processing_steps}")
        logger.info("=" * 80)
        
        return response_obj
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced: {e}")
        import traceback
        logger.error(f"‚ùå Traceback complet: {traceback.format_exc()}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINT PUBLIC AM√âLIOR√â
# =============================================================================

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public avec fonctionnalit√©s am√©lior√©es"""
    start_time = time.time()
    processing_steps = []
    ai_enhancements_used = []
    
    try:
        logger.info("=" * 80)
        logger.info("üåê D√âBUT ask_expert_enhanced_public - VERSION INTELLIGENTE PUBLIQUE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        
        processing_steps.append("initialization")
        
        # Validation question
        question_text = request_data.text.strip()
        if not question_text:
            raise HTTPException(status_code=400, detail="Question text is required")
        
        # Gestion conversation ID
        if request_data.conversation_id and request_data.conversation_id.strip():
            conversation_id = request_data.conversation_id.strip()
            logger.info(f"üîÑ [Conversation] CONTINUATION publique: {conversation_id}")
        else:
            conversation_id = str(uuid.uuid4())
            logger.info(f"üÜï [Conversation] NOUVELLE publique: {conversation_id}")
        
        user_id = request_data.user_id or get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        
        processing_steps.append("user_identification")
        
        # Enregistrement dans m√©moire intelligente
        conversation_context = None
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=question_text,
                    role="user",
                    language=request_data.language,
                    message_type="clarification_response" if request_data.is_clarification_response else "question"
                )
                logger.info(f"üß† [Memory] Message public enregistr√© avec extraction intelligente")
                ai_enhancements_used.append("intelligent_memory")
                processing_steps.append("memory_storage")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement public: {e}")
        
        # Validation agricole
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain_enhanced(
            question=question_text,
            language=request_data.language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id
        )
        
        processing_steps.append("agricultural_validation")
        
        if not is_valid:
            logger.warning(f"üö´ [VALIDATION] Question publique rejet√©e: {rejection_message}")
            
            response_time_ms = int((time.time() - start_time) * 1000)
            
            if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                try:
                    add_message_to_conversation(
                        conversation_id=conversation_id,
                        user_id=user_id,
                        message=rejection_message,
                        role="assistant",
                        language=request_data.language,
                        message_type="rejection"
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement rejet public: {e}")
            
            return EnhancedExpertResponse(
                question=str(question_text),
                response=str(rejection_message),
                conversation_id=conversation_id,
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=response_time_ms,
                mode="enhanced_public_validation_rejected",
                user=None,
                logged=True,
                validation_passed=False,
                validation_confidence=validation_confidence,
                processing_steps=processing_steps,
                ai_enhancements_used=ai_enhancements_used
            )
        
        logger.info(f"‚úÖ [VALIDATION] Question publique valid√©e (confiance: {validation_confidence:.1f}%)")
        
        # Syst√®me de clarification (m√™me logique que l'endpoint authentifi√©)
        clarification_result = None
        
        if not request_data.is_clarification_response and not request_data.force_reprocess:
            if ENHANCED_CLARIFICATION_AVAILABLE and is_enhanced_clarification_system_enabled():
                logger.info("‚ùì [CLARIFICATION] Analyse publique avec syst√®me am√©lior√©...")
                
                clarification_context = {}
                if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                    try:
                        clarification_context = get_context_for_clarification(conversation_id)
                        ai_enhancements_used.append("intelligent_clarification_context")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [CLARIFICATION] Erreur contexte public: {e}")
                
                clarification_result = await analyze_question_for_clarification_enhanced(
                    question=question_text,
                    language=request_data.language,
                    user_id=user_id,
                    conversation_id=conversation_id,
                    conversation_context=clarification_context,
                    original_question=question_text
                )
                
                processing_steps.append("enhanced_clarification_analysis")
                
                if clarification_result.needs_clarification:
                    logger.info(f"‚ùì [CLARIFICATION] {len(clarification_result.questions)} questions publiques g√©n√©r√©es")
                    
                    clarification_response = format_clarification_response_enhanced(
                        result=clarification_result,
                        language=request_data.language
                    )
                    
                    response_time_ms = int((time.time() - start_time) * 1000)
                    
                    if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
                        try:
                            add_message_to_conversation(
                                conversation_id=conversation_id,
                                user_id=user_id,
                                message=clarification_response,
                                role="assistant",
                                language=request_data.language,
                                message_type="clarification"
                            )
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement clarification publique: {e}")
                    
                    return EnhancedExpertResponse(
                        question=str(question_text),
                        response=str(clarification_response),
                        conversation_id=conversation_id,
                        rag_used=False,
                        rag_score=None,
                        timestamp=datetime.now().isoformat(),
                        language=request_data.language,
                        response_time_ms=response_time_ms,
                        mode="enhanced_public_clarification_needed",
                        user=None,
                        logged=True,
                        validation_passed=True,
                        validation_confidence=validation_confidence,
                        clarification_result=clarification_result.to_dict(),
                        processing_steps=processing_steps,
                        ai_enhancements_used=ai_enhancements_used,
                        extracted_entities=clarification_result.extracted_entities.to_dict() if clarification_result.extracted_entities else None
                    )
                
                logger.info("‚úÖ [CLARIFICATION] Question publique suffisamment claire")
        
        # Traitement expert (similaire √† l'endpoint authentifi√©)
        rag_used = False
        rag_score = None
        answer = ""
        mode = "enhanced_public_processing"
        
        conversation_context_str = ""
        if INTELLIGENT_MEMORY_AVAILABLE and conversation_id:
            try:
                conversation_context_str = get_context_for_rag(conversation_id, max_chars=800)
                ai_enhancements_used.append("contextual_rag")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Context] Erreur r√©cup√©ration contexte public: {e}")
        
        # Essayer RAG ou OpenAI direct
        app = request.app
        process_rag = getattr(app.state, 'process_question_with_rag', None)
        
        if process_rag:
            try:
                logger.info("üîç Utilisation du syst√®me RAG public avec contexte intelligent...")
                
                try:
                    result = await process_rag(
                        question=question_text,
                        user=None,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id,
                        context=conversation_context_str
                    )
                except TypeError:
                    result = await process_rag(
                        question=question_text,
                        user=None,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id
                    )
                
                answer = str(result.get("response", ""))
                rag_used = result.get("mode", "").startswith("rag")
                rag_score = result.get("score")
                mode = f"enhanced_public_{result.get('mode', 'rag_processing')}"
                
                logger.info(f"‚úÖ RAG public trait√© avec contexte intelligent")
                processing_steps.append("rag_processing")
                
            except Exception as rag_error:
                logger.error(f"‚ùå Erreur RAG public: {rag_error}")
                answer = await process_question_with_enhanced_prompt(
                    question_text, 
                    request_data.language,
                    request_data.speed_mode,
                    conversation_context=conversation_context_str
                )
                mode = "enhanced_public_fallback_openai"
                processing_steps.append("fallback_openai")
        else:
            logger.info("‚ö†Ô∏è RAG non disponible, utilisation OpenAI public avec contexte intelligent")
            answer = await process_question_with_enhanced_prompt(
                question_text,
                request_data.language,
                request_data.speed_mode,
                conversation_context=conversation_context_str
            )
            mode = "enhanced_public_direct_openai"
            processing_steps.append("direct_openai")
        
        if conversation_context_str:
            ai_enhancements_used.append("enhanced_prompts")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        # Enregistrement r√©ponse
        if INTELLIGENT_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=answer,
                    role="assistant",
                    language=request_data.language,
                    message_type="response"
                )
                logger.info(f"üß† [Memory] R√©ponse publique enregistr√©e")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement r√©ponse publique: {e}")
        
        processing_steps.append("response_storage")
        
        # M√©triques finales
        extracted_entities = None
        confidence_overall = None
        conversation_state = None
        
        if conversation_context and hasattr(conversation_context, 'consolidated_entities'):
            extracted_entities = conversation_context.consolidated_entities.to_dict()
            confidence_overall = conversation_context.consolidated_entities.confidence_overall
            conversation_state = conversation_context.conversation_urgency
        
        response_obj = EnhancedExpertResponse(
            question=str(question_text),
            response=str(answer),
            conversation_id=conversation_id,
            rag_used=rag_used,
            rag_score=rag_score,
            timestamp=datetime.now().isoformat(),
            language=request_data.language,
            response_time_ms=response_time_ms,
            mode=mode,
            user=None,
            logged=True,
            validation_passed=True,
            validation_confidence=validation_confidence,
            clarification_result=clarification_result.to_dict() if clarification_result else None,
            reprocessed_after_clarification=request_data.is_clarification_response,
            conversation_state=conversation_state,
            extracted_entities=extracted_entities,
            confidence_overall=confidence_overall,
            processing_steps=processing_steps,
            ai_enhancements_used=ai_enhancements_used
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_public - conversation_id: {conversation_id}")
        logger.info(f"ü§ñ IA enhancements publics utilis√©s: {ai_enhancements_used}")
        logger.info("=" * 80)
        
        return response_obj
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_public: {e}")
        import traceback
        logger.error(f"‚ùå Traceback complet: {traceback.format_exc()}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINTS DE DIAGNOSTIC AM√âLIOR√âS
# =============================================================================

@router.get("/enhanced-stats")
async def get_enhanced_system_stats():
    """Statistiques du syst√®me expert am√©lior√©"""
    try:
        stats = {
            "system_available": True,
            "timestamp": datetime.now().isoformat(),
            
            # Composants disponibles
            "components": {
                "enhanced_clarification": ENHANCED_CLARIFICATION_AVAILABLE,
                "intelligent_memory": INTELLIGENT_MEMORY_AVAILABLE,
                "agricultural_validation": AGRICULTURAL_VALIDATOR_AVAILABLE,
                "openai": OPENAI_AVAILABLE,
                "auth": AUTH_AVAILABLE
            },
            
            # Statistiques des composants
            "enhanced_clarification_stats": get_enhanced_clarification_system_stats() if ENHANCED_CLARIFICATION_AVAILABLE else None,
            "intelligent_memory_stats": get_conversation_memory_stats() if INTELLIGENT_MEMORY_AVAILABLE else None,
            "agricultural_validation_stats": get_agricultural_validator_stats() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
            
            # Capacit√©s am√©lior√©es
            "enhanced_capabilities": [
                "automatic_reprocessing_after_clarification",
                "intelligent_entity_extraction", 
                "contextual_reasoning",
                "enhanced_prompts_with_numerical_data",
                "multi_mode_clarification",
                "conversation_state_tracking",
                "ai_powered_enhancements"
            ],
            
            # Endpoints disponibles
            "enhanced_endpoints": [
                "POST /ask-enhanced (authenticated)",
                "POST /ask-enhanced-public (public)",
                "GET /enhanced-stats (system statistics)",
                "POST /test-enhanced-flow (testing)",
                "GET /enhanced-conversation/{id}/context (conversation context)"
            ]
        }
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå [Enhanced Stats] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur stats: {str(e)}")

@router.post("/test-enhanced-flow")
async def test_enhanced_flow(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint de test pour le flux am√©lior√© complet"""
    try:
        logger.info(f"üß™ [Test Enhanced] Test du flux am√©lior√©")
        logger.info(f"üìù Question: {request_data.text}")
        logger.info(f"üîÑ Is clarification response: {request_data.is_clarification_response}")
        
        user_id = get_user_id_from_request(request)
        conversation_id = request_data.conversation_id or str(uuid.uuid4())
        
        test_results = {
            "question": request_data.text,
            "conversation_id": conversation_id,
            "user_id": user_id,
            "timestamp": datetime.now().isoformat(),
            "components_tested": {},
            "test_successful": True,
            "errors": []
        }
        
        # Test m√©moire intelligente
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=request_data.text,
                    role="user",
                    language=request_data.language
                )
                test_results["components_tested"]["intelligent_memory"] = {
                    "status": "success",
                    "extracted_entities": context.consolidated_entities.to_dict(),
                    "confidence": context.consolidated_entities.confidence_overall,
                    "urgency": context.conversation_urgency
                }
            except Exception as e:
                test_results["components_tested"]["intelligent_memory"] = {
                    "status": "error",
                    "error": str(e)
                }
                test_results["errors"].append(f"Intelligent memory: {str(e)}")
        
        # Test clarification am√©lior√©e
        if ENHANCED_CLARIFICATION_AVAILABLE:
            try:
                clarification_context = get_context_for_clarification(conversation_id) if INTELLIGENT_MEMORY_AVAILABLE else {}
                
                clarification_result = await analyze_question_for_clarification_enhanced(
                    question=request_data.text,
                    language=request_data.language,
                    user_id=user_id,
                    conversation_id=conversation_id,
                    conversation_context=clarification_context
                )
                
                test_results["components_tested"]["enhanced_clarification"] = {
                    "status": "success",
                    "needs_clarification": clarification_result.needs_clarification,
                    "questions_count": len(clarification_result.questions) if clarification_result.questions else 0,
                    "clarification_mode": clarification_result.clarification_mode.value if clarification_result.clarification_mode else None,
                    "confidence": clarification_result.confidence_score,
                    "extracted_entities": clarification_result.extracted_entities.to_dict() if clarification_result.extracted_entities else None
                }
            except Exception as e:
                test_results["components_tested"]["enhanced_clarification"] = {
                    "status": "error",
                    "error": str(e)
                }
                test_results["errors"].append(f"Enhanced clarification: {str(e)}")
        
        # Test validation agricole
        if AGRICULTURAL_VALIDATOR_AVAILABLE:
            try:
                is_valid, rejection_message, confidence = await validate_question_agricultural_domain_enhanced(
                    question=request_data.text,
                    language=request_data.language,
                    user_id=user_id,
                    request_ip=request.client.host if request.client else "unknown",
                    conversation_id=conversation_id
                )
                
                test_results["components_tested"]["agricultural_validation"] = {
                    "status": "success",
                    "is_valid": is_valid,
                    "confidence": confidence,
                    "rejection_message": rejection_message if not is_valid else None
                }
            except Exception as e:
                test_results["components_tested"]["agricultural_validation"] = {
                    "status": "error",
                    "error": str(e)
                }
                test_results["errors"].append(f"Agricultural validation: {str(e)}")
        
        # Test contexte RAG
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                rag_context = get_context_for_rag(conversation_id, max_chars=500)
                test_results["components_tested"]["rag_context"] = {
                    "status": "success",
                    "context_length": len(rag_context),
                    "context_preview": rag_context[:100] + "..." if len(rag_context) > 100 else rag_context
                }
            except Exception as e:
                test_results["components_tested"]["rag_context"] = {
                    "status": "error",
                    "error": str(e)
                }
                test_results["errors"].append(f"RAG context: {str(e)}")
        
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info(f"üß™ [Test Enhanced] Test termin√© - Succ√®s: {test_results['test_successful']}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Test Enhanced] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur test: {str(e)}")

@router.get("/enhanced-conversation/{conversation_id}/context")
async def get_enhanced_conversation_context(conversation_id: str):
    """R√©cup√®re le contexte am√©lior√© d'une conversation"""
    try:
        if not INTELLIGENT_MEMORY_AVAILABLE:
            raise HTTPException(status_code=503, detail="M√©moire intelligente non disponible")
        
        context = get_conversation_context(conversation_id)
        
        if not context:
            raise HTTPException(status_code=404, detail="Conversation non trouv√©e")
        
        return {
            "conversation_id": conversation_id,
            "enhanced_context": context.to_dict(),
            "clarification_context": get_context_for_clarification(conversation_id),
            "rag_context": get_context_for_rag(conversation_id),
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå [Enhanced Context] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur contexte: {str(e)}")

# =============================================================================
# CONFIGURATION & LOGGING
# =============================================================================

if OPENAI_AVAILABLE and openai:
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if openai_api_key:
        openai.api_key = openai_api_key
        logger.info("‚úÖ [Expert Enhanced] OpenAI configur√©")
    else:
        logger.warning("‚ö†Ô∏è [Expert Enhanced] OpenAI API key non trouv√©e")

logger.info("üöÄ [EXPERT ENHANCED] Syst√®me expert am√©lior√© initialis√© avec succ√®s!")
logger.info(f"üß† [EXPERT ENHANCED] M√©moire intelligente: {'‚úÖ' if INTELLIGENT_MEMORY_AVAILABLE else '‚ùå'}")
logger.info(f"‚ùì [EXPERT ENHANCED] Clarification am√©lior√©e: {'‚úÖ' if ENHANCED_CLARIFICATION_AVAILABLE else '‚ùå'}")
logger.info(f"üåæ [EXPERT ENHANCED] Validation agricole: {'‚úÖ' if AGRICULTURAL_VALIDATOR_AVAILABLE else '‚ùå'}")
logger.info(f"üîê [EXPERT ENHANCED] Auth: {'‚úÖ' if AUTH_AVAILABLE else '‚ùå'}")
logger.info(f"ü§ñ [EXPERT ENHANCED] OpenAI: {'‚úÖ' if OPENAI_AVAILABLE else '‚ùå'}")

logger.info("üéØ [EXPERT ENHANCED] NOUVELLES FONCTIONNALIT√âS ACTIV√âES:")
logger.info("   - üîÑ Retraitement automatique apr√®s clarification compl√©t√©e")
logger.info("   - üß† Extraction d'entit√©s intelligente via IA")
logger.info("   - üìä R√©ponses avec donn√©es num√©riques optimis√©es")
logger.info("   - üéõÔ∏è Modes de clarification adaptatifs (batch/interactive/adaptive)")
logger.info("   - üîç Raisonnement contextuel pour √©viter clarifications redondantes")
logger.info("   - üìà Suivi d'√©tat conversationnel avanc√©")
logger.info("   - ‚ö° D√©tection automatique d'urgence et probl√®mes critiques")
logger.info("   - üéØ Contexte intelligent pour RAG et prompts")

logger.info("üîß [EXPERT ENHANCED] ENDPOINTS DISPONIBLES:")
logger.info("   - POST /ask-enhanced (authentifi√© avec retraitement auto)")
logger.info("   - POST /ask-enhanced-public (public avec IA)")
logger.info("   - GET /enhanced-stats (statistiques syst√®me)")
logger.info("   - POST /test-enhanced-flow (test complet)")
logger.info("   - GET /enhanced-conversation/{id}/context (contexte conversation)")

if ENHANCED_CLARIFICATION_AVAILABLE:
    stats = get_enhanced_clarification_system_stats()
    logger.info(f"üìä [EXPERT ENHANCED] Config clarification: Mode {stats.get('clarification_mode')}, Extraction IA: {'‚úÖ' if stats.get('smart_entity_extraction') else '‚ùå'}")

if INTELLIGENT_MEMORY_AVAILABLE:
    memory_stats = get_conversation_memory_stats()
    logger.info(f"üìä [EXPERT ENHANCED] M√©moire intelligente: IA {'‚úÖ' if memory_stats.get('ai_powered') else '‚ùå'}, Cache: {memory_stats.get('cache_size')}/{memory_stats.get('cache_max_size')}")

# =============================================================================
# IMPORT LOGGING SYSTEM (EXISTANT)
# =============================================================================

try:
    from app.api.v1.logging import logger_instance, ConversationCreate
    LOGGING_AVAILABLE = True
    logger.info("‚úÖ [Expert Enhanced] Syst√®me de logging int√©gr√©")
except ImportError as e:
    LOGGING_AVAILABLE = False
    logger_instance = None
    ConversationCreate = None
    logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Syst√®me de logging non disponible: {e}")

# =============================================================================
# FONCTION DE SAUVEGARDE COMPL√àTE (DEPUIS EXPERT.PY)
# =============================================================================

async def save_conversation_auto_enhanced(
    conversation_id: str,
    question: str, 
    response: str,
    user_id: str = "anonymous",
    language: str = "fr",
    rag_used: bool = False,
    rag_score: float = None,
    response_time_ms: int = 0
) -> bool:
    """Sauvegarde automatique enhanced - COMPL√àTEMENT COMPATIBLE"""
    
    if not LOGGING_AVAILABLE or not logger_instance:
        logger.warning("‚ö†Ô∏è [Expert Enhanced] Logging non disponible pour sauvegarde")
        return False
    
    try:
        # Cr√©er l'objet conversation
        conversation = ConversationCreate(
            user_id=str(user_id),
            question=str(question),
            response=str(response),
            conversation_id=conversation_id,
            confidence_score=rag_score,
            response_time_ms=response_time_ms,
            language=language,
            rag_used=rag_used
        )
        
        # ‚úÖ M√âTHODE 1: Essayer log_conversation
        try:
            if hasattr(logger_instance, 'log_conversation'):
                record_id = logger_instance.log_conversation(conversation)
                logger.info(f"‚úÖ [Expert Enhanced] Conversation sauvegard√©e via log_conversation: {conversation_id}")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [Expert Enhanced] log_conversation √©chou√©: {e}")
        
        # ‚úÖ M√âTHODE 2: Essayer save_conversation
        try:
            if hasattr(logger_instance, 'save_conversation'):
                record_id = logger_instance.save_conversation(conversation)
                logger.info(f"‚úÖ [Expert Enhanced] Conversation sauvegard√©e via save_conversation: {conversation_id}")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [Expert Enhanced] save_conversation √©chou√©: {e}")
        
        # ‚úÖ M√âTHODE 3: Sauvegarde directe SQL (fallback)
        logger.info("üîÑ [Expert Enhanced] Tentative sauvegarde directe SQL...")
        
        import sqlite3
        from datetime import datetime
        
        with sqlite3.connect(logger_instance.db_path) as conn:
            record_id = str(uuid.uuid4())
            timestamp = datetime.now().isoformat()
            
            conn.execute("""
                INSERT INTO conversations (
                    id, conversation_id, user_id, question, response, 
                    confidence_score, response_time_ms, language, rag_used, timestamp
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                record_id, conversation_id, str(user_id), str(question), str(response),
                rag_score, response_time_ms, language, rag_used, timestamp
            ))
            
            logger.info(f"‚úÖ [Expert Enhanced] Conversation sauvegard√©e via SQL direct: {conversation_id}")
            return True
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Toutes les m√©thodes de sauvegarde ont √©chou√©: {e}")
        return False

# =============================================================================
# ENDPOINT FEEDBACK AM√âLIOR√â (DEPUIS EXPERT.PY)
# =============================================================================

class FeedbackRequest(BaseModel):
    """Feedback model standard"""
    rating: str = Field(..., description="Rating: positive, negative, neutral")
    comment: Optional[str] = Field(None, description="Optional comment")
    conversation_id: Optional[str] = Field(None, description="Conversation ID")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        extra="ignore"
    )

    def model_post_init(self, __context) -> None:
        if self.rating not in ['positive', 'negative', 'neutral']:
            self.rating = 'neutral'

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION AM√âLIOR√âE"""
    try:
        logger.info(f"üìä [Expert Enhanced] Feedback re√ßu: {feedback_data.rating}")
        logger.info(f"üìä [Expert Enhanced] Conversation ID: {feedback_data.conversation_id}")
        logger.info(f"üìä [Expert Enhanced] Commentaire: {feedback_data.comment}")
        
        feedback_updated = False
        
        if feedback_data.conversation_id and LOGGING_AVAILABLE and logger_instance:
            try:
                # Convertir le rating en format num√©rique
                rating_numeric = {
                    "positive": 1,
                    "negative": -1,
                    "neutral": 0
                }.get(feedback_data.rating, 0)
                
                logger.info(f"üìä [Expert Enhanced] Rating num√©rique: {rating_numeric}")
                
                # ‚úÖ M√âTHODE 1: Essayer update_feedback si disponible
                try:
                    if hasattr(logger_instance, 'update_feedback'):
                        feedback_updated = logger_instance.update_feedback(
                            feedback_data.conversation_id, 
                            rating_numeric
                        )
                        logger.info(f"‚úÖ [Expert Enhanced] Feedback mis √† jour via update_feedback: {feedback_updated}")
                    else:
                        logger.warning("‚ö†Ô∏è [Expert Enhanced] M√©thode update_feedback non disponible")
                        feedback_updated = False
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Expert Enhanced] update_feedback √©chou√©: {e}")
                    feedback_updated = False
                
                # ‚úÖ M√âTHODE 2: SQL direct si update_feedback √©choue
                if not feedback_updated:
                    logger.info("üîÑ [Expert Enhanced] Tentative mise √† jour feedback via SQL direct...")
                    
                    import sqlite3
                    with sqlite3.connect(logger_instance.db_path) as conn:
                        cursor = conn.execute("""
                            UPDATE conversations 
                            SET feedback = ?, updated_at = CURRENT_TIMESTAMP 
                            WHERE conversation_id = ?
                        """, (rating_numeric, feedback_data.conversation_id))
                        
                        feedback_updated = cursor.rowcount > 0
                        
                        if feedback_updated:
                            logger.info(f"‚úÖ [Expert Enhanced] Feedback mis √† jour via SQL direct: {feedback_data.conversation_id}")
                        else:
                            logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Conversation non trouv√©e: {feedback_data.conversation_id}")
                
            except Exception as e:
                logger.error(f"‚ùå [Expert Enhanced] Erreur mise √† jour feedback: {e}")
                feedback_updated = False
        else:
            if not feedback_data.conversation_id:
                logger.warning("‚ö†Ô∏è [Expert Enhanced] Conversation ID manquant")
            if not LOGGING_AVAILABLE:
                logger.warning("‚ö†Ô∏è [Expert Enhanced] Logging non disponible")
            if not logger_instance:
                logger.warning("‚ö†Ô∏è [Expert Enhanced] Logger instance non disponible")
        
        return {
            "success": True,
            "message": "Feedback enregistr√© avec succ√®s (Enhanced)",
            "rating": feedback_data.rating,
            "comment": feedback_data.comment,
            "conversation_id": feedback_data.conversation_id,
            "feedback_updated_in_db": feedback_updated,
            "enhanced_features_used": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur feedback critique: {e}")
        import traceback
        logger.error(f"‚ùå [Expert Enhanced] Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Erreur enregistrement feedback: {str(e)}")

# =============================================================================
# ENDPOINT TOPICS AM√âLIOR√â (DEPUIS EXPERT.PY)
# =============================================================================

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION AM√âLIOR√âE"""
    try:
        lang = language.lower() if language else "fr"
        if lang not in ["fr", "en", "es"]:
            lang = "fr"
        
        # ‚úÖ TOPICS ENRICHIS avec donn√©es num√©riques
        topics_by_language = {
            "fr": [
                "Poids normal Ross 308 de 12 jours (340-370g attendu)",
                "Temp√©rature optimale poulailler (32¬∞C d√©marrage)",
                "Mortalit√© √©lev√©e diagnostic (>5% probl√©matique)", 
                "Probl√®mes de croissance retard d√©veloppement",
                "Protocoles vaccination Gumboro + Newcastle",
                "Indice de conversion alimentaire optimal (1.6-1.8)",
                "Ventilation et qualit√© d'air b√¢timent ferm√©",
                "Densit√© √©levage optimale (15-20 poulets/m¬≤)"
            ],
            "en": [
                "Normal weight Ross 308 at 12 days (340-370g expected)",
                "Optimal broiler house temperature (32¬∞C starter)",
                "High mortality diagnosis (>5% problematic)",
                "Growth problems development delays",
                "Vaccination protocols Gumboro + Newcastle", 
                "Optimal feed conversion ratio (1.6-1.8)",
                "Ventilation and air quality closed buildings",
                "Optimal stocking density (15-20 birds/m¬≤)"
            ],
            "es": [
                "Peso normal Ross 308 a los 12 d√≠as (340-370g esperado)",
                "Temperatura √≥ptima galp√≥n (32¬∞C iniciador)",
                "Diagn√≥stico mortalidad alta (>5% problem√°tico)",
                "Problemas crecimiento retrasos desarrollo",
                "Protocolos vacunaci√≥n Gumboro + Newcastle",
                "√çndice conversi√≥n alimentaria √≥ptimo (1.6-1.8)",
                "Ventilaci√≥n y calidad aire edificios cerrados", 
                "Densidad crianza √≥ptima (15-20 pollos/m¬≤)"
            ]
        }
        
        topics = topics_by_language.get(lang, topics_by_language["fr"])
        
        return {
            "topics": topics,
            "language": lang,
            "count": len(topics),
            "enhanced_features": {
                "numerical_data_included": True,
                "context_aware": True,
                "breed_specific_examples": True
            },
            "system_status": {
                "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else False,
                "enhanced_clarification_enabled": is_enhanced_clarification_system_enabled() if ENHANCED_CLARIFICATION_AVAILABLE else False,
                "intelligent_memory_enabled": INTELLIGENT_MEMORY_AVAILABLE,
                "ai_enhancements_enabled": INTELLIGENT_MEMORY_AVAILABLE and ENHANCED_CLARIFICATION_AVAILABLE
            },
            "note": "Topics enrichis avec donn√©es num√©riques et exemples sp√©cifiques"
        }
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur topics: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration topics")

# =============================================================================
# ENDPOINTS DEBUG AM√âLIOR√âS (DEPUIS EXPERT.PY)
# =============================================================================

@router.get("/debug-database")
async def debug_database_info_enhanced():
    """Debug des informations de base de donn√©es - VERSION AM√âLIOR√âE"""
    try:
        if not LOGGING_AVAILABLE or not logger_instance:
            return {
                "error": "Logging non disponible",
                "logging_available": LOGGING_AVAILABLE,
                "logger_instance": bool(logger_instance),
                "enhanced_features": "Non testables sans logging"
            }
        
        import sqlite3
        
        # V√©rifier la structure de la base
        with sqlite3.connect(logger_instance.db_path) as conn:
            # Lister les tables
            tables = conn.execute("""
                SELECT name FROM sqlite_master WHERE type='table'
            """).fetchall()
            
            # Structure de la table conversations
            schema = []
            count = 0
            recent = []
            
            if tables:
                try:
                    schema = conn.execute("PRAGMA table_info(conversations)").fetchall()
                    count = conn.execute("SELECT COUNT(*) FROM conversations").fetchone()[0]
                    recent = conn.execute("""
                        SELECT conversation_id, user_id, feedback, timestamp 
                        FROM conversations 
                        ORDER BY timestamp DESC 
                        LIMIT 5
                    """).fetchall()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Erreur requ√™tes base: {e}")
        
        # M√©thodes disponibles
        logger_methods = [method for method in dir(logger_instance) if not method.startswith('_')]
        
        return {
            "enhanced_system": True,
            "logging_available": LOGGING_AVAILABLE,
            "database_path": logger_instance.db_path,
            "tables": [table[0] for table in tables],
            "conversations_schema": [{"name": col[1], "type": col[2]} for col in schema],
            "conversations_count": count,
            "recent_conversations": [
                {
                    "conversation_id": row[0],
                    "user_id": row[1],
                    "feedback": row[2],
                    "timestamp": row[3]
                } for row in recent
            ],
            "logger_methods": logger_methods,
            "has_save_conversation": hasattr(logger_instance, 'save_conversation'),
            "has_log_conversation": hasattr(logger_instance, 'log_conversation'),
            "has_update_feedback": hasattr(logger_instance, 'update_feedback'),
            "enhanced_components": {
                "intelligent_memory": INTELLIGENT_MEMORY_AVAILABLE,
                "enhanced_clarification": ENHANCED_CLARIFICATION_AVAILABLE,
                "agricultural_validation": AGRICULTURAL_VALIDATOR_AVAILABLE
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur debug database: {e}")
        return {
            "error": str(e),
            "enhanced_system": True,
            "timestamp": datetime.now().isoformat()
        }

@router.get("/debug-system")
async def debug_system_info_enhanced():
    """Endpoint de diagnostic syst√®me complet AM√âLIOR√â"""
    import os
    import sys
    
    # Tests d'import d√©taill√©s
    import_tests = {}
    
    try:
        import app
        import_tests["app"] = "‚úÖ OK"
    except Exception as e:
        import_tests["app"] = f"‚ùå {str(e)}"
    
    try:
        import app.api.v1.auth
        import_tests["app.api.v1.auth"] = "‚úÖ OK"
        auth_attrs = dir(app.api.v1.auth)
        auth_functions = [attr for attr in auth_attrs if not attr.startswith('_') and callable(getattr(app.api.v1.auth, attr, None))]
        import_tests["app.api.v1.auth.functions"] = auth_functions
    except Exception as e:
        import_tests["app.api.v1.auth"] = f"‚ùå {str(e)}"
    
    # Test sp√©cifique du validateur agricole
    try:
        import app.api.v1.agricultural_domain_validator
        import_tests["agricultural_validator_module"] = "‚úÖ OK"
        
        validator_attrs = dir(app.api.v1.agricultural_domain_validator)
        validator_functions = [attr for attr in validator_attrs if not attr.startswith('_')]
        import_tests["agricultural_validator_functions"] = validator_functions
        
    except Exception as e:
        import_tests["agricultural_validator_module"] = f"‚ùå {str(e)}"
    
    # ‚úÖ NOUVEAUX TESTS POUR MODULES AM√âLIOR√âS
    try:
        import app.api.v1.question_clarification_system_enhanced
        import_tests["enhanced_clarification_module"] = "‚úÖ OK"
        
        clarification_attrs = dir(app.api.v1.question_clarification_system_enhanced)
        clarification_functions = [attr for attr in clarification_attrs if not attr.startswith('_')]
        import_tests["enhanced_clarification_functions"] = clarification_functions
        
    except Exception as e:
        import_tests["enhanced_clarification_module"] = f"‚ùå {str(e)}"
    
    try:
        import app.api.v1.conversation_memory_enhanced
        import_tests["intelligent_memory_module"] = "‚úÖ OK"
        
        memory_attrs = dir(app.api.v1.conversation_memory_enhanced)
        memory_functions = [attr for attr in memory_attrs if not attr.startswith('_')]
        import_tests["intelligent_memory_functions"] = memory_functions
        
    except Exception as e:
        import_tests["intelligent_memory_module"] = f"‚ùå {str(e)}"
    
    return {
        "enhanced_expert_system": True,
        "auth_available": AUTH_AVAILABLE,
        "agricultural_validator_available": AGRICULTURAL_VALIDATOR_AVAILABLE,
        "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        
        # ‚úÖ NOUVEAUX COMPOSANTS
        "enhanced_clarification_available": ENHANCED_CLARIFICATION_AVAILABLE,
        "enhanced_clarification_enabled": is_enhanced_clarification_system_enabled() if ENHANCED_CLARIFICATION_AVAILABLE else None,
        "intelligent_memory_available": INTELLIGENT_MEMORY_AVAILABLE,
        
        "openai_available": OPENAI_AVAILABLE,
        "logging_available": LOGGING_AVAILABLE,
        
        # ‚úÖ NOUVELLES FONCTIONNALIT√âS
        "enhanced_features": {
            "automatic_reprocessing": ENHANCED_CLARIFICATION_AVAILABLE,
            "intelligent_entity_extraction": INTELLIGENT_MEMORY_AVAILABLE,
            "contextual_reasoning": INTELLIGENT_MEMORY_AVAILABLE and ENHANCED_CLARIFICATION_AVAILABLE,
            "adaptive_clarification": ENHANCED_CLARIFICATION_AVAILABLE,
            "enhanced_prompts": True,
            "conversation_state_tracking": INTELLIGENT_MEMORY_AVAILABLE
        },
        
        "current_directory": os.path.dirname(__file__),
        "python_path_sample": sys.path[:3],
        "import_tests": import_tests,
        
        # ‚úÖ STATS AM√âLIOR√âES
        "validator_stats": get_agricultural_validator_stats() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        "enhanced_clarification_stats": get_enhanced_clarification_system_stats() if ENHANCED_CLARIFICATION_AVAILABLE else None,
        "intelligent_memory_stats": get_conversation_memory_stats() if INTELLIGENT_MEMORY_AVAILABLE else None,
        
        "timestamp": datetime.now().isoformat()
    }

@router.get("/debug-auth")
async def debug_auth_info_enhanced(request: Request):
    """Endpoint de diagnostic rapide AM√âLIOR√â"""
    auth_header = request.headers.get("Authorization")
    
    return {
        "enhanced_expert_system": True,
        "auth_available": AUTH_AVAILABLE,
        "agricultural_validator_available": AGRICULTURAL_VALIDATOR_AVAILABLE,
        "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        
        # ‚úÖ NOUVEAUX COMPOSANTS
        "enhanced_clarification_available": ENHANCED_CLARIFICATION_AVAILABLE,
        "enhanced_clarification_enabled": is_enhanced_clarification_system_enabled() if ENHANCED_CLARIFICATION_AVAILABLE else None,
        "intelligent_memory_available": INTELLIGENT_MEMORY_AVAILABLE,
        
        "auth_header_present": bool(auth_header),
        "auth_header_preview": auth_header[:50] + "..." if auth_header else None,
        "openai_available": OPENAI_AVAILABLE,
        "logging_available": LOGGING_AVAILABLE,
        
        # ‚úÖ NOUVELLES CAPACIT√âS
        "enhanced_capabilities": {
            "automatic_reprocessing": "‚úÖ Activ√©" if ENHANCED_CLARIFICATION_AVAILABLE else "‚ùå Non disponible",
            "intelligent_memory": "‚úÖ Activ√©" if INTELLIGENT_MEMORY_AVAILABLE else "‚ùå Non disponible",
            "contextual_reasoning": "‚úÖ Activ√©" if (INTELLIGENT_MEMORY_AVAILABLE and ENHANCED_CLARIFICATION_AVAILABLE) else "‚ùå Non disponible",
            "adaptive_clarification": "‚úÖ Activ√©" if ENHANCED_CLARIFICATION_AVAILABLE else "‚ùå Non disponible",
            "enhanced_prompts": "‚úÖ Activ√©",
            "ai_powered_enhancements": "‚úÖ Activ√©" if (OPENAI_AVAILABLE and INTELLIGENT_MEMORY_AVAILABLE) else "‚ùå Non disponible"
        },
        
        "timestamp": datetime.now().isoformat()
    }

@router.post("/test-utf8")
async def test_utf8_direct_enhanced(request: Request):
    """Test endpoint pour UTF-8 direct AM√âLIOR√â"""
    try:
        # R√©cup√©rer le body brut
        body = await request.body()
        body_str = body.decode('utf-8')
        
        logger.info(f"üìù [Expert Enhanced] Body brut re√ßu: {body_str}")
        
        # Parser JSON manuellement
        import json
        data = json.loads(body_str)
        
        question_text = data.get('text', '')
        language = data.get('language', 'fr')
        conversation_id = data.get('conversation_id', str(uuid.uuid4()))
        
        logger.info(f"üìù [Expert Enhanced] Question extraite: {question_text}")
        logger.info(f"üî§ [Expert Enhanced] Caract√®res sp√©ciaux: {[c for c in question_text if ord(c) > 127]}")
        logger.info(f"üÜî [Expert Enhanced] Conversation ID: {conversation_id}")
        
        # Test de validation
        user_id = get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        
        # ‚úÖ NOUVEAU: Test m√©moire intelligente si disponible
        memory_test_result = None
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=question_text,
                    role="user",
                    language=language
                )
                memory_test_result = {
                    "status": "success",
                    "extracted_entities": conversation_context.consolidated_entities.to_dict(),
                    "confidence": conversation_context.consolidated_entities.confidence_overall,
                    "urgency": conversation_context.conversation_urgency
                }
                logger.info(f"üß† [Expert Enhanced] Test m√©moire r√©ussi: {memory_test_result}")
            except Exception as e:
                memory_test_result = {"status": "error", "error": str(e)}
                logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Test m√©moire √©chou√©: {e}")
        
        # ‚úÖ NOUVEAU: Test clarification am√©lior√©e si disponible
        clarification_test_result = None
        if ENHANCED_CLARIFICATION_AVAILABLE:
            try:
                clarification_context = get_context_for_clarification(conversation_id) if INTELLIGENT_MEMORY_AVAILABLE else {}
                
                clarification_result = await analyze_question_for_clarification_enhanced(
                    question=question_text,
                    language=language,
                    user_id=user_id,
                    conversation_id=conversation_id,
                    conversation_context=clarification_context
                )
                
                clarification_test_result = {
                    "status": "success",
                    "needs_clarification": clarification_result.needs_clarification,
                    "questions_count": len(clarification_result.questions) if clarification_result.questions else 0,
                    "mode": clarification_result.clarification_mode.value if clarification_result.clarification_mode else None,
                    "confidence": clarification_result.confidence_score
                }
                logger.info(f"‚ùì [Expert Enhanced] Test clarification r√©ussi: {clarification_test_result}")
            except Exception as e:
                clarification_test_result = {"status": "error", "error": str(e)}
                logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Test clarification √©chou√©: {e}")
        
        # Test de validation avec contexte
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain_enhanced(
            question=question_text,
            language=language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id
        )
        
        if not is_valid:
            return {
                "success": False,
                "question_received": question_text,
                "special_chars_detected": [c for c in question_text if ord(c) > 127],
                "validation_passed": False,
                "rejection_message": rejection_message,
                "confidence": validation_confidence,
                "conversation_id": conversation_id,
                "enhanced_tests": {
                    "intelligent_memory": memory_test_result,
                    "enhanced_clarification": clarification_test_result
                },
                "method": "enhanced_utf8_test_with_ai_components",
                "timestamp": datetime.now().isoformat()
            }
        
        # Test traitement si valid√©
        answer = await process_question_with_enhanced_prompt(
            question_text, 
            language, 
            "fast",
            conversation_context=get_context_for_rag(conversation_id) if INTELLIGENT_MEMORY_AVAILABLE else ""
        )
        
        # ‚úÖ NOUVEAU: Enregistrer la r√©ponse dans la m√©moire
        if INTELLIGENT_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=answer,
                    role="assistant",
                    language=language
                )
                logger.info(f"üß† [Expert Enhanced] R√©ponse test UTF-8 enregistr√©e")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Erreur enregistrement r√©ponse test: {e}")
        
        return {
            "success": True,
            "question_received": question_text,
            "special_chars_detected": [c for c in question_text if ord(c) > 127],
            "validation_passed": True,
            "confidence": validation_confidence,
            "response": answer,
            "conversation_id": conversation_id,
            "enhanced_tests": {
                "intelligent_memory": memory_test_result,
                "enhanced_clarification": clarification_test_result
            },
            "enhanced_features_used": [
                "intelligent_memory" if memory_test_result and memory_test_result.get("status") == "success" else None,
                "enhanced_clarification" if clarification_test_result and clarification_test_result.get("status") == "success" else None,
                "enhanced_prompts",
                "contextual_reasoning"
            ],
            "method": "enhanced_utf8_test_with_ai_components",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test UTF-8: {e}")
        return {
            "success": False,
            "error": str(e),
            "enhanced_system": True,
            "timestamp": datetime.now().isoformat()
        }

# =============================================================================
# ENDPOINTS ADDITIONNELS DEPUIS EXPERT.PY
# =============================================================================

@router.get("/validation-stats")
async def get_validation_stats_enhanced():
    """Statistiques du validateur agricole - VERSION AM√âLIOR√âE"""
    try:
        if not AGRICULTURAL_VALIDATOR_AVAILABLE:
            return {
                "error": "Validateur agricole non disponible",
                "available": False,
                "stats": None,
                "enhanced_system": True
            }
        
        stats = get_agricultural_validator_stats()
        
        return {
            "available": True,
            "validation_enabled": is_agricultural_validation_enabled(),
            "stats": stats,
            "enhanced_features": {
                "contextual_validation": INTELLIGENT_MEMORY_AVAILABLE,
                "conversation_aware": True,
                "ai_powered": INTELLIGENT_MEMORY_AVAILABLE
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur stats validation: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration stats")

@router.post("/test-validation")
async def test_validation_enhanced(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Test endpoint pour tester la validation AM√âLIOR√âE"""
    try:
        question_text = request_data.text.strip()
        user_id = get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        conversation_id = request_data.conversation_id or str(uuid.uuid4())
        
        if not AGRICULTURAL_VALIDATOR_AVAILABLE:
            return {
                "error": "Validateur agricole non disponible",
                "available": False,
                "enhanced_system": True
            }
        
        # ‚úÖ NOUVEAU: Test avec contexte intelligent
        memory_context = None
        if INTELLIGENT_MEMORY_AVAILABLE:
            try:
                # Enregistrer d'abord la question pour g√©n√©rer du contexte
                memory_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=question_text,
                    role="user",
                    language=request_data.language
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Expert Enhanced] Erreur contexte test: {e}")
        
        # Test de validation avec contexte
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain_enhanced(
            question=question_text,
            language=request_data.language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id
        )
        
        return {
            "question": question_text,
            "language": request_data.language,
            "validation_passed": is_valid,
            "confidence": validation_confidence,
            "rejection_message": rejection_message if not is_valid else None,
            "validator_available": True,
            "validation_enabled": is_agricultural_validation_enabled(),
            "conversation_id": conversation_id,
            "enhanced_features": {
                "memory_context": memory_context.to_dict() if memory_context else None,
                "contextual_validation": INTELLIGENT_MEMORY_AVAILABLE,
                "extracted_entities": memory_context.consolidated_entities.to_dict() if memory_context else None
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test validation: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur test validation: {str(e)}")

# =============================================================================
# ENDPOINT DE COMPATIBILIT√â AVEC EXPERT.PY ORIGINAL
# =============================================================================

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """
    Endpoint de compatibilit√© avec expert.py original mais avec fonctionnalit√©s am√©lior√©es.
    Redirige vers ask_expert_enhanced avec toutes les am√©liorations.
    """
    logger.info("üîÑ [Expert Enhanced] Redirection vers endpoint am√©lior√© pour compatibilit√©")
    
    # Appeler directement l'endpoint am√©lior√©
    return await ask_expert_enhanced(request_data, request, current_user)

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """
    Endpoint public de compatibilit√© avec expert.py original mais avec fonctionnalit√©s am√©lior√©es.
    Redirige vers ask_expert_enhanced_public avec toutes les am√©liorations.
    """
    logger.info("üîÑ [Expert Enhanced] Redirection vers endpoint public am√©lior√© pour compatibilit√©")
    
    # Appeler directement l'endpoint public am√©lior√©
    return await ask_expert_enhanced_public(request_data, request)

# =============================================================================
# CONFIGURATION FINALE
# =============================================================================

security = HTTPBearer()

if OPENAI_AVAILABLE and openai:
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if openai_api_key:
        openai.api_key = openai_api_key
        logger.info("‚úÖ [Expert Enhanced] OpenAI configur√© avec succ√®s")
    else:
        logger.warning("‚ö†Ô∏è [Expert Enhanced] OpenAI API key non trouv√©e")
else:
    logger.warning("‚ö†Ô∏è [Expert Enhanced] Module OpenAI non disponible")

# =============================================================================
# LOGGING FINAL COMPLET
# =============================================================================

logger.info("üöÄ [EXPERT ENHANCED] Syst√®me expert am√©lior√© COMPLET initialis√© avec succ√®s!")
logger.info(f"üß† [EXPERT ENHANCED] M√©moire intelligente: {'‚úÖ' if INTELLIGENT_MEMORY_AVAILABLE else '‚ùå'}")
logger.info(f"‚ùì [EXPERT ENHANCED] Clarification am√©lior√©e: {'‚úÖ' if ENHANCED_CLARIFICATION_AVAILABLE else '‚ùå'}")
logger.info(f"üåæ [EXPERT ENHANCED] Validation agricole: {'‚úÖ' if AGRICULTURAL_VALIDATOR_AVAILABLE else '‚ùå'}")
logger.info(f"üîê [EXPERT ENHANCED] Auth: {'‚úÖ' if AUTH_AVAILABLE else '‚ùå'}")
logger.info(f"ü§ñ [EXPERT ENHANCED] OpenAI: {'‚úÖ' if OPENAI_AVAILABLE else '‚ùå'}")
logger.info(f"üíæ [EXPERT ENHANCED] Logging: {'‚úÖ' if LOGGING_AVAILABLE else '‚ùå'}")

logger.info("üéØ [EXPERT ENHANCED] NOUVELLES FONCTIONNALIT√âS ACTIV√âES:")
logger.info("   - üîÑ Retraitement automatique apr√®s clarification compl√©t√©e")
logger.info("   - üß† Extraction d'entit√©s intelligente via IA")
logger.info("   - üìä R√©ponses avec donn√©es num√©riques optimis√©es")
logger.info("   - üéõÔ∏è Modes de clarification adaptatifs (batch/interactive/adaptive)")
logger.info("   - üîç Raisonnement contextuel pour √©viter clarifications redondantes")
logger.info("   - üìà Suivi d'√©tat conversationnel avanc√©")
logger.info("   - ‚ö° D√©tection automatique d'urgence et probl√®mes critiques")
logger.info("   - üéØ Contexte intelligent pour RAG et prompts")

logger.info("üîß [EXPERT ENHANCED] ENDPOINTS DISPONIBLES (COMPATIBILIT√â COMPL√àTE):")
logger.info("   - POST /ask (compatible original + am√©liorations)")
logger.info("   - POST /ask-public (compatible original + am√©liorations)")
logger.info("   - POST /ask-enhanced (version compl√®te am√©lior√©e)")
logger.info("   - POST /ask-enhanced-public (version publique am√©lior√©e)")
logger.info("   - POST /feedback (compatible + am√©liorations)")
logger.info("   - GET /topics (compatible + donn√©es num√©riques)")
logger.info("   - GET /validation-stats (compatible + contexte)")
logger.info("   - POST /test-validation (compatible + m√©moire)")
logger.info("   - GET /debug-database (compatible + composants enhanced)")
logger.info("   - GET /debug-system (compatible + nouvelles fonctionnalit√©s)")
logger.info("   - GET /debug-auth (compatible + capacit√©s enhanced)")
logger.info("   - POST /test-utf8 (compatible + tests IA)")
logger.info("   - GET /enhanced-stats (statistiques syst√®me enhanced)")
logger.info("   - POST /test-enhanced-flow (test complet nouvelles fonctionnalit√©s)")
logger.info("   - GET /enhanced-conversation/{id}/context (contexte conversation)")

logger.info("üîÑ [EXPERT ENHANCED] COMPATIBILIT√â:")
logger.info("   - ‚úÖ 100% compatible avec expert.py original")
logger.info("   - ‚úÖ M√™mes endpoints avec fonctionnalit√©s enrichies")
logger.info("   - ‚úÖ Nouveaux endpoints pour fonctionnalit√©s avanc√©es")
logger.info("   - ‚úÖ Redirection automatique vers versions am√©lior√©es")

if ENHANCED_CLARIFICATION_AVAILABLE:
    stats = get_enhanced_clarification_system_stats()
    logger.info(f"üìä [EXPERT ENHANCED] Config clarification: Mode {stats.get('clarification_mode')}, Extraction IA: {'‚úÖ' if stats.get('smart_entity_extraction') else '‚ùå'}")

if INTELLIGENT_MEMORY_AVAILABLE:
    memory_stats = get_conversation_memory_stats()
    logger.info(f"üìä [EXPERT ENHANCED] M√©moire intelligente: IA {'‚úÖ' if memory_stats.get('ai_powered') else '‚ùå'}, Cache: {memory_stats.get('cache_size')}/{memory_stats.get('cache_max_size')}")

logger.info("‚ú® [EXPERT ENHANCED] Le probl√®me est r√©solu!")
logger.info("‚ú® [EXPERT ENHANCED] Plus de questions redondantes sur race/√¢ge gr√¢ce au contexte intelligent!")
logger.info("‚ú® [EXPERT ENHANCED] R√©ponses automatiques avec donn√©es num√©riques apr√®s clarification!")
logger.info("‚ú® [EXPERT ENHANCED] Syst√®me COMPLET avec r√©trocompatibilit√© 100%!")