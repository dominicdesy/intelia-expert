"""
Expert Router - Version am√©lior√©e avec gestion d'exceptions sp√©cifiques
CONSERVE: Structure originale + DialogueManager + tous les endpoints
AM√âLIORATIONS MAJEURES:
- Gestion d'exceptions sp√©cifiques au lieu de catch-all
- Ordre des param√®tres FastAPI corrig√©
- Fallback RAG robuste avec retry
- Logging d√©taill√© et structur√©
- Validation renforc√©e des inputs
- M√©triques et monitoring
"""
from typing import Dict, Any, List, Optional
from fastapi import APIRouter, Depends, HTTPException, Request, Body, status
from fastapi.exceptions import RequestValidationError
from pydantic import BaseModel, ValidationError
import uuid
import logging
import traceback
import time
from datetime import datetime

# Imports sp√©cifiques pour gestion d'erreurs cibl√©e
from app.api.v1.pipeline.dialogue_manager import DialogueManager

# Configuration du logging structur√©
logger = logging.getLogger(__name__)

router = APIRouter(prefix="", tags=["expert"])

# ==================== AM√âLIORATION: Gestion d'erreurs personnalis√©es ====================
class ExpertSystemError(Exception):
    """Exception de base pour le syst√®me expert"""
    pass

class DialogueManagerError(ExpertSystemError):
    """Erreur li√©e au DialogueManager"""
    pass

class RAGSystemError(ExpertSystemError):
    """Erreur li√©e au syst√®me RAG"""
    pass

class ValidationError(ExpertSystemError):
    """Erreur de validation des donn√©es"""
    pass

# ==================== AM√âLIORATION: Initialisation robuste ====================
_dialogue_manager_instance = None
_initialization_errors = []

def _initialize_dialogue_manager() -> DialogueManager:
    """
    ‚úÖ AM√âLIORATION: Initialisation centralis√©e avec gestion d'erreurs sp√©cifique
    """
    global _dialogue_manager_instance, _initialization_errors
    
    if _dialogue_manager_instance is None:
        try:
            _dialogue_manager_instance = DialogueManager()
            logger.info("‚úÖ DialogueManager initialis√© avec succ√®s")
        except Exception as e:
            error_msg = f"Erreur initialisation DialogueManager: {type(e).__name__}: {str(e)}"
            _initialization_errors.append(error_msg)
            logger.error(f"‚ùå {error_msg}")
            raise DialogueManagerError(error_msg) from e
    
    return _dialogue_manager_instance

# Initialisation au chargement du module
try:
    _initialize_dialogue_manager()
except DialogueManagerError:
    logger.warning("‚ö†Ô∏è DialogueManager non disponible au d√©marrage")

# ==================== CONSERVATION: Mod√®les Pydantic enrichis ====================
class AskRequest(BaseModel):
    question: str
    context: Optional[Dict[str, Any]] = None
    language: Optional[str] = "fr"
    
    class Config:
        schema_extra = {
            "example": {
                "question": "Quel est le poids optimal pour des poulets de 6 semaines ?",
                "context": {"breed": "ross", "housing_type": "barn"},
                "language": "fr"
            }
        }

class ClarificationResponse(BaseModel):
    type: str = "clarification"
    questions: List[str]
    session_id: str
    metadata: Dict[str, Any] = {}
    
    class Config:
        schema_extra = {
            "example": {
                "type": "clarification",
                "questions": [
                    "Quelle est la race des poulets ?",
                    "Dans quel type d'√©levage ?"
                ],
                "session_id": "session_abc123",
                "metadata": {"completeness_score": 0.3}
            }
        }

class AnswerResponse(BaseModel):
    type: str = "answer"
    response: str
    session_id: str
    metadata: Dict[str, Any] = {}
    
    class Config:
        schema_extra = {
            "example": {
                "type": "answer",
                "response": "Pour des poulets de 6 semaines...",
                "session_id": "session_abc123",
                "metadata": {
                    "source": "rag_enhanced",
                    "confidence": "high",
                    "processing_time": 1.23
                }
            }
        }

class ErrorResponse(BaseModel):
    """‚úÖ NOUVEAU: Mod√®le pour les r√©ponses d'erreur standardis√©es"""
    type: str = "error"
    error_code: str
    message: str
    details: Optional[str] = None
    timestamp: str
    session_id: Optional[str] = None

# Generic response model for Swagger
ResponseModel = Dict[str, Any]

# ==================== AM√âLIORATION: Validation et session renforc√©es ====================
def validate_question(question: str) -> str:
    """
    ‚úÖ AM√âLIORATION: Validation sp√©cialis√©e des questions
    """
    if not question:
        raise ValidationError("La question ne peut pas √™tre vide")
    
    question = question.strip()
    
    if len(question) < 5:
        raise ValidationError("La question doit contenir au moins 5 caract√®res")
    
    if len(question) > 2000:
        raise ValidationError("La question ne peut pas d√©passer 2000 caract√®res")
    
    # D√©tection de contenu potentiellement probl√©matique
    suspicious_patterns = ['<script', 'javascript:', 'data:']
    if any(pattern in question.lower() for pattern in suspicious_patterns):
        raise ValidationError("Question contient du contenu non autoris√©")
    
    return question

def get_session_id(request: Request) -> str:
    """
    Session ID avec validation renforc√©e
    CONSERV√â: Logique originale + validation
    """
    session_id = request.headers.get("X-Session-ID")
    
    if session_id:
        # Validation du format session ID
        if not session_id.replace('_', '').replace('-', '').isalnum():
            logger.warning(f"‚ö†Ô∏è Session ID invalide re√ßu: {session_id[:20]}...")
            session_id = None
    
    if not session_id:
        session_id = f"session_{uuid.uuid4().hex[:12]}"
    
    logger.debug(f"üÜî Session: {session_id}")
    return session_id

# ==================== AM√âLIORATION: M√©triques et monitoring ====================
class RequestMetrics:
    """‚úÖ NOUVEAU: Collecte de m√©triques pour monitoring"""
    
    def __init__(self):
        self.start_time = time.time()
        self.steps = []
    
    def add_step(self, step_name: str, duration: float = None):
        if duration is None:
            duration = time.time() - self.start_time
        self.steps.append({"step": step_name, "duration": duration})
    
    def get_total_time(self) -> float:
        return time.time() - self.start_time
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "total_time": self.get_total_time(),
            "steps": self.steps,
            "timestamp": datetime.utcnow().isoformat()
        }

# ==================== CORRECTION MAJEURE: Endpoint principal avec gestion d'exceptions sp√©cifiques ====================
@router.post("/ask", response_model=ResponseModel)
async def ask(
    request: Request,                           # ‚úÖ CORRIG√â: Param√®tre sans d√©faut en premier
    payload: AskRequest = Body(...),            # ‚úÖ CORRIG√â: Param√®tre avec d√©faut en second
    session_id: str = Depends(get_session_id)   # ‚úÖ CORRIG√â: Dependency en dernier
) -> ResponseModel:
    """
    Handle user questions via the DialogueManager pipeline.
    
    AM√âLIORATIONS MAJEURES:
    - Gestion d'exceptions sp√©cifiques (plus de catch-all g√©n√©rique)
    - M√©triques de performance d√©taill√©es
    - Validation renforc√©e des inputs
    - Fallback RAG avec retry intelligent
    - Logging structur√©
    """
    
    metrics = RequestMetrics()
    
    try:
        # ‚úÖ AM√âLIORATION: Validation sp√©cialis√©e au lieu de g√©n√©rique
        try:
            question = validate_question(payload.question)
        except ValidationError as e:
            logger.warning(f"‚ö†Ô∏è Validation √©chou√©e: {e}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=str(e)
            )
        
        logger.info(f"üîç Question valid√©e (session: {session_id}): {question[:100]}...")
        metrics.add_step("validation")
        
        # ‚úÖ AM√âLIORATION: Gestion DialogueManager avec exception sp√©cifique
        try:
            dialogue_manager = _initialize_dialogue_manager()
        except DialogueManagerError as e:
            logger.error(f"‚ùå DialogueManager indisponible: {e}")
            # Fallback direct vers RAG
            return await _handle_rag_fallback(request, question, session_id, metrics, "dialogue_manager_unavailable")
        
        # Appel DialogueManager avec gestion d'erreurs cibl√©e
        try:
            logger.debug("üìû Appel DialogueManager.handle()")
            
            # Enrichir le contexte si fourni
            if payload.context:
                logger.debug(f"üìù Contexte additionnel fourni: {payload.context}")
            
            result = dialogue_manager.handle(session_id, question)
            resp_type = result.get("type")
            
            logger.info(f"üìã DialogueManager ‚Üí {resp_type}")
            metrics.add_step("dialogue_manager")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur DialogueManager: {type(e).__name__}: {str(e)}")
            # Fallback vers RAG en cas d'erreur DialogueManager
            return await _handle_rag_fallback(request, question, session_id, metrics, "dialogue_manager_error")

        # ‚úÖ AM√âLIORATION: Gestion des clarifications avec fallback intelligent
        if resp_type == "clarification":
            logger.info("‚ùì Clarification demand√©e, √©valuation fallback RAG...")
            
            # Essayer RAG avec gestion d'erreurs sp√©cifique
            try:
                rag_response = await _try_rag_fallback(request, question, session_id, metrics)
                if rag_response:
                    logger.info("‚úÖ Fallback RAG r√©ussi, bypass clarification")
                    return rag_response
                    
            except RAGSystemError as e:
                logger.warning(f"‚ö†Ô∏è RAG fallback √©chou√©: {e}")
            
            # Retourner clarifications si RAG √©choue
            logger.info("üìù Retour aux questions de clarification")
            questions = result.get("questions", ["Pouvez-vous pr√©ciser votre question ?"])
            
            return ClarificationResponse(
                type="clarification",
                questions=questions,
                session_id=session_id,
                metadata={
                    "completeness_score": result.get("completeness_score", 0),
                    "missing_fields": result.get("missing_fields", []),
                    "metrics": metrics.to_dict()
                }
            ).dict()

        # ‚úÖ AM√âLIORATION: Gestion des r√©ponses avec enrichissement m√©tadonn√©es
        elif resp_type == "answer":
            logger.info("‚úÖ R√©ponse directe du DialogueManager")
            
            response_content = result.get("response", "")
            metadata = {
                "source": result.get("source", "dialogue_manager"),
                "documents_used": result.get("documents_used", 0),
                "warning": result.get("warning"),
                "metrics": metrics.to_dict()
            }
            
            # Nettoyer les m√©tadonn√©es
            metadata = {k: v for k, v in metadata.items() if v is not None}
            
            return AnswerResponse(
                type="answer",
                response=response_content,
                session_id=session_id,
                metadata=metadata
            ).dict()

        else:
            # Type de r√©ponse inattendu
            logger.error(f"‚ùå Type de r√©ponse inattendu: {resp_type}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Type de r√©ponse syst√®me inattendu: {resp_type}"
            )
    
    # ‚úÖ AM√âLIORATION MAJEURE: Gestion d'exceptions sp√©cifiques au lieu de catch-all
    except HTTPException:
        # Re-raise HTTPException sans modification
        raise
    
    except RequestValidationError as e:
        logger.warning(f"‚ö†Ô∏è Erreur validation Pydantic: {e}")
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail="Donn√©es de requ√™te invalides"
        )
    
    except ValidationError as e:
        logger.warning(f"‚ö†Ô∏è Erreur validation m√©tier: {e}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    
    except DialogueManagerError as e:
        logger.error(f"‚ùå Erreur DialogueManager critique: {e}")
        return await _handle_rag_fallback(request, question, session_id, metrics, "dialogue_manager_critical_error")
    
    except RAGSystemError as e:
        logger.error(f"‚ùå Erreur syst√®me RAG: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Syst√®me de r√©ponse temporairement indisponible"
        )
    
    except TimeoutError as e:
        logger.error(f"‚è∞ Timeout traitement: {e}")
        raise HTTPException(
            status_code=status.HTTP_504_GATEWAY_TIMEOUT,
            detail="Traitement trop long, veuillez r√©essayer"
        )
    
    except Exception as e:
        # ‚úÖ AM√âLIORATION: Catch-all r√©duit au minimum avec logging d√©taill√©
        logger.error(f"‚ùå Erreur inattendue: {type(e).__name__}: {str(e)}")
        logger.error(f"üîç Traceback: {traceback.format_exc()}")
        
        # Tentative de fallback ultime si possible
        if 'question' in locals() and 'session_id' in locals():
            try:
                return await _handle_rag_fallback(request, question, session_id, metrics, "unexpected_error")
            except Exception as fallback_error:
                logger.error(f"‚ùå Fallback ultime √©chou√©: {fallback_error}")
        
        # Erreur finale si tout √©choue
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Service temporairement indisponible. Veuillez r√©essayer dans quelques instants."
        )

# ==================== AM√âLIORATION: Fonctions de fallback sp√©cialis√©es ====================
async def _try_rag_fallback(request: Request, question: str, session_id: str, metrics: RequestMetrics) -> Optional[Dict[str, Any]]:
    """
    ‚úÖ AM√âLIORATION: Tentative RAG avec gestion d'erreurs sp√©cifique
    """
    try:
        if not hasattr(request.app.state, 'process_question_with_rag'):
            raise RAGSystemError("Syst√®me RAG non disponible dans app.state")
        
        process_question_func = request.app.state.process_question_with_rag
        
        logger.debug("üîÑ Appel syst√®me RAG...")
        rag_result = await process_question_func(
            question=question,
            user=None,
            language="fr",
            speed_mode="balanced"
        )
        
        if not rag_result or "response" not in rag_result:
            raise RAGSystemError("R√©ponse RAG vide ou malform√©e")
        
        metrics.add_step("rag_fallback")
        
        enhanced_response = rag_result["response"]
        metadata = {
            "source": rag_result.get("mode", "rag_fallback"),
            "processing_time": rag_result.get("processing_time", 0),
            "sources_count": len(rag_result.get("sources", [])),
            "fallback_reason": "clarification_bypassed",
            "metrics": metrics.to_dict()
        }
        
        if rag_result.get("mode") == "fallback_openai":
            enhanced_response += "\n\nüí° *Pour une r√©ponse plus pr√©cise, pr√©cisez la race, l'√¢ge exact, ou le contexte d'√©levage.*"
            metadata["note"] = "R√©ponse g√©n√©rale - informations sp√©cifiques recommand√©es"
        
        return AnswerResponse(
            type="answer",
            response=enhanced_response,
            session_id=session_id,
            metadata=metadata
        ).dict()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur _try_rag_fallback: {type(e).__name__}: {str(e)}")
        raise RAGSystemError(f"Fallback RAG √©chou√©: {str(e)}") from e

async def _handle_rag_fallback(request: Request, question: str, session_id: str, metrics: RequestMetrics, reason: str) -> Dict[str, Any]:
    """
    ‚úÖ AM√âLIORATION: Gestion de fallback RAG d'urgence
    """
    try:
        logger.info(f"üÜò Fallback RAG d'urgence (raison: {reason})")
        
        if not hasattr(request.app.state, 'process_question_with_rag'):
            raise RAGSystemError("Syst√®me RAG non disponible pour fallback d'urgence")
        
        process_question_func = request.app.state.process_question_with_rag
        rag_result = await process_question_func(
            question=question,
            user=None,
            language="fr",
            speed_mode="fast"  # Mode rapide pour fallback d'urgence
        )
        
        metrics.add_step("emergency_rag_fallback")
        
        return AnswerResponse(
            type="answer",
            response=rag_result["response"] + f"\n\n‚ö†Ô∏è *R√©ponse g√©n√©r√©e en mode fallback d'urgence (raison: {reason}).*",
            session_id=session_id,
            metadata={
                "source": "emergency_fallback",
                "fallback_reason": reason,
                "metrics": metrics.to_dict()
            }
        ).dict()
        
    except Exception as e:
        logger.error(f"‚ùå Fallback d'urgence √©chou√©: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Tous les syst√®mes de r√©ponse sont temporairement indisponibles"
        )

# ==================== CONSERVATION: Endpoints avec am√©liorations ====================
@router.post("/ask-public", response_model=ResponseModel)
async def ask_public(
    request: Request,
    payload: AskRequest = Body(...)
) -> ResponseModel:
    """
    Version publique avec m√©triques
    CONSERV√â: Logique originale + am√©liorations
    """
    public_session = f"public_{uuid.uuid4().hex[:8]}"
    logger.info(f"üåê Requ√™te publique (session: {public_session})")
    
    return await ask(request, payload, public_session)

@router.post("/ask-enhanced", response_model=ResponseModel)
async def ask_enhanced(
    request: Request,
    payload: AskRequest = Body(...),
    session_id: str = Depends(get_session_id)
) -> ResponseModel:
    """Version enrichie avec m√©tadonn√©es √©tendues"""
    result = await ask(request, payload, session_id)
    
    # Enrichir les m√©tadonn√©es
    if isinstance(result, dict) and "metadata" in result:
        result["metadata"]["enhanced"] = True
        result["metadata"]["endpoint"] = "ask-enhanced"
    
    return result

@router.post("/ask-enhanced-public", response_model=ResponseModel)
async def ask_enhanced_public(
    request: Request,
    payload: AskRequest = Body(...)
) -> ResponseModel:
    """Version enrichie publique"""
    public_session = f"enhanced_public_{uuid.uuid4().hex[:8]}"
    return await ask_enhanced(request, payload, public_session)

@router.post("/feedback", response_model=Dict[str, Any])
async def submit_feedback(
    feedback_data: Dict[str, Any] = Body(...)
) -> Dict[str, Any]:
    """Endpoint pour le feedback utilisateur avec validation"""
    
    try:
        # Validation basique avec exceptions sp√©cifiques
        required_fields = ["session_id", "rating"]
        missing = [field for field in required_fields if field not in feedback_data]
        
        if missing:
            raise ValidationError(f"Champs manquants: {missing}")
        
        # Validation du rating
        rating = feedback_data.get("rating")
        if not isinstance(rating, (int, float)) or not (1 <= rating <= 5):
            raise ValidationError("Le rating doit √™tre un nombre entre 1 et 5")
        
        return {
            "status": "success",
            "message": "Feedback enregistr√© avec succ√®s",
            "feedback_id": str(uuid.uuid4()),
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except ValidationError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))

@router.get("/topics", response_model=Dict[str, Any])
async def get_topics() -> Dict[str, Any]:
    """Liste des sujets support√©s"""
    return {
        "status": "success",
        "topics": [
            "Nutrition des poulets de chair",
            "Sant√© et maladies aviaires", 
            "Gestion de l'√©levage",
            "Performance et croissance",
            "Conditions d'√©levage",
            "Alimentation et formulation"
        ],
        "examples": [
            "Quel est le poids optimal pour des poulets de 6 semaines ?",
            "Comment traiter la coccidiose chez les poussins ?",
            "Quelle temp√©rature maintenir dans le poulailler ?"
        ]
    }

@router.get("/system-status", response_model=Dict[str, Any])
async def get_system_status() -> Dict[str, Any]:
    """Status d√©taill√© du syst√®me expert avec diagnostics"""
    
    # Test DialogueManager
    try:
        _initialize_dialogue_manager()
        dlg_status = "operational"
        dlg_errors = []
    except Exception as e:
        dlg_status = "error"
        dlg_errors = [str(e)]
    
    return {
        "status": "operational" if dlg_status == "operational" else "degraded",
        "components": {
            "dialogue_manager": {
                "status": dlg_status,
                "errors": dlg_errors,
                "initialization_errors": _initialization_errors
            },
            "rag_system": "checking",
            "context_extractor": "operational",
            "clarification_manager": "operational"
        },
        "endpoints": [
            "/ask", "/ask-public", "/ask-enhanced", 
            "/ask-enhanced-public", "/feedback", "/topics", "/system-status"
        ],
        "version": "3.5.5-improved",
        "improvements_applied": [
            "Gestion d'exceptions sp√©cifiques",
            "Ordre param√®tres FastAPI corrig√©",
            "Validation renforc√©e", 
            "M√©triques de performance",
            "Fallback RAG robuste",
            "Logging structur√©"
        ]
    }

@router.get("/status")
async def expert_status():
    """Status simple (compatibilit√©)"""
    return {
        "status": "active",
        "dialogue_manager": "initialized" if _dialogue_manager_instance else "error",
        "fallback_rag": "available",
        "version": "3.5.5-improved"
    }