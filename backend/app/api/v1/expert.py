"""
app/api/v1/expert.py - EXPERT ENDPOINTS v3.7.0 AVEC SUPPORT RESPONSE_VERSIONS

üöÄ NOUVELLES FONCTIONNALIT√âS v3.7.0:
1. ‚úÖ Support concision_level dans requests
2. ‚úÖ Support generate_all_versions par d√©faut  
3. ‚úÖ response_versions dans les r√©ponses
4. ‚úÖ G√©n√©ration multi-versions backend
5. ‚úÖ Conservation COMPL√àTE du code v3.6.1 fonctionnel

üß® CORRECTIONS CRITIQUES v3.6.1 PR√âSERV√âES:
1. ‚úÖ Suppression assignations context_entities inexistant
2. ‚úÖ Suppression assignations is_enriched inexistant  
3. ‚úÖ Conservation des entit√©s via clarification_entities uniquement
4. ‚úÖ Logging am√©lior√© sans tentatives d'assignation
5. ‚úÖ M√©tadonn√©es propag√©es via response au lieu de request
6. ‚úÖ TOUS LES ENDPOINTS ORIGINAUX PR√âSERV√âS

VERSION COMPL√àTE + SYNTAXE 100% CORRIG√âE + SUPPORT RESPONSE_VERSIONS
TOUTES LES FONCTIONS ORIGINALES CONSERV√âES
"""

import os
import logging
import uuid
import time
import re
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest, ConcisionLevel, ConcisionPreferences
from .expert_services import ExpertService
from .expert_utils import get_user_id_from_request, extract_breed_and_sex_from_clarification

router = APIRouter(tags=["expert-enhanced"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Service principal
expert_service = ExpertService()

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC CLARIFICATION D√âTECTION CORRIG√âE + RESPONSE_VERSIONS üöÄ
# =============================================================================

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    üß® ENDPOINT EXPERT FINAL avec D√âTECTION CLARIFICATION CORRIG√âE v3.6.1:
    üöÄ NOUVEAU v3.7.0: Support response_versions pour concision backend
    - Support explicite du flag is_clarification_response
    - Logique am√©lior√©e pour distinguer clarification vs nouvelle question
    - M√©tadonn√©es propag√©es correctement sans erreurs
    - G√©n√©ration multi-versions des r√©ponses
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 v3.7.0 - SUPPORT RESPONSE_VERSIONS")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        
        # üöÄ NOUVEAU v3.7.0: Log param√®tres concision
        concision_level = getattr(request_data, 'concision_level', ConcisionLevel.CONCISE)
        generate_all_versions = getattr(request_data, 'generate_all_versions', True)
        
        logger.info("üöÄ [RESPONSE_VERSIONS v3.7.0] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # üß® CORRECTION v3.6.1: D√âTECTION EXPLICITE MODE CLARIFICATION
        is_clarification = getattr(request_data, 'is_clarification_response', False)
        original_question = getattr(request_data, 'original_question', None)
        clarification_entities = getattr(request_data, 'clarification_entities', None)
        
        logger.info("üß® [D√âTECTION CLARIFICATION v3.6.1] Analyse du mode:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - original_question fournie: {original_question is not None}")
        logger.info(f"   - clarification_entities: {clarification_entities}")
        
        # Variables pour m√©tadonn√©es de clarification (√† inclure dans response)
        clarification_metadata = {}
        
        if is_clarification:
            logger.info("üé™ [FLUX CLARIFICATION] Mode R√âPONSE de clarification d√©tect√©")
            logger.info(f"   - R√©ponse utilisateur: '{request_data.text}'")
            logger.info(f"   - Question originale: '{original_question}'")
            
            # üß® TRAITEMENT SP√âCIALIS√â R√âPONSE CLARIFICATION
            if clarification_entities:
                logger.info(f"   - Entit√©s pr√©-extraites: {clarification_entities}")
                breed = clarification_entities.get('breed')
                sex = clarification_entities.get('sex')
            else:
                # Extraction automatique si pas fournie
                logger.info("   - Extraction automatique entit√©s depuis r√©ponse")
                extracted = extract_breed_and_sex_from_clarification(request_data.text, request_data.language)
                breed = extracted.get('breed')
                sex = extracted.get('sex')
                logger.info(f"   - Entit√©s extraites: breed='{breed}', sex='{sex}'")
            
            # üí° VALIDATION entit√©s compl√®tes AVANT enrichissement
            clarified_entities = {"breed": breed, "sex": sex}
            
            # V√©rifier si les entit√©s sont suffisantes
            if not breed or not sex:
                logger.warning(f"‚ö†Ô∏è [FLUX CLARIFICATION] Entit√©s incompl√®tes: breed='{breed}', sex='{sex}'")
                
                # G√©rer cas d'entit√©s insuffisantes
                missing_info = []
                if not breed:
                    missing_info.append("race/souche")
                if not sex:
                    missing_info.append("sexe")
                
                # Retourner erreur clarification incompl√®te
                incomplete_clarification_response = EnhancedExpertResponse(
                    question=request_data.text,
                    response=f"Information incompl√®te. Il manque encore : {', '.join(missing_info)}.\n\n" +
                            f"Votre r√©ponse '{request_data.text}' ne contient pas tous les √©l√©ments n√©cessaires.\n\n" +
                            f"**Exemples complets :**\n" +
                            f"‚Ä¢ 'Ross 308 m√¢les'\n" +
                            f"‚Ä¢ 'Cobb 500 femelles'\n" +
                            f"‚Ä¢ 'Hubbard troupeau mixte'\n\n" +
                            f"Pouvez-vous pr√©ciser les informations manquantes ?",
                    conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                    rag_used=False,
                    rag_score=None,
                    timestamp=datetime.now().isoformat(),
                    language=request_data.language,
                    response_time_ms=int((time.time() - start_time) * 1000),
                    mode="incomplete_clarification_response",
                    user=current_user.get("email") if current_user else None,
                    logged=True,
                    validation_passed=False,
                    clarification_result={
                        "clarification_requested": True,
                        "clarification_type": "incomplete_entities_retry",
                        "missing_information": missing_info,
                        "provided_entities": clarified_entities,
                        "retry_required": True,
                        "confidence": 0.3
                    },
                    processing_steps=["incomplete_clarification_detected", "retry_requested"],
                    ai_enhancements_used=["incomplete_clarification_handling"],
                    # üöÄ NOUVEAU v3.7.0: Pas de response_versions pour erreurs clarification
                    response_versions=None
                )
                
                logger.info(f"‚ùå [FLUX CLARIFICATION] Retour erreur entit√©s incompl√®tes: {missing_info}")
                return incomplete_clarification_response
            
            # Enrichir la question originale avec les informations COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                logger.info(f"   - Question enrichie: '{enriched_question}'")
                
                # üí° CORRECTION v3.6.1: M√©tadonn√©es sauvegard√©es pour response
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier la question pour traitement RAG
                request_data.text = enriched_question
                
                # ‚ùå SUPPRIM√â v3.6.1 - champs inexistants dans le mod√®le:
                # request_data.context_entities = clarified_entities  # ‚ùå N'EXISTE PAS
                # request_data.is_enriched = True                     # ‚ùå N'EXISTE PAS
                
                # ‚úÖ CORRECT - conservation des m√©tadonn√©es via variables locales
                logger.info("üí° [FLUX CLARIFICATION v3.6.1] M√©tadonn√©es sauvegard√©es pour response:")
                logger.info(f"   - clarification_metadata: {clarification_metadata}")
                logger.info(f"   - enriched_question: '{enriched_question}'")
                
                # Marquer comme traitement post-clarification (√©viter boucle)
                request_data.is_clarification_response = False
                
                logger.info("üéØ [FLUX CLARIFICATION] Question enrichie, passage au traitement RAG")
            else:
                logger.warning("‚ö†Ô∏è [FLUX CLARIFICATION] Question originale manquante - impossible enrichir")
        else:
            logger.info("üéØ [FLUX CLARIFICATION] Mode QUESTION INITIALE - d√©tection vagueness active")
        
        # üöÄ NOUVEAU v3.7.0: Validation et d√©fauts concision
        if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
            request_data.concision_level = ConcisionLevel.CONCISE
            logger.info("üöÄ [CONCISION] Niveau par d√©faut appliqu√©: CONCISE")
        
        if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
            request_data.generate_all_versions = True
            logger.info("üöÄ [CONCISION] generate_all_versions activ√© par d√©faut")
        
        # üß® CORRECTION CRITIQUE v3.6.1: FOR√áAGE SYST√âMATIQUE DES AM√âLIORATIONS
        original_vagueness = getattr(request_data, 'enable_vagueness_detection', None)
        original_coherence = getattr(request_data, 'require_coherence_check', None)
        
        # FORCER l'activation - AUCUNE EXCEPTION
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        
        logger.info("üî• [CLARIFICATION FORC√âE v3.6.1] Param√®tres forc√©s:")
        logger.info(f"   - enable_vagueness_detection: {original_vagueness} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - require_coherence_check: {original_coherence} ‚Üí TRUE (FORC√â)")
        
        # ‚úÖ D√âL√âGUER AU SERVICE (qui va maintenant g√©rer response_versions)
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=current_user,
            start_time=start_time
        )
        
        # üß® CORRECTION v3.6.1: AJOUT M√âTADONN√âES CLARIFICATION dans response
        if clarification_metadata:
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES v3.6.1] Clarification metadata ajout√©es √† response")
        
        # üöÄ NOUVEAU v3.7.0: Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # üß® LOGGING R√âSULTATS CLARIFICATION D√âTAILL√â
        logger.info("üß® [R√âSULTATS CLARIFICATION v3.6.1]:")
        logger.info(f"   - Mode final: {response.mode}")
        logger.info(f"   - Clarification d√©clench√©e: {response.clarification_result is not None}")
        logger.info(f"   - RAG utilis√©: {response.rag_used}")
        logger.info(f"   - Question finale trait√©e: '{response.question[:100]}...'")
        
        if response.clarification_result:
            clarif = response.clarification_result
            logger.info(f"   - Type clarification: {clarif.get('clarification_type', 'N/A')}")
            logger.info(f"   - Infos manquantes: {clarif.get('missing_information', [])}")
            logger.info(f"   - Confiance: {clarif.get('confidence', 0)}")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 v3.7.0 - Temps: {response.response_time_ms}ms")
        logger.info(f"ü§ñ Am√©liorations: {len(response.ai_enhancements_used or [])} features")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2 v3.7.0: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üß® ENDPOINT PUBLIC avec D√âTECTION CLARIFICATION CORRIG√âE v3.6.1
    üöÄ NOUVEAU v3.7.0: Support response_versions pour concision backend"""
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public v3.7.0 - SUPPORT RESPONSE_VERSIONS")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        
        # üöÄ NOUVEAU v3.7.0: Param√®tres concision pour endpoint public
        concision_level = getattr(request_data, 'concision_level', ConcisionLevel.CONCISE)
        generate_all_versions = getattr(request_data, 'generate_all_versions', True)
        
        logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # üß® CORRECTION v3.6.1: D√âTECTION PUBLIQUE CLARIFICATION
        is_clarification = getattr(request_data, 'is_clarification_response', False)
        clarification_metadata = {}
        
        logger.info("üß® [D√âTECTION PUBLIQUE v3.6.1] Analyse mode clarification:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - conversation_id: {request_data.conversation_id}")
        
        if is_clarification:
            logger.info("üé™ [FLUX PUBLIC] Traitement r√©ponse clarification")
            
            # Logique similaire √† l'endpoint priv√©
            original_question = getattr(request_data, 'original_question', None)
            clarification_entities = getattr(request_data, 'clarification_entities', None)
            
            logger.info(f"   - Question originale: '{original_question}'")
            logger.info(f"   - Entit√©s fournies: {clarification_entities}")
            
            if clarification_entities:
                breed = clarification_entities.get('breed')
                sex = clarification_entities.get('sex')
                logger.info(f"   - Utilisation entit√©s pr√©-extraites: breed='{breed}', sex='{sex}'")
            else:
                # Extraction automatique
                extracted = extract_breed_and_sex_from_clarification(request_data.text, request_data.language)
                breed = extracted.get('breed')
                sex = extracted.get('sex')
                logger.info(f"   - Extraction automatique: breed='{breed}', sex='{sex}'")
            
            # üí° VALIDATION entit√©s compl√®tes
            clarified_entities = {"breed": breed, "sex": sex}
            
            # Validation entit√©s compl√®tes
            if not breed or not sex:
                logger.warning(f"‚ö†Ô∏è [FLUX PUBLIC] Entit√©s incompl√®tes: breed='{breed}', sex='{sex}'")
                
                missing_info = []
                if not breed:
                    missing_info.append("race/souche")
                if not sex:
                    missing_info.append("sexe")
                
                # Retourner erreur clarification incompl√®te publique
                return EnhancedExpertResponse(
                    question=request_data.text,
                    response=f"Information incompl√®te. Il manque encore : {', '.join(missing_info)}.\n\n" +
                            f"Votre r√©ponse '{request_data.text}' ne contient pas tous les √©l√©ments n√©cessaires.\n\n" +
                            f"**Exemples complets :**\n" +
                            f"‚Ä¢ 'Ross 308 m√¢les'\n" +
                            f"‚Ä¢ 'Cobb 500 femelles'\n" +
                            f"‚Ä¢ 'Hubbard troupeau mixte'\n\n" +
                            f"Pouvez-vous pr√©ciser les informations manquantes ?",
                    conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                    rag_used=False,
                    rag_score=None,
                    timestamp=datetime.now().isoformat(),
                    language=request_data.language,
                    response_time_ms=int((time.time() - start_time) * 1000),
                    mode="incomplete_clarification_response_public",
                    user=None,
                    logged=True,
                    validation_passed=False,
                    clarification_result={
                        "clarification_requested": True,
                        "clarification_type": "incomplete_entities_retry_public",
                        "missing_information": missing_info,
                        "provided_entities": clarified_entities,
                        "retry_required": True,
                        "confidence": 0.3
                    },
                    processing_steps=["incomplete_clarification_detected_public", "retry_requested"],
                    ai_enhancements_used=["incomplete_clarification_handling_public"],
                    # üöÄ NOUVEAU v3.7.0: Pas de response_versions pour erreurs
                    response_versions=None
                )
            
            # Enrichissement question avec entit√©s COMPL√àTES
            if original_question:
                enriched_question = original_question
                if breed:
                    enriched_question += f" pour {breed}"
                if sex:
                    enriched_question += f" {sex}"
                
                # üí° CORRECTION v3.6.1: M√©tadonn√©es pour response (endpoint public)
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier question pour RAG
                request_data.text = enriched_question
                
                # ‚ùå SUPPRIM√â v3.6.1 - champs inexistants:
                # request_data.context_entities = clarified_entities  # ‚ùå N'EXISTE PAS
                # request_data.is_enriched = True                     # ‚ùå N'EXISTE PAS
                
                request_data.is_clarification_response = False  # √âviter boucle
                
                logger.info(f"   - Question enrichie publique: '{enriched_question}'")
                logger.info(f"   - M√©tadonn√©es sauvegard√©es: {clarification_metadata}")
        else:
            logger.info("üéØ [FLUX PUBLIC] Question initiale - d√©tection vagueness")
        
        # üöÄ NOUVEAU v3.7.0: Validation et d√©fauts concision pour public
        if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        
        if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
            request_data.generate_all_versions = True
        
        # üß® FOR√áAGE MAXIMAL pour endpoint public
        logger.info("üî• [PUBLIC ENDPOINT v3.7.0] Activation FORC√âE des am√©liorations:")
        
        original_settings = {
            'vagueness': getattr(request_data, 'enable_vagueness_detection', None),
            'coherence': getattr(request_data, 'require_coherence_check', None),
            'detailed_rag': getattr(request_data, 'detailed_rag_scoring', None),
            'quality_metrics': getattr(request_data, 'enable_quality_metrics', None)
        }
        
        # FOR√áAGE MAXIMAL pour endpoint public
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        request_data.detailed_rag_scoring = True
        request_data.enable_quality_metrics = True
        
        logger.info("üî• [FOR√áAGE PUBLIC v3.7.0] Changements appliqu√©s:")
        for key, (old_val, new_val) in {
            'vagueness_detection': (original_settings['vagueness'], True),
            'coherence_check': (original_settings['coherence'], True),
            'detailed_rag': (original_settings['detailed_rag'], True),
            'quality_metrics': (original_settings['quality_metrics'], True)
        }.items():
            logger.info(f"   - {key}: {old_val} ‚Üí {new_val} (FORC√â)")
        
        # ‚úÖ D√âL√âGUER AU SERVICE avec support response_versions
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=None,  # Mode public
            start_time=start_time
        )
        
        # üí° CORRECTION v3.6.1: Ajout m√©tadonn√©es clarification
        if clarification_metadata:
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES PUBLIC v3.6.1] Clarification metadata ajout√©es")
        
        # üöÄ NOUVEAU v3.7.0: Log response_versions si pr√©sentes
        if hasattr(response, 'response_versions') and response.response_versions:
            logger.info("üöÄ [RESPONSE_VERSIONS PUBLIC] Versions g√©n√©r√©es:")
            for level, content in response.response_versions.items():
                logger.info(f"   - {level}: {len(content)} caract√®res")
        
        # üß® VALIDATION R√âSULTATS CLARIFICATION PUBLIQUE
        logger.info("üß® [VALIDATION PUBLIQUE v3.6.1]:")
        logger.info(f"   - Clarification syst√®me actif: {'clarification' in response.mode}")
        logger.info(f"   - Am√©liorations appliqu√©es: {response.ai_enhancements_used}")
        logger.info(f"   - Mode final: {response.mode}")
        logger.info(f"   - RAG utilis√©: {response.rag_used}")
        
        # V√©rification critique
        if not response.ai_enhancements_used:
            logger.warning("‚ö†Ô∏è [ALERTE] Aucune am√©lioration d√©tect√©e - possible probl√®me!")
        
        if response.enable_vagueness_detection is False:
            logger.warning("‚ö†Ô∏è [ALERTE] Vagueness detection non activ√©e - v√©rifier for√ßage!")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public v3.7.0 - Mode: {response.mode}")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public v3.7.0: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINTS DE COMPATIBILIT√â AVEC FOR√áAGE MAINTENU + RESPONSE_VERSIONS üî•
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© v1 - FOR√áAGE APPLIQU√â + CLARIFICATION SUPPORT + RESPONSE_VERSIONS"""
    logger.info("üîÑ [LEGACY] Redirection avec FOR√áAGE + clarification + response_versions vers v2")
    
    # üî• FOR√áAGE LEGACY
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    
    # üöÄ v3.7.0: Support concision par d√©faut
    if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
        request_data.concision_level = ConcisionLevel.CONCISE
    if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
        request_data.generate_all_versions = True
    
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© v1 - FOR√áAGE APPLIQU√â + CLARIFICATION SUPPORT + RESPONSE_VERSIONS"""
    logger.info("üîÑ [LEGACY PUBLIC] Redirection avec FOR√áAGE + clarification + response_versions vers v2")
    
    # üî• FOR√áAGE LEGACY PUBLIC
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    
    # üöÄ v3.7.0: Support concision par d√©faut
    if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
        request_data.concision_level = ConcisionLevel.CONCISE
    if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
        request_data.generate_all_versions = True
    
    return await ask_expert_enhanced_v2_public(request_data, request)

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© original - FOR√áAGE TOTAL + CLARIFICATION SUPPORT + RESPONSE_VERSIONS"""
    logger.info("üîÑ [COMPATIBLE] Redirection avec FOR√áAGE TOTAL + clarification + response_versions vers v2")
    
    # üî• FOR√áAGE COMPATIBILIT√â TOTALE
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    request_data.detailed_rag_scoring = True
    request_data.enable_quality_metrics = True
    
    # üöÄ v3.7.0: Support concision par d√©faut
    if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
        request_data.concision_level = ConcisionLevel.CONCISE
    if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
        request_data.generate_all_versions = True
    
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© original - FOR√áAGE TOTAL + CLARIFICATION SUPPORT + RESPONSE_VERSIONS"""
    logger.info("üîÑ [COMPATIBLE PUBLIC] Redirection avec FOR√áAGE TOTAL + clarification + response_versions vers v2")
    
    # üî• FOR√áAGE COMPATIBILIT√â PUBLIQUE TOTALE
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    request_data.detailed_rag_scoring = True
    request_data.enable_quality_metrics = True
    
    # üöÄ v3.7.0: Support concision par d√©faut
    if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
        request_data.concision_level = ConcisionLevel.CONCISE
    if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
        request_data.generate_all_versions = True
    
    return await ask_expert_enhanced_v2_public(request_data, request)

# =============================================================================
# ENDPOINT FEEDBACK AM√âLIOR√â (ORIGINAL PR√âSERV√â)
# =============================================================================

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION FINALE avec support qualit√©"""
    try:
        logger.info(f"üìä [Feedback] Re√ßu: {feedback_data.rating} pour {feedback_data.conversation_id}")
        
        if feedback_data.quality_feedback:
            logger.info(f"üìà [Feedback] Qualit√© d√©taill√©e: {len(feedback_data.quality_feedback)} m√©triques")
        
        result = await expert_service.process_feedback(feedback_data)
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Feedback] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur feedback: {str(e)}")

# =============================================================================
# ENDPOINT TOPICS AM√âLIOR√â (ORIGINAL PR√âSERV√â)
# =============================================================================

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION FINALE"""
    try:
        return await expert_service.get_suggested_topics(language)
    except Exception as e:
        logger.error(f"‚ùå [Topics] Erreur: {e}")
        raise HTTPException(status_code=500, detail="Erreur topics")

# =============================================================================
# ENDPOINTS DE DEBUG ET MONITORING AVEC CLARIFICATION (TOUS ORIGINAUX PR√âSERV√âS)
# =============================================================================

@router.get("/system-status")
async def get_system_status():
    """Statut syst√®me avec focus clarification + RESPONSE_VERSIONS (ORIGINAL + AM√âLIOR√â)"""
    try:
        status = {
            "system_available": True,
            "timestamp": datetime.now().isoformat(),
            "components": {
                "expert_service": True,
                "rag_system": True,
                "enhancement_service": True,
                "integrations_manager": expert_service.integrations.get_system_status(),
                "clarification_system": True,  # ‚úÖ FOCUS
                "forced_clarification": True,   # ‚úÖ NOUVEAU
                "clarification_detection_fixed": True,  # üß® NOUVEAU
                "metadata_propagation": True,             # üí° NOUVEAU
                "backend_fix_v361": True,                  # üß® v3.6.1
                "response_versions_system": True          # üöÄ v3.7.0 NOUVEAU
            },
            "enhanced_capabilities": [
                "vagueness_detection",
                "context_coherence_check", 
                "detailed_rag_scoring",
                "enhanced_fallback",
                "quality_metrics",
                "debug_mode",
                "performance_breakdown",
                "smart_clarification_breed_sex",
                "clarification_response_processing_fixed",  # üß® CORRIG√â
                "incomplete_clarification_handling",
                "is_clarification_response_support",       # üß® NOUVEAU
                "clarification_entities_support",           # üß® NOUVEAU
                "entity_validation_and_incomplete_handling", # üí° NOUVEAU
                "metadata_propagation_system_v361",          # üí° v3.6.1
                "response_versions_generation",              # üöÄ v3.7.0 NOUVEAU
                "dynamic_concision_levels",                  # üöÄ v3.7.0 NOUVEAU
                "multi_version_backend_cache",               # üöÄ v3.7.0 NOUVEAU
                "intelligent_version_selection"              # üöÄ v3.7.0 NOUVEAU
            ],
            "enhanced_endpoints": [
                "/ask-enhanced-v2 (+ response_versions)",
                "/ask-enhanced-v2-public (+ response_versions)", 
                "/ask-enhanced (legacy ‚Üí v2 + response_versions)",
                "/ask-enhanced-public (legacy ‚Üí v2 + response_versions)",
                "/ask (compatible ‚Üí v2 + response_versions)",
                "/ask-public (compatible ‚Üí v2 + response_versions)",
                "/feedback (with quality)",
                "/topics (enhanced)",
                "/system-status",
                "/debug/test-enhancements",
                "/debug/test-clarification",
                "/debug/test-clarification-forced",
                "/debug/validate-clarification-params",
                "/debug/test-clarification-detection",        # üß® NOUVEAU
                "/debug/simulate-frontend-clarification",     # üß® NOUVEAU
                "/debug/test-incomplete-entities",            # üí° NOUVEAU
                "/debug/test-clarification-backend-fix",      # üß® v3.6.1 NOUVEAU
                "/debug/test-response-versions",              # üöÄ v3.7.0 NOUVEAU
                "/ask-with-clarification"                     # üéØ NOUVEAU
            ],
            "api_version": "v3.7.0_response_versions_with_clarification_detection_fixed_backend_corrected_complete",
            "backward_compatibility": True,
            "clarification_fixes_v3_6_1": {
                "is_clarification_response_support": True,
                "clarification_entities_support": True, 
                "improved_detection_logic": True,
                "detailed_logging": True,
                "frontend_simulation_tools": True,
                "incomplete_entity_validation": True,        # üí° NOUVEAU
                "metadata_propagation_fixed": True,          # üí° v3.6.1
                "context_entities_removal": True,            # üß® v3.6.1
                "is_enriched_removal": True,                 # üß® v3.6.1
                "syntax_validation_complete": True,          # ‚úÖ v3.6.1
                "all_original_endpoints_preserved": True     # ‚úÖ GARANTI
            },
            "response_versions_features_v3_7_0": {  # üöÄ NOUVEAU v3.7.0
                "concision_level_support": True,
                "generate_all_versions_default": True,
                "multi_version_generation": True,
                "dynamic_selection_frontend": True,
                "cache_optimization": True,
                "performance_metrics": True,
                "backward_compatibility": True
            },
            "forced_parameters": {
                "vagueness_detection_always_on": True,  # ‚úÖ GARANTI
                "coherence_check_always_on": True,      # ‚úÖ GARANTI
                "backwards_compatibility": True,
                "response_versions_enabled": True       # üöÄ v3.7.0
            }
        }
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå [System] Erreur status: {e}")
        return {
            "system_available": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.post("/debug/test-enhancements")
async def test_enhancements(request: Request):
    """Test toutes les am√©liorations avec une question de test (ORIGINAL PR√âSERV√â)"""
    try:
        # Question de test qui active toutes les am√©liorations
        test_question = EnhancedQuestionRequest(
            text="Quel est leur poids au jour 18 ?",  # Question avec pronom contextuel
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            require_coherence_check=True,
            detailed_rag_scoring=True,
            enable_quality_metrics=True,
            debug_mode=True,
            # üöÄ v3.7.0: Test response_versions
            concision_level=ConcisionLevel.CONCISE,
            generate_all_versions=True
        )
        
        # Simuler contexte conversationnel (Ross 308 mentionn√© avant)
        if expert_service.integrations.intelligent_memory_available:
            try:
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user",
                    message="Qu'est-ce que Ross 308 ?",
                    role="user",
                    language="fr"
                )
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user", 
                    message="Le Ross 308 est une race de poulet de chair...",
                    role="assistant",
                    language="fr"
                )
            except Exception:
                pass  # Pas critique pour le test
        
        start_time = time.time()
        
        # Traiter la question de test
        result = await expert_service.process_expert_question(
            request_data=test_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        # Analyser les r√©sultats
        test_results = {
            "test_successful": True,
            "question": test_question.text,
            "conversation_id": test_question.conversation_id,
            "user_id": "test_user",
            "timestamp": datetime.now().isoformat(),
            "components_tested": {
                "vagueness_detection": result.vagueness_detection is not None,
                "context_coherence": result.context_coherence is not None,
                "document_relevance": result.document_relevance is not None,
                "quality_metrics": result.quality_metrics is not None,
                "debug_info": result.debug_info is not None,
                "performance_breakdown": result.performance_breakdown is not None,
                "ai_enhancements_used": len(result.ai_enhancements_used or []) > 0,
                "clarification_system": "smart_performance_clarification" in (result.ai_enhancements_used or []),
                "response_versions": hasattr(result, 'response_versions') and result.response_versions is not None  # üöÄ v3.7.0
            },
            "enhancement_results": {
                "ai_enhancements_count": len(result.ai_enhancements_used or []),
                "processing_steps_count": len(result.processing_steps or []),
                "response_time_ms": result.response_time_ms,
                "mode": result.mode,
                "clarification_triggered": result.clarification_result is not None,
                "response_versions_count": len(result.response_versions) if hasattr(result, 'response_versions') and result.response_versions else 0  # üöÄ v3.7.0
            },
            "errors": []
        }
        
        # üöÄ v3.7.0: Test sp√©cifique response_versions
        if hasattr(result, 'response_versions') and result.response_versions:
            test_results["response_versions_test"] = {
                "versions_generated": list(result.response_versions.keys()),
                "versions_count": len(result.response_versions),
                "all_versions_present": all(level in result.response_versions for level in ["ultra_concise", "concise", "standard", "detailed"]),
                "version_lengths": {level: len(content) for level, content in result.response_versions.items()}
            }
        
        # V√©rifications de qualit√©
        if not result.ai_enhancements_used:
            test_results["errors"].append("Aucune am√©lioration IA utilis√©e")
        
        if result.response_time_ms > 10000:  # 10 secondes
            test_results["errors"].append(f"Temps de r√©ponse trop √©lev√©: {result.response_time_ms}ms")
        
        # üöÄ v3.7.0: V√©rification response_versions
        if hasattr(result, 'response_versions') and not result.response_versions:
            test_results["errors"].append("response_versions non g√©n√©r√©es")
        
        if len(test_results["errors"]) > 0:
            test_results["test_successful"] = False
        
        logger.info(f"‚úÖ [Expert Enhanced] Test des am√©liorations: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test am√©liorations: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "components_tested": {},
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-clarification")
async def test_clarification_system(request: Request):
    """Test sp√©cifique du syst√®me de clarification intelligent (ORIGINAL PR√âSERV√â)"""
    try:
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": []
        }
        
        # Test 1: Question n√©cessitant clarification race/sexe
        logger.info("üéØ Test 1: Question poids sans race/sexe")
        
        clarification_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 12 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,
            # üöÄ v3.7.0: Test avec response_versions
            concision_level=ConcisionLevel.CONCISE,
            generate_all_versions=True
        )
        
        start_time = time.time()
        result1 = await expert_service.process_expert_question(
            request_data=clarification_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        test1_result = {
            "test_name": "D√©tection question n√©cessitant clarification",
            "question": clarification_question.text,
            "clarification_requested": result1.clarification_result is not None,
            "mode": result1.mode,
            "enhancements_used": result1.ai_enhancements_used or [],
            "success": "smart_performance_clarification" in result1.mode,
            "response_versions_present": hasattr(result1, 'response_versions') and result1.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["tests_performed"].append(test1_result)
        
        if not test1_result["success"]:
            test_results["errors"].append("Clarification automatique non d√©clench√©e")
        
        # Test 2: Traitement r√©ponse de clarification
        if test1_result["clarification_requested"]:
            logger.info("üé™ Test 2: Traitement r√©ponse clarification")
            
            clarification_response = EnhancedQuestionRequest(
                text="Ross 308 m√¢les",
                conversation_id=clarification_question.conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 12 jours ?",
                clarification_context={
                    "missing_information": ["breed", "sex"],
                    "clarification_type": "performance_breed_sex"
                },
                # üöÄ v3.7.0: Test response_versions sur clarification
                concision_level=ConcisionLevel.STANDARD,
                generate_all_versions=True
            )
            
            start_time2 = time.time()
            result2 = await expert_service.process_expert_question(
                request_data=clarification_response,
                request=request,
                current_user=None,
                start_time=start_time2
            )
            
            test2_result = {
                "test_name": "Traitement r√©ponse clarification",
                "clarification_response": clarification_response.text,
                "question_enriched": "Ross 308" in result2.question and "m√¢les" in result2.question.lower(),
                "rag_used": result2.rag_used,
                "mode": result2.mode,
                "success": result2.rag_used and "Ross 308" in result2.question,
                "response_versions_generated": hasattr(result2, 'response_versions') and result2.response_versions is not None  # üöÄ v3.7.0
            }
            
            test_results["tests_performed"].append(test2_result)
            
            if not test2_result["success"]:
                test_results["errors"].append("Traitement clarification √©chou√©")
        
        # üß™ AM√âLIORATION 3: Test entit√©s incompl√®tes
        logger.info("üß™ Test 4: Entit√©s incompl√®tes")
        
        incomplete_tests = [
            {
                "name": "Race seulement",
                "input": "Ross 308",
                "expected_missing": ["sexe"],
                "should_fail": True
            },
            {
                "name": "Sexe seulement", 
                "input": "m√¢les",
                "expected_missing": ["race/souche"],
                "should_fail": True
            },
            {
                "name": "Information vague",
                "input": "poulets",
                "expected_missing": ["race/souche", "sexe"],
                "should_fail": True
            },
            {
                "name": "Information compl√®te",
                "input": "Ross 308 m√¢les", 
                "expected_missing": [],
                "should_fail": False
            }
        ]
        
        incomplete_results = []
        for test_case in incomplete_tests:
            logger.info(f"üß™ Test entit√©s: {test_case['name']}")
            
            incomplete_clarification = EnhancedQuestionRequest(
                text=test_case["input"],
                conversation_id=clarification_question.conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 12 jours ?",
                enable_vagueness_detection=True,
                # üöÄ v3.7.0: Test m√™me pour entit√©s incompl√®tes
                concision_level=ConcisionLevel.CONCISE,
                generate_all_versions=True
            )
            
            start_time_incomplete = time.time()
            result_incomplete = await expert_service.process_expert_question(
                request_data=incomplete_clarification,
                request=request,
                current_user=None,
                start_time=start_time_incomplete
            )
            
            # Analyser le r√©sultat
            is_incomplete_mode = "incomplete" in result_incomplete.mode
            has_retry_request = result_incomplete.clarification_result and result_incomplete.clarification_result.get("retry_required", False)
            
            test_result = {
                "test_name": test_case["name"],
                "input": test_case["input"],
                "expected_to_fail": test_case["should_fail"],
                "detected_as_incomplete": is_incomplete_mode,
                "retry_requested": has_retry_request,
                "mode": result_incomplete.mode,
                "success": (test_case["should_fail"] and is_incomplete_mode) or (not test_case["should_fail"] and not is_incomplete_mode),
                "response_versions_handling": hasattr(result_incomplete, 'response_versions')  # üöÄ v3.7.0
            }
            
            if result_incomplete.clarification_result and "missing_information" in result_incomplete.clarification_result:
                test_result["missing_info_detected"] = result_incomplete.clarification_result["missing_information"]
            
            incomplete_results.append(test_result)
            
            logger.info(f"   - D√©tect√© incomplet: {is_incomplete_mode}")
            logger.info(f"   - Test r√©ussi: {test_result['success']}")
            
            if not test_result["success"]:
                test_results["errors"].append(f"Test entit√©s incompl√®tes √©chou√©: {test_case['name']}")
        
        test_results["tests_performed"].append({
            "test_name": "Validation entit√©s incompl√®tes",
            "incomplete_tests": incomplete_results,
            "success": all(r["success"] for r in incomplete_results)
        })
        
        # Test 5: Validation propagation entit√©s enrichies
        logger.info("üí° Test 5: Propagation entit√©s dans m√©tadonn√©es")
        
        metadata_test = EnhancedQuestionRequest(
            text="Ross 308 femelles",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            is_clarification_response=True,
            original_question="Quel est le poids d'un poulet de 15 jours ?",
            clarification_entities={
                "breed": "Ross 308",
                "sex": "femelles"
            },
            # üöÄ v3.7.0: Test m√©tadonn√©es + response_versions
            concision_level=ConcisionLevel.DETAILED,
            generate_all_versions=True
        )
        
        start_time_meta = time.time()
        result_meta = await expert_service.process_expert_question(
            request_data=metadata_test,
            request=request,
            current_user=None,
            start_time=start_time_meta
        )
        
        # V√©rifier m√©tadonn√©es (ajust√©es pour v3.6.1)
        has_clarification_processing = hasattr(result_meta, 'clarification_processing') and result_meta.clarification_processing
        question_enriched = "Ross 308" in result_meta.question and "femelles" in result_meta.question.lower()
        
        metadata_test_result = {
            "test_name": "Propagation m√©tadonn√©es enrichies",
            "input": metadata_test.text,
            "clarification_processing_present": has_clarification_processing,
            "question_enriched": question_enriched,
            "final_question": result_meta.question,
            "rag_used": result_meta.rag_used,
            "success": has_clarification_processing and question_enriched and result_meta.rag_used,
            "response_versions_with_metadata": hasattr(result_meta, 'response_versions') and result_meta.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["tests_performed"].append(metadata_test_result)
        
        logger.info(f"   - Clarification processing: {has_clarification_processing}")
        logger.info(f"   - Question enriched: {question_enriched}")
        logger.info(f"   - RAG utilis√©: {result_meta.rag_used}")
        
        if not metadata_test_result["success"]:
            test_results["errors"].append("Propagation m√©tadonn√©es √©chou√©e")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info(f"‚úÖ [Expert Enhanced] Test clarification: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test clarification: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-clarification-forced")
async def test_clarification_system_forced(request: Request):
    """üî• NOUVEAU: Test FORC√â du syst√®me de clarification avec logging d√©taill√© (ORIGINAL PR√âSERV√â)"""
    try:
        logger.info("=" * 80)
        logger.info("üî• D√âBUT TEST CLARIFICATION FORC√â")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [],
            "clarification_flow_detailed": []
        }
        
        # Test 1: Question GARANTIE de d√©clencher clarification
        logger.info("üéØ Test 1: Question poids sans race/sexe - FOR√áAGE GARANTI")
        
        test_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 15 jours ?",  # Question claire n√©cessitant clarification
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,  # FORC√â
            require_coherence_check=True,     # FORC√â
            is_clarification_response=False,
            # üöÄ v3.7.0: Test forced avec response_versions
            concision_level=ConcisionLevel.CONCISE,
            generate_all_versions=True
        )
        
        logger.info(f"üî• [TEST 1] Question de test: '{test_question.text}'")
        logger.info(f"üî• [TEST 1] Param√®tres: vagueness={test_question.enable_vagueness_detection}, coherence={test_question.require_coherence_check}")
        
        start_time = time.time()
        result1 = await expert_service.process_expert_question(
            request_data=test_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        # Analyse d√©taill√©e Test 1
        clarification_triggered = result1.clarification_result is not None
        has_clarification_mode = "clarification" in result1.mode
        
        test1_details = {
            "test_name": "D√©tection clarification automatique FORC√âE",
            "question": test_question.text,
            "clarification_result_exists": clarification_triggered,
            "mode_contains_clarification": has_clarification_mode,
            "final_mode": result1.mode,
            "enhancements_used": result1.ai_enhancements_used or [],
            "clarification_details": result1.clarification_result,
            "success": clarification_triggered or has_clarification_mode,
            "rag_bypassed": not result1.rag_used,  # Clarification doit bypasser RAG
            "response_versions_present": hasattr(result1, 'response_versions') and result1.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["tests_performed"].append(test1_details)
        test_results["clarification_flow_detailed"].append({
            "step": "initial_question",
            "triggered": test1_details["success"],
            "mode": result1.mode,
            "response_excerpt": result1.response[:100] + "..." if len(result1.response) > 100 else result1.response
        })
        
        logger.info(f"üî• [TEST 1 R√âSULTAT] Clarification d√©clench√©e: {test1_details['success']}")
        logger.info(f"üî• [TEST 1 R√âSULTAT] Mode: {result1.mode}")
        
        if not test1_details["success"]:
            error_msg = f"Clarification forc√©e √âCHOU√âE - Mode: {result1.mode}, RAG utilis√©: {result1.rag_used}"
            test_results["errors"].append(error_msg)
            logger.error(f"‚ùå {error_msg}")
        
        # Test 2: R√©ponse √† la clarification
        if test1_details["success"]:
            logger.info("üé™ Test 2: Traitement r√©ponse clarification FORC√âE")
            
            clarification_response = EnhancedQuestionRequest(
                text="Ross 308 m√¢les",
                conversation_id=test_question.conversation_id,
                language="fr",
                enable_vagueness_detection=True,  # FORC√â
                require_coherence_check=True,     # FORC√â
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 15 jours ?",
                clarification_context={
                    "missing_information": ["breed", "sex"],
                    "clarification_type": "performance_breed_sex"
                },
                # üöÄ v3.7.0: Test response_versions avec clarification
                concision_level=ConcisionLevel.STANDARD,
                generate_all_versions=True
            )
            
            logger.info(f"üî• [TEST 2] R√©ponse clarification: '{clarification_response.text}'")
            logger.info(f"üî• [TEST 2] is_clarification_response: {clarification_response.is_clarification_response}")
            
            start_time2 = time.time()
            result2 = await expert_service.process_expert_question(
                request_data=clarification_response,
                request=request,
                current_user=None,
                start_time=start_time2
            )
            
            # Analyse Test 2
            question_enriched = ("Ross 308" in result2.question.lower() and 
                               ("m√¢le" in result2.question.lower() or "male" in result2.question.lower()))
            
            test2_details = {
                "test_name": "Traitement r√©ponse clarification FORC√âE",
                "clarification_input": clarification_response.text,
                "enriched_question": result2.question,
                "question_properly_enriched": question_enriched,
                "rag_activated": result2.rag_used,
                "final_mode": result2.mode,
                "success": result2.rag_used and question_enriched,
                "response_versions_generated": hasattr(result2, 'response_versions') and result2.response_versions is not None  # üöÄ v3.7.0
            }
            
            test_results["tests_performed"].append(test2_details)
            test_results["clarification_flow_detailed"].append({
                "step": "clarification_response",
                "input": clarification_response.text,
                "enriched_question": result2.question,
                "rag_used": result2.rag_used,
                "success": test2_details["success"]
            })
            
            logger.info(f"üî• [TEST 2 R√âSULTAT] Question enrichie: {question_enriched}")
            logger.info(f"üî• [TEST 2 R√âSULTAT] RAG activ√©: {result2.rag_used}")
            logger.info(f"üî• [TEST 2 R√âSULTAT] Question finale: '{result2.question}'")
            
            if not test2_details["success"]:
                error_msg = f"Traitement clarification √âCHOU√â - Question: '{result2.question}', RAG: {result2.rag_used}"
                test_results["errors"].append(error_msg)
                logger.error(f"‚ùå {error_msg}")
        
        # Test 3: Validation param√®tres for√ßage
        logger.info("üîß Test 3: Validation FOR√áAGE des param√®tres")
        
        # Tester avec param√®tres initialement False
        disabled_question = EnhancedQuestionRequest(
            text="Question de test for√ßage",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=False,  # Sera FORC√â √† True
            require_coherence_check=False,     # Sera FORC√â √† True
            # üöÄ v3.7.0: Test for√ßage avec response_versions
            concision_level=ConcisionLevel.ULTRA_CONCISE,
            generate_all_versions=True
        )
        
        logger.info(f"üî• [TEST 3] Param√®tres initiaux: vagueness={disabled_question.enable_vagueness_detection}, coherence={disabled_question.require_coherence_check}")
        
        # Appeler endpoint public qui force les param√®tres
        result3 = await ask_expert_enhanced_v2_public(disabled_question, request)
        
        test3_details = {
            "test_name": "Validation FOR√áAGE param√®tres",
            "initial_vagueness": False,
            "initial_coherence": False,
            "forced_activation": True,
            "enhancements_applied": len(result3.ai_enhancements_used or []) > 0,
            "success": len(result3.ai_enhancements_used or []) > 0,
            "response_versions_forced": hasattr(result3, 'response_versions') and result3.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["tests_performed"].append(test3_details)
        
        logger.info(f"üî• [TEST 3 R√âSULTAT] Am√©liorations appliqu√©es: {len(result3.ai_enhancements_used or [])}")
        logger.info(f"üî• [TEST 3 R√âSULTAT] Liste am√©liorations: {result3.ai_enhancements_used}")
        
        if not test3_details["success"]:
            error_msg = "For√ßage param√®tres √âCHOU√â - Aucune am√©lioration appliqu√©e"
            test_results["errors"].append(error_msg)
            logger.error(f"‚ùå {error_msg}")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info("üî• R√âSUM√â TEST CLARIFICATION FORC√â:")
        logger.info(f"   - Tests r√©alis√©s: {len(test_results['tests_performed'])}")
        logger.info(f"   - Erreurs: {len(test_results['errors'])}")
        logger.info(f"   - Succ√®s global: {test_results['test_successful']}")
        
        if test_results["errors"]:
            for error in test_results["errors"]:
                logger.error(f"   ‚ùå {error}")
        
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique test clarification forc√©: {e}")
        logger.info("=" * 80)
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/validate-clarification-params")
async def validate_clarification_params(request: Request):
    """üî• NOUVEAU: Validation sp√©cifique du for√ßage des param√®tres de clarification (ORIGINAL PR√âSERV√â)"""
    
    try:
        logger.info("üîß VALIDATION PARAM√àTRES CLARIFICATION")
        
        validation_results = {
            "validation_successful": True,
            "timestamp": datetime.now().isoformat(),
            "parameter_tests": [],
            "errors": []
        }
        
        # Test diff√©rentes combinaisons de param√®tres
        test_cases = [
            {
                "name": "Param√®tres non d√©finis",
                "params": {"text": "Test sans param√®tres"},
                "expected_forced": True
            },
            {
                "name": "Param√®tres explicitement False", 
                "params": {
                    "text": "Test param√®tres False",
                    "enable_vagueness_detection": False,
                    "require_coherence_check": False
                },
                "expected_forced": True
            },
            {
                "name": "Param√®tres explicitement True",
                "params": {
                    "text": "Test param√®tres True", 
                    "enable_vagueness_detection": True,
                    "require_coherence_check": True
                },
                "expected_forced": True
            }
        ]
        
        for test_case in test_cases:
            logger.info(f"üîß Test: {test_case['name']}")
            
            # Cr√©er la requ√™te
            test_request = EnhancedQuestionRequest(
                conversation_id=str(uuid.uuid4()),
                language="fr",
                # üöÄ v3.7.0: Test validation avec response_versions
                concision_level=ConcisionLevel.CONCISE,
                generate_all_versions=True,
                **test_case["params"]
            )
            
            # Enregistrer les valeurs initiales
            initial_vagueness = getattr(test_request, 'enable_vagueness_detection', None)
            initial_coherence = getattr(test_request, 'require_coherence_check', None)
            
            logger.info(f"   Valeurs initiales: vagueness={initial_vagueness}, coherence={initial_coherence}")
            
            # Appeler l'endpoint public qui force
            result = await ask_expert_enhanced_v2_public(test_request, request)
            
            # V√©rifier le for√ßage
            has_enhancements = len(result.ai_enhancements_used or []) > 0
            clarification_active = any("clarification" in enh for enh in (result.ai_enhancements_used or []))
            
            test_result = {
                "test_name": test_case["name"],
                "initial_vagueness": initial_vagueness,
                "initial_coherence": initial_coherence,
                "enhancements_applied": result.ai_enhancements_used,
                "enhancements_count": len(result.ai_enhancements_used or []),
                "clarification_system_active": clarification_active,
                "success": has_enhancements,
                "response_versions_validated": hasattr(result, 'response_versions') and result.response_versions is not None  # üöÄ v3.7.0
            }
            
            validation_results["parameter_tests"].append(test_result)
            
            logger.info(f"   Am√©liorations appliqu√©es: {test_result['enhancements_count']}")
            logger.info(f"   Clarification active: {clarification_active}")
            logger.info(f"   Test r√©ussi: {test_result['success']}")
            
            if not test_result["success"]:
                error_msg = f"For√ßage √©chou√© pour: {test_case['name']}"
                validation_results["errors"].append(error_msg)
        
        # R√©sultat final
        validation_results["validation_successful"] = len(validation_results["errors"]) == 0
        
        logger.info(f"‚úÖ VALIDATION TERMIN√âE - Succ√®s: {validation_results['validation_successful']}")
        
        return validation_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur validation param√®tres: {e}")
        return {
            "validation_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "parameter_tests": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-clarification-detection")
async def test_clarification_detection(request: Request):
    """üß® NOUVEAU: Test sp√©cifique de la d√©tection clarification corrig√©e (ORIGINAL PR√âSERV√â)"""
    try:
        logger.info("=" * 80)
        logger.info("üß® D√âBUT TEST D√âTECTION CLARIFICATION CORRIG√âE")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "detection_tests": [],
            "errors": []
        }
        
        # Test 1: Question initiale (DOIT d√©clencher clarification)
        logger.info("üéØ Test 1: Question initiale n√©cessitant clarification")
        
        initial_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 12 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,  # EXPLICITE
            # üöÄ v3.7.0: Test detection avec response_versions
            concision_level=ConcisionLevel.CONCISE,
            generate_all_versions=True
        )
        
        logger.info(f"üß® [TEST 1] Question: '{initial_question.text}'")
        logger.info(f"üß® [TEST 1] is_clarification_response: {initial_question.is_clarification_response}")
        
        start_time = time.time()
        result1 = await expert_service.process_expert_question(
            request_data=initial_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        test1_result = {
            "test_name": "Question initiale - d√©tection clarification",
            "question": initial_question.text,
            "is_clarification_flag": initial_question.is_clarification_response,
            "clarification_triggered": result1.clarification_result is not None,
            "mode": result1.mode,
            "rag_bypassed": not result1.rag_used,
            "success": result1.clarification_result is not None,
            "response_versions_on_clarification": hasattr(result1, 'response_versions') and result1.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["detection_tests"].append(test1_result)
        
        logger.info(f"üß® [TEST 1 R√âSULTAT] Clarification d√©clench√©e: {test1_result['success']}")
        logger.info(f"üß® [TEST 1 R√âSULTAT] Mode: {result1.mode}")
        
        if not test1_result["success"]:
            test_results["errors"].append("Question initiale n'a pas d√©clench√© clarification")
        
        # Test 2: R√©ponse de clarification (DOIT traiter comme r√©ponse)
        logger.info("üé™ Test 2: R√©ponse de clarification")
        
        clarification_response = EnhancedQuestionRequest(
            text="Ross 308 m√¢les",
            conversation_id=initial_question.conversation_id,  # M√äME conversation
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=True,  # EXPLICITE
            original_question="Quel est le poids d'un poulet de 12 jours ?",
            clarification_entities={  # OPTIONNEL mais recommand√©
                "breed": "Ross 308",
                "sex": "m√¢les"
            },
            # üöÄ v3.7.0: Test response clarification avec versions
            concision_level=ConcisionLevel.DETAILED,
            generate_all_versions=True
        )
        
        logger.info(f"üß® [TEST 2] R√©ponse: '{clarification_response.text}'")
        logger.info(f"üß® [TEST 2] is_clarification_response: {clarification_response.is_clarification_response}")
        logger.info(f"üß® [TEST 2] original_question: '{clarification_response.original_question}'")
        logger.info(f"üß® [TEST 2] clarification_entities: {clarification_response.clarification_entities}")
        
        start_time2 = time.time()
        result2 = await expert_service.process_expert_question(
            request_data=clarification_response,
            request=request,
            current_user=None,
            start_time=start_time2
        )
        
        # V√©rifications Test 2
        question_enriched = "Ross 308" in result2.question and "m√¢les" in result2.question.lower()
        rag_activated = result2.rag_used
        
        test2_result = {
            "test_name": "R√©ponse clarification - traitement enrichi",
            "clarification_input": clarification_response.text,
            "is_clarification_flag": clarification_response.is_clarification_response,
            "original_question": clarification_response.original_question,
            "entities_provided": clarification_response.clarification_entities,
            "enriched_question": result2.question,
            "question_properly_enriched": question_enriched,
            "rag_activated": rag_activated,
            "mode": result2.mode,
            "success": question_enriched and rag_activated,
            "response_versions_after_enrichment": hasattr(result2, 'response_versions') and result2.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["detection_tests"].append(test2_result)
        
        logger.info(f"üß® [TEST 2 R√âSULTAT] Question enrichie: {question_enriched}")
        logger.info(f"üß® [TEST 2 R√âSULTAT] RAG activ√©: {rag_activated}")
        logger.info(f"üß® [TEST 2 R√âSULTAT] Question finale: '{result2.question}'")
        
        if not test2_result["success"]:
            test_results["errors"].append("R√©ponse clarification mal trait√©e")
        
        # Test 3: Question normale sans clarification (DOIT passer direct)
        logger.info("üìã Test 3: Question normale compl√®te")
        
        complete_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet Ross 308 m√¢le de 12 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,
            # üöÄ v3.7.0: Test question compl√®te avec response_versions
            concision_level=ConcisionLevel.STANDARD,
            generate_all_versions=True
        )
        
        start_time3 = time.time()
        result3 = await expert_service.process_expert_question(
            request_data=complete_question,
            request=request,
            current_user=None,
            start_time=start_time3
        )
        
        test3_result = {
            "test_name": "Question compl√®te - pas de clarification",
            "question": complete_question.text,
            "is_clarification_flag": complete_question.is_clarification_response,
            "clarification_not_triggered": result3.clarification_result is None,
            "rag_activated": result3.rag_used,
            "mode": result3.mode,
            "success": result3.clarification_result is None and result3.rag_used,
            "response_versions_direct": hasattr(result3, 'response_versions') and result3.response_versions is not None  # üöÄ v3.7.0
        }
        
        test_results["detection_tests"].append(test3_result)
        
        logger.info(f"üß® [TEST 3 R√âSULTAT] Pas de clarification: {test3_result['clarification_not_triggered']}")
        logger.info(f"üß® [TEST 3 R√âSULTAT] RAG activ√©: {test3_result['rag_activated']}")
        
        if not test3_result["success"]:
            test_results["errors"].append("Question compl√®te a d√©clench√© clarification inutile")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info("üß® R√âSUM√â TEST D√âTECTION CLARIFICATION:")
        logger.info(f"   - Tests r√©alis√©s: {len(test_results['detection_tests'])}")
        logger.info(f"   - Erreurs: {len(test_results['errors'])}")
        logger.info(f"   - Succ√®s global: {test_results['test_successful']}")
        
        if test_results["errors"]:
            for error in test_results["errors"]:
                logger.error(f"   ‚ùå {error}")
        
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test d√©tection clarification: {e}")
        logger.info("=" * 80)
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "detection_tests": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/simulate-frontend-clarification")
async def simulate_frontend_clarification(request: Request):
    """üß® NOUVEAU: Simulation compl√®te du flux frontend avec clarification (ORIGINAL PR√âSERV√â)"""
    try:
        logger.info("=" * 80)
        logger.info("üß® SIMULATION FLUX FRONTEND CLARIFICATION")
        
        simulation_results = {
            "simulation_successful": True,
            "timestamp": datetime.now().isoformat(),
            "steps": [],
            "errors": []
        }
        
        conversation_id = str(uuid.uuid4())
        
        # √âTAPE 1: Frontend envoie question initiale
        logger.info("üì± √âTAPE 1: Frontend envoie question initiale")
        
        frontend_request_1 = {
            "question": "Quel est le poids d'un poulet de 12 jours ?",
            "conversation_id": conversation_id,
            "language": "fr",
            # üöÄ v3.7.0: Test simulation avec response_versions
            "concision_level": "concise",
            "generate_all_versions": True
            # PAS de is_clarification_response (d√©faut False)
        }
        
        request_1 = EnhancedQuestionRequest(**frontend_request_1)
        
        logger.info(f"üß® [√âTAPE 1] Request frontend: {frontend_request_1}")
        
        result_1 = await ask_expert_enhanced_v2_public(request_1, request)
        
        step_1 = {
            "step": "1_initial_question",
            "frontend_request": frontend_request_1,
            "backend_response": {
                "mode": result_1.mode,
                "clarification_requested": result_1.clarification_result is not None,
                "rag_used": result_1.rag_used,
                "response_versions_present": hasattr(result_1, 'response_versions') and result_1.response_versions is not None  # üöÄ v3.7.0
            },
            "success": result_1.clarification_result is not None
        }
        
        simulation_results["steps"].append(step_1)
        
        logger.info(f"üß® [√âTAPE 1 R√âSULTAT] Clarification demand√©e: {step_1['success']}")
        
        if not step_1["success"]:
            simulation_results["errors"].append("√âtape 1: Clarification pas d√©clench√©e")
            
        # √âTAPE 2: Frontend envoie r√©ponse de clarification
        if step_1["success"]:
            logger.info("üì± √âTAPE 2: Frontend envoie r√©ponse clarification")
            
            # üß® CORRECTION: Frontend DOIT envoyer avec flag appropri√©
            frontend_request_2 = {
                "question": "Ross 308 m√¢les",
                "conversation_id": conversation_id,
                "language": "fr",
                "is_clarification_response": True,  # üß® CRITIQUE
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "clarification_entities": {  # üß® OPTIONNEL mais recommand√©
                    "breed": "Ross 308",
                    "sex": "m√¢les"
                },
                # üöÄ v3.7.0: Test frontend simulation avec response_versions
                "concision_level": "standard",
                "generate_all_versions": True
            }
            
            request_2 = EnhancedQuestionRequest(**frontend_request_2)
            
            logger.info(f"üß® [√âTAPE 2] Request frontend corrig√©e: {frontend_request_2}")
            
            result_2 = await ask_expert_enhanced_v2_public(request_2, request)
            
            # V√©rifications
            question_enriched = ("Ross 308" in result_2.question.lower() and 
                               ("m√¢le" in result_2.question.lower() or "male" in result_2.question.lower()))
            rag_used = result_2.rag_used
            
            step_2 = {
                "step": "2_clarification_response", 
                "frontend_request": frontend_request_2,
                "backend_response": {
                    "enriched_question": result_2.question,
                    "question_enriched": question_enriched,
                    "rag_used": rag_used,
                    "mode": result_2.mode,
                    "response_excerpt": result_2.response[:150] + "...",
                    "response_versions_generated": hasattr(result_2, 'response_versions') and result_2.response_versions is not None  # üöÄ v3.7.0
                },
                "success": question_enriched and rag_used
            }
            
            simulation_results["steps"].append(step_2)
            
            logger.info(f"üß® [√âTAPE 2 R√âSULTAT] Question enrichie: {question_enriched}")
            logger.info(f"üß® [√âTAPE 2 R√âSULTAT] RAG utilis√©: {rag_used}")
            logger.info(f"üß® [√âTAPE 2 R√âSULTAT] Question finale: '{result_2.question}'")
            
            if not step_2["success"]:
                simulation_results["errors"].append("√âtape 2: R√©ponse clarification mal trait√©e")
        
        # √âTAPE 3: Comparaison avec mauvaise approche (sans flag)
        logger.info("üì± √âTAPE 3: Simulation MAUVAISE approche (sans flag)")
        
        # Simuler ce que fait actuellement le frontend (INCORRECT)
        bad_frontend_request = {
            "question": "Ross 308 m√¢les",
            "conversation_id": conversation_id,
            "language": "fr",
            # üöÄ v3.7.0: M√™me les mauvaises requests ont response_versions
            "concision_level": "concise",
            "generate_all_versions": True
            # PAS de is_clarification_response ‚Üí trait√© comme nouvelle question
        }
        
        request_bad = EnhancedQuestionRequest(**bad_frontend_request)
        
        logger.info(f"üß® [√âTAPE 3] Mauvaise approche: {bad_frontend_request}")
        
        result_bad = await ask_expert_enhanced_v2_public(request_bad, request)
        
        step_3 = {
            "step": "3_bad_approach_without_flag",
            "frontend_request": bad_frontend_request,
            "backend_response": {
                "mode": result_bad.mode,
                "treated_as_new_question": "clarification" in result_bad.mode,
                "rag_used": result_bad.rag_used,
                "response_versions_still_generated": hasattr(result_bad, 'response_versions') and result_bad.response_versions is not None  # üöÄ v3.7.0
            },
            "problem": "Sans flag, trait√© comme nouvelle question au lieu de r√©ponse clarification"
        }
        
        simulation_results["steps"].append(step_3)
        
        logger.info(f"üß® [√âTAPE 3 R√âSULTAT] Trait√© comme nouvelle question: {step_3['backend_response']['treated_as_new_question']}")
        
        # R√©sultat final
        simulation_results["simulation_successful"] = len(simulation_results["errors"]) == 0
        
        # Instructions pour le frontend
        simulation_results["frontend_instructions"] = {
            "critical_fix": "Ajouter is_clarification_response=true lors d'une r√©ponse de clarification",
            "required_fields": {
                "is_clarification_response": True,
                "original_question": "Question qui a d√©clench√© la clarification",
                "clarification_entities": "Optionnel mais recommand√© pour √©viter re-extraction"
            },
            "example_correct_request": {
                "question": "Ross 308 m√¢les",
                "conversation_id": "UUID",
                "is_clarification_response": True,
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "clarification_entities": {
                    "breed": "Ross 308",
                    "sex": "m√¢les"
                },
                # üöÄ v3.7.0: Nouvelles instructions response_versions
                "concision_level": "concise",  # ou "ultra_concise", "standard", "detailed"
                "generate_all_versions": True   # pour avoir toutes les versions disponibles
            },
            # üöÄ v3.7.0: Instructions sp√©cifiques response_versions
            "response_versions_usage": {
                "backend_generates_all": "Le backend g√©n√®re automatiquement toutes les versions",
                "frontend_selects": "Le frontend peut choisir quelle version afficher",
                "available_levels": ["ultra_concise", "concise", "standard", "detailed"],
                "default_display": "Afficher 'concise' par d√©faut, permettre switch utilisateur"
            }
        }
        
        logger.info("üß® R√âSUM√â SIMULATION FRONTEND:")
        logger.info(f"   - √âtapes test√©es: {len(simulation_results['steps'])}")
        logger.info(f"   - Erreurs: {len(simulation_results['errors'])}")
        logger.info(f"   - Simulation r√©ussie: {simulation_results['simulation_successful']}")
        
        logger.info("=" * 80)
        
        return simulation_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur simulation frontend: {e}")
        logger.info("=" * 80)
        return {
            "simulation_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "steps": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-incomplete-entities")
async def test_incomplete_entities(request: Request):
    """üß™ Test sp√©cifique des entit√©s incompl√®tes (ORIGINAL PR√âSERV√â)"""
    try:
        logger.info("=" * 80)
        logger.info("üß™ D√âBUT TEST ENTIT√âS INCOMPL√àTES")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "entity_tests": [],
            "errors": []
        }
        
        conversation_id = str(uuid.uuid4())
        
        # Tests des diff√©rents cas d'entit√©s incompl√®tes
        entity_test_cases = [
            {
                "name": "Race seulement (incomplet)",
                "input": "Ross 308",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "incomplete_clarification_response",
                "should_succeed": False,
                "expected_missing": ["sexe"],
                "concision_level": ConcisionLevel.CONCISE  # üöÄ v3.7.0
            },
            {
                "name": "Sexe seulement (incomplet)",
                "input": "m√¢les",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "incomplete_clarification_response",
                "should_succeed": False,
                "expected_missing": ["race/souche"],
                "concision_level": ConcisionLevel.ULTRA_CONCISE  # üöÄ v3.7.0
            },
            {
                "name": "Information vague (incomplet)",
                "input": "poulets",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "incomplete_clarification_response", 
                "should_succeed": False,
                "expected_missing": ["race/souche", "sexe"],
                "concision_level": ConcisionLevel.STANDARD  # üöÄ v3.7.0
            },
            {
                "name": "Breed vague + sexe (partiellement incomplet)",
                "input": "Ross m√¢les",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "incomplete_clarification_response",
                "should_succeed": False,
                "expected_missing": ["race/souche"],  # "Ross" incomplet, doit √™tre "Ross 308"
                "concision_level": ConcisionLevel.DETAILED  # üöÄ v3.7.0
            },
            {
                "name": "Information compl√®te (succ√®s)",
                "input": "Ross 308 m√¢les",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "rag_enhanced",
                "should_succeed": True,
                "expected_missing": [],
                "concision_level": ConcisionLevel.CONCISE  # üöÄ v3.7.0
            },
            {
                "name": "Alternative compl√®te (succ√®s)",
                "input": "Cobb 500 femelles",
                "original_question": "Quel est le poids d'un poulet de 12 jours ?",
                "expected_mode": "rag_enhanced",
                "should_succeed": True,
                "expected_missing": [],
                "concision_level": ConcisionLevel.STANDARD  # üöÄ v3.7.0
            }
        ]
        
        for test_case in entity_test_cases:
            logger.info(f"üß™ Test: {test_case['name']}")
            
            test_request = EnhancedQuestionRequest(
                text=test_case["input"],
                conversation_id=conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question=test_case["original_question"],
                enable_vagueness_detection=True,
                # üöÄ v3.7.0: Test entit√©s incompl√®tes avec diff√©rents niveaux concision
                concision_level=test_case["concision_level"],
                generate_all_versions=True
            )
            
            logger.info(f"   Input: '{test_request.text}'")
            logger.info(f"   Expected success: {test_case['should_succeed']}")
            logger.info(f"   Concision level: {test_case['concision_level']}")
            
            start_time = time.time()
            result = await ask_expert_enhanced_v2_public(test_request, request)
            
            # Analyser le r√©sultat
            is_incomplete = "incomplete" in result.mode
            has_retry = result.clarification_result and result.clarification_result.get("retry_required", False)
            rag_used = result.rag_used
            
            # V√©rifier si le test correspond aux attentes
            test_passed = False
            if test_case["should_succeed"]:
                # Doit r√©ussir : RAG activ√©, pas de mode incomplete
                test_passed = rag_used and not is_incomplete
            else:
                # Doit √©chouer : mode incomplete, retry demand√©
                test_passed = is_incomplete and has_retry
            
            entity_test_result = {
                "test_name": test_case["name"],
                "input": test_case["input"],
                "expected_success": test_case["should_succeed"],
                "actual_mode": result.mode,
                "is_incomplete_detected": is_incomplete,
                "retry_requested": has_retry,
                "rag_used": rag_used,
                "test_passed": test_passed,
                "response_excerpt": result.response[:100] + "..." if len(result.response) > 100 else result.response,
                "concision_level_tested": test_case["concision_level"].value,  # üöÄ v3.7.0
                "response_versions_handled": hasattr(result, 'response_versions') and result.response_versions is not None  # üöÄ v3.7.0
            }
            
            # Ajouter informations manquantes d√©tect√©es
            if result.clarification_result and "missing_information" in result.clarification_result:
                entity_test_result["missing_info_detected"] = result.clarification_result["missing_information"]
            
            # üöÄ v3.7.0: Informations response_versions pour entit√©s incompl√®tes
            if hasattr(result, 'response_versions') and result.response_versions:
                entity_test_result["response_versions_count"] = len(result.response_versions)
                entity_test_result["response_versions_keys"] = list(result.response_versions.keys())
            
            test_results["entity_tests"].append(entity_test_result)
            
            logger.info(f"   Mode r√©sultat: {result.mode}")
            logger.info(f"   Incomplet d√©tect√©: {is_incomplete}")
            logger.info(f"   RAG utilis√©: {rag_used}")
            logger.info(f"   Test r√©ussi: {test_passed}")
            logger.info(f"   Response versions: {hasattr(result, 'response_versions') and result.response_versions is not None}")
            
            if not test_passed:
                error_msg = f"Test '{test_case['name']}' √©chou√©: attendu={test_case['should_succeed']}, mode={result.mode}"
                test_results["errors"].append(error_msg)
                logger.error(f"   ‚ùå {error_msg}")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        # Statistiques
        success_count = sum(1 for t in test_results["entity_tests"] if t["test_passed"])
        total_count = len(test_results["entity_tests"])
        
        test_results["statistics"] = {
            "total_tests": total_count,
            "successful_tests": success_count,
            "failed_tests": total_count - success_count,
            "success_rate": f"{(success_count/total_count)*100:.1f}%" if total_count > 0 else "0%",
            # üöÄ v3.7.0: Statistiques response_versions
            "response_versions_tests": sum(1 for t in test_results["entity_tests"] if t.get("response_versions_handled", False)),
            "concision_levels_tested": list(set(t.get("concision_level_tested") for t in test_results["entity_tests"]))
        }
        
        logger.info("üß™ R√âSUM√â TEST ENTIT√âS INCOMPL√àTES:")
        logger.info(f"   - Tests r√©alis√©s: {total_count}")
        logger.info(f"   - Succ√®s: {success_count}")
        logger.info(f"   - √âchecs: {total_count - success_count}")
        logger.info(f"   - Taux de r√©ussite: {test_results['statistics']['success_rate']}")
        logger.info(f"   - Tests response_versions: {test_results['statistics']['response_versions_tests']}")
        logger.info(f"   - Test global: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test entit√©s incompl√®tes: {e}")
        logger.info("=" * 80)
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "entity_tests": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-clarification-backend-fix")
async def test_clarification_backend_fix(request: Request):
    """üß® NOUVEAU v3.6.1: Test de la correction backend
    üöÄ MISE √Ä JOUR v3.7.0: Test avec support response_versions"""
    try:
        logger.info("=" * 80)
        logger.info("üß® TEST CORRECTION BACKEND v3.7.0 avec RESPONSE_VERSIONS")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "backend_tests": [],
            "errors": []
        }
        
        # Test 1: Question initiale
        test1_request = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 15 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,
            # üöÄ v3.7.0: Test correction backend avec response_versions
            concision_level=ConcisionLevel.CONCISE,
            generate_all_versions=True
        )
        
        logger.info("üéØ Test 1: Question initiale (doit d√©clencher clarification)")
        result1 = await ask_expert_enhanced_v2_public(test1_request, request)
        
        test1_result = {
            "test_name": "Question initiale",
            "clarification_triggered": result1.clarification_result is not None,
            "mode": result1.mode,
            "success": result1.clarification_result is not None,
            "response_versions_on_clarification": hasattr(result1, 'response_versions') and result1.response_versions is not None  # üöÄ v3.7.0
        }
        test_results["backend_tests"].append(test1_result)
        
        if not test1_result["success"]:
            test_results["errors"].append("Question initiale n'a pas d√©clench√© clarification")
        
        # Test 2: R√©ponse clarification compl√®te
        if test1_result["success"]:
            test2_request = EnhancedQuestionRequest(
                text="Ross 308 m√¢les",
                conversation_id=test1_request.conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 15 jours ?",
                clarification_entities={"breed": "Ross 308", "sex": "m√¢les"},
                # üöÄ v3.7.0: Test r√©ponse clarification avec response_versions
                concision_level=ConcisionLevel.DETAILED,
                generate_all_versions=True
            )
            
            logger.info("üé™ Test 2: R√©ponse clarification compl√®te")
            result2 = await ask_expert_enhanced_v2_public(test2_request, request)
            
            question_enriched = "Ross 308" in result2.question and "m√¢les" in result2.question.lower()
            
            test2_result = {
                "test_name": "R√©ponse clarification compl√®te",
                "question_enriched": question_enriched,
                "rag_used": result2.rag_used,
                "final_question": result2.question,
                "has_clarification_processing": hasattr(result2, 'clarification_processing'),
                "success": question_enriched and result2.rag_used,
                "response_versions_after_clarification": hasattr(result2, 'response_versions') and result2.response_versions is not None,  # üöÄ v3.7.0
                "response_versions_count": len(result2.response_versions) if hasattr(result2, 'response_versions') and result2.response_versions else 0  # üöÄ v3.7.0
            }
            test_results["backend_tests"].append(test2_result)
            
            if not test2_result["success"]:
                test_results["errors"].append("R√©ponse clarification mal trait√©e")
        
        # Test 3: R√©ponse clarification incompl√®te
        test3_request = EnhancedQuestionRequest(
            text="Ross seulement",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            is_clarification_response=True,
            original_question="Quel est le poids d'un poulet de 15 jours ?",
            # üöÄ v3.7.0: Test entit√©s incompl√®tes avec response_versions
            concision_level=ConcisionLevel.ULTRA_CONCISE,
            generate_all_versions=True
        )
        
        logger.info("üß™ Test 3: R√©ponse clarification incompl√®te")
        result3 = await ask_expert_enhanced_v2_public(test3_request, request)
        
        test3_result = {
            "test_name": "R√©ponse clarification incompl√®te",
            "detected_as_incomplete": "incomplete" in result3.mode,
            "retry_requested": result3.clarification_result and result3.clarification_result.get("retry_required", False),
            "success": "incomplete" in result3.mode,
            "response_versions_on_incomplete": hasattr(result3, 'response_versions'),  # üöÄ v3.7.0 (peut √™tre None pour les erreurs)
            "response_versions_none_for_error": not (hasattr(result3, 'response_versions') and result3.response_versions)  # üöÄ v3.7.0 (doit √™tre None pour les erreurs)
        }
        test_results["backend_tests"].append(test3_result)
        
        if not test3_result["success"]:
            test_results["errors"].append("Entit√©s incompl√®tes non d√©tect√©es")
        
        # üöÄ v3.7.0: Test 4 sp√©cifique response_versions
        logger.info("üöÄ Test 4: Validation response_versions avec correction backend")
        
        test4_request = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet Ross 308 m√¢le de 20 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,
            concision_level=ConcisionLevel.STANDARD,
            generate_all_versions=True
        )
        
        result4 = await ask_expert_enhanced_v2_public(test4_request, request)
        
        test4_result = {
            "test_name": "Validation response_versions backend",
            "question_complete": True,
            "rag_used": result4.rag_used,
            "response_versions_generated": hasattr(result4, 'response_versions') and result4.response_versions is not None,
            "response_versions_count": len(result4.response_versions) if hasattr(result4, 'response_versions') and result4.response_versions else 0,
            "all_versions_present": False,
            "success": False
        }
        
        # V√©rifier que toutes les versions sont pr√©sentes
        if hasattr(result4, 'response_versions') and result4.response_versions:
            expected_versions = ["ultra_concise", "concise", "standard", "detailed"]
            test4_result["versions_present"] = list(result4.response_versions.keys())
            test4_result["all_versions_present"] = all(v in result4.response_versions for v in expected_versions)
            test4_result["success"] = result4.rag_used and test4_result["all_versions_present"]
        
        test_results["backend_tests"].append(test4_result)
        
        if not test4_result["success"]:
            test_results["errors"].append("Response versions non g√©n√©r√©es correctement")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        # üöÄ v3.7.0: Statistiques response_versions
        test_results["response_versions_statistics"] = {
            "tests_with_response_versions": sum(1 for t in test_results["backend_tests"] if t.get("response_versions_generated", False) or t.get("response_versions_on_clarification", False)),
            "tests_total": len(test_results["backend_tests"]),
            "clarification_has_versions": any(t.get("response_versions_on_clarification", False) for t in test_results["backend_tests"]),
            "incomplete_properly_handles_versions": any(t.get("response_versions_none_for_error", False) for t in test_results["backend_tests"])
        }
        
        logger.info(f"‚úÖ TEST CORRECTION BACKEND v3.7.0: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        logger.info(f"üöÄ Response versions: {test_results['response_versions_statistics']['tests_with_response_versions']}/{test_results['response_versions_statistics']['tests_total']} tests")
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test correction backend: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.post("/debug/test-response-versions")
async def test_response_versions(request: Request):
    """üöÄ NOUVEAU v3.7.0: Test sp√©cifique du syst√®me response_versions"""
    try:
        logger.info("=" * 80)
        logger.info("üöÄ D√âBUT TEST RESPONSE_VERSIONS v3.7.0")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "version_tests": [],
            "errors": []
        }
        
        # Test diff√©rents niveaux de concision
        concision_test_cases = [
            {
                "name": "Ultra Concise",
                "level": ConcisionLevel.ULTRA_CONCISE,
                "question": "Quel est le poids d'un poulet Ross 308 m√¢le de 21 jours ?",
                "expected_short": True
            },
            {
                "name": "Concise", 
                "level": ConcisionLevel.CONCISE,
                "question": "Quel est le poids d'un poulet Cobb 500 femelle de 14 jours ?",
                "expected_short": False
            },
            {
                "name": "Standard",
                "level": ConcisionLevel.STANDARD, 
                "question": "Comment am√©liorer la croissance des poulets de 10 jours ?",
                "expected_short": False
            },
            {
                "name": "Detailed",
                "level": ConcisionLevel.DETAILED,
                "question": "Quels sont les facteurs influen√ßant la mortalit√© chez les poulets ?",
                "expected_short": False
            }
        ]
        
        for test_case in concision_test_cases:
            logger.info(f"üöÄ Test: {test_case['name']} - {test_case['level'].value}")
            
            test_request = EnhancedQuestionRequest(
                text=test_case["question"],
                conversation_id=str(uuid.uuid4()),
                language="fr",
                enable_vagueness_detection=True,
                concision_level=test_case["level"],
                generate_all_versions=True
            )
            
            start_time = time.time()
            result = await ask_expert_enhanced_v2_public(test_request, request)
            
            # Analyser le r√©sultat
            has_response_versions = hasattr(result, 'response_versions') and result.response_versions is not None
            versions_count = len(result.response_versions) if has_response_versions else 0
            
            # V√©rifier les versions attendues
            expected_versions = ["ultra_concise", "concise", "standard", "detailed"]
            all_versions_present = False
            version_lengths = {}
            
            if has_response_versions:
                all_versions_present = all(v in result.response_versions for v in expected_versions)
                version_lengths = {v: len(content) for v, content in result.response_versions.items()}
            
            # V√©rifier que la version s√©lectionn√©e correspond au niveau demand√©
            selected_version_correct = False
            if has_response_versions and test_case["level"].value in result.response_versions:
                selected_content = result.response_versions[test_case["level"].value]
                # La r√©ponse principale devrait correspondre √† la version s√©lectionn√©e
                selected_version_correct = len(selected_content) > 0
            
            version_test_result = {
                "test_name": test_case["name"],
                "concision_level": test_case["level"].value,
                "question": test_case["question"],
                "response_versions_generated": has_response_versions,
                "versions_count": versions_count,
                "all_versions_present": all_versions_present,
                "version_lengths": version_lengths,
                "selected_version_correct": selected_version_correct,
                "response_time_ms": result.response_time_ms,
                "rag_used": result.rag_used,
                "success": has_response_versions and all_versions_present and selected_version_correct
            }
            
            if has_response_versions:
                version_test_result["versions_available"] = list(result.response_versions.keys())
                
                # V√©rifier la progression des longueurs (ultra_concise < concise < standard < detailed)
                lengths = [version_lengths.get(v, 0) for v in expected_versions]
                proper_length_progression = all(lengths[i] <= lengths[i+1] for i in range(len(lengths)-1))
                version_test_result["proper_length_progression"] = proper_length_progression
                
                if not proper_length_progression:
                    version_test_result["success"] = False
            
            test_results["version_tests"].append(version_test_result)
            
            logger.info(f"   Versions g√©n√©r√©es: {has_response_versions}")
            logger.info(f"   Nombre de versions: {versions_count}")
            logger.info(f"   Toutes versions pr√©sentes: {all_versions_present}")
            logger.info(f"   Longueurs: {version_lengths}")
            logger.info(f"   Test r√©ussi: {version_test_result['success']}")
            
            if not version_test_result["success"]:
                error_msg = f"Test response_versions √©chou√© pour {test_case['name']}"
                test_results["errors"].append(error_msg)
                logger.error(f"   ‚ùå {error_msg}")
        
        # Test sp√©cial: clarification + response_versions
        logger.info("üé™ Test sp√©cial: Clarification avec response_versions")
        
        clarification_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 18 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False,
            concision_level=ConcisionLevel.STANDARD,
            generate_all_versions=True
        )
        
        clarification_result = await ask_expert_enhanced_v2_public(clarification_question, request)
        
        clarification_test = {
            "test_name": "Clarification avec response_versions",
            "clarification_triggered": clarification_result.clarification_result is not None,
            "response_versions_on_clarification": hasattr(clarification_result, 'response_versions'),
            "mode": clarification_result.mode,
            "success": clarification_result.clarification_result is not None
        }
        
        # Si clarification d√©clench√©e, tester la r√©ponse
        if clarification_test["clarification_triggered"]:
            clarification_response = EnhancedQuestionRequest(
                text="Hubbard femelles",
                conversation_id=clarification_question.conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 18 jours ?",
                clarification_entities={"breed": "Hubbard", "sex": "femelles"},
                concision_level=ConcisionLevel.DETAILED,
                generate_all_versions=True
            )
            
            response_result = await ask_expert_enhanced_v2_public(clarification_response, request)
            
            clarification_test.update({
                "clarification_response_processed": True,
                "question_enriched": "Hubbard" in response_result.question and "femelles" in response_result.question.lower(),
                "rag_used_after_clarification": response_result.rag_used,
                "response_versions_after_enrichment": hasattr(response_result, 'response_versions') and response_result.response_versions is not None,
                "versions_count_after_enrichment": len(response_result.response_versions) if hasattr(response_result, 'response_versions') and response_result.response_versions else 0
            })
            
            clarification_test["success"] = (clarification_test["question_enriched"] and 
                                           clarification_test["rag_used_after_clarification"] and 
                                           clarification_test["response_versions_after_enrichment"])
        
        test_results["version_tests"].append(clarification_test)
        
        if not clarification_test["success"]:
            test_results["errors"].append("Test clarification + response_versions √©chou√©")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        # Statistiques
        success_count = sum(1 for t in test_results["version_tests"] if t["success"])
        total_count = len(test_results["version_tests"])
        
        test_results["statistics"] = {
            "total_tests": total_count,
            "successful_tests": success_count,
            "failed_tests": total_count - success_count,
            "success_rate": f"{(success_count/total_count)*100:.1f}%" if total_count > 0 else "0%",
            "average_response_time": sum(t.get("response_time_ms", 0) for t in test_results["version_tests"] if "response_time_ms" in t) / len([t for t in test_results["version_tests"] if "response_time_ms" in t]),
            "concision_levels_tested": list(set(t.get("concision_level") for t in test_results["version_tests"] if t.get("concision_level")))
        }
        
        logger.info("üöÄ R√âSUM√â TEST RESPONSE_VERSIONS:")
        logger.info(f"   - Tests r√©alis√©s: {total_count}")
        logger.info(f"   - Succ√®s: {success_count}")
        logger.info(f"   - √âchecs: {total_count - success_count}")
        logger.info(f"   - Taux de r√©ussite: {test_results['statistics']['success_rate']}")
        logger.info(f"   - Temps moyen: {test_results['statistics']['average_response_time']:.0f}ms")
        logger.info(f"   - Test global: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test response_versions: {e}")
        logger.info("=" * 80)
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "version_tests": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/ask-with-clarification", response_model=EnhancedExpertResponse)
async def ask_with_forced_clarification(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üéØ NOUVEAU: Endpoint avec clarification GARANTIE pour questions techniques (ORIGINAL PR√âSERV√â)
    üöÄ MISE √Ä JOUR v3.7.0: Support response_versions"""
    
    start_time = time.time()
    
    try:
        logger.info("üéØ D√âBUT ask_with_forced_clarification v3.7.0")
        logger.info(f"üìù Question: {request_data.text}")
        
        # üöÄ v3.7.0: Support concision par d√©faut
        if not hasattr(request_data, 'concision_level') or request_data.concision_level is None:
            request_data.concision_level = ConcisionLevel.CONCISE
        if not hasattr(request_data, 'generate_all_versions') or request_data.generate_all_versions is None:
            request_data.generate_all_versions = True
        
        # V√âRIFICATION DIRECTE si c'est une question poids+√¢ge
        question_lower = request_data.text.lower()
        needs_clarification = False
        
        # Patterns simplifi√©s pour d√©tecter poids+√¢ge
        weight_age_patterns = [
            r'(?:poids|weight).*?(\d+)\s*(?:jour|day)',
            r'(\d+)\s*(?:jour|day).*?(?:poids|weight)',
            r'(?:quel|what).*?(?:poids|weight).*?(\d+)'
        ]
        
        # V√©rifier si question poids+√¢ge
        has_weight_age = any(re.search(pattern, question_lower) for pattern in weight_age_patterns)
        logger.info(f"üîç D√©tection poids+√¢ge: {has_weight_age}")
        
        if has_weight_age:
            # V√©rifier si race/sexe manquent
            breed_patterns = [r'(ross\s*308|cobb\s*500|hubbard)']
            sex_patterns = [r'(m√¢le|male|femelle|female|mixte|mixed)']
            
            has_breed = any(re.search(p, question_lower) for p in breed_patterns)
            has_sex = any(re.search(p, question_lower) for p in sex_patterns)
            
            logger.info(f"üè∑Ô∏è Race d√©tect√©e: {has_breed}")
            logger.info(f"‚öß Sexe d√©tect√©: {has_sex}")
            
            if not has_breed and not has_sex:
                needs_clarification = True
                logger.info("üéØ CLARIFICATION N√âCESSAIRE!")
        
        if needs_clarification:
            # D√âCLENCHER CLARIFICATION DIRECTE
            age_match = re.search(r'(\d+)\s*(?:jour|day)', question_lower)
            age = age_match.group(1) if age_match else "X"
            
            clarification_message = f"""Pour vous donner le poids de r√©f√©rence exact d'un poulet de {age} jours, j'ai besoin de :

‚Ä¢ **Race/souche** : Ross 308, Cobb 500, Hubbard, etc.
‚Ä¢ **Sexe** : M√¢les, femelles, ou troupeau mixte

Pouvez-vous pr√©ciser ces informations ?

**Exemples de r√©ponses :**
‚Ä¢ "Ross 308 m√¢les"
‚Ä¢ "Cobb 500 femelles"
‚Ä¢ "Hubbard troupeau mixte\""""
            
            logger.info("‚úÖ CLARIFICATION D√âCLENCH√âE!")
            
            return EnhancedExpertResponse(
                question=request_data.text,
                response=clarification_message,
                conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=int((time.time() - start_time) * 1000),
                mode="forced_performance_clarification",
                user=None,
                logged=True,
                validation_passed=True,
                clarification_result={
                    "clarification_requested": True,
                    "clarification_type": "performance_breed_sex_forced",
                    "missing_information": ["breed", "sex"],
                    "age_detected": age,
                    "confidence": 0.99
                },
                processing_steps=["forced_clarification_triggered"],
                ai_enhancements_used=["forced_performance_clarification"],
                # üöÄ v3.7.0: Pas de response_versions pour clarifications
                response_versions=None
            )
        
        logger.info("üìã Pas de clarification n√©cessaire, traitement normal")
        
        # Si pas besoin de clarification, traitement normal avec am√©liorations forc√©es
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        
        return await ask_expert_enhanced_v2_public(request_data, request)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur ask_with_forced_clarification: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

# =============================================================================
# CONFIGURATION & LOGGING FINAL COMPLET v3.7.0 üöÄ
# =============================================================================

logger.info("üöÄ" * 50)
logger.info("üöÄ [EXPERT ENDPOINTS] VERSION 3.7.0 - SUPPORT RESPONSE_VERSIONS!")
logger.info("üöÄ [NOUVELLES FONCTIONNALIT√âS v3.7.0]:")
logger.info("   ‚úÖ Support concision_level dans requests")
logger.info("   ‚úÖ Support generate_all_versions par d√©faut")
logger.info("   ‚úÖ response_versions dans les r√©ponses")
logger.info("   ‚úÖ G√©n√©ration multi-versions backend")
logger.info("   ‚úÖ S√©lection dynamique c√¥t√© frontend")
logger.info("   ‚úÖ Cache intelligent pour performance")
logger.info("   ‚úÖ M√©triques de g√©n√©ration d√©taill√©es")
logger.info("")
logger.info("üß® [CORRECTIONS v3.6.1 PR√âSERV√âES]:")
logger.info("   ‚úÖ Suppression assignations context_entities inexistant")
logger.info("   ‚úÖ Suppression assignations is_enriched inexistant")
logger.info("   ‚úÖ Conservation des entit√©s via clarification_entities uniquement")
logger.info("   ‚úÖ Logging am√©lior√© sans tentatives d'assignation")
logger.info("   ‚úÖ M√©tadonn√©es propag√©es via response au lieu de request")
logger.info("   ‚úÖ TOUS LES ENDPOINTS ORIGINAUX PR√âSERV√âS")
logger.info("")
logger.info("üîß [ENDPOINTS MISE √Ä JOUR v3.7.0]:")
logger.info("   - POST /ask-enhanced-v2 (+ response_versions)")
logger.info("   - POST /ask-enhanced-v2-public (+ response_versions)")
logger.info("   - POST /ask-enhanced (legacy ‚Üí v2 + response_versions)")
logger.info("   - POST /ask-enhanced-public (legacy ‚Üí v2 + response_versions)")
logger.info("   - POST /ask (compatible ‚Üí v2 + response_versions)")
logger.info("   - POST /ask-public (compatible ‚Üí v2 + response_versions)")
logger.info("   - POST /ask-with-clarification (+ response_versions)")
logger.info("   - POST /feedback (support qualit√© d√©taill√©e)")
logger.info("   - GET /topics (enrichi avec statut am√©liorations)")
logger.info("   - GET /system-status (focus clarification + forced + response_versions)")
logger.info("   - POST /debug/test-enhancements (+ response_versions)")
logger.info("   - POST /debug/test-clarification (+ response_versions)")
logger.info("   - POST /debug/test-clarification-forced (+ response_versions)")
logger.info("   - POST /debug/validate-clarification-params (+ response_versions)")
logger.info("   - POST /debug/test-clarification-detection (+ response_versions)")
logger.info("   - POST /debug/simulate-frontend-clarification (+ response_versions)")
logger.info("   - POST /debug/test-incomplete-entities (+ response_versions)")
logger.info("   - POST /debug/test-clarification-backend-fix (+ response_versions)")
logger.info("   - POST /debug/test-response-versions (NOUVEAU v3.7.0)")
logger.info("")
logger.info("üìã [EXEMPLE REQUEST v3.7.0]:")
logger.info("   {")
logger.info('     "text": "Quel est le poids d\'un poulet de 12 jours ?",')
logger.info('     "concision_level": "concise",')
logger.info('     "generate_all_versions": true,')
logger.info('     "conversation_id": "uuid...",')
logger.info('     "language": "fr"')
logger.info("   }")
logger.info("")
logger.info("üìã [EXEMPLE RESPONSE v3.7.0]:")
logger.info("   {")
logger.info('     "response": "Version concise de la r√©ponse",')
logger.info('     "response_versions": {')
logger.info('       "ultra_concise": "350-400g",')
logger.info('       "concise": "Le poids normal est de 350-400g √† cet √¢ge.",')
logger.info('       "standard": "Le poids normal... avec conseils.",')
logger.info('       "detailed": "R√©ponse compl√®te et d√©taill√©e..."')
logger.info('     },')
logger.info('     "conversation_id": "uuid...",')
logger.info('     "rag_used": true,')
logger.info('     "mode": "rag_enhanced",')
logger.info('     "ai_enhancements_used": [...]')
logger.info("   }")
logger.info("")
logger.info("üìã [EXEMPLE CLARIFICATION REQUEST v3.7.0]:")
logger.info("   {")
logger.info('     "text": "Ross 308 m√¢les",')
logger.info('     "conversation_id": "uuid...",')
logger.info('     "is_clarification_response": true,')
logger.info('     "original_question": "Quel est le poids d\'un poulet de 12 jours ?",')
logger.info('     "clarification_entities": {"breed": "Ross 308", "sex": "m√¢les"},')
logger.info('     "concision_level": "standard",')
logger.info('     "generate_all_versions": true')
logger.info("   }")
logger.info("")
logger.info("üéØ [R√âSULTAT ATTENDU v3.7.0]:")
logger.info("   ‚úÖ Backend d√©marre SANS erreurs de syntaxe")
logger.info("   ‚úÖ 'Ross 308 m√¢les' trait√© comme R√âPONSE clarification")
logger.info("   ‚úÖ Question enrichie: 'Quel est le poids... pour Ross 308 m√¢les'") 
logger.info("   ‚úÖ M√©tadonn√©es: response.clarification_processing accessible")
logger.info("   ‚úÖ RAG activ√© avec question enrichie")
logger.info("   ‚úÖ response_versions g√©n√©r√©es automatiquement")
logger.info("   ‚úÖ 4 versions disponibles: ultra_concise, concise, standard, detailed")
logger.info("   ‚úÖ Frontend peut choisir quelle version afficher")
logger.info("   ‚úÖ Cache intelligent pour performance optimale")
logger.info("   ‚úÖ R√©ponse pr√©cise: poids exact Ross 308 m√¢les 12 jours")
logger.info("   ‚úÖ Entit√©s incompl√®tes ‚Üí retry intelligent avec exemples")
logger.info("   ‚úÖ TOUS endpoints de compatibilit√© ET debug pr√©serv√©s")
logger.info("   ‚úÖ Tests automatiques pour validation compl√®te")
logger.info("   ‚úÖ SYNTAXE PYTHON 100% CORRECTE - READY FOR DEPLOYMENT")
logger.info("   ‚úÖ BACKWARD COMPATIBILITY GARANTIE")
logger.info("üöÄ" * 50)