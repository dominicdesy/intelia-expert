"""
app/api/v1/expert.py - ENDPOINTS PRINCIPAUX EXPERT SYSTEM

üî• CORRECTIONS CRITIQUES APPLIQU√âES:
1. ‚úÖ For√ßage syst√©matique de enable_vagueness_detection=True
2. ‚úÖ Logging am√©lior√© du flux de clarification
3. ‚úÖ Debug sp√©cifique pour tra√ßabilit√© clarification
4. ‚úÖ Validation forc√©e des param√®tres de clarification
5. ‚úÖ Endpoints de test d√©di√©s clarification

VERSION FINALE CORRIG√âE : Support complet des nouvelles am√©liorations API + Clarification intelligente FORC√âE
+ TOUTES LES FONCTIONS ORIGINALES PR√âSERV√âES
"""

import os
import logging
import uuid
import time
import re
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest
from .expert_services import ExpertService
from .expert_utils import get_user_id_from_request, extract_breed_and_sex_from_clarification

router = APIRouter(tags=["expert-enhanced"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Service principal
expert_service = ExpertService()

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC CLARIFICATION FORC√âE üî•
# =============================================================================

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    üî• ENDPOINT EXPERT FINAL avec CLARIFICATION FORC√âE:
    - Activation automatique du syst√®me de clarification
    - Logging d√©taill√© du flux de clarification
    - Debug sp√©cifique pour tra√ßabilit√©
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 - CLARIFICATION FORC√âE ACTIV√âE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        
        # üî• CORRECTION CRITIQUE 1: FOR√áAGE SYST√âMATIQUE DES AM√âLIORATIONS
        original_vagueness = getattr(request_data, 'enable_vagueness_detection', None)
        original_coherence = getattr(request_data, 'require_coherence_check', None)
        
        # FORCER l'activation - AUCUNE EXCEPTION
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        
        logger.info("üî• [CLARIFICATION FORC√âE] Param√®tres forc√©s:")
        logger.info(f"   - enable_vagueness_detection: {original_vagueness} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - require_coherence_check: {original_coherence} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - is_clarification_response: {getattr(request_data, 'is_clarification_response', False)}")
        
        # üî• LOGGING SP√âCIFIQUE CLARIFICATION
        if hasattr(request_data, 'is_clarification_response') and request_data.is_clarification_response:
            logger.info("üé™ [FLUX CLARIFICATION] Traitement r√©ponse de clarification:")
            logger.info(f"   - Question originale: {getattr(request_data, 'original_question', 'N/A')}")
            logger.info(f"   - Contexte clarification: {getattr(request_data, 'clarification_context', {})}")
        else:
            logger.info("üéØ [FLUX CLARIFICATION] Traitement question initiale - d√©tection active")
        
        # D√©l√©guer le traitement au service am√©lior√©
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=current_user,
            start_time=start_time
        )
        
        # üî• LOGGING R√âSULTATS CLARIFICATION
        logger.info("üî• [R√âSULTATS CLARIFICATION]:")
        logger.info(f"   - Mode final: {response.mode}")
        logger.info(f"   - Clarification d√©clench√©e: {response.clarification_result is not None}")
        logger.info(f"   - RAG utilis√©: {response.rag_used}")
        
        if response.clarification_result:
            clarif = response.clarification_result
            logger.info(f"   - Type clarification: {clarif.get('clarification_type', 'N/A')}")
            logger.info(f"   - Infos manquantes: {clarif.get('missing_information', [])}")
            logger.info(f"   - Confiance: {clarif.get('confidence', 0)}")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 - Temps: {response.response_time_ms}ms")
        logger.info(f"ü§ñ Am√©liorations: {len(response.ai_enhancements_used or [])} features")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üî• ENDPOINT PUBLIC avec CLARIFICATION FORC√âE GARANTIE"""
    start_time = time.time()
    
    try:
        logger.info("=" * 100)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public - CLARIFICATION PUBLIQUE FORC√âE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        
        # üî• CORRECTION CRITIQUE 2: FOR√áAGE ABSOLU POUR ENDPOINT PUBLIC
        logger.info("üî• [PUBLIC ENDPOINT] Activation FORC√âE des am√©liorations:")
        
        original_settings = {
            'vagueness': getattr(request_data, 'enable_vagueness_detection', None),
            'coherence': getattr(request_data, 'require_coherence_check', None),
            'detailed_rag': getattr(request_data, 'detailed_rag_scoring', None),
            'quality_metrics': getattr(request_data, 'enable_quality_metrics', None)
        }
        
        # FOR√áAGE MAXIMAL pour endpoint public
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        request_data.detailed_rag_scoring = True
        request_data.enable_quality_metrics = True
        
        logger.info("üî• [FOR√áAGE PUBLIC] Changements appliqu√©s:")
        for key, (old_val, new_val) in {
            'vagueness_detection': (original_settings['vagueness'], True),
            'coherence_check': (original_settings['coherence'], True),
            'detailed_rag': (original_settings['detailed_rag'], True),
            'quality_metrics': (original_settings['quality_metrics'], True)
        }.items():
            logger.info(f"   - {key}: {old_val} ‚Üí {new_val} (FORC√â)")
        
        # üî• DEBUG SP√âCIFIQUE CLARIFICATION PUBLIQUE
        if hasattr(request_data, 'is_clarification_response') and request_data.is_clarification_response:
            logger.info("üé™ [PUBLIC CLARIFICATION] Mode r√©ponse clarification:")
            logger.info(f"   - Texte r√©ponse: '{request_data.text}'")
            logger.info(f"   - Conversation ID: {request_data.conversation_id}")
        else:
            logger.info("üéØ [PUBLIC CLARIFICATION] Mode d√©tection initiale")
        
        # D√©l√©guer le traitement
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=None,  # Mode public
            start_time=start_time
        )
        
        # üî• VALIDATION R√âSULTATS CLARIFICATION
        logger.info("üî• [VALIDATION PUBLIQUE]:")
        logger.info(f"   - Clarification syst√®me actif: {'clarification' in response.mode}")
        logger.info(f"   - Am√©liorations appliqu√©es: {response.ai_enhancements_used}")
        logger.info(f"   - Mode final: {response.mode}")
        
        # V√©rification critique
        if not response.ai_enhancements_used:
            logger.warning("‚ö†Ô∏è [ALERTE] Aucune am√©lioration d√©tect√©e - possible probl√®me!")
        
        if response.enable_vagueness_detection is False:
            logger.warning("‚ö†Ô∏è [ALERTE] Vagueness detection non activ√©e - v√©rifier for√ßage!")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public - Mode: {response.mode}")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public: {e}")
        logger.info("=" * 100)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINTS DE COMPATIBILIT√â AVEC FOR√áAGE üî•
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© v1 - FOR√áAGE APPLIQU√â"""
    logger.info("üîÑ [LEGACY] Redirection avec FOR√áAGE vers v2")
    
    # üî• FOR√áAGE LEGACY
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public_legacy(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© v1 - FOR√áAGE APPLIQU√â"""
    logger.info("üîÑ [LEGACY PUBLIC] Redirection avec FOR√áAGE vers v2")
    
    # üî• FOR√áAGE LEGACY PUBLIC
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    
    return await ask_expert_enhanced_v2_public(request_data, request)

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """Endpoint de compatibilit√© original - FOR√áAGE TOTAL"""
    logger.info("üîÑ [COMPATIBLE] Redirection avec FOR√áAGE TOTAL vers v2")
    
    # üî• FOR√áAGE COMPATIBILIT√â TOTALE
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    request_data.detailed_rag_scoring = True
    request_data.enable_quality_metrics = True
    
    return await ask_expert_enhanced_v2(request_data, request, current_user)

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public de compatibilit√© original - FOR√áAGE TOTAL"""
    logger.info("üîÑ [COMPATIBLE PUBLIC] Redirection avec FOR√áAGE TOTAL vers v2")
    
    # üî• FOR√áAGE COMPATIBILIT√â PUBLIQUE TOTALE
    request_data.enable_vagueness_detection = True
    request_data.require_coherence_check = True
    request_data.detailed_rag_scoring = True
    request_data.enable_quality_metrics = True
    
    return await ask_expert_enhanced_v2_public(request_data, request)

# =============================================================================
# ENDPOINT FEEDBACK AM√âLIOR√â (ORIGINAL PR√âSERV√â)
# =============================================================================

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION FINALE avec support qualit√©"""
    try:
        logger.info(f"üìä [Feedback] Re√ßu: {feedback_data.rating} pour {feedback_data.conversation_id}")
        
        if feedback_data.quality_feedback:
            logger.info(f"üìà [Feedback] Qualit√© d√©taill√©e: {len(feedback_data.quality_feedback)} m√©triques")
        
        result = await expert_service.process_feedback(feedback_data)
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Feedback] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur feedback: {str(e)}")

# =============================================================================
# ENDPOINT TOPICS AM√âLIOR√â (ORIGINAL PR√âSERV√â)
# =============================================================================

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION FINALE"""
    try:
        return await expert_service.get_suggested_topics(language)
    except Exception as e:
        logger.error(f"‚ùå [Topics] Erreur: {e}")
        raise HTTPException(status_code=500, detail="Erreur topics")

# =============================================================================
# ENDPOINTS DE DEBUG ET MONITORING AVEC CLARIFICATION (ORIGINAUX + NOUVEAUX)
# =============================================================================

@router.get("/system-status")
async def get_system_status():
    """Statut syst√®me avec focus clarification (ORIGINAL + AM√âLIOR√â)"""
    try:
        status = {
            "system_available": True,
            "timestamp": datetime.now().isoformat(),
            "components": {
                "expert_service": True,
                "rag_system": True,
                "enhancement_service": True,
                "integrations_manager": expert_service.integrations.get_system_status(),
                "clarification_system": True,  # ‚úÖ FOCUS
                "forced_clarification": True   # ‚úÖ NOUVEAU
            },
            "enhanced_capabilities": [
                "vagueness_detection",
                "context_coherence_check", 
                "detailed_rag_scoring",
                "enhanced_fallback",
                "quality_metrics",
                "debug_mode",
                "performance_breakdown",
                "smart_clarification_breed_sex",
                "clarification_response_processing",
                "incomplete_clarification_handling"
            ],
            "enhanced_endpoints": [
                "/ask-enhanced-v2",
                "/ask-enhanced-v2-public", 
                "/feedback (with quality)",
                "/topics (enhanced)",
                "/system-status",
                "/debug/test-enhancements",
                "/debug/test-clarification",
                "/debug/test-clarification-forced",      # ‚úÖ NOUVEAU
                "/debug/validate-clarification-params"   # ‚úÖ NOUVEAU
            ],
            "api_version": "v2_enhanced_forced_clarification",
            "backward_compatibility": True,
            "clarification_features": {
                "breed_sex_detection": True,
                "automatic_clarification": True,
                "follow_up_handling": True,
                "multilingual_support": ["fr", "en", "es"],
                "forced_activation": True,      # ‚úÖ GARANTI
                "debug_endpoints": True         # ‚úÖ NOUVEAU
            },
            "forced_parameters": {
                "vagueness_detection_always_on": True,  # ‚úÖ GARANTI
                "coherence_check_always_on": True,      # ‚úÖ GARANTI
                "backwards_compatibility": True
            }
        }
        
        return status
        
    except Exception as e:
        logger.error(f"‚ùå [System] Erreur status: {e}")
        return {
            "system_available": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.post("/debug/test-enhancements")
async def test_enhancements(request: Request):
    """Test toutes les am√©liorations avec une question de test (ORIGINAL PR√âSERV√â)"""
    try:
        # Question de test qui active toutes les am√©liorations
        test_question = EnhancedQuestionRequest(
            text="Quel est leur poids au jour 18 ?",  # Question avec pronom contextuel
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            require_coherence_check=True,
            detailed_rag_scoring=True,
            enable_quality_metrics=True,
            debug_mode=True
        )
        
        # Simuler contexte conversationnel (Ross 308 mentionn√© avant)
        if expert_service.integrations.intelligent_memory_available:
            try:
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user",
                    message="Qu'est-ce que Ross 308 ?",
                    role="user",
                    language="fr"
                )
                expert_service.integrations.add_message_to_conversation(
                    conversation_id=test_question.conversation_id,
                    user_id="test_user", 
                    message="Le Ross 308 est une race de poulet de chair...",
                    role="assistant",
                    language="fr"
                )
            except Exception:
                pass  # Pas critique pour le test
        
        start_time = time.time()
        
        # Traiter la question de test
        result = await expert_service.process_expert_question(
            request_data=test_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        # Analyser les r√©sultats
        test_results = {
            "test_successful": True,
            "question": test_question.text,
            "conversation_id": test_question.conversation_id,
            "user_id": "test_user",
            "timestamp": datetime.now().isoformat(),
            "components_tested": {
                "vagueness_detection": result.vagueness_detection is not None,
                "context_coherence": result.context_coherence is not None,
                "document_relevance": result.document_relevance is not None,
                "quality_metrics": result.quality_metrics is not None,
                "debug_info": result.debug_info is not None,
                "performance_breakdown": result.performance_breakdown is not None,
                "ai_enhancements_used": len(result.ai_enhancements_used or []) > 0,
                "clarification_system": "smart_performance_clarification" in (result.ai_enhancements_used or [])
            },
            "enhancement_results": {
                "ai_enhancements_count": len(result.ai_enhancements_used or []),
                "processing_steps_count": len(result.processing_steps or []),
                "response_time_ms": result.response_time_ms,
                "mode": result.mode,
                "clarification_triggered": result.clarification_result is not None
            },
            "errors": []
        }
        
        # V√©rifications de qualit√©
        if not result.ai_enhancements_used:
            test_results["errors"].append("Aucune am√©lioration IA utilis√©e")
        
        if result.response_time_ms > 10000:  # 10 secondes
            test_results["errors"].append(f"Temps de r√©ponse trop √©lev√©: {result.response_time_ms}ms")
        
        if len(test_results["errors"]) > 0:
            test_results["test_successful"] = False
        
        logger.info(f"‚úÖ [Expert Enhanced] Test des am√©liorations: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test am√©liorations: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "components_tested": {},
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/test-clarification")
async def test_clarification_system(request: Request):
    """Test sp√©cifique du syst√®me de clarification intelligent (ORIGINAL PR√âSERV√â)"""
    try:
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": []
        }
        
        # Test 1: Question n√©cessitant clarification race/sexe
        logger.info("üéØ Test 1: Question poids sans race/sexe")
        
        clarification_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 12 jours ?",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,
            is_clarification_response=False
        )
        
        start_time = time.time()
        result1 = await expert_service.process_expert_question(
            request_data=clarification_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        test1_result = {
            "test_name": "D√©tection question n√©cessitant clarification",
            "question": clarification_question.text,
            "clarification_requested": result1.clarification_result is not None,
            "mode": result1.mode,
            "enhancements_used": result1.ai_enhancements_used or [],
            "success": "smart_performance_clarification" in result1.mode
        }
        
        test_results["tests_performed"].append(test1_result)
        
        if not test1_result["success"]:
            test_results["errors"].append("Clarification automatique non d√©clench√©e")
        
        # Test 2: Traitement r√©ponse de clarification
        if test1_result["clarification_requested"]:
            logger.info("üé™ Test 2: Traitement r√©ponse clarification")
            
            clarification_response = EnhancedQuestionRequest(
                text="Ross 308 m√¢les",
                conversation_id=clarification_question.conversation_id,
                language="fr",
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 12 jours ?",
                clarification_context={
                    "missing_information": ["breed", "sex"],
                    "clarification_type": "performance_breed_sex"
                }
            )
            
            start_time2 = time.time()
            result2 = await expert_service.process_expert_question(
                request_data=clarification_response,
                request=request,
                current_user=None,
                start_time=start_time2
            )
            
            test2_result = {
                "test_name": "Traitement r√©ponse clarification",
                "clarification_response": clarification_response.text,
                "question_enriched": "Ross 308" in result2.question and "m√¢les" in result2.question,
                "rag_used": result2.rag_used,
                "mode": result2.mode,
                "success": result2.rag_used and "Ross 308" in result2.question
            }
            
            test_results["tests_performed"].append(test2_result)
            
            if not test2_result["success"]:
                test_results["errors"].append("Traitement clarification √©chou√©")
        
        # Test 3: Extraction race/sexe
        logger.info("üîç Test 3: Extraction entit√©s")
        
        extraction_tests = [
            ("Ross 308 m√¢les", {"breed": "Ross 308", "sex": "m√¢les"}),
            ("Cobb 500 femelles", {"breed": "Cobb 500", "sex": "femelles"}),
            ("Hubbard troupeau mixte", {"breed": "Hubbard", "sex": "mixte"})
        ]
        
        extraction_results = []
        for test_text, expected in extraction_tests:
            extracted = extract_breed_and_sex_from_clarification(test_text, "fr")
            success = extracted["breed"] == expected["breed"] and extracted["sex"] == expected["sex"]
            
            extraction_results.append({
                "input": test_text,
                "expected": expected,
                "extracted": extracted,
                "success": success
            })
            
            if not success:
                test_results["errors"].append(f"Extraction √©chou√©e pour: {test_text}")
        
        test_results["tests_performed"].append({
            "test_name": "Extraction breed/sex",
            "extraction_results": extraction_results,
            "success": all(r["success"] for r in extraction_results)
        })
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info(f"‚úÖ [Expert Enhanced] Test clarification: {'SUCC√àS' if test_results['test_successful'] else '√âCHEC'}")
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur test clarification: {e}")
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

# =============================================================================
# NOUVEAUX ENDPOINTS DE DEBUG CLARIFICATION üî•
# =============================================================================

@router.post("/debug/test-clarification-forced")
async def test_clarification_system_forced(request: Request):
    """üî• NOUVEAU: Test FORC√â du syst√®me de clarification avec logging d√©taill√©"""
    try:
        logger.info("=" * 80)
        logger.info("üî• D√âBUT TEST CLARIFICATION FORC√â")
        
        test_results = {
            "test_successful": True,
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [],
            "clarification_flow_detailed": []
        }
        
        # Test 1: Question GARANTIE de d√©clencher clarification
        logger.info("üéØ Test 1: Question poids sans race/sexe - FOR√áAGE GARANTI")
        
        test_question = EnhancedQuestionRequest(
            text="Quel est le poids d'un poulet de 15 jours ?",  # Question claire n√©cessitant clarification
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=True,  # FORC√â
            require_coherence_check=True,     # FORC√â
            is_clarification_response=False
        )
        
        logger.info(f"üî• [TEST 1] Question de test: '{test_question.text}'")
        logger.info(f"üî• [TEST 1] Param√®tres: vagueness={test_question.enable_vagueness_detection}, coherence={test_question.require_coherence_check}")
        
        start_time = time.time()
        result1 = await expert_service.process_expert_question(
            request_data=test_question,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        # Analyse d√©taill√©e Test 1
        clarification_triggered = result1.clarification_result is not None
        has_clarification_mode = "clarification" in result1.mode
        
        test1_details = {
            "test_name": "D√©tection clarification automatique FORC√âE",
            "question": test_question.text,
            "clarification_result_exists": clarification_triggered,
            "mode_contains_clarification": has_clarification_mode,
            "final_mode": result1.mode,
            "enhancements_used": result1.ai_enhancements_used or [],
            "clarification_details": result1.clarification_result,
            "success": clarification_triggered or has_clarification_mode,
            "rag_bypassed": not result1.rag_used  # Clarification doit bypasser RAG
        }
        
        test_results["tests_performed"].append(test1_details)
        test_results["clarification_flow_detailed"].append({
            "step": "initial_question",
            "triggered": test1_details["success"],
            "mode": result1.mode,
            "response_excerpt": result1.response[:100] + "..." if len(result1.response) > 100 else result1.response
        })
        
        logger.info(f"üî• [TEST 1 R√âSULTAT] Clarification d√©clench√©e: {test1_details['success']}")
        logger.info(f"üî• [TEST 1 R√âSULTAT] Mode: {result1.mode}")
        
        if not test1_details["success"]:
            error_msg = f"Clarification forc√©e √âCHOU√âE - Mode: {result1.mode}, RAG utilis√©: {result1.rag_used}"
            test_results["errors"].append(error_msg)
            logger.error(f"‚ùå {error_msg}")
        
        # Test 2: R√©ponse √† la clarification
        if test1_details["success"]:
            logger.info("üé™ Test 2: Traitement r√©ponse clarification FORC√âE")
            
            clarification_response = EnhancedQuestionRequest(
                text="Ross 308 m√¢les",
                conversation_id=test_question.conversation_id,
                language="fr",
                enable_vagueness_detection=True,  # FORC√â
                require_coherence_check=True,     # FORC√â
                is_clarification_response=True,
                original_question="Quel est le poids d'un poulet de 15 jours ?",
                clarification_context={
                    "missing_information": ["breed", "sex"],
                    "clarification_type": "performance_breed_sex"
                }
            )
            
            logger.info(f"üî• [TEST 2] R√©ponse clarification: '{clarification_response.text}'")
            logger.info(f"üî• [TEST 2] is_clarification_response: {clarification_response.is_clarification_response}")
            
            start_time2 = time.time()
            result2 = await expert_service.process_expert_question(
                request_data=clarification_response,
                request=request,
                current_user=None,
                start_time=start_time2
            )
            
            # Analyse Test 2
            question_enriched = ("Ross 308" in result2.question.lower() and 
                               ("m√¢le" in result2.question.lower() or "male" in result2.question.lower()))
            
            test2_details = {
                "test_name": "Traitement r√©ponse clarification FORC√âE",
                "clarification_input": clarification_response.text,
                "enriched_question": result2.question,
                "question_properly_enriched": question_enriched,
                "rag_activated": result2.rag_used,
                "final_mode": result2.mode,
                "success": result2.rag_used and question_enriched
            }
            
            test_results["tests_performed"].append(test2_details)
            test_results["clarification_flow_detailed"].append({
                "step": "clarification_response",
                "input": clarification_response.text,
                "enriched_question": result2.question,
                "rag_used": result2.rag_used,
                "success": test2_details["success"]
            })
            
            logger.info(f"üî• [TEST 2 R√âSULTAT] Question enrichie: {question_enriched}")
            logger.info(f"üî• [TEST 2 R√âSULTAT] RAG activ√©: {result2.rag_used}")
            logger.info(f"üî• [TEST 2 R√âSULTAT] Question finale: '{result2.question}'")
            
            if not test2_details["success"]:
                error_msg = f"Traitement clarification √âCHOU√â - Question: '{result2.question}', RAG: {result2.rag_used}"
                test_results["errors"].append(error_msg)
                logger.error(f"‚ùå {error_msg}")
        
        # Test 3: Validation param√®tres for√ßage
        logger.info("üîß Test 3: Validation FOR√áAGE des param√®tres")
        
        # Tester avec param√®tres initialement False
        disabled_question = EnhancedQuestionRequest(
            text="Question de test for√ßage",
            conversation_id=str(uuid.uuid4()),
            language="fr",
            enable_vagueness_detection=False,  # Sera FORC√â √† True
            require_coherence_check=False      # Sera FORC√â √† True
        )
        
        logger.info(f"üî• [TEST 3] Param√®tres initiaux: vagueness={disabled_question.enable_vagueness_detection}, coherence={disabled_question.require_coherence_check}")
        
        # Appeler endpoint public qui force les param√®tres
        result3 = await ask_expert_enhanced_v2_public(disabled_question, request)
        
        test3_details = {
            "test_name": "Validation FOR√áAGE param√®tres",
            "initial_vagueness": False,
            "initial_coherence": False,
            "forced_activation": True,
            "enhancements_applied": len(result3.ai_enhancements_used or []) > 0,
            "success": len(result3.ai_enhancements_used or []) > 0
        }
        
        test_results["tests_performed"].append(test3_details)
        
        logger.info(f"üî• [TEST 3 R√âSULTAT] Am√©liorations appliqu√©es: {len(result3.ai_enhancements_used or [])}")
        logger.info(f"üî• [TEST 3 R√âSULTAT] Liste am√©liorations: {result3.ai_enhancements_used}")
        
        if not test3_details["success"]:
            error_msg = "For√ßage param√®tres √âCHOU√â - Aucune am√©lioration appliqu√©e"
            test_results["errors"].append(error_msg)
            logger.error(f"‚ùå {error_msg}")
        
        # R√©sultat final
        test_results["test_successful"] = len(test_results["errors"]) == 0
        
        logger.info("üî• R√âSUM√â TEST CLARIFICATION FORC√â:")
        logger.info(f"   - Tests r√©alis√©s: {len(test_results['tests_performed'])}")
        logger.info(f"   - Erreurs: {len(test_results['errors'])}")
        logger.info(f"   - Succ√®s global: {test_results['test_successful']}")
        
        if test_results["errors"]:
            for error in test_results["errors"]:
                logger.error(f"   ‚ùå {error}")
        
        logger.info("=" * 80)
        
        return test_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique test clarification forc√©: {e}")
        logger.info("=" * 80)
        return {
            "test_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "tests_performed": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/debug/validate-clarification-params")
async def validate_clarification_params(request: Request):
    """üî• NOUVEAU: Validation sp√©cifique du for√ßage des param√®tres de clarification"""
    
    try:
        logger.info("üîß VALIDATION PARAM√àTRES CLARIFICATION")
        
        validation_results = {
            "validation_successful": True,
            "timestamp": datetime.now().isoformat(),
            "parameter_tests": [],
            "errors": []
        }
        
        # Test diff√©rentes combinaisons de param√®tres
        test_cases = [
            {
                "name": "Param√®tres non d√©finis",
                "params": {"text": "Test sans param√®tres"},
                "expected_forced": True
            },
            {
                "name": "Param√®tres explicitement False", 
                "params": {
                    "text": "Test param√®tres False",
                    "enable_vagueness_detection": False,
                    "require_coherence_check": False
                },
                "expected_forced": True
            },
            {
                "name": "Param√®tres explicitement True",
                "params": {
                    "text": "Test param√®tres True", 
                    "enable_vagueness_detection": True,
                    "require_coherence_check": True
                },
                "expected_forced": True
            }
        ]
        
        for test_case in test_cases:
            logger.info(f"üîß Test: {test_case['name']}")
            
            # Cr√©er la requ√™te
            test_request = EnhancedQuestionRequest(
                conversation_id=str(uuid.uuid4()),
                language="fr",
                **test_case["params"]
            )
            
            # Enregistrer les valeurs initiales
            initial_vagueness = getattr(test_request, 'enable_vagueness_detection', None)
            initial_coherence = getattr(test_request, 'require_coherence_check', None)
            
            logger.info(f"   Valeurs initiales: vagueness={initial_vagueness}, coherence={initial_coherence}")
            
            # Appeler l'endpoint public qui force
            result = await ask_expert_enhanced_v2_public(test_request, request)
            
            # V√©rifier le for√ßage
            has_enhancements = len(result.ai_enhancements_used or []) > 0
            clarification_active = any("clarification" in enh for enh in (result.ai_enhancements_used or []))
            
            test_result = {
                "test_name": test_case["name"],
                "initial_vagueness": initial_vagueness,
                "initial_coherence": initial_coherence,
                "enhancements_applied": result.ai_enhancements_used,
                "enhancements_count": len(result.ai_enhancements_used or []),
                "clarification_system_active": clarification_active,
                "success": has_enhancements
            }
            
            validation_results["parameter_tests"].append(test_result)
            
            logger.info(f"   Am√©liorations appliqu√©es: {test_result['enhancements_count']}")
            logger.info(f"   Clarification active: {clarification_active}")
            logger.info(f"   Test r√©ussi: {test_result['success']}")
            
            if not test_result["success"]:
                error_msg = f"For√ßage √©chou√© pour: {test_case['name']}"
                validation_results["errors"].append(error_msg)
        
        # R√©sultat final
        validation_results["validation_successful"] = len(validation_results["errors"]) == 0
        
        logger.info(f"‚úÖ VALIDATION TERMIN√âE - Succ√®s: {validation_results['validation_successful']}")
        
        return validation_results
        
    except Exception as e:
        logger.error(f"‚ùå Erreur validation param√®tres: {e}")
        return {
            "validation_successful": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "parameter_tests": [],
            "errors": [f"Erreur critique: {str(e)}"]
        }

@router.post("/ask-with-clarification", response_model=EnhancedExpertResponse)
async def ask_with_forced_clarification(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üéØ NOUVEAU: Endpoint avec clarification GARANTIE pour questions techniques (ORIGINAL PR√âSERV√â)"""
    
    start_time = time.time()
    
    try:
        logger.info("üéØ D√âBUT ask_with_forced_clarification")
        logger.info(f"üìù Question: {request_data.text}")
        
        # V√âRIFICATION DIRECTE si c'est une question poids+√¢ge
        question_lower = request_data.text.lower()
        needs_clarification = False
        
        # Patterns simplifi√©s pour d√©tecter poids+√¢ge
        weight_age_patterns = [
            r'(?:poids|weight).*?(\d+)\s*(?:jour|day)',
            r'(\d+)\s*(?:jour|day).*?(?:poids|weight)',
            r'(?:quel|what).*?(?:poids|weight).*?(\d+)'
        ]
        
        # V√©rifier si question poids+√¢ge
        has_weight_age = any(re.search(pattern, question_lower) for pattern in weight_age_patterns)
        logger.info(f"üîç D√©tection poids+√¢ge: {has_weight_age}")
        
        if has_weight_age:
            # V√©rifier si race/sexe manquent
            breed_patterns = [r'(ross\s*308|cobb\s*500|hubbard)']
            sex_patterns = [r'(m√¢le|male|femelle|female|mixte|mixed)']
            
            has_breed = any(re.search(p, question_lower) for p in breed_patterns)
            has_sex = any(re.search(p, question_lower) for p in sex_patterns)
            
            logger.info(f"üè∑Ô∏è Race d√©tect√©e: {has_breed}")
            logger.info(f"‚öß Sexe d√©tect√©: {has_sex}")
            
            if not has_breed and not has_sex:
                needs_clarification = True
                logger.info("üéØ CLARIFICATION N√âCESSAIRE!")
        
        if needs_clarification:
            # D√âCLENCHER CLARIFICATION DIRECTE
            age_match = re.search(r'(\d+)\s*(?:jour|day)', question_lower)
            age = age_match.group(1) if age_match else "X"
            
            clarification_message = f"""Pour vous donner le poids de r√©f√©rence exact d'un poulet de {age} jours, j'ai besoin de :

‚Ä¢ **Race/souche** : Ross 308, Cobb 500, Hubbard, etc.
‚Ä¢ **Sexe** : M√¢les, femelles, ou troupeau mixte

Pouvez-vous pr√©ciser ces informations ?

**Exemples de r√©ponses :**
‚Ä¢ "Ross 308 m√¢les"
‚Ä¢ "Cobb 500 femelles"
‚Ä¢ "Hubbard troupeau mixte\""""
            
            logger.info("‚úÖ CLARIFICATION D√âCLENCH√âE!")
            
            return EnhancedExpertResponse(
                question=request_data.text,
                response=clarification_message,
                conversation_id=request_data.conversation_id or str(uuid.uuid4()),
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=int((time.time() - start_time) * 1000),
                mode="forced_performance_clarification",
                user=None,
                logged=True,
                validation_passed=True,
                clarification_result={
                    "clarification_requested": True,
                    "clarification_type": "performance_breed_sex_forced",
                    "missing_information": ["breed", "sex"],
                    "age_detected": age,
                    "confidence": 0.99
                },
                processing_steps=["forced_clarification_triggered"],
                ai_enhancements_used=["forced_performance_clarification"]
            )
        
        logger.info("üìã Pas de clarification n√©cessaire, traitement normal")
        
        # Si pas besoin de clarification, traitement normal avec am√©liorations forc√©es
        request_data.enable_vagueness_detection = True
        request_data.require_coherence_check = True
        
        return await ask_expert_enhanced_v2_public(request_data, request)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur ask_with_forced_clarification: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur: {str(e)}")

# =============================================================================
# CONFIGURATION & LOGGING FINAL üî•
# =============================================================================

logger.info("üî•" * 50)
logger.info("üöÄ [EXPERT ENDPOINTS] VERSION FINALE CLARIFICATION FORC√âE INITIALIS√âE!")
logger.info("üî• [CORRECTIONS APPLIQU√âES]:")
logger.info("   ‚úÖ For√ßage syst√©matique enable_vagueness_detection=True")
logger.info("   ‚úÖ For√ßage syst√©matique require_coherence_check=True") 
logger.info("   ‚úÖ Logging d√©taill√© flux de clarification")
logger.info("   ‚úÖ Debug sp√©cifique tra√ßabilit√© clarification")
logger.info("   ‚úÖ Validation forc√©e param√®tres clarification")
logger.info("   ‚úÖ Endpoints de test d√©di√©s clarification")
logger.info("   ‚úÖ TOUTES les fonctions originales pr√©serv√©es")
logger.info("")
logger.info("üîß [ENDPOINTS DISPONIBLES]:")
logger.info("   - POST /ask-enhanced-v2 (FOR√áAGE APPLIQU√â)")
logger.info("   - POST /ask-enhanced-v2-public (FOR√áAGE MAXIMAL)")
logger.info("   - POST /ask-enhanced (legacy ‚Üí v2 + FOR√áAGE)")
logger.info("   - POST /ask-enhanced-public (legacy public ‚Üí v2 + FOR√áAGE)")
logger.info("   - POST /ask (original ‚Üí v2 + FOR√áAGE TOTAL)")
logger.info("   - POST /ask-public (original public ‚Üí v2 + FOR√áAGE TOTAL)")
logger.info("   - POST /ask-with-clarification (clarification GARANTIE)")
logger.info("   - POST /feedback (support qualit√© d√©taill√©e)")
logger.info("   - GET /topics (enrichi avec statut am√©liorations)")
logger.info("   - GET /system-status (focus clarification + forced)")
logger.info("   - POST /debug/test-enhancements (tests automatiques)")
logger.info("   - POST /debug/test-clarification (test syst√®me clarification)")
logger.info("   - POST /debug/test-clarification-forced (NOUVEAU)")
logger.info("   - POST /debug/validate-clarification-params (NOUVEAU)")
logger.info("")
logger.info("üéØ [GARANTIES SYST√àME]:")
logger.info("   ‚úÖ Clarification TOUJOURS active")
logger.info("   ‚úÖ Param√®tres FORC√âS sur tous endpoints")
logger.info("   ‚úÖ Tra√ßabilit√© compl√®te flux clarification")
logger.info("   ‚úÖ Tests automatiques disponibles")
logger.info("   ‚úÖ R√©trocompatibilit√© pr√©serv√©e")
logger.info("   ‚úÖ Toutes fonctions originales maintenues")
logger.info("üî•" * 50)