"""
app/api/v1/expert_endpoints.py - ENDPOINTS PRINCIPAUX v3.7.8

üîß REFACTORISATION: Ce fichier contient tous les endpoints et la logique de routage
extraite de expert.py pour am√©liorer la maintenabilit√©.

ENDPOINTS INCLUS:
- /health
- /ask-enhanced-v2 
- /ask-enhanced-v2-public
- /feedback
- /topics
"""

import os
import re
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any, Callable

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

# Imports depuis les autres modules refactoris√©s
from .expert_core_functions import (
    _build_conversation_context,
    _analyze_agricultural_domain,
    _apply_dynamic_clarification_service,
    _apply_fallback_clarification,
    _extract_critical_entities_from_question,
    _validate_critical_entities,
    _force_clarification_for_missing_entities,
    _detect_inconsistencies_and_force_clarification,
    _sync_rag_state_simple,
    _extract_propagation_fields,
    _apply_propagation_fields
)

from .expert_utilities import (
    get_user_id_from_request,
    extract_breed_and_sex_from_clarification,
    _create_incomplete_clarification_response,
    _fallback_expert_response
)

# üîß FIX: D√©clarer logger AVANT utilisation
logger = logging.getLogger(__name__)
router = APIRouter(tags=["expert-main"])
security = HTTPBearer()

# Imports s√©curis√©s avec gestion d'erreurs CORRIG√âE
try:
    from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest, ConcisionLevel
    MODELS_IMPORTED = True
    logger.info("‚úÖ Models import√©s avec succ√®s")
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_models: {e}")
    # üîß FIX: Fallback plus s√©curis√© avec tous les champs requis
    from pydantic import BaseModel
    
    class ConcisionLevel:
        CONCISE = "concise"
        DETAILED = "detailed"
        COMPREHENSIVE = "comprehensive"
    
    class EnhancedQuestionRequest(BaseModel):
        text: str
        language: str = "fr"
        conversation_id: Optional[str] = None
        is_clarification_response: bool = False
        original_question: Optional[str] = None
        clarification_context: Optional[Dict[str, Any]] = None
        clarification_entities: Optional[Dict[str, str]] = None
        concision_level: str = ConcisionLevel.CONCISE
        generate_all_versions: bool = True
        enable_vagueness_detection: bool = True
        require_coherence_check: bool = True
        detailed_rag_scoring: bool = False
        enable_quality_metrics: bool = False
        
    class EnhancedExpertResponse(BaseModel):
        question: str
        response: str
        conversation_id: str
        rag_used: bool = False
        rag_score: Optional[float] = None
        timestamp: str
        language: str
        response_time_ms: int
        mode: str
        user: Optional[str] = None
        logged: bool = False
        validation_passed: Optional[bool] = None
        # NOUVEAUX CHAMPS v3.7.3+
        clarification_required_critical: bool = False
        missing_critical_entities: List[str] = []
        variants_tested: List[str] = []
        # üÜï NOUVEAUX CHAMPS v3.7.8
        dynamic_questions: Optional[List[Dict[str, Any]]] = None
        clarification_service_used: bool = False
        # Champs optionnels pour compatibilit√©
        clarification_result: Optional[Dict[str, Any]] = None
        processing_steps: List[str] = []
        ai_enhancements_used: List[str] = []
        response_versions: Optional[Dict[str, str]] = None
        clarification_processing: Optional[Dict[str, Any]] = None
        
    class FeedbackRequest(BaseModel):
        rating: str
        comment: Optional[str] = None
        conversation_id: Optional[str] = None
        quality_feedback: Optional[Dict[str, Any]] = None
        
    MODELS_IMPORTED = False
    logger.warning("‚ö†Ô∏è Utilisation des mod√®les de fallback")

try:
    from .expert_services import ExpertService
    EXPERT_SERVICE_AVAILABLE = True
    logger.info("‚úÖ ExpertService import√© avec succ√®s")
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_services: {e}")
    EXPERT_SERVICE_AVAILABLE = False

# üÜï NOUVEAU v3.7.8: Import du service de clarification dynamique
try:
    from .expert_clarification_service import ExpertClarificationService
    CLARIFICATION_SERVICE_AVAILABLE = True
    logger.info("‚úÖ ExpertClarificationService import√© avec succ√®s")
except ImportError as e:
    logger.error(f"‚ùå Erreur import expert_clarification_service: {e}")
    CLARIFICATION_SERVICE_AVAILABLE = False

# Initialisation des services avec gestion d'erreur CORRIG√âE
expert_service = None
if EXPERT_SERVICE_AVAILABLE:
    try:
        expert_service = ExpertService()
        logger.info("‚úÖ [Expert] Service expert initialis√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå [Expert] Erreur initialisation service: {e}")
        expert_service = None
else:
    logger.warning("‚ö†Ô∏è [Expert] Service expert non disponible - utilisation du mode fallback")

# üÜï NOUVEAU v3.7.8: Initialisation service clarification
clarification_service = None
if CLARIFICATION_SERVICE_AVAILABLE:
    try:
        clarification_service = ExpertClarificationService()
        logger.info("‚úÖ [Clarification] Service clarification initialis√© avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå [Clarification] Erreur initialisation service: {e}")
        clarification_service = None
else:
    logger.warning("‚ö†Ô∏è [Clarification] Service clarification non disponible - fonctionnalit√© d√©sactiv√©e")

# üîß FIX CRITIQUE: Auth dependency corrig√© pour √™tre callable
def get_current_user_mock():
    """Mock user pour fallback"""
    return {"id": "fallback_user", "email": "fallback@intelia.com"}

def get_current_user_dependency() -> Callable:
    """üîß FIX CRITIQUE: Retourne une fonction callable, pas un Dependency object"""
    if expert_service and hasattr(expert_service, 'get_current_user_dependency'):
        try:
            # R√©cup√®re la fonction du service
            service_dependency = expert_service.get_current_user_dependency()
            # Si c'est d√©j√† un Depends(), extraire la fonction
            if hasattr(service_dependency, 'dependency'):
                return service_dependency.dependency
            # Sinon retourner directement
            return service_dependency
        except Exception as e:
            logger.error(f"‚ùå Erreur get_current_user_dependency: {e}")
            return get_current_user_mock
    return get_current_user_mock

# =============================================================================
# ENDPOINTS PRINCIPAUX AVEC INT√âGRATION SERVICE CLARIFICATION v3.7.8
# =============================================================================

@router.get("/health")
async def expert_health():
    """Health check pour diagnostiquer les probl√®mes - version v3.7.8 avec service clarification"""
    return {
        "status": "healthy",
        "version": "3.7.8",
        "new_features_v378": [
            "int√©gration expert_clarification_service avec s√©lection dynamique de prompts",
            "appel automatique du service si clarification_required_critical = True",
            "g√©n√©ration de questions dynamiques bas√©es sur entit√©s manquantes",
            "validation et enrichissement des questions de clarification",
            "support conversation_context pour clarifications contextuelles",
            "üîß NOUVEAU: sync_rag_state_simple pour √©viter boucles infinies"
        ],
        "integration_workflow_v378": [
            "extraction entit√©s critiques ‚Üí validation ‚Üí si critique ‚Üí service clarification",
            "s√©lection prompt selon entit√©s manquantes et contexte",
            "g√©n√©ration questions GPT avec prompt optimis√©",
            "validation questions selon missing_entities",
            "enrichissement r√©ponse avec questions dynamiques",
            "üîß NOUVEAU: synchronisation RAG simplifi√©e une seule fois"
        ],
        "fixes_applied_v377": [
            "synchronisation √©tat RAG - rag_used correctement mis √† jour",
            "clarification forc√©e si entit√©s critiques (breed, age, weight) manquent",
            "validation robuste des entit√©s critiques avec extraction automatique",
            "d√©clenchement clarification_required_critical=True pour entit√©s manquantes",
            "d√©tection entit√©s critiques depuis le texte de la question"
        ],
        "critical_entities_support": [
            "breed extraction (Ross 308, Cobb 500, etc.)",
            "age extraction with conversion to days",
            "weight extraction with conversion to grams", 
            "sex extraction (bonus feature)",
            "coherence validation age/weight",
            "confidence scoring per entity",
            "forced clarification for missing entities"
        ],
        "clarification_service_status": {
            "expert_service_available": EXPERT_SERVICE_AVAILABLE,
            "expert_service_initialized": expert_service is not None,
            "clarification_service_available": CLARIFICATION_SERVICE_AVAILABLE,
            "clarification_service_initialized": clarification_service is not None
        },
        "models_imported": MODELS_IMPORTED,
        "timestamp": datetime.now().isoformat(),
        "new_fields_supported_v378": [
            "dynamic_questions",
            "clarification_service_used",
            "clarification_required_critical",
            "missing_critical_entities", 
            "variants_tested"
        ],
        "clarification_workflow": [
            "build_conversation_context",
            "select_clarification_prompt",
            "generate_questions_with_gpt",
            "validate_dynamic_questions",
            "apply_to_response_data"
        ],
        "rag_sync_improvements_v378": [
            "üîß sync_rag_state_simple remplace les anciennes fonctions complexes",
            "‚úÖ Une seule correction, pas de boucles infinies",
            "‚úÖ Validation simplifi√©e des indicateurs RAG",
            "‚úÖ Logging optimis√© pour debugging",
            "‚úÖ Performance am√©lior√©e"
        ],
        "endpoints": [
            "/health",
            "/ask-enhanced-v2", 
            "/ask-enhanced-v2-public",
            "/feedback",
            "/topics"
        ]
    }

@router.post("/ask-enhanced-v2", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user_dependency())
):
    """
    üîß ENDPOINT EXPERT FINAL v3.7.8 - INT√âGRATION SERVICE CLARIFICATION DYNAMIQUE + RAG SYNC SIMPLIFI√â:
    - Extraction et validation entit√©s critiques (breed, age, weight)
    - Si clarification_required_critical = True ‚Üí appel expert_clarification_service
    - S√©lection dynamique de prompt selon entit√©s manquantes
    - G√©n√©ration questions GPT avec validation
    - Enrichissement r√©ponse avec questions dynamiques
    - üîß NOUVEAU: Synchronisation RAG simplifi√©e sans boucles infinies
    """
    start_time = time.time()
    
    # üîß FIX: Initialisation explicite des variables de clarification
    clarification_metadata = {}
    is_clarification = False
    original_question = None
    clarification_entities = None
    processing_metadata = {}
    
    try:
        logger.info("=" * 100)
        logger.info("üöÄ D√âBUT ask_expert_enhanced_v2 v3.7.8 - INT√âGRATION SERVICE CLARIFICATION + RAG SYNC SIMPLIFI√â")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üÜî Conversation ID: {getattr(request_data, 'conversation_id', 'None')}")
        logger.info(f"üõ†Ô∏è Service expert disponible: {expert_service is not None}")
        logger.info(f"üéØ Service clarification disponible: {clarification_service is not None}")
        
        # V√©rification service disponible
        if not expert_service:
            logger.error("‚ùå [Expert] Service expert non disponible - mode fallback")
            return await _fallback_expert_response(request_data, start_time, current_user)
        
        # üÜï √âTAPE 1 v3.7.8: EXTRACTION ET VALIDATION ENTIT√âS CRITIQUES
        logger.info("üîç [ENTIT√âS CRITIQUES v3.7.8] Extraction entit√©s depuis question...")
        entities = _extract_critical_entities_from_question(
            request_data.text, 
            getattr(request_data, 'language', 'fr')
        )
        
        logger.info("üîç [ENTIT√âS CRITIQUES v3.7.8] Validation entit√©s extraites...")
        validation_result = _validate_critical_entities(entities, request_data.text)
        
        # Sauvegarder dans processing_metadata pour tra√ßabilit√©
        processing_metadata['critical_entities'] = entities
        processing_metadata['entities_validation'] = validation_result
        
        # üÜï √âTAPE 2 v3.7.8: CONSTRUCTION CONTEXTE CONVERSATION
        logger.info("üîß [CONTEXTE v3.7.8] Construction contexte conversation...")
        conversation_context = _build_conversation_context(
            request_data, 
            entities, 
            processing_metadata
        )
        
        # üÜï CONSERV√âE v3.7.7: D√âTECTION INCOH√âRENCES POUR FORCER CLARIFICATION
        inconsistency_check = _detect_inconsistencies_and_force_clarification(
            request_data.text, 
            getattr(request_data, 'language', 'fr')
        )
        
        if inconsistency_check.get('force_clarification', False):
            logger.warning(f"üö® [CLARIFICATION FORC√âE v3.7.8] Incoh√©rences d√©tect√©es: {inconsistency_check['inconsistencies_detected']}")
            logger.warning(f"üö® [CLARIFICATION FORC√âE v3.7.8] Raison: {inconsistency_check['clarification_reason']}")
            
            # Forcer l'activation de la d√©tection de vagueness
            if hasattr(request_data, 'enable_vagueness_detection'):
                request_data.enable_vagueness_detection = True
            if hasattr(request_data, 'require_coherence_check'):
                request_data.require_coherence_check = True
            
            # Ajouter dans metadata pour tracking
            processing_metadata['inconsistency_check'] = inconsistency_check
        
        # üîß FIX: V√©rification robuste des param√®tres concision avec validation None
        concision_level = getattr(request_data, 'concision_level', None)
        if concision_level is None:
            concision_level = ConcisionLevel.CONCISE
            
        generate_all_versions = getattr(request_data, 'generate_all_versions', None)
        if generate_all_versions is None:
            generate_all_versions = True
        
        logger.info("üöÄ [RESPONSE_VERSIONS v3.7.8] Param√®tres concision:")
        logger.info(f"   - concision_level: {concision_level}")
        logger.info(f"   - generate_all_versions: {generate_all_versions}")
        
        # üîß FIX: D√âTECTION EXPLICITE MODE CLARIFICATION avec validation robuste
        is_clarification = getattr(request_data, 'is_clarification_response', False)
        original_question = getattr(request_data, 'original_question', None)
        clarification_entities = getattr(request_data, 'clarification_entities', None)
        
        # üîß FIX: Validation des types
        if is_clarification is None:
            is_clarification = False
        
        logger.info("üß® [D√âTECTION CLARIFICATION v3.7.8] Analyse du mode:")
        logger.info(f"   - is_clarification_response: {is_clarification}")
        logger.info(f"   - original_question fournie: {original_question is not None}")
        logger.info(f"   - clarification_entities: {clarification_entities}")
        
        if is_clarification:
            logger.info("üé™ [FLUX CLARIFICATION] Mode R√âPONSE de clarification d√©tect√©")
            logger.info(f"   - R√©ponse utilisateur: '{request_data.text}'")
            logger.info(f"   - Question originale: '{original_question}'")
            
            # üîß FIX: Initialisation s√©curis√©e des variables breed/sex
            breed = None
            sex = None
            
            # TRAITEMENT SP√âCIALIS√â R√âPONSE CLARIFICATION avec gestion d'erreur renforc√©e
            try:
                if clarification_entities and isinstance(clarification_entities, dict):
                    logger.info(f"   - Entit√©s pr√©-extraites: {clarification_entities}")
                    breed = clarification_entities.get('breed')
                    sex = clarification_entities.get('sex')
                else:
                    # Extraction automatique si pas fournie
                    logger.info("   - Extraction automatique entit√©s depuis r√©ponse")
                    extracted = extract_breed_and_sex_from_clarification(
                        request_data.text, 
                        getattr(request_data, 'language', 'fr')
                    )
                    # üîß FIX: Validation robuste du r√©sultat d'extraction
                    if extracted is None or not isinstance(extracted, dict):
                        extracted = {"breed": None, "sex": None}
                    breed = extracted.get('breed')
                    sex = extracted.get('sex')
                    logger.info(f"   - Entit√©s extraites: breed='{breed}', sex='{sex}'")
            except Exception as e:
                logger.error(f"‚ùå Erreur extraction entit√©s: {e}")
                breed, sex = None, None
            
            # VALIDATION entit√©s compl√®tes AVANT enrichissement
            clarified_entities = {"breed": breed, "sex": sex}
            
            # üéØ LOGIQUE GRANULAIRE v3.7.8: Validation granulaire breed vs sex
            if not breed or not sex:
                # üîß FIX: Protection contre None dans le logging
                breed_safe = str(breed) if breed is not None else "None"
                sex_safe = str(sex) if sex is not None else "None"
                logger.warning(f"‚ö†Ô∏è [FLUX CLARIFICATION] Entit√©s incompl√®tes: breed='{breed_safe}', sex='{sex_safe}'")
                
                return _create_incomplete_clarification_response(
                    request_data, clarified_entities, breed, sex, start_time
                )
            
            # Enrichir la question originale avec les informations COMPL√àTES
            if original_question and isinstance(original_question, str):
                enriched_question = original_question
                if breed and isinstance(breed, str):
                    enriched_question += f" pour {breed}"
                if sex and isinstance(sex, str):
                    enriched_question += f" {sex}"
                
                logger.info(f"   - Question enrichie: '{enriched_question}'")
                
                # üîß FIX: M√©tadonn√©es sauvegard√©es pour response - initialisation s√©curis√©e
                clarification_metadata = {
                    "was_clarification_response": True,
                    "original_question": original_question,
                    "clarification_input": request_data.text,
                    "entities_extracted": clarified_entities,
                    "question_enriched": True
                }
                
                # Modifier la question pour traitement RAG
                request_data.text = enriched_question
                
                # Marquer comme traitement post-clarification (√©viter boucle)
                if hasattr(request_data, 'is_clarification_response'):
                    request_data.is_clarification_response = False
                
                logger.info("üéØ [FLUX CLARIFICATION] Question enrichie, passage au traitement RAG")
            else:
                logger.warning("‚ö†Ô∏è [FLUX CLARIFICATION] Question originale manquante ou invalide - impossible enrichir")
        else:
            logger.info("üéØ [FLUX CLARIFICATION] Mode QUESTION INITIALE - d√©tection vagueness active")
        
        # üîß FIX: Validation et d√©fauts concision robuste avec validation None
        if not hasattr(request_data, 'concision_level') or getattr(request_data, 'concision_level', None) is None:
            request_data.concision_level = ConcisionLevel.CONCISE
            logger.info("üöÄ [CONCISION] Niveau par d√©faut appliqu√©: CONCISE")
        
        if not hasattr(request_data, 'generate_all_versions') or getattr(request_data, 'generate_all_versions', None) is None:
            request_data.generate_all_versions = True
            logger.info("üöÄ [CONCISION] generate_all_versions activ√© par d√©faut")
        
        # FOR√áAGE SYST√âMATIQUE DES AM√âLIORATIONS avec gestion d'erreur
        original_vagueness = getattr(request_data, 'enable_vagueness_detection', None)
        original_coherence = getattr(request_data, 'require_coherence_check', None)
        
        # FORCER l'activation - AUCUNE EXCEPTION
        if hasattr(request_data, 'enable_vagueness_detection'):
            request_data.enable_vagueness_detection = True
        if hasattr(request_data, 'require_coherence_check'):
            request_data.require_coherence_check = True
        
        logger.info("üî• [CLARIFICATION FORC√âE v3.7.8] Param√®tres forc√©s:")
        logger.info(f"   - enable_vagueness_detection: {original_vagueness} ‚Üí TRUE (FORC√â)")
        logger.info(f"   - require_coherence_check: {original_coherence} ‚Üí TRUE (FORC√â)")
        
        # D√âL√âGUER AU SERVICE avec gestion d'erreur
        try:
            response = await expert_service.process_expert_question(
                request_data=request_data,
                request=request,
                current_user=current_user,
                start_time=start_time
            )
        except Exception as e:
            logger.error(f"‚ùå [Expert Service] Erreur traitement: {e}")
            return await _fallback_expert_response(request_data, start_time, current_user, str(e))
        
        # üîß NOUVEAU v3.7.8: SYNCHRONISATION RAG STATE SIMPLIFI√âE - UNE SEULE FOIS
        logger.info("üîç [RAG SYNC SIMPLE v3.7.8] APPEL UNIQUE apr√®s traitement service...")
        rag_corrected = _sync_rag_state_simple(response, processing_metadata)
        
        if rag_corrected:
            logger.info("‚úÖ [RAG SYNC SIMPLE v3.7.8] Correction RAG appliqu√©e avec succ√®s")
        else:
            logger.info("‚úÖ [RAG SYNC SIMPLE v3.7.8] √âtat RAG d√©j√† correct, aucune correction n√©cessaire")
        
        # üÜï VALIDATION ENTIT√âS CRITIQUES ET CLARIFICATION FORC√âE (CONSERV√âE v3.7.7)
        logger.info("üîç [ENTIT√âS CRITIQUES v3.7.8] Application validation entit√©s sur r√©ponse...")
        response = _force_clarification_for_missing_entities(response, validation_result, entities)
        
        # üÜï √âTAPE 3 v3.7.8: APPLICATION SERVICE CLARIFICATION DYNAMIQUE
        logger.info("üéØ [SERVICE CLARIFICATION v3.7.8] Application service clarification dynamique...")
        response = await _apply_dynamic_clarification_service(
            response_data=response,
            validation_result=validation_result,
            entities=entities,
            conversation_context=conversation_context
        )
        
        # üöÄ PROPAGATION CHAMPS v3.7.8 - AVEC NOUVEAUX CHAMPS
        logger.info("üìã [PROPAGATION v3.7.8] Extraction et application nouveaux champs")
        propagation_fields = _extract_propagation_fields(response)
        response = _apply_propagation_fields(response, propagation_fields)
        
        # üîß FIX: AJOUT M√âTADONN√âES CLARIFICATION dans response avec validation
        if clarification_metadata and isinstance(clarification_metadata, dict) and hasattr(response, 'clarification_processing'):
            response.clarification_processing = clarification_metadata
            logger.info("üí° [M√âTADONN√âES v3.7.8] Clarification metadata ajout√©es √† response")
        
        # üÜï AJOUT M√âTADONN√âES INCOH√âRENCES v3.7.8
        if inconsistency_check.get('force_clarification', False) and hasattr(response, 'processing_steps'):
            if isinstance(response.processing_steps, list):
                response.processing_steps.append("inconsistency_forced_clarification_v3.7.8")
            if hasattr(response, 'ai_enhancements_used') and isinstance(response.ai_enhancements_used, list):
                response.ai_enhancements_used.append("inconsistency_detection_v3.7.8")
        
        # üÜï AJOUT M√âTADONN√âES ENTIT√âS CRITIQUES + SERVICE CLARIFICATION v3.7.8
        if hasattr(response, 'processing_steps') and isinstance(response.processing_steps, list):
            response.processing_steps.append("critical_entities_extracted_v3.7.8")
            if validation_result.get('clarification_required', False):
                response.processing_steps.append(f"critical_entities_clarification_{validation_result.get('clarification_priority', 'unknown')}")
            
            # Ajouter step pour service clarification
            if getattr(response, 'clarification_service_used', False):
                response.processing_steps.append("dynamic_clarification_service_used_v3.7.8")
        
        if hasattr(response, 'ai_enhancements_used') and isinstance(response.ai_enhancements_used, list):
            response.ai_enhancements_used.append("critical_entities_validation_v3.7.8")
            if validation_result.get('entities_sufficient', False):
                response.ai_enhancements_used.append("critical_entities_sufficient")
            else:
                response.ai_enhancements_used.append("critical_entities_insufficient")
            
            # Ajouter enhancement pour service clarification
            if getattr(response, 'clarification_service_used', False):
                response.ai_enhancements_used.append("dynamic_clarification_generation_v3.7.8")
        
        # LOGGING R√âSULTATS D√âTAILL√â
        logger.info("üß® [R√âSULTATS CLARIFICATION v3.7.8]:")
        logger.info(f"   - Mode final: {getattr(response, 'mode', 'unknown')}")
        logger.info(f"   - Clarification d√©clench√©e: {getattr(response, 'clarification_result', None) is not None}")
        logger.info(f"   - RAG utilis√©: {getattr(response, 'rag_used', False)}")
        logger.info(f"   - Service clarification utilis√©: {getattr(response, 'clarification_service_used', False)}")
        
        # üÜï LOGGING SP√âCIFIQUE SERVICE CLARIFICATION v3.7.8
        dynamic_questions = getattr(response, 'dynamic_questions', None)
        if dynamic_questions and isinstance(dynamic_questions, list):
            logger.info(f"   - Questions dynamiques g√©n√©r√©es: {len(dynamic_questions)}")
            for i, q in enumerate(dynamic_questions[:3], 1):  # Log 3 premi√®res questions
                question_text = q.get('question', '') if isinstance(q, dict) else str(q)
                logger.info(f"     {i}. {question_text[:50]}...")
        else:
            logger.info("   - Aucune question dynamique g√©n√©r√©e")
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2 v3.7.8")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2 v3.7.8: {e}")
        logger.info("=" * 100)
        return await _fallback_expert_response(request_data, start_time, current_user, str(e))

@router.post("/ask-enhanced-v2-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_v2_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """üîß ENDPOINT PUBLIC v3.7.8 - INT√âGRATION SERVICE CLARIFICATION DYNAMIQUE + RAG SYNC SIMPLIFI√â"""
    start_time = time.time()
    
    # üîß FIX: Initialisation explicite des variables
    clarification_metadata = {}
    is_clarification = False
    processing_metadata = {}
    
    try:
        logger.info("=" * 100)
        logger.info("üåê D√âBUT ask_expert_enhanced_v2_public v3.7.8 - INT√âGRATION SERVICE CLARIFICATION + RAG SYNC SIMPLIFI√â")
        logger.info(f"üìù Question/R√©ponse: '{request_data.text}'")
        logger.info(f"üõ†Ô∏è Service expert disponible: {expert_service is not None}")
        logger.info(f"üéØ Service clarification disponible: {clarification_service is not None}")
        
        # V√©rification service disponible
        if not expert_service:
            logger.error("‚ùå [Expert Public] Service expert non disponible - mode fallback")
            return await _fallback_expert_response(request_data, start_time, None)
        
        # üÜï √âTAPE 1 v3.7.8: EXTRACTION ET VALIDATION ENTIT√âS CRITIQUES POUR ENDPOINT PUBLIC
        logger.info("üîç [ENTIT√âS CRITIQUES PUBLIC v3.7.8] Extraction entit√©s depuis question...")
        entities = _extract_critical_entities_from_question(
            request_data.text, 
            getattr(request_data, 'language', 'fr')
        )
        
        logger.info("üîç [ENTIT√âS CRITIQUES PUBLIC v3.7.8] Validation entit√©s extraites...")
        validation_result = _validate_critical_entities(entities, request_data.text)
        
        # Sauvegarder dans processing_metadata pour tra√ßabilit√©
        processing_metadata['critical_entities'] = entities
        processing_metadata['entities_validation'] = validation_result
        
        # üÜï √âTAPE 2 v3.7.8: CONSTRUCTION CONTEXTE CONVERSATION POUR ENDPOINT PUBLIC
        logger.info("üîß [CONTEXTE PUBLIC v3.7.8] Construction contexte conversation...")
        conversation_context = _build_conversation_context(
            request_data, 
            entities, 
            processing_metadata
        )
        
        # D√âL√âGUER AU SERVICE avec support response_versions et gestion d'erreur
        try:
            response = await expert_service.process_expert_question(
                request_data=request_data,
                request=request,
                current_user=None,  # Mode public
                start_time=start_time
            )
        except Exception as e:
            logger.error(f"‚ùå [Expert Service Public] Erreur traitement: {e}")
            return await _fallback_expert_response(request_data, start_time, None, str(e))
        
        # üîß NOUVEAU v3.7.8: SYNCHRONISATION RAG STATE SIMPLIFI√âE POUR PUBLIC
        logger.info("üîç [RAG SYNC SIMPLE PUBLIC v3.7.8] APPEL UNIQUE apr√®s traitement service...")
        rag_corrected = _sync_rag_state_simple(response, processing_metadata)
        
        # üÜï VALIDATION ENTIT√âS CRITIQUES ET CLARIFICATION FORC√âE POUR PUBLIC
        logger.info("üîç [ENTIT√âS CRITIQUES PUBLIC v3.7.8] Application validation entit√©s sur r√©ponse...")
        response = _force_clarification_for_missing_entities(response, validation_result, entities)
        
        # üÜï √âTAPE 3 v3.7.8: APPLICATION SERVICE CLARIFICATION DYNAMIQUE POUR ENDPOINT PUBLIC
        logger.info("üéØ [SERVICE CLARIFICATION PUBLIC v3.7.8] Application service clarification dynamique...")
        response = await _apply_dynamic_clarification_service(
            response_data=response,
            validation_result=validation_result,
            entities=entities,
            conversation_context=conversation_context
        )
        
        # üöÄ PROPAGATION CHAMPS v3.7.8 - ENDPOINT PUBLIC - AVEC NOUVEAUX CHAMPS
        logger.info("üìã [PROPAGATION PUBLIC v3.7.8] Extraction et application nouveaux champs")
        propagation_fields = _extract_propagation_fields(response)
        response = _apply_propagation_fields(response, propagation_fields)
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_v2_public v3.7.8")
        logger.info("=" * 100)
        
        return response
    
    except HTTPException:
        logger.info("=" * 100)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_v2_public v3.7.8: {e}")
        logger.info("=" * 100)
        return await _fallback_expert_response(request_data, start_time, None, str(e))

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION CORRIG√âE v3.7.8 avec gestion d'erreur robuste"""
    try:
        conversation_id = getattr(feedback_data, 'conversation_id', 'None')
        logger.info(f"üìä [Feedback v3.7.8] Re√ßu: {feedback_data.rating} pour {conversation_id}")
        
        # üîß FIX: Validation robuste des quality_feedback
        quality_feedback = getattr(feedback_data, 'quality_feedback', None)
        if quality_feedback and isinstance(quality_feedback, dict):
            logger.info(f"üìà [Feedback v3.7.8] Qualit√© d√©taill√©e: {len(quality_feedback)} m√©triques")
        
        if expert_service and hasattr(expert_service, 'process_feedback'):
            try:
                result = await expert_service.process_feedback(feedback_data)
            except Exception as e:
                logger.error(f"‚ùå [Feedback Service v3.7.8] Erreur: {e}")
                # Fallback si service expert √©choue
                result = {
                    "success": False,
                    "message": f"Erreur service feedback: {str(e)}",
                    "rating": feedback_data.rating,
                    "comment": getattr(feedback_data, 'comment', None),
                    "conversation_id": conversation_id,
                    "fallback_mode": True,
                    "timestamp": datetime.now().isoformat(),
                    "version": "3.7.8"
                }
        else:
            # Fallback si service non disponible
            result = {
                "success": True,
                "message": "Feedback enregistr√© (mode fallback v3.7.8)",
                "rating": feedback_data.rating,
                "comment": getattr(feedback_data, 'comment', None),
                "conversation_id": conversation_id,
                "fallback_mode": True,
                "timestamp": datetime.now().isoformat(),
                "version": "3.7.8"
            }
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Feedback v3.7.8] Erreur critique: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur feedback v3.7.8: {str(e)}")

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION CORRIG√âE v3.7.8 avec gestion d'erreur robuste"""
    try:
        if expert_service and hasattr(expert_service, 'get_suggested_topics'):
            try:
                return await expert_service.get_suggested_topics(language)
            except Exception as e:
                logger.error(f"‚ùå [Topics Service v3.7.8] Erreur: {e}")
                # Continuer vers fallback
        
        # üîß FIX: Fallback am√©lior√© avec validation language v3.7.8
        fallback_topics = {
            "fr": [
                "Probl√®mes de croissance poulets Ross 308",
                "Conditions environnementales optimales √©levage", 
                "Protocoles vaccination selon √¢ge",
                "Diagnostic probl√®mes sant√© par sympt√¥mes",
                "Nutrition et alimentation selon poids",
                "Mortalit√© √©lev√©e - causes et solutions",
                "Temp√©rature et ventilation b√¢timent",
                "D√©veloppement normal poulets de chair"
            ],
            "en": [
                "Ross 308 chicken growth problems",
                "Optimal environmental conditions breeding",
                "Age-specific vaccination protocols", 
                "Health problem diagnosis by symptoms",
                "Weight-based nutrition and feeding",
                "High mortality - causes and solutions",
                "Building temperature and ventilation",
                "Normal broiler chicken development"
            ],
            "es": [
                "Problemas crecimiento pollos Ross 308",
                "Condiciones ambientales √≥ptimas crianza",
                "Protocolos vacunaci√≥n seg√∫n edad",
                "Diagn√≥stico problemas salud por s√≠ntomas", 
                "Nutrici√≥n alimentaci√≥n seg√∫n peso",
                "Alta mortalidad - causas y soluciones",
                "Temperatura y ventilaci√≥n edificio",
                "Desarrollo normal pollos de engorde"
            ]
        }
        
        # üîß FIX: Validation robuste du language
        lang = str(language).lower() if language else "fr"
        if lang not in fallback_topics:
            lang = "fr"
        
        selected_topics = fallback_topics[lang]
        
        return {
            "topics": selected_topics,
            "language": lang,
            "count": len(selected_topics),
            "fallback_mode": True,
            "expert_service_available": expert_service is not None,
            "clarification_service_available": clarification_service is not None,
            "timestamp": datetime.now().isoformat(),
            "version": "3.7.8",
            "critical_entities_optimized": True,
            "dynamic_clarification_ready": CLARIFICATION_SERVICE_AVAILABLE,
            "rag_sync_optimized": True
        }
            
    except Exception as e:
        logger.error(f"‚ùå [Topics v3.7.8] Erreur critique: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur topics v3.7.8: {str(e)}")

# =============================================================================
# LOGGING ET INITIALISATION FINALE v3.7.8
# =============================================================================

logger.info("üöÄ" * 50)
logger.info("üöÄ [EXPERT ENDPOINTS] VERSION 3.7.8 - ENDPOINTS REFACTORIS√âS!")
logger.info("üöÄ [REFACTORISATION]:")
logger.info("   ‚úÖ Endpoints extraits de expert.py")
logger.info("   ‚úÖ Code conserv√© int√©gralement")
logger.info("   ‚úÖ Imports depuis expert_core_functions et expert_utilities")
logger.info("   ‚úÖ Gestion d'erreur robuste")
logger.info("   ‚úÖ Logging optimis√©")
logger.info("")
logger.info("üîß [ENDPOINTS DISPONIBLES v3.7.8]:")
logger.info("   - GET /health")
logger.info("   - POST /ask-enhanced-v2")
logger.info("   - POST /ask-enhanced-v2-public")
logger.info("   - POST /feedback")
logger.info("   - GET /topics")
logger.info("")
logger.info("‚úÖ [R√âSULTAT ATTENDU v3.7.8]:")
logger.info("   ‚úÖ Endpoints fonctionnels")
logger.info("   ‚úÖ Service clarification int√©gr√©")
logger.info("   ‚úÖ RAG sync simplifi√©")
logger.info("   ‚úÖ Gestion d'erreur robuste")
logger.info("   ‚úÖ SYNTAXE PYTHON 100% CORRECTE")
logger.info("üöÄ" * 50)
