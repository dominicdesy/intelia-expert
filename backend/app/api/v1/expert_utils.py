# expert_utils.py - VERSION FINALE (identique √† la version pr√©c√©dente)
"""
app/api/v1/expert_utils.py - UTILITAIRES EXPERT SYSTEM

Fonctions utilitaires pour le syst√®me expert
VERSION FINALE : Aucune modification suppl√©mentaire n√©cessaire
"""

import os
import logging
import uuid
from typing import Dict, Any, Optional
from fastapi import Request

logger = logging.getLogger(__name__)

def get_user_id_from_request(request: Request) -> str:
    """Extrait l'user_id depuis la requ√™te"""
    # Essayer d'extraire depuis les headers ou token
    authorization = request.headers.get("authorization", "")
    if authorization:
        # Ici vous pouvez parser le JWT pour extraire l'user_id
        # Pour l'instant, g√©n√©ration d'un ID temporaire
        return f"user_{uuid.uuid4().hex[:8]}"
    
    # Fallback
    return f"anonymous_{uuid.uuid4().hex[:8]}"

def build_enriched_question_from_clarification(
    original_question: str,
    clarification_response: str, 
    conversation_context: str = ""
) -> str:
    """Construit une question enrichie √† partir d'une clarification"""
    if conversation_context:
        return f"{original_question}\n\nClarification: {clarification_response}\n\nContexte: {conversation_context}"
    else:
        return f"{original_question}\n\nClarification: {clarification_response}"

def get_enhanced_topics_by_language() -> Dict[str, list]:
    """Retourne les topics sugg√©r√©s par langue"""
    return {
        "fr": [
            "Probl√®mes de croissance poulets",
            "Conditions environnementales optimales",
            "Protocoles de vaccination",
            "Diagnostic probl√®mes de sant√©",
            "Nutrition et alimentation",
            "Gestion de la mortalit√©",
            "Temp√©rature et humidit√©",
            "Qualit√© de l'eau"
        ],
        "en": [
            "Chicken growth problems",
            "Optimal environmental conditions", 
            "Vaccination protocols",
            "Health problem diagnosis",
            "Nutrition and feeding",
            "Mortality management",
            "Temperature and humidity",
            "Water quality"
        ],
        "es": [
            "Problemas de crecimiento de pollos",
            "Condiciones ambientales √≥ptimas",
            "Protocolos de vacunaci√≥n", 
            "Diagn√≥stico de problemas de salud",
            "Nutrici√≥n y alimentaci√≥n",
            "Gesti√≥n de mortalidad",
            "Temperatura y humedad",
            "Calidad del agua"
        ]
    }

async def save_conversation_auto_enhanced(
    conversation_id: str,
    question: str,
    response: str,
    user_id: str,
    language: str = "fr"
) -> bool:
    """Sauvegarde automatique de conversation"""
    try:
        # Ici vous pouvez int√©grer avec votre syst√®me de logging
        logger.info(f"üíæ Sauvegarde conversation {conversation_id}: {question[:50]}...")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde: {e}")
        return False

def get_fallback_response_enhanced(question: str, language: str = "fr") -> str:
    """
    R√©ponse de fallback am√©lior√©e - REDIRECTION VERS RAG
    
    NOTE: Cette fonction ne doit plus √™tre utilis√©e avec des donn√©es cod√©es.
    Elle redirige vers le syst√®me RAG.
    """
    responses = {
        "fr": "Le syst√®me expert n√©cessite l'acc√®s √† la base documentaire pour r√©pondre √† votre question. Veuillez vous assurer que le service RAG est disponible.",
        "en": "The expert system requires access to the document database to answer your question. Please ensure the RAG service is available.",
        "es": "El sistema experto requiere acceso a la base de datos de documentos para responder a su pregunta. Aseg√∫rese de que el servicio RAG est√© disponible."
    }
    return responses.get(language.lower(), responses["fr"])

# =============================================================================
# FONCTIONS D√âPR√âCI√âES - AVEC DONN√âES COD√âES SUPPRIM√âES
# =============================================================================

async def process_question_with_enhanced_prompt_DEPRECATED(
    question: str, 
    language: str = "fr", 
    speed_mode: str = "balanced",
    extracted_entities: Optional[Dict] = None,
    conversation_context: str = ""
) -> str:
    """
    ‚ùå FONCTION D√âPR√âCI√âE - SUPPRIM√âE
    
    Cette fonction contenait des donn√©es Ross 308 cod√©es en dur.
    Toutes les r√©ponses doivent maintenant passer par le RAG qui contient
    les documents de r√©f√©rence officiels (Performance Objectives, etc.).
    """
    
    logger.error("‚ùå [Expert Utils] ERREUR: Tentative d'utilisation de fonction d√©pr√©ci√©e")
    logger.error("‚ùå [Expert Utils] Architecture actuelle: RAG-First obligatoire")
    
    raise RuntimeError(
        "ERREUR ARCHITECTURE: process_question_with_enhanced_prompt est d√©pr√©ci√©e. "
        "Toutes les requ√™tes doivent passer par le syst√®me RAG qui contient "
        "les Performance Objectives officiels d'Aviagen."
    )

def get_hardcoded_ross_308_data_DEPRECATED():
    """‚ùå FONCTION SUPPRIM√âE - DONN√âES TRANSF√âR√âES VERS RAG"""
    
    logger.error("‚ùå [Expert Utils] Tentative d'acc√®s aux donn√©es cod√©es supprim√©es")
    
    raise RuntimeError(
        "DONN√âES SUPPRIM√âES: Les donn√©es Ross 308 ne sont plus cod√©es en dur. "
        "Elles se trouvent dans la base documentaire RAG. "
        "Utilisez le syst√®me RAG pour acc√©der aux Performance Objectives officiels."
    )

# =============================================================================
# NOUVELLES FONCTIONS UTILITAIRES RAG-FIRST
# =============================================================================

def validate_rag_availability(app_state) -> bool:
    """Valide que le syst√®me RAG est disponible"""
    process_rag = getattr(app_state, 'process_question_with_rag', None)
    return process_rag is not None

def log_rag_dependency_error(function_name: str, question: str):
    """Log les erreurs de d√©pendance RAG"""
    logger.error(f"‚ùå [Expert Utils] {function_name}: RAG non disponible")
    logger.error(f"‚ùå [Expert Utils] Question: {question[:100]}...")
    logger.error(f"‚ùå [Expert Utils] Action requise: V√©rifier initialisation RAG")
    logger.error(f"‚ùå [Expert Utils] Documents requis: Ross 308 Performance Objectives")

def get_rag_error_response(language: str = "fr") -> str:
    """Retourne un message d'erreur appropri√© quand RAG est indisponible"""
    
    messages = {
        "fr": (
            "Service temporairement indisponible. "
            "Le syst√®me expert n√©cessite l'acc√®s √† la base documentaire "
            "pour fournir des informations pr√©cises sur les performances "
            "des races de poulets. Veuillez r√©essayer plus tard."
        ),
        "en": (
            "Service temporarily unavailable. "
            "The expert system requires access to the document database "
            "to provide accurate information about chicken breed performance. "
            "Please try again later."
        ),
        "es": (
            "Servicio temporalmente no disponible. "
            "El sistema experto requiere acceso a la base de datos de documentos "
            "para proporcionar informaci√≥n precisa sobre el rendimiento de las razas de pollos. "
            "Por favor, int√©ntelo de nuevo m√°s tarde."
        )
    }
    
    return messages.get(language.lower(), messages["fr"])

def suggest_rag_setup_check() -> Dict[str, Any]:
    """Sugg√®re les v√©rifications √† effectuer pour le setup RAG"""
    
    return {
        "checks_required": [
            "V√©rifier que process_question_with_rag est initialis√© dans app.state",
            "Confirmer que la base documentaire contient les Performance Objectives Ross 308",
            "Tester la connectivit√© vers le syst√®me de vectorisation",
            "Valider que les documents sont correctement index√©s"
        ],
        "critical_documents": [
            "Ross 308 Performance Objectives 2022 (Aviagen)",
            "Cobb 500 Performance Standards", 
            "Guides de nutrition avicole",
            "Protocoles de vaccination"
        ],
        "test_questions": [
            "Quel est le poids d'un Ross 308 au jour 18 ?",
            "Quelles sont les conditions optimales pour l'√©levage ?",
            "Protocoles de vaccination recommand√©s ?"
        ]
    }

# =============================================================================
# LOGGING DE MIGRATION
# =============================================================================

logger.info("‚úÖ [Expert Utils] Module utilitaires final - RAG-First")
logger.info("‚úÖ [Expert Utils] Compatible avec toutes les am√©liorations API")
logger.info("   - ‚ùå Donn√©es cod√©es supprim√©es")
logger.info("   - ‚úÖ Architecture RAG-First obligatoire")
logger.info("   - ‚úÖ Support complet nouvelles fonctionnalit√©s")