"""
app/api/v1/expert.py - VERSION COMPL√àTE AVEC SYST√àME DE M√âMOIRE CONVERSATIONNELLE
NOUVEAU: Int√©gration syst√®me de m√©moire conversationnelle pour continuit√© contextuelle
CORRECTIONS: Support conversation_id pour m√©moire + validation/clarification avec contexte
CONSERVATION: Toutes les autres fonctionnalit√©s existantes (auth, validation, clarification, RAG)
"""
import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends, Query, Body
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field, ConfigDict

router = APIRouter(tags=["expert"])
logger = logging.getLogger(__name__)

# =============================================================================
# IMPORT VALIDATEUR AGRICOLE - PRIORIT√â ABSOLUE
# =============================================================================

try:
    from app.api.v1.agricultural_domain_validator import (
        validate_agricultural_question,
        get_agricultural_validator_stats,
        is_agricultural_validation_enabled
    )
    AGRICULTURAL_VALIDATOR_AVAILABLE = True
    logger.info("‚úÖ [Expert] Validateur agricole import√© avec succ√®s")
    logger.info(f"‚úÖ [Expert] Validation agricole: {'ACTIVE' if is_agricultural_validation_enabled() else 'INACTIVE'}")
except ImportError as e:
    AGRICULTURAL_VALIDATOR_AVAILABLE = False
    logger.error(f"‚ùå [Expert] ERREUR CRITIQUE - Validateur agricole non disponible: {e}")
    logger.error("‚ùå [Expert] Toutes les questions seront accept√©es sans filtrage!")
except Exception as e:
    AGRICULTURAL_VALIDATOR_AVAILABLE = False
    logger.error(f"‚ùå [Expert] Erreur inattendue import validateur: {e}")

# =============================================================================
# IMPORT SYST√àME DE CLARIFICATION - NOUVEAU
# =============================================================================

try:
    from app.api.v1.question_clarification_system import (
        analyze_question_for_clarification,
        format_clarification_response,
        is_clarification_system_enabled,
        get_clarification_system_stats
    )
    CLARIFICATION_SYSTEM_AVAILABLE = True
    logger.info("‚úÖ [Expert] Syst√®me de clarification import√© avec succ√®s")
    logger.info(f"‚úÖ [Expert] Clarification: {'ACTIVE' if is_clarification_system_enabled() else 'INACTIVE'}")
except ImportError as e:
    CLARIFICATION_SYSTEM_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è [Expert] Syst√®me de clarification non disponible: {e}")
except Exception as e:
    CLARIFICATION_SYSTEM_AVAILABLE = False
    logger.error(f"‚ùå [Expert] Erreur inattendue import clarification: {e}")

# =============================================================================
# IMPORT SYST√àME DE M√âMOIRE CONVERSATIONNELLE - NOUVEAU
# =============================================================================

try:
    from app.api.v1.conversation_memory import (
        add_message_to_conversation,
        get_conversation_context,
        get_context_for_clarification,
        get_context_for_rag,
        get_conversation_memory_stats,
        cleanup_expired_conversations
    )
    CONVERSATION_MEMORY_AVAILABLE = True
    logger.info("‚úÖ [Expert] Syst√®me de m√©moire conversationnelle import√© avec succ√®s")
except ImportError as e:
    CONVERSATION_MEMORY_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è [Expert] Syst√®me de m√©moire non disponible: {e}")
except Exception as e:
    CONVERSATION_MEMORY_AVAILABLE = False
    logger.error(f"‚ùå [Expert] Erreur inattendue import m√©moire: {e}")

# =============================================================================
# IMPORT AUTH
# =============================================================================

logger.info("=" * 60)
logger.info("üîç DIAGNOSTIC IMPORT AUTH.PY - M√âTHODES MULTIPLES")

AUTH_AVAILABLE = False
get_current_user = None

try:
    from .auth import get_current_user
    AUTH_AVAILABLE = True
    logger.info("‚úÖ M√©thode 1 r√©ussie: Import direct relatif")
except ImportError as e:
    logger.error(f"‚ùå M√©thode 1 √©chou√©e: {e}")
    try:
        from app.api.v1.auth import get_current_user
        AUTH_AVAILABLE = True
        logger.info("‚úÖ M√©thode 2 r√©ussie: Import absolu")
    except ImportError as e2:
        logger.error(f"‚ùå M√©thode 2 √©chou√©e: {e2}")

logger.info(f"üéØ AUTH_AVAILABLE final: {AUTH_AVAILABLE}")
logger.info("=" * 60)

# OpenAI import s√©curis√©
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    openai = None

# Configuration s√©curit√© pour authentification
security = HTTPBearer()

# =============================================================================
# MOD√àLES PYDANTIC - CORRIG√âS AVEC CONVERSATION_ID + USER_ID
# =============================================================================

class QuestionRequest(BaseModel):
    """Request model avec support conversation_id et user_id"""
    text: str = Field(..., min_length=1, max_length=5000, description="Question text")
    language: Optional[str] = Field("fr", description="Response language (fr, en, es)")
    speed_mode: Optional[str] = Field("balanced", description="Speed mode (fast, balanced, quality)")
    
    # ‚úÖ NOUVEAUX CHAMPS CRITIQUES
    conversation_id: Optional[str] = Field(None, description="Optional conversation ID to continue existing conversation")
    user_id: Optional[str] = Field(None, description="User ID for conversation tracking")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_default=True,
        extra="ignore"
    )

    def model_post_init(self, __context) -> None:
        if self.language not in ['fr', 'en', 'es']:
            self.language = 'fr'
        if self.speed_mode not in ['fast', 'balanced', 'quality']:
            self.speed_mode = 'balanced'

class ExpertResponse(BaseModel):
    """Response model standard"""
    question: str
    response: str
    conversation_id: str
    rag_used: bool
    rag_score: Optional[float] = None
    timestamp: str
    language: str
    response_time_ms: int
    mode: str = "expert_router_corrected"
    user: Optional[str] = None
    logged: bool = False
    validation_passed: Optional[bool] = None
    validation_confidence: Optional[float] = None

class FeedbackRequest(BaseModel):
    """Feedback model standard"""
    rating: str = Field(..., description="Rating: positive, negative, neutral")
    comment: Optional[str] = Field(None, description="Optional comment")
    conversation_id: Optional[str] = Field(None, description="Conversation ID")

    model_config = ConfigDict(
        str_strip_whitespace=True,
        extra="ignore"
    )

    def model_post_init(self, __context) -> None:
        if self.rating not in ['positive', 'negative', 'neutral']:
            self.rating = 'neutral'

# =============================================================================
# IMPORT LOGGING - CORRIG√â
# =============================================================================

try:
    from app.api.v1.logging import logger_instance, ConversationCreate
    LOGGING_AVAILABLE = True
    logger.info("‚úÖ Syst√®me de logging int√©gr√©")
except ImportError as e:
    LOGGING_AVAILABLE = False
    logger_instance = None
    ConversationCreate = None
    logger.warning(f"‚ö†Ô∏è Syst√®me de logging non disponible: {e}")

# =============================================================================
# FONCTION DE SAUVEGARDE CORRIG√âE
# =============================================================================

async def save_conversation_auto(
    conversation_id: str,
    question: str, 
    response: str,
    user_id: str = "anonymous",
    language: str = "fr",
    rag_used: bool = False,
    rag_score: float = None,
    response_time_ms: int = 0
) -> bool:
    """Sauvegarde automatique - COMPL√àTEMENT CORRIG√âE"""
    
    if not LOGGING_AVAILABLE or not logger_instance:
        logger.warning("‚ö†Ô∏è Logging non disponible pour sauvegarde")
        return False
    
    try:
        # Cr√©er l'objet conversation
        conversation = ConversationCreate(
            user_id=str(user_id),
            question=str(question),
            response=str(response),
            conversation_id=conversation_id,
            confidence_score=rag_score,
            response_time_ms=response_time_ms,
            language=language,
            rag_used=rag_used
        )
        
        # ‚úÖ M√âTHODE 1: Essayer log_conversation
        try:
            if hasattr(logger_instance, 'log_conversation'):
                record_id = logger_instance.log_conversation(conversation)
                logger.info(f"‚úÖ Conversation sauvegard√©e via log_conversation: {conversation_id}")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è log_conversation √©chou√©: {e}")
        
        # ‚úÖ M√âTHODE 2: Essayer save_conversation
        try:
            if hasattr(logger_instance, 'save_conversation'):
                record_id = logger_instance.save_conversation(conversation)
                logger.info(f"‚úÖ Conversation sauvegard√©e via save_conversation: {conversation_id}")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è save_conversation √©chou√©: {e}")
        
        # ‚úÖ M√âTHODE 3: Sauvegarde directe SQL (fallback)
        logger.info("üîÑ Tentative sauvegarde directe SQL...")
        
        import sqlite3
        from datetime import datetime
        
        with sqlite3.connect(logger_instance.db_path) as conn:
            record_id = str(uuid.uuid4())
            timestamp = datetime.now().isoformat()
            
            conn.execute("""
                INSERT INTO conversations (
                    id, conversation_id, user_id, question, response, 
                    confidence_score, response_time_ms, language, rag_used, timestamp
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                record_id, conversation_id, str(user_id), str(question), str(response),
                rag_score, response_time_ms, language, rag_used, timestamp
            ))
            
            logger.info(f"‚úÖ Conversation sauvegard√©e via SQL direct: {conversation_id}")
            return True
        
    except Exception as e:
        logger.error(f"‚ùå Toutes les m√©thodes de sauvegarde ont √©chou√©: {e}")
        return False

def get_user_id_from_request(fastapi_request: Request) -> str:
    """Extrait l'ID utilisateur"""
    try:
        user = getattr(fastapi_request.state, "user", None)
        if user:
            return str(user.get("id", user.get("user_id", "authenticated_user")))
        
        client_ip = fastapi_request.client.host if fastapi_request.client else "unknown"
        user_agent = fastapi_request.headers.get("user-agent", "unknown")
        
        import hashlib
        anonymous_data = f"{client_ip}_{user_agent}_{datetime.now().strftime('%Y-%m-%d')}"
        anonymous_id = f"anon_{hashlib.md5(anonymous_data.encode()).hexdigest()[:8]}"
        
        return anonymous_id
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration user_id: {e}")
        return f"anon_{uuid.uuid4().hex[:8]}"

# =============================================================================
# FONCTION DE VALIDATION AGRICOLE CENTRALIS√âE AVEC M√âMOIRE
# =============================================================================

async def validate_question_agricultural_domain(
    question: str, 
    language: str, 
    user_id: str, 
    request_ip: str,
    conversation_id: str = None  # ‚úÖ NOUVEAU PARAM√àTRE pour contexte
) -> tuple[bool, str, float]:
    """
    Valide qu'une question concerne le domaine agricole avec contexte conversationnel
    
    Returns:
        tuple[bool, str, float]: (is_valid, rejection_message_or_empty, confidence)
    """
    
    # Si le validateur n'est pas disponible, REJETER par s√©curit√©
    if not AGRICULTURAL_VALIDATOR_AVAILABLE:
        logger.error("‚ùå [Validation] Validateur agricole non disponible - REJET par s√©curit√©")
        
        rejection_messages = {
            "fr": "Service temporairement indisponible. Veuillez r√©essayer plus tard.",
            "en": "Service temporarily unavailable. Please try again later.",
            "es": "Servicio temporalmente no disponible. Por favor, int√©ntelo m√°s tarde."
        }
        
        return False, rejection_messages.get(language, rejection_messages["fr"]), 0.0
    
    # ‚úÖ NOUVEAU: Enrichir la question avec le contexte de conversation
    enriched_question = question
    if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
        try:
            conversation_context = get_context_for_rag(conversation_id)
            if conversation_context:
                enriched_question = f"{question}\n\nContexte de conversation:\n{conversation_context}"
                logger.info(f"üß† [Validation] Question enrichie avec contexte conversationnel")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [Validation] Erreur enrichissement contexte: {e}")
    
    # Si la validation est d√©sactiv√©e, accepter
    if not is_agricultural_validation_enabled():
        logger.info("üîß [Validation] Validation agricole d√©sactiv√©e - question accept√©e")
        return True, "", 100.0
    
    try:
        # Utiliser le validateur avec la question enrichie
        validation_result = validate_agricultural_question(
            question=enriched_question,  # ‚úÖ Question avec contexte
            language=language,
            user_id=user_id,
            request_ip=request_ip
        )
        
        logger.info(f"üîç [Validation] R√©sultat: {validation_result.is_valid} (confiance: {validation_result.confidence:.1f}%)")
        
        if validation_result.is_valid:
            return True, "", validation_result.confidence
        else:
            return False, validation_result.reason or "Question hors domaine agricole", validation_result.confidence
    
    except Exception as e:
        logger.error(f"‚ùå [Validation] Erreur validateur: {e}")
        
        # En cas d'erreur du validateur, rejeter par s√©curit√©
        rejection_messages = {
            "fr": "Erreur de validation. Veuillez reformuler votre question sur le domaine avicole.",
            "en": "Validation error. Please rephrase your question about the poultry domain.",
            "es": "Error de validaci√≥n. Por favor, reformule su pregunta sobre el dominio av√≠cola."
        }
        
        return False, rejection_messages.get(language, rejection_messages["fr"]), 0.0

# =============================================================================
# PROMPTS MULTI-LANGUES
# =============================================================================

EXPERT_PROMPTS = {
    "fr": """Tu es un expert v√©t√©rinaire sp√©cialis√© en sant√© et nutrition animale, particuli√®rement pour les poulets de chair. 
R√©ponds de mani√®re pr√©cise et pratique en fran√ßais. Tu peux utiliser tous les caract√®res fran√ßais (√©, √®, √†, √ß, √π, etc.) et tous les symboles (¬∞C, %, etc.) dans tes r√©ponses.

IMPORTANT: Ne fais pas r√©f√©rence √† une lign√©e g√©n√©tique comme Ross ou Cobb, sauf si l'utilisateur la mentionne dans sa question. Donne une r√©ponse g√©n√©rale qui s'applique √† tous les poulets de chair.""",
    
    "en": """You are a veterinary expert specialized in animal health and nutrition, particularly for broiler chickens.
Answer precisely and practically in English, providing advice based on industry best practices.

IMPORTANT: Do not reference specific genetic lines like Ross or Cobb, unless the user mentions them in their question. Provide general answers that apply to all broiler chickens.""",
    
    "es": """Eres un experto veterinario especializado en salud y nutrici√≥n animal, particularmente para pollos de engorde.
Responde de manera precisa y pr√°ctica en espa√±ol. Puedes usar todos los caract√©res especiales del espa√±ol (√±, ¬ø, ¬°, acentos, etc.) en tus respuestas.

IMPORTANTE: No hagas referencia a l√≠neas gen√©ticas como Ross o Cobb, a menos que el usuario las mencione en su pregunta. Da respuestas generales que se apliquen a todos los pollos de engorde."""
}

def get_expert_prompt(language: str) -> str:
    """Get expert system prompt for language"""
    return EXPERT_PROMPTS.get(language.lower(), EXPERT_PROMPTS["fr"])

# =============================================================================
# FONCTIONS HELPER
# =============================================================================

def get_fallback_response(question: str, language: str = "fr") -> str:
    """R√©ponse de fallback - utilis√©e seulement si OpenAI √©choue"""
    try:
        safe_question = str(question)[:50] if question else "votre question"
    except:
        safe_question = "votre question"
    
    fallback_responses = {
        "fr": f"Je suis un expert v√©t√©rinaire. Pour votre question sur '{safe_question}...', je recommande de surveiller les param√®tres environnementaux et de maintenir de bonnes pratiques d'hygi√®ne pour vos poulets de chair.",
        "en": f"I am a veterinary expert. For your question about '{safe_question}...', I recommend monitoring environmental parameters and maintaining good hygiene practices for your broiler chickens.",
        "es": f"Soy un experto veterinario. Para su pregunta sobre '{safe_question}...', recomiendo monitorear los par√°metros ambientales y mantener buenas pr√°cticas de higiene para sus pollos de engorde."
    }
    return fallback_responses.get(language.lower(), fallback_responses["fr"])

async def process_question_openai(question: str, language: str = "fr", speed_mode: str = "balanced") -> str:
    """Process question using OpenAI"""
    
    if not OPENAI_AVAILABLE or not openai:
        return get_fallback_response(question, language)
    
    try:
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            return get_fallback_response(question, language)
        
        openai.api_key = api_key
        system_prompt = get_expert_prompt(language)
        
        safe_question = str(question)
        
        model_config = {
            "fast": {"model": "gpt-3.5-turbo", "max_tokens": 300},
            "balanced": {"model": "gpt-3.5-turbo", "max_tokens": 500},
            "quality": {"model": "gpt-4o-mini", "max_tokens": 800}
        }
        
        config = model_config.get(speed_mode, model_config["balanced"])
        
        response = openai.chat.completions.create(
            model=config["model"],
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": safe_question}
            ],
            temperature=0.7,
            max_tokens=config["max_tokens"],
            timeout=15
        )
        
        answer = response.choices[0].message.content
        return str(answer) if answer else get_fallback_response(question, language)
        
    except Exception as e:
        logger.error(f"‚ùå OpenAI error: {e}")
        return get_fallback_response(question, language)

# =============================================================================
# ENDPOINT PRINCIPAL AVEC VALIDATION AGRICOLE + CLARIFICATION + M√âMOIRE CONVERSATIONNELLE
# =============================================================================

@router.post("/ask", response_model=ExpertResponse)
async def ask_expert_secure(
    request_data: QuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(get_current_user) if AUTH_AVAILABLE else None
):
    """Question avec authentification + validation agricole + clarification + M√âMOIRE CONVERSATIONNELLE"""
    start_time = time.time()
    
    try:
        logger.info("=" * 60)
        logger.info("üß† D√âBUT ask_expert_secure avec M√âMOIRE CONVERSATIONNELLE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID fourni: {request_data.conversation_id}")
        logger.info(f"üë§ User ID fourni: {request_data.user_id}")
        logger.info(f"üåê Langue: {request_data.language}")
        logger.info(f"‚ö° Mode: {request_data.speed_mode}")
        
        # V√©rification auth
        if not AUTH_AVAILABLE:
            logger.error("‚ùå AUTH_AVAILABLE = False")
            raise HTTPException(status_code=503, detail="Service d'authentification non disponible")
        
        if not current_user:
            logger.error("‚ùå current_user = None")
            raise HTTPException(status_code=503, detail="Service d'authentification non disponible")
        
        # L'utilisateur est authentifi√©
        user_id = current_user.get("user_id") or request_data.user_id
        user_email = current_user.get("email")
        request_ip = request.client.host if request.client else "unknown"
        
        logger.info(f"‚úÖ Authentifi√©: {user_email} ({user_id[:8] if user_id else 'N/A'}...)")
        
        # Ajouter les infos utilisateur √† la requ√™te
        request.state.user = current_user
        
        # R√©cup√©ration de la question avec validation
        question_text = request_data.text.strip()
        
        if not question_text:
            logger.error("‚ùå Question vide apr√®s nettoyage")
            raise HTTPException(status_code=400, detail="Question text is required")
        
        # ‚úÖ CORRECTION CRITIQUE: Gestion du conversation_id
        if request_data.conversation_id and request_data.conversation_id.strip():
            # R√âUTILISER l'ID existant fourni par le client
            conversation_id = request_data.conversation_id.strip()
            logger.info(f"üîÑ [conversation_id] CONTINUATION conversation: {conversation_id}")
        else:
            # CR√âER un nouveau conversation_id seulement si pas fourni
            conversation_id = str(uuid.uuid4())
            logger.info(f"üÜï [conversation_id] NOUVELLE conversation: {conversation_id}")
        
        # ‚úÖ NOUVEAU: Enregistrer le message utilisateur dans la m√©moire conversationnelle
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id or "authenticated_user",
                    message=question_text,
                    role="user",
                    language=request_data.language
                )
                logger.info(f"üß† [Memory] Message utilisateur enregistr√© dans conversation {conversation_id}")
                logger.info(f"üß† [Memory] Entit√©s connues: {conversation_context.extracted_entities}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement message: {e}")
        
        # üåæ === VALIDATION AGRICOLE OBLIGATOIRE AVEC CONTEXTE ===
        logger.info("üåæ [VALIDATION] D√©marrage validation domaine agricole avec m√©moire...")
        
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain(
            question=question_text,
            language=request_data.language,
            user_id=user_id or "authenticated_user",
            request_ip=request_ip,
            conversation_id=conversation_id  # ‚úÖ NOUVEAU: Contexte conversationnel
        )
        
        if not is_valid:
            logger.warning(f"üö´ [VALIDATION] Question rejet√©e: {rejection_message}")
            
            response_time_ms = int((time.time() - start_time) * 1000)
            
            # ‚úÖ NOUVEAU: Enregistrer aussi la r√©ponse de rejet dans la m√©moire
            if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                try:
                    add_message_to_conversation(
                        conversation_id=conversation_id,
                        user_id=user_id or "authenticated_user",
                        message=rejection_message,
                        role="assistant",
                        language=request_data.language
                    )
                    logger.info(f"üß† [Memory] Rejet enregistr√© dans conversation {conversation_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement rejet: {e}")
            
            await save_conversation_auto(
                conversation_id=conversation_id,
                question=question_text,
                response=rejection_message,
                user_id=user_id or "authenticated_user",
                language=request_data.language,
                rag_used=False,
                rag_score=None,
                response_time_ms=response_time_ms
            )
            
            response_obj = ExpertResponse(
                question=str(question_text),
                response=str(rejection_message),
                conversation_id=conversation_id,
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=response_time_ms,
                mode="agricultural_validation_rejected_with_memory",
                user=user_email,
                logged=True,
                validation_passed=False,
                validation_confidence=validation_confidence
            )
            
            logger.info("üö´ [VALIDATION] Question rejet√©e et logg√©e avec m√©moire")
            logger.info("=" * 60)
            return response_obj
        
        logger.info(f"‚úÖ [VALIDATION] Question valid√©e avec m√©moire (confiance: {validation_confidence:.1f}%)")
        
        # ===üÜï SYST√àME DE CLARIFICATION AVEC M√âMOIRE CONVERSATIONNELLE ===
        if CLARIFICATION_SYSTEM_AVAILABLE and is_clarification_system_enabled():
            logger.info("‚ùì [CLARIFICATION] V√©rification avec contexte conversationnel...")
            
            # ‚úÖ NOUVEAU: R√©cup√©rer le contexte conversationnel pour clarification
            conversation_context = {}
            if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                try:
                    conversation_context = get_context_for_clarification(conversation_id)
                    if conversation_context:
                        logger.info(f"üß† [Clarification] Contexte trouv√©: {conversation_context}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Clarification] Erreur r√©cup√©ration contexte: {e}")
            
            # ‚úÖ NOUVEAU: Si le contexte contient d√©j√† les infos principales, pas de clarification
            if conversation_context.get("breed") and conversation_context.get("age"):
                logger.info(f"üß† [Clarification] Contexte conversationnel suffisant - pas de clarification")
                logger.info(f"üß† [Clarification] Informations connues: {conversation_context}")
            else:
                # Analyse normale de clarification
                clarification_result = await analyze_question_for_clarification(
                    question=question_text,
                    language=request_data.language,
                    user_id=user_id or "authenticated_user",
                    conversation_id=conversation_id
                )
                
                if clarification_result.needs_clarification:
                    logger.info(f"‚ùì [CLARIFICATION] {len(clarification_result.questions)} questions g√©n√©r√©es")
                    
                    clarification_response = format_clarification_response(
                        questions=clarification_result.questions,
                        language=request_data.language,
                        original_question=question_text
                    )
                    
                    response_time_ms = int((time.time() - start_time) * 1000)
                    
                    # ‚úÖ NOUVEAU: Enregistrer la demande de clarification dans la m√©moire
                    if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                        try:
                            add_message_to_conversation(
                                conversation_id=conversation_id,
                                user_id=user_id or "authenticated_user",
                                message=clarification_response,
                                role="assistant",
                                language=request_data.language
                            )
                            logger.info(f"üß† [Memory] Clarification enregistr√©e dans conversation {conversation_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement clarification: {e}")
                    
                    await save_conversation_auto(
                        conversation_id=conversation_id,
                        question=question_text,
                        response=clarification_response,
                        user_id=user_id or "authenticated_user",
                        language=request_data.language,
                        rag_used=False,
                        rag_score=None,
                        response_time_ms=response_time_ms
                    )
                    
                    response_obj = ExpertResponse(
                        question=str(question_text),
                        response=str(clarification_response),
                        conversation_id=conversation_id,
                        rag_used=False,
                        rag_score=None,
                        timestamp=datetime.now().isoformat(),
                        language=request_data.language,
                        response_time_ms=response_time_ms,
                        mode="clarification_needed_authenticated_with_memory",
                        user=user_email,
                        logged=True,
                        validation_passed=True,
                        validation_confidence=validation_confidence
                    )
                    
                    logger.info("‚ùì [CLARIFICATION] Demande envoy√©e et logg√©e avec m√©moire")
                    logger.info("=" * 60)
                    return response_obj
                
                logger.info("‚úÖ [CLARIFICATION] Question suffisamment claire avec contexte")
        # ===üÜï FIN CLARIFICATION AVEC M√âMOIRE ===
        
        # === TRAITEMENT NORMAL (RAG/OpenAI) AVEC CONTEXTE CONVERSATIONNEL ===
        user = getattr(request.state, "user", None)
        
        # Variables par d√©faut
        rag_used = False
        rag_score = None
        answer = ""
        mode = "authenticated_direct_openai_with_memory"
        
        # Essayer RAG d'abord avec contexte conversationnel
        app = request.app
        process_rag = getattr(app.state, 'process_question_with_rag', None)
        
        if process_rag:
            try:
                logger.info("üîç Utilisation du syst√®me RAG avec contexte conversationnel...")
                
                # ‚úÖ NOUVEAU: Obtenir le contexte pour RAG
                rag_context = ""
                if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                    try:
                        rag_context = get_context_for_rag(conversation_id)
                        if rag_context:
                            logger.info(f"üß† [RAG] Contexte conversationnel ajout√©: {len(rag_context)} caract√®res")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [RAG] Erreur contexte conversationnel: {e}")
                
                # Appel RAG avec possibilit√© de contexte suppl√©mentaire
                try:
                    result = await process_rag(
                        question=question_text,
                        user=current_user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id,
                        context=rag_context  # ‚úÖ NOUVEAU: Contexte conversationnel pour RAG
                    )
                except TypeError:
                    # Si process_rag ne supporte pas le param√®tre context, l'ignorer
                    result = await process_rag(
                        question=question_text,
                        user=current_user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id
                    )
                
                answer = str(result.get("response", ""))
                rag_used = result.get("mode", "").startswith("rag")
                rag_score = result.get("score")
                mode = f"authenticated_{result.get('mode', 'rag_enhanced')}_with_memory"
                
                logger.info(f"‚úÖ RAG trait√© avec m√©moire - Mode: {mode}, Score: {rag_score}")
                
            except Exception as rag_error:
                logger.error(f"‚ùå Erreur RAG avec m√©moire: {rag_error}")
                answer = await process_question_openai(
                    question_text, 
                    request_data.language,
                    request_data.speed_mode
                )
                mode = "authenticated_fallback_openai_with_memory"
        else:
            logger.info("‚ö†Ô∏è RAG non disponible, utilisation OpenAI direct avec m√©moire")
            answer = await process_question_openai(
                question_text,
                request_data.language,
                request_data.speed_mode
            )
            mode = "authenticated_direct_openai_with_memory"
        
        response_time_ms = int((time.time() - start_time) * 1000)
        logger.info(f"‚è±Ô∏è Temps de traitement: {response_time_ms}ms")
        
        # ‚úÖ NOUVEAU: Enregistrer la r√©ponse dans la m√©moire conversationnelle
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id or "authenticated_user",
                    message=answer,
                    role="assistant",
                    language=request_data.language
                )
                logger.info(f"üß† [Memory] R√©ponse enregistr√©e dans conversation {conversation_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement r√©ponse: {e}")
        
        # Sauvegarde automatique avec le conversation_id appropri√©
        logged = await save_conversation_auto(
            conversation_id=conversation_id,
            question=question_text,
            response=answer,
            user_id=user_id or "authenticated_user",
            language=request_data.language,
            rag_used=rag_used,
            rag_score=rag_score,
            response_time_ms=response_time_ms
        )
        
        logger.info(f"üíæ Sauvegarde: {'‚úÖ R√©ussie' if logged else '‚ùå √âchou√©e'}")
        
        # ‚úÖ MODIFI√â: Mode enrichi avec information m√©moire
        mode_with_memory = f"{mode}_memory_{'enabled' if CONVERSATION_MEMORY_AVAILABLE else 'disabled'}"
        
        # Retourner la r√©ponse avec le M√äME conversation_id
        response_obj = ExpertResponse(
            question=str(question_text),
            response=str(answer),
            conversation_id=conversation_id,  # ‚úÖ M√äME ID que re√ßu ou nouveau
            rag_used=rag_used,
            rag_score=rag_score,
            timestamp=datetime.now().isoformat(),
            language=request_data.language,
            response_time_ms=response_time_ms,
            mode=mode_with_memory,  # ‚úÖ MODIFI√â avec info m√©moire
            user=user_email,
            logged=logged,
            validation_passed=True,
            validation_confidence=validation_confidence
        )
        
        logger.info(f"‚úÖ FIN ask_expert_secure avec M√âMOIRE - conversation_id retourn√©: {conversation_id}")
        logger.info("=" * 60)
        
        return response_obj
    
    except HTTPException:
        logger.info("=" * 60)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask expert s√©curis√© avec m√©moire: {e}")
        import traceback
        logger.error(f"‚ùå Traceback complet: {traceback.format_exc()}")
        logger.info("=" * 60)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINT PUBLIC AVEC VALIDATION AGRICOLE + CLARIFICATION + M√âMOIRE CONVERSATIONNELLE
# =============================================================================

@router.post("/ask-public", response_model=ExpertResponse)
async def ask_expert_public(
    request_data: QuestionRequest,
    request: Request
):
    """Question publique avec validation agricole + clarification + M√âMOIRE CONVERSATIONNELLE"""
    start_time = time.time()
    
    try:
        logger.info("=" * 60)
        logger.info("üß† D√âBUT ask_expert_public avec M√âMOIRE CONVERSATIONNELLE")
        logger.info(f"üìù Question re√ßue: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID fourni: {request_data.conversation_id}")
        logger.info(f"üë§ User ID fourni: {request_data.user_id}")
        logger.info(f"üåê Langue: {request_data.language}")
        
        # Validation de la question
        question_text = request_data.text.strip()
        
        if not question_text:
            logger.error("‚ùå Question vide apr√®s nettoyage")
            raise HTTPException(status_code=400, detail="Question text is required")
        
        # ‚úÖ CORRECTION CRITIQUE: Gestion du conversation_id
        if request_data.conversation_id and request_data.conversation_id.strip():
            # R√âUTILISER l'ID existant fourni par le client
            conversation_id = request_data.conversation_id.strip()
            logger.info(f"üîÑ [conversation_id] CONTINUATION conversation publique: {conversation_id}")
        else:
            # CR√âER un nouveau conversation_id seulement si pas fourni
            conversation_id = str(uuid.uuid4())
            logger.info(f"üÜï [conversation_id] NOUVELLE conversation publique: {conversation_id}")
        
        # User ID depuis requ√™te ou g√©n√©r√©
        user_id = request_data.user_id or get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        
        logger.info(f"üë§ User ID: {user_id}")
        
        # ‚úÖ NOUVEAU: Enregistrer le message utilisateur dans la m√©moire conversationnelle
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=question_text,
                    role="user",
                    language=request_data.language
                )
                logger.info(f"üß† [Memory] Message public enregistr√© dans conversation {conversation_id}")
                logger.info(f"üß† [Memory] Entit√©s connues: {conversation_context.extracted_entities}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement message public: {e}")
        
        # üåæ === VALIDATION AGRICOLE OBLIGATOIRE AVEC CONTEXTE ===
        logger.info("üåæ [VALIDATION] D√©marrage validation domaine agricole avec m√©moire...")
        
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain(
            question=question_text,
            language=request_data.language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id  # ‚úÖ NOUVEAU: Contexte conversationnel
        )
        
        if not is_valid:
            logger.warning(f"üö´ [VALIDATION] Question publique rejet√©e: {rejection_message}")
            
            response_time_ms = int((time.time() - start_time) * 1000)
            
            # ‚úÖ NOUVEAU: Enregistrer aussi la r√©ponse de rejet dans la m√©moire
            if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                try:
                    add_message_to_conversation(
                        conversation_id=conversation_id,
                        user_id=user_id,
                        message=rejection_message,
                        role="assistant",
                        language=request_data.language
                    )
                    logger.info(f"üß† [Memory] Rejet public enregistr√© dans conversation {conversation_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement rejet public: {e}")
            
            await save_conversation_auto(
                conversation_id=conversation_id,
                question=question_text,
                response=rejection_message,
                user_id=user_id,
                language=request_data.language,
                rag_used=False,
                rag_score=None,
                response_time_ms=response_time_ms
            )
            
            response_obj = ExpertResponse(
                question=str(question_text),
                response=str(rejection_message),
                conversation_id=conversation_id,
                rag_used=False,
                rag_score=None,
                timestamp=datetime.now().isoformat(),
                language=request_data.language,
                response_time_ms=response_time_ms,
                mode="public_agricultural_validation_rejected_with_memory",
                user=None,
                logged=True,
                validation_passed=False,
                validation_confidence=validation_confidence
            )
            
            logger.info("üö´ [VALIDATION] Question publique rejet√©e et logg√©e avec m√©moire")
            logger.info("=" * 60)
            return response_obj
        
        logger.info(f"‚úÖ [VALIDATION] Question publique valid√©e avec m√©moire (confiance: {validation_confidence:.1f}%)")
        
        # ===üÜï SYST√àME DE CLARIFICATION AVEC M√âMOIRE CONVERSATIONNELLE ===
        if CLARIFICATION_SYSTEM_AVAILABLE and is_clarification_system_enabled():
            logger.info("‚ùì [CLARIFICATION] V√©rification avec contexte conversationnel...")
            
            # ‚úÖ NOUVEAU: R√©cup√©rer le contexte conversationnel pour clarification
            conversation_context = {}
            if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                try:
                    conversation_context = get_context_for_clarification(conversation_id)
                    if conversation_context:
                        logger.info(f"üß† [Clarification] Contexte public trouv√©: {conversation_context}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [Clarification] Erreur r√©cup√©ration contexte public: {e}")
            
            # ‚úÖ NOUVEAU: Si le contexte contient d√©j√† les infos principales, pas de clarification
            if conversation_context.get("breed") and conversation_context.get("age"):
                logger.info(f"üß† [Clarification] Contexte conversationnel public suffisant - pas de clarification")
                logger.info(f"üß† [Clarification] Informations connues: {conversation_context}")
            else:
                # Analyse normale de clarification
                clarification_result = await analyze_question_for_clarification(
                    question=question_text,
                    language=request_data.language,
                    user_id=user_id,
                    conversation_id=conversation_id
                )
                
                if clarification_result.needs_clarification:
                    logger.info(f"‚ùì [CLARIFICATION] {len(clarification_result.questions)} questions g√©n√©r√©es")
                    
                    clarification_response = format_clarification_response(
                        questions=clarification_result.questions,
                        language=request_data.language,
                        original_question=question_text
                    )
                    
                    response_time_ms = int((time.time() - start_time) * 1000)
                    
                    # ‚úÖ NOUVEAU: Enregistrer la demande de clarification dans la m√©moire
                    if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                        try:
                            add_message_to_conversation(
                                conversation_id=conversation_id,
                                user_id=user_id,
                                message=clarification_response,
                                role="assistant",
                                language=request_data.language
                            )
                            logger.info(f"üß† [Memory] Clarification publique enregistr√©e dans conversation {conversation_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement clarification publique: {e}")
                    
                    await save_conversation_auto(
                        conversation_id=conversation_id,
                        question=question_text,
                        response=clarification_response,
                        user_id=user_id,
                        language=request_data.language,
                        rag_used=False,
                        rag_score=None,
                        response_time_ms=response_time_ms
                    )
                    
                    response_obj = ExpertResponse(
                        question=str(question_text),
                        response=str(clarification_response),
                        conversation_id=conversation_id,
                        rag_used=False,
                        rag_score=None,
                        timestamp=datetime.now().isoformat(),
                        language=request_data.language,
                        response_time_ms=response_time_ms,
                        mode="clarification_needed_public_with_memory",
                        user=None,
                        logged=True,
                        validation_passed=True,
                        validation_confidence=validation_confidence
                    )
                    
                    logger.info("‚ùì [CLARIFICATION] Demande publique envoy√©e et logg√©e avec m√©moire")
                    logger.info("=" * 60)
                    return response_obj
                
                logger.info("‚úÖ [CLARIFICATION] Question publique suffisamment claire avec contexte")
        # ===üÜï FIN CLARIFICATION AVEC M√âMOIRE ===
        
        # === TRAITEMENT NORMAL (RAG/OpenAI) AVEC CONTEXTE CONVERSATIONNEL ===
        user = getattr(request.state, "user", None)
        
        # Variables par d√©faut
        rag_used = False
        rag_score = None
        answer = ""
        mode = "direct_openai_with_memory"
        
        # Essayer RAG d'abord avec contexte conversationnel
        app = request.app
        process_rag = getattr(app.state, 'process_question_with_rag', None)
        
        if process_rag:
            try:
                logger.info("üîç Utilisation du syst√®me RAG public avec contexte conversationnel...")
                
                # ‚úÖ NOUVEAU: Obtenir le contexte pour RAG
                rag_context = ""
                if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
                    try:
                        rag_context = get_context_for_rag(conversation_id)
                        if rag_context:
                            logger.info(f"üß† [RAG] Contexte conversationnel public ajout√©: {len(rag_context)} caract√®res")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [RAG] Erreur contexte conversationnel public: {e}")
                
                # Appel RAG avec possibilit√© de contexte suppl√©mentaire
                try:
                    result = await process_rag(
                        question=question_text,
                        user=user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id,
                        context=rag_context  # ‚úÖ NOUVEAU: Contexte conversationnel pour RAG
                    )
                except TypeError:
                    # Si process_rag ne supporte pas le param√®tre context, l'ignorer
                    result = await process_rag(
                        question=question_text,
                        user=user,
                        language=request_data.language,
                        speed_mode=request_data.speed_mode,
                        conversation_id=conversation_id
                    )
                
                answer = str(result.get("response", ""))
                rag_used = result.get("mode", "").startswith("rag")
                rag_score = result.get("score")
                mode = f"{result.get('mode', 'rag_enhanced')}_with_memory"
                
                logger.info(f"‚úÖ RAG public trait√© avec m√©moire - Mode: {mode}, Score: {rag_score}")
                
            except Exception as rag_error:
                logger.error(f"‚ùå Erreur RAG public avec m√©moire: {rag_error}")
                answer = await process_question_openai(
                    question_text, 
                    request_data.language,
                    request_data.speed_mode
                )
                mode = "fallback_openai_with_memory"
        else:
            logger.info("‚ö†Ô∏è RAG non disponible, utilisation OpenAI public avec m√©moire")
            answer = await process_question_openai(
                question_text,
                request_data.language,
                request_data.speed_mode
            )
            mode = "direct_openai_with_memory"
        
        response_time_ms = int((time.time() - start_time) * 1000)
        logger.info(f"‚è±Ô∏è Temps de traitement: {response_time_ms}ms")
        
        # ‚úÖ NOUVEAU: Enregistrer la r√©ponse dans la m√©moire conversationnelle
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=answer,
                    role="assistant",
                    language=request_data.language
                )
                logger.info(f"üß† [Memory] R√©ponse publique enregistr√©e dans conversation {conversation_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement r√©ponse publique: {e}")
        
        # Sauvegarde automatique
        logged = await save_conversation_auto(
            conversation_id=conversation_id,
            question=question_text,
            response=answer,
            user_id=user_id,
            language=request_data.language,
            rag_used=rag_used,
            rag_score=rag_score,
            response_time_ms=response_time_ms
        )
        
        logger.info(f"üíæ Sauvegarde: {'‚úÖ R√©ussie' if logged else '‚ùå √âchou√©e'}")
        
        # ‚úÖ MODIFI√â: Mode enrichi avec information m√©moire
        mode_with_memory = f"{mode}_memory_{'enabled' if CONVERSATION_MEMORY_AVAILABLE else 'disabled'}"
        
        # Retourner la r√©ponse
        response_obj = ExpertResponse(
            question=str(question_text),
            response=str(answer),
            conversation_id=conversation_id,  # ‚úÖ M√äME ID que re√ßu ou nouveau
            rag_used=rag_used,
            rag_score=rag_score,
            timestamp=datetime.now().isoformat(),
            language=request_data.language,
            response_time_ms=response_time_ms,
            mode=mode_with_memory,  # ‚úÖ MODIFI√â avec info m√©moire
            user=str(user) if user else None,
            logged=logged,
            validation_passed=True,
            validation_confidence=validation_confidence
        )
        
        logger.info(f"‚úÖ FIN ask_expert_public avec M√âMOIRE - conversation_id retourn√©: {conversation_id}")
        logger.info("=" * 60)
        
        return response_obj
    
    except HTTPException:
        logger.info("=" * 60)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask expert public avec m√©moire: {e}")
        import traceback
        logger.error(f"‚ùå Traceback complet: {traceback.format_exc()}")
        logger.info("=" * 60)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# ENDPOINT FEEDBACK - COMPL√àTEMENT CORRIG√â
# =============================================================================

@router.post("/feedback")
async def submit_feedback(feedback_data: FeedbackRequest):
    """Submit feedback - COMPL√àTEMENT CORRIG√â"""
    try:
        logger.info(f"üìä Feedback re√ßu: {feedback_data.rating}")
        logger.info(f"üìä Conversation ID: {feedback_data.conversation_id}")
        logger.info(f"üìä Commentaire: {feedback_data.comment}")
        
        feedback_updated = False
        
        if feedback_data.conversation_id and LOGGING_AVAILABLE and logger_instance:
            try:
                # Convertir le rating en format num√©rique
                rating_numeric = {
                    "positive": 1,
                    "negative": -1,
                    "neutral": 0
                }.get(feedback_data.rating, 0)
                
                logger.info(f"üìä Rating num√©rique: {rating_numeric}")
                
                # ‚úÖ M√âTHODE 1: Essayer update_feedback si disponible
                try:
                    if hasattr(logger_instance, 'update_feedback'):
                        feedback_updated = logger_instance.update_feedback(
                            feedback_data.conversation_id, 
                            rating_numeric
                        )
                        logger.info(f"‚úÖ Feedback mis √† jour via update_feedback: {feedback_updated}")
                    else:
                        logger.warning("‚ö†Ô∏è M√©thode update_feedback non disponible")
                        feedback_updated = False
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è update_feedback √©chou√©: {e}")
                    feedback_updated = False
                
                # ‚úÖ M√âTHODE 2: SQL direct si update_feedback √©choue
                if not feedback_updated:
                    logger.info("üîÑ Tentative mise √† jour feedback via SQL direct...")
                    
                    import sqlite3
                    with sqlite3.connect(logger_instance.db_path) as conn:
                        cursor = conn.execute("""
                            UPDATE conversations 
                            SET feedback = ?, updated_at = CURRENT_TIMESTAMP 
                            WHERE conversation_id = ?
                        """, (rating_numeric, feedback_data.conversation_id))
                        
                        feedback_updated = cursor.rowcount > 0
                        
                        if feedback_updated:
                            logger.info(f"‚úÖ Feedback mis √† jour via SQL direct: {feedback_data.conversation_id}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Conversation non trouv√©e: {feedback_data.conversation_id}")
                
            except Exception as e:
                logger.error(f"‚ùå Erreur mise √† jour feedback: {e}")
                feedback_updated = False
        else:
            if not feedback_data.conversation_id:
                logger.warning("‚ö†Ô∏è Conversation ID manquant")
            if not LOGGING_AVAILABLE:
                logger.warning("‚ö†Ô∏è Logging non disponible")
            if not logger_instance:
                logger.warning("‚ö†Ô∏è Logger instance non disponible")
        
        return {
            "success": True,
            "message": "Feedback enregistr√© avec succ√®s",
            "rating": feedback_data.rating,
            "comment": feedback_data.comment,
            "conversation_id": feedback_data.conversation_id,
            "feedback_updated_in_db": feedback_updated,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur feedback critique: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Erreur enregistrement feedback: {str(e)}")

# =============================================================================
# AUTRES ENDPOINTS (conserv√©s identiques)
# =============================================================================

@router.get("/topics")
async def get_suggested_topics(language: str = "fr"):
    """Get suggested topics"""
    try:
        lang = language.lower() if language else "fr"
        if lang not in ["fr", "en", "es"]:
            lang = "fr"
        
        topics_by_language = {
            "fr": [
                "Protocoles Compass pour l'analyse de performance",
                "Probl√®mes de croissance poulets de chair",
                "Temp√©rature optimale pour √©levage (32¬∞C)",
                "Mortalit√© √©lev√©e - diagnostic",
                "Ventilation et qualit√© d'air",
                "Protocoles de vaccination",
                "Indices de conversion alimentaire"
            ],
            "en": [
                "Compass Performance Analysis Protocol",
                "Broiler chicken growth problems",
                "Optimal temperature for farming (32¬∞C)",
                "High mortality - diagnosis", 
                "Ventilation and air quality",
                "Vaccination protocols",
                "Feed conversion ratios"
            ],
            "es": [
                "Protocolos Compass an√°lisis rendimiento",
                "Problemas crecimiento pollos de engorde",
                "Temperatura √≥ptima crianza (32¬∞C)",
                "Mortalidad alta - diagn√≥stico",
                "Ventilaci√≥n y calidad aire",
                "Protocolos vacunaci√≥n",
                "√çndices conversi√≥n alimentaria"
            ]
        }
        
        topics = topics_by_language.get(lang, topics_by_language["fr"])
        
        return {
            "topics": topics,
            "language": lang,
            "count": len(topics),
            "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else False,
            "clarification_enabled": is_clarification_system_enabled() if CLARIFICATION_SYSTEM_AVAILABLE else False,
            "memory_enabled": CONVERSATION_MEMORY_AVAILABLE,  # ‚úÖ NOUVEAU
            "note": "Topics g√©n√©riques pour tous poulets de chair"
        }
    except Exception as e:
        logger.error(f"‚ùå Erreur topics: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration topics")

# =============================================================================
# NOUVEAUX ENDPOINTS M√âMOIRE CONVERSATIONNELLE
# =============================================================================

@router.get("/conversation/{conversation_id}/context")
async def get_conversation_context_endpoint(conversation_id: str):
    """R√©cup√®re le contexte d'une conversation"""
    try:
        if not CONVERSATION_MEMORY_AVAILABLE:
            raise HTTPException(status_code=503, detail="Service de m√©moire non disponible")
        
        context = get_conversation_context(conversation_id)
        
        if not context:
            raise HTTPException(status_code=404, detail="Conversation non trouv√©e")
        
        return {
            "conversation_id": conversation_id,
            "context": context.to_dict(),
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur r√©cup√©ration contexte: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.get("/memory/stats")
async def get_memory_stats():
    """Statistiques du syst√®me de m√©moire conversationnelle"""
    try:
        if not CONVERSATION_MEMORY_AVAILABLE:
            return {
                "memory_available": False,
                "message": "Syst√®me de m√©moire non disponible"
            }
        
        stats = get_conversation_memory_stats()
        
        return {
            "memory_available": True,
            "stats": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur stats m√©moire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur stats: {str(e)}")

@router.post("/memory/cleanup")
async def cleanup_expired_conversations_endpoint():
    """Nettoie les conversations expir√©es"""
    try:
        if not CONVERSATION_MEMORY_AVAILABLE:
            raise HTTPException(status_code=503, detail="Service de m√©moire non disponible")
        
        cleanup_expired_conversations()
        
        return {
            "success": True,
            "message": "Nettoyage des conversations expir√©es effectu√©",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur nettoyage m√©moire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur nettoyage: {str(e)}")

@router.get("/conversation/{conversation_id}/history")
async def get_conversation_history(conversation_id: str, limit: int = Query(10, ge=1, le=50)):
    """R√©cup√®re l'historique d'une conversation"""
    try:
        if not CONVERSATION_MEMORY_AVAILABLE:
            raise HTTPException(status_code=503, detail="Service de m√©moire non disponible")
        
        context = get_conversation_context(conversation_id)
        
        if not context:
            raise HTTPException(status_code=404, detail="Conversation non trouv√©e")
        
        # Limiter les messages retourn√©s
        messages = context.messages[-limit:] if context.messages else []
        
        return {
            "conversation_id": conversation_id,
            "messages": messages,
            "message_count": len(messages),
            "total_messages": len(context.messages),
            "extracted_entities": context.extracted_entities,
            "language": context.language,
            "last_activity": context.last_activity.isoformat(),
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur historique conversation: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

# =============================================================================
# NOUVEAUX ENDPOINTS DE DIAGNOSTIC ET CLARIFICATION
# =============================================================================

@router.get("/validation-stats")
async def get_validation_stats():
    """Statistiques du validateur agricole"""
    try:
        if not AGRICULTURAL_VALIDATOR_AVAILABLE:
            return {
                "error": "Validateur agricole non disponible",
                "available": False,
                "stats": None
            }
        
        stats = get_agricultural_validator_stats()
        
        return {
            "available": True,
            "validation_enabled": is_agricultural_validation_enabled(),
            "stats": stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur stats validation: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration stats")

@router.post("/test-clarification")
async def test_clarification_system(
    request_data: QuestionRequest,
    request: Request
):
    """Endpoint de test pour le syst√®me de clarification"""
    try:
        question_text = request_data.text.strip()
        user_id = get_user_id_from_request(request)
        conversation_id = request_data.conversation_id or str(uuid.uuid4())
        
        if not CLARIFICATION_SYSTEM_AVAILABLE:
            return {
                "system_available": False,
                "message": "Syst√®me de clarification non disponible",
                "question": question_text,
                "timestamp": datetime.now().isoformat()
            }
        
        if not is_clarification_system_enabled():
            return {
                "system_available": True,
                "system_enabled": False,
                "message": "Syst√®me de clarification d√©sactiv√©",
                "question": question_text,
                "timestamp": datetime.now().isoformat()
            }
        
        # Test de clarification
        clarification_result = await analyze_question_for_clarification(
            question=question_text,
            language=request_data.language,
            user_id=user_id,
            conversation_id=conversation_id
        )
        
        if clarification_result.needs_clarification:
            formatted_response = format_clarification_response(
                questions=clarification_result.questions,
                language=request_data.language,
                original_question=question_text
            )
            
            return {
                "system_available": True,
                "system_enabled": True,
                "needs_clarification": True,
                "question": question_text,
                "language": request_data.language,
                "clarification_questions": clarification_result.questions,
                "formatted_response": formatted_response,
                "confidence_score": clarification_result.confidence_score,
                "processing_time_ms": clarification_result.processing_time_ms,
                "model_used": clarification_result.model_used,
                "system_stats": get_clarification_system_stats(),
                "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE and conversation_id else None,  # ‚úÖ NOUVEAU
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "system_available": True,
                "system_enabled": True,
                "needs_clarification": False,
                "question": question_text,
                "language": request_data.language,
                "reason": clarification_result.reason,
                "processing_time_ms": clarification_result.processing_time_ms,
                "system_stats": get_clarification_system_stats(),
                "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE and conversation_id else None,  # ‚úÖ NOUVEAU
                "timestamp": datetime.now().isoformat()
            }
    
    except Exception as e:
        logger.error(f"‚ùå [Clarification] Erreur test: {e}")
        return {
            "system_available": CLARIFICATION_SYSTEM_AVAILABLE,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.get("/clarification-status")
async def get_clarification_status():
    """Retourne le statut du syst√®me de clarification"""
    if not CLARIFICATION_SYSTEM_AVAILABLE:
        return {
            "system_available": False,
            "message": "Module de clarification non import√©",
            "timestamp": datetime.now().isoformat()
        }
    
    return {
        "system_available": True,
        "clarification_system": get_clarification_system_stats(),
        "configuration_source": "environment_variables_and_settings",
        "can_be_disabled": True,
        "disable_instruction": "Set ENABLE_CLARIFICATION_SYSTEM=false in .env",
        "timestamp": datetime.now().isoformat()
    }

@router.post("/test-validation")
async def test_validation(
    request_data: QuestionRequest,
    request: Request
):
    """Test endpoint pour tester la validation sans traitement"""
    try:
        question_text = request_data.text.strip()
        user_id = get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        conversation_id = request_data.conversation_id or str(uuid.uuid4())  # ‚úÖ NOUVEAU
        
        if not AGRICULTURAL_VALIDATOR_AVAILABLE:
            return {
                "error": "Validateur agricole non disponible",
                "available": False
            }
        
        # Test de validation avec contexte conversationnel
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain(
            question=question_text,
            language=request_data.language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id  # ‚úÖ NOUVEAU
        )
        
        return {
            "question": question_text,
            "language": request_data.language,
            "validation_passed": is_valid,
            "confidence": validation_confidence,
            "rejection_message": rejection_message if not is_valid else None,
            "validator_available": True,
            "validation_enabled": is_agricultural_validation_enabled(),
            "conversation_id": conversation_id,
            "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE and conversation_id else None,  # ‚úÖ NOUVEAU
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test validation: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur test validation: {str(e)}")

# =============================================================================
# ENDPOINTS DEBUG (conserv√©s identiques)
# =============================================================================

@router.get("/debug-database")
async def debug_database_info():
    """Debug des informations de base de donn√©es - CORRIG√â"""
    try:
        if not LOGGING_AVAILABLE or not logger_instance:
            return {
                "error": "Logging non disponible",
                "logging_available": LOGGING_AVAILABLE,
                "logger_instance": bool(logger_instance)
            }
        
        import sqlite3
        
        # V√©rifier la structure de la base
        with sqlite3.connect(logger_instance.db_path) as conn:
            # Lister les tables
            tables = conn.execute("""
                SELECT name FROM sqlite_master WHERE type='table'
            """).fetchall()
            
            # Structure de la table conversations
            schema = []
            count = 0
            recent = []
            
            if tables:
                try:
                    schema = conn.execute("PRAGMA table_info(conversations)").fetchall()
                    count = conn.execute("SELECT COUNT(*) FROM conversations").fetchone()[0]
                    recent = conn.execute("""
                        SELECT conversation_id, user_id, feedback, timestamp 
                        FROM conversations 
                        ORDER BY timestamp DESC 
                        LIMIT 5
                    """).fetchall()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur requ√™tes base: {e}")
        
        # M√©thodes disponibles
        logger_methods = [method for method in dir(logger_instance) if not method.startswith('_')]
        
        return {
            "logging_available": LOGGING_AVAILABLE,
            "database_path": logger_instance.db_path,
            "tables": [table[0] for table in tables],
            "conversations_schema": [{"name": col[1], "type": col[2]} for col in schema],
            "conversations_count": count,
            "recent_conversations": [
                {
                    "conversation_id": row[0],
                    "user_id": row[1],
                    "feedback": row[2],
                    "timestamp": row[3]
                } for row in recent
            ],
            "logger_methods": logger_methods,
            "has_save_conversation": hasattr(logger_instance, 'save_conversation'),
            "has_log_conversation": hasattr(logger_instance, 'log_conversation'),
            "has_update_feedback": hasattr(logger_instance, 'update_feedback'),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur debug database: {e}")
        return {
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@router.get("/debug-system")
async def debug_system_info():
    """Endpoint de diagnostic syst√®me complet avec validateur, clarification et M√âMOIRE"""
    import os
    import sys
    
    # Tests d'import d√©taill√©s
    import_tests = {}
    
    try:
        import app
        import_tests["app"] = "‚úÖ OK"
    except Exception as e:
        import_tests["app"] = f"‚ùå {str(e)}"
    
    try:
        import app.api.v1.auth
        import_tests["app.api.v1.auth"] = "‚úÖ OK"
        auth_attrs = dir(app.api.v1.auth)
        auth_functions = [attr for attr in auth_attrs if not attr.startswith('_') and callable(getattr(app.api.v1.auth, attr, None))]
        import_tests["app.api.v1.auth.functions"] = auth_functions
    except Exception as e:
        import_tests["app.api.v1.auth"] = f"‚ùå {str(e)}"
    
    # Test sp√©cifique du validateur agricole
    try:
        import app.api.v1.agricultural_domain_validator
        import_tests["agricultural_validator_module"] = "‚úÖ OK"
        
        validator_attrs = dir(app.api.v1.agricultural_domain_validator)
        validator_functions = [attr for attr in validator_attrs if not attr.startswith('_')]
        import_tests["agricultural_validator_functions"] = validator_functions
        
    except Exception as e:
        import_tests["agricultural_validator_module"] = f"‚ùå {str(e)}"
    
    # Test sp√©cifique du syst√®me de clarification
    try:
        import app.api.v1.question_clarification_system
        import_tests["clarification_system_module"] = "‚úÖ OK"
        
        clarification_attrs = dir(app.api.v1.question_clarification_system)
        clarification_functions = [attr for attr in clarification_attrs if not attr.startswith('_')]
        import_tests["clarification_system_functions"] = clarification_functions
        
    except Exception as e:
        import_tests["clarification_system_module"] = f"‚ùå {str(e)}"
    
    # ‚úÖ NOUVEAU: Test sp√©cifique du syst√®me de m√©moire conversationnelle
    try:
        import app.api.v1.conversation_memory
        import_tests["conversation_memory_module"] = "‚úÖ OK"
        
        memory_attrs = dir(app.api.v1.conversation_memory)
        memory_functions = [attr for attr in memory_attrs if not attr.startswith('_')]
        import_tests["conversation_memory_functions"] = memory_functions
        
    except Exception as e:
        import_tests["conversation_memory_module"] = f"‚ùå {str(e)}"
    
    return {
        "auth_available": AUTH_AVAILABLE,
        "agricultural_validator_available": AGRICULTURAL_VALIDATOR_AVAILABLE,
        "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        "clarification_system_available": CLARIFICATION_SYSTEM_AVAILABLE,
        "clarification_enabled": is_clarification_system_enabled() if CLARIFICATION_SYSTEM_AVAILABLE else None,
        "conversation_memory_available": CONVERSATION_MEMORY_AVAILABLE,  # ‚úÖ NOUVEAU
        "openai_available": OPENAI_AVAILABLE,
        "logging_available": LOGGING_AVAILABLE,
        "conversation_id_support": "‚úÖ Activ√© dans cette version",
        "user_id_support": "‚úÖ Activ√© dans cette version",
        "memory_conversational_support": "‚úÖ Activ√© avec continuit√© contextuelle",  # ‚úÖ NOUVEAU
        "current_directory": os.path.dirname(__file__),
        "python_path_sample": sys.path[:3],
        "import_tests": import_tests,
        "validator_stats": get_agricultural_validator_stats() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        "clarification_stats": get_clarification_system_stats() if CLARIFICATION_SYSTEM_AVAILABLE else None,
        "memory_stats": get_conversation_memory_stats() if CONVERSATION_MEMORY_AVAILABLE else None,  # ‚úÖ NOUVEAU
        "timestamp": datetime.now().isoformat()
    }

@router.get("/debug-auth")
async def debug_auth_info(request: Request):
    """Endpoint de diagnostic rapide avec validation, clarification et M√âMOIRE"""
    auth_header = request.headers.get("Authorization")
    
    return {
        "auth_available": AUTH_AVAILABLE,
        "agricultural_validator_available": AGRICULTURAL_VALIDATOR_AVAILABLE,
        "validation_enabled": is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else None,
        "clarification_system_available": CLARIFICATION_SYSTEM_AVAILABLE,
        "clarification_enabled": is_clarification_system_enabled() if CLARIFICATION_SYSTEM_AVAILABLE else None,
        "conversation_memory_available": CONVERSATION_MEMORY_AVAILABLE,  # ‚úÖ NOUVEAU
        "auth_header_present": bool(auth_header),
        "auth_header_preview": auth_header[:50] + "..." if auth_header else None,
        "openai_available": OPENAI_AVAILABLE,
        "logging_available": LOGGING_AVAILABLE,
        "conversation_id_support": "‚úÖ Activ√©",
        "user_id_support": "‚úÖ Activ√©",
        "conversational_memory_support": "‚úÖ Activ√© avec continuit√© contextuelle",  # ‚úÖ NOUVEAU
        "timestamp": datetime.now().isoformat()
    }

@router.post("/test-utf8")
async def test_utf8_direct(request: Request):
    """Test endpoint pour UTF-8 direct avec validation, clarification et M√âMOIRE"""
    try:
        # R√©cup√©rer le body brut
        body = await request.body()
        body_str = body.decode('utf-8')
        
        logger.info(f"üìù Body brut re√ßu: {body_str}")
        
        # Parser JSON manuellement
        import json
        data = json.loads(body_str)
        
        question_text = data.get('text', '')
        language = data.get('language', 'fr')
        conversation_id = data.get('conversation_id', str(uuid.uuid4()))  # ‚úÖ NOUVEAU
        
        logger.info(f"üìù Question extraite: {question_text}")
        logger.info(f"üî§ Caract√®res sp√©ciaux: {[c for c in question_text if ord(c) > 127]}")
        logger.info(f"üÜî Conversation ID: {conversation_id}")
        
        # Test de validation
        user_id = get_user_id_from_request(request)
        request_ip = request.client.host if request.client else "unknown"
        
        # ‚úÖ NOUVEAU: Enregistrer le message dans la m√©moire
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id:
            try:
                conversation_context = add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=question_text,
                    role="user",
                    language=language
                )
                logger.info(f"üß† [Memory] Message test UTF-8 enregistr√©: {conversation_context.extracted_entities}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur test UTF-8: {e}")
        
        is_valid, rejection_message, validation_confidence = await validate_question_agricultural_domain(
            question=question_text,
            language=language,
            user_id=user_id,
            request_ip=request_ip,
            conversation_id=conversation_id  # ‚úÖ NOUVEAU: Avec contexte
        )
        
        if not is_valid:
            return {
                "success": False,
                "question_received": question_text,
                "special_chars_detected": [c for c in question_text if ord(c) > 127],
                "validation_passed": False,
                "rejection_message": rejection_message,
                "confidence": validation_confidence,
                "conversation_id": conversation_id,
                "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE else None,  # ‚úÖ NOUVEAU
                "method": "direct_body_parsing_with_validation_and_memory",
                "timestamp": datetime.now().isoformat()
            }
        
        # Test de clarification si disponible avec m√©moire
        clarification_result = None
        if CLARIFICATION_SYSTEM_AVAILABLE and is_clarification_system_enabled():
            clarification_result = await analyze_question_for_clarification(
                question=question_text,
                language=language,
                user_id=user_id,
                conversation_id=conversation_id  # ‚úÖ NOUVEAU: Avec contexte
            )
        
        # Traitement direct seulement si valid√© et pas de clarification
        if clarification_result and clarification_result.needs_clarification:
            return {
                "success": True,
                "question_received": question_text,
                "special_chars_detected": [c for c in question_text if ord(c) > 127],
                "validation_passed": True,
                "confidence": validation_confidence,
                "needs_clarification": True,
                "clarification_questions": clarification_result.questions,
                "conversation_id": conversation_id,
                "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE else None,  # ‚úÖ NOUVEAU
                "method": "direct_body_parsing_with_validation_clarification_and_memory",
                "timestamp": datetime.now().isoformat()
            }
        
        answer = await process_question_openai(question_text, language, "fast")
        
        # ‚úÖ NOUVEAU: Enregistrer la r√©ponse dans la m√©moire
        if CONVERSATION_MEMORY_AVAILABLE and conversation_id and answer:
            try:
                add_message_to_conversation(
                    conversation_id=conversation_id,
                    user_id=user_id,
                    message=answer,
                    role="assistant",
                    language=language
                )
                logger.info(f"üß† [Memory] R√©ponse test UTF-8 enregistr√©e")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [Memory] Erreur enregistrement r√©ponse test: {e}")
        
        return {
            "success": True,
            "question_received": question_text,
            "special_chars_detected": [c for c in question_text if ord(c) > 127],
            "validation_passed": True,
            "confidence": validation_confidence,
            "needs_clarification": False,
            "response": answer,
            "conversation_id": conversation_id,
            "memory_context": get_context_for_clarification(conversation_id) if CONVERSATION_MEMORY_AVAILABLE else None,  # ‚úÖ NOUVEAU
            "method": "direct_body_parsing_with_validation_clarification_and_memory",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test UTF-8: {e}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# =============================================================================
# CONFIGURATION
# =============================================================================

if OPENAI_AVAILABLE and openai:
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if openai_api_key:
        openai.api_key = openai_api_key
        logger.info("‚úÖ OpenAI configur√© avec succ√®s")
    else:
        logger.warning("‚ö†Ô∏è OpenAI API key non trouv√©e")
else:
    logger.warning("‚ö†Ô∏è Module OpenAI non disponible")

logger.info("‚úÖ EXPERT.PY AVEC SYST√àME DE M√âMOIRE CONVERSATIONNELLE INT√âGR√â")
logger.info(f"üß† CONVERSATION_MEMORY_AVAILABLE: {CONVERSATION_MEMORY_AVAILABLE}")
logger.info(f"üîß AUTH_AVAILABLE: {AUTH_AVAILABLE}")
logger.info(f"üåæ AGRICULTURAL_VALIDATOR_AVAILABLE: {AGRICULTURAL_VALIDATOR_AVAILABLE}")
logger.info(f"üåæ VALIDATION_ENABLED: {is_agricultural_validation_enabled() if AGRICULTURAL_VALIDATOR_AVAILABLE else 'N/A'}")
logger.info(f"‚ùì CLARIFICATION_SYSTEM_AVAILABLE: {CLARIFICATION_SYSTEM_AVAILABLE}")
logger.info(f"‚ùì CLARIFICATION_ENABLED: {is_clarification_system_enabled() if CLARIFICATION_SYSTEM_AVAILABLE else 'N/A'}")
logger.info(f"üíæ LOGGING_AVAILABLE: {LOGGING_AVAILABLE}")
logger.info(f"ü§ñ OPENAI_AVAILABLE: {OPENAI_AVAILABLE}")
logger.info("üîß FONCTIONNALIT√âS CONVERSATIONNELLES ACTIV√âES:")
logger.info("   - üß† M√©moire conversationnelle avec extraction d'entit√©s")
logger.info("   - üîÑ Continuit√© contextuelle entre questions d'une m√™me conversation")
logger.info("   - üìä Validation agricole enrichie avec contexte conversationnel")
logger.info("   - ‚ùì Clarification intelligente bas√©e sur l'historique")
logger.info("   - üèóÔ∏è RAG enrichi avec contexte de conversation")
logger.info("   - üíæ Persistance automatique avec expiration (24h)")
logger.info("   - üóëÔ∏è Nettoyage automatique des conversations expir√©es")
logger.info("üîß ENDPOINTS DISPONIBLES:")
logger.info("   - POST /ask (authentifi√©) + m√©moire conversationnelle")
logger.info("   - POST /ask-public (public) + m√©moire conversationnelle") 
logger.info("   - POST /feedback (am√©lioration avec conversation_id)")
logger.info("   - GET /topics (suggestions sujets)")
logger.info("   - GET /validation-stats (stats validateur)")
logger.info("   - POST /test-clarification (test clarifications + m√©moire)")
logger.info("   - GET /clarification-status (status clarifications)")
logger.info("   - POST /test-validation (test validation)")
logger.info("üîß NOUVEAUX ENDPOINTS M√âMOIRE:")
logger.info("   - GET /conversation/{id}/context (contexte conversationnel)")
logger.info("   - GET /conversation/{id}/history (historique messages)")
logger.info("   - GET /memory/stats (statistiques m√©moire)")
logger.info("   - POST /memory/cleanup (nettoyage conversations expir√©es)")
logger.info("   - GET /debug-database (debug base donn√©es)")
logger.info("   - GET /debug-system (diagnostic complet + m√©moire)")
logger.info("   - GET /debug-auth (diagnostic auth + m√©moire)")
logger.info("   - POST /test-utf8 (test encodage UTF-8 + m√©moire)")

if CONVERSATION_MEMORY_AVAILABLE:
    try:
        memory_stats = get_conversation_memory_stats()
        logger.info(f"üìä [Memory] Statistiques syst√®me: {memory_stats}")
        logger.info("üéâ [Memory] Syst√®me de m√©moire conversationnelle pleinement op√©rationnel!")
        logger.info("üîß [Memory] Configuration:")
        logger.info(f"   - Messages max par conversation: {memory_stats.get('max_messages_in_memory', 'N/A')}")
        logger.info(f"   - Expiration conversations: {memory_stats.get('context_expiry_hours', 'N/A')}h")
        logger.info(f"   - Extraction entit√©s: {'‚úÖ Activ√©e' if memory_stats.get('enabled', False) else '‚ùå D√©sactiv√©e'}")
        logger.info(f"   - Base de donn√©es: {memory_stats.get('database_path', 'N/A')}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è [Memory] Erreur r√©cup√©ration stats: {e}")
else:
    logger.warning("‚ö†Ô∏è [Memory] Syst√®me de m√©moire conversationnelle NON DISPONIBLE")
    logger.warning("‚ö†Ô∏è [Memory] Les conversations seront trait√©es de mani√®re ind√©pendante")
    logger.warning("‚ö†Ô∏è [Memory] Pour activer: cr√©er app/api/v1/conversation_memory.py")

logger.info("üöÄ [Expert] Syst√®me Expert Intelia avec m√©moire conversationnelle pr√™t!")
logger.info("üéØ [Expert] R√©solution du probl√®me: Plus de questions redondantes sur la race/√¢ge!")
logger.info("üß† [Expert] Continuit√© conversationnelle: Ross 308 mentionn√© une fois = retenu pour la conversation")