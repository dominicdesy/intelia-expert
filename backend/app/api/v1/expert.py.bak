"""
app/api/v1/expert.py - ENDPOINTS PRINCIPAUX EXPERT SYSTEM

Endpoints core pour le syst√®me expert avec fonctionnalit√©s am√©lior√©es
Fichier principal maintenant modulaire et facile √† maintenir
"""

import os
import logging
import uuid
import time
from datetime import datetime
from typing import Optional, List, Dict, Any

from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.security import HTTPBearer

from .expert_models import EnhancedQuestionRequest, EnhancedExpertResponse, FeedbackRequest
from .expert_services import ExpertService
from .expert_utils import get_user_id_from_request

router = APIRouter(tags=["expert-enhanced"])
logger = logging.getLogger(__name__)
security = HTTPBearer()

# Service principal
expert_service = ExpertService()

# =============================================================================
# ENDPOINTS PRINCIPAUX
# =============================================================================

@router.post("/ask-enhanced", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    Endpoint expert am√©lior√© avec:
    - Retraitement automatique apr√®s clarification
    - Gestion intelligente du contexte conversationnel  
    - R√©ponses avec donn√©es num√©riques optimis√©es
    - Suivi d'√©tat conversationnel avanc√©
    """
    start_time = time.time()
    
    try:
        logger.info("=" * 80)
        logger.info("üöÄ D√âBUT ask_expert_enhanced - VERSION INTELLIGENTE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        logger.info(f"üÜî Conversation ID: {request_data.conversation_id}")
        logger.info(f"üîÑ Is clarification response: {request_data.is_clarification_response}")
        
        # D√©l√©guer le traitement au service
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=current_user,
            start_time=start_time
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced - conversation_id: {response.conversation_id}")
        logger.info(f"ü§ñ IA enhancements utilis√©s: {response.ai_enhancements_used}")
        logger.info("=" * 80)
        
        return response
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced: {e}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/ask-enhanced-public", response_model=EnhancedExpertResponse)
async def ask_expert_enhanced_public(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """Endpoint public avec fonctionnalit√©s am√©lior√©es"""
    start_time = time.time()
    
    try:
        logger.info("=" * 80)
        logger.info("üåê D√âBUT ask_expert_enhanced_public - VERSION INTELLIGENTE PUBLIQUE")
        logger.info(f"üìù Question: {request_data.text[:100]}...")
        
        # D√©l√©guer le traitement au service (mode public)
        response = await expert_service.process_expert_question(
            request_data=request_data,
            request=request,
            current_user=None,
            start_time=start_time
        )
        
        logger.info(f"‚úÖ FIN ask_expert_enhanced_public - conversation_id: {response.conversation_id}")
        logger.info(f"ü§ñ IA enhancements publics utilis√©s: {response.ai_enhancements_used}")
        logger.info("=" * 80)
        
        return response
    
    except HTTPException:
        logger.info("=" * 80)
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur critique ask_expert_enhanced_public: {e}")
        logger.info("=" * 80)
        raise HTTPException(status_code=500, detail=f"Erreur interne: {str(e)}")

@router.post("/feedback")
async def submit_feedback_enhanced(feedback_data: FeedbackRequest):
    """Submit feedback - VERSION AM√âLIOR√âE"""
    try:
        logger.info(f"üìä [Expert Enhanced] Feedback re√ßu: {feedback_data.rating}")
        logger.info(f"üìä [Expert Enhanced] Conversation ID: {feedback_data.conversation_id}")
        
        # D√©l√©guer au service
        result = await expert_service.process_feedback(feedback_data)
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur feedback critique: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur enregistrement feedback: {str(e)}")

# =============================================================================
# ENDPOINTS DE COMPATIBILIT√â
# =============================================================================

@router.post("/ask", response_model=EnhancedExpertResponse)
async def ask_expert_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request,
    current_user: Dict[str, Any] = Depends(expert_service.get_current_user_dependency())
):
    """
    Endpoint de compatibilit√© avec expert.py original mais avec fonctionnalit√©s am√©lior√©es.
    Redirige vers ask_expert_enhanced avec toutes les am√©liorations.
    """
    logger.info("üîÑ [Expert Enhanced] Redirection vers endpoint am√©lior√© pour compatibilit√©")
    
    # Appeler directement l'endpoint am√©lior√©
    return await ask_expert_enhanced(request_data, request, current_user)

@router.post("/ask-public", response_model=EnhancedExpertResponse)
async def ask_expert_public_compatible(
    request_data: EnhancedQuestionRequest,
    request: Request
):
    """
    Endpoint public de compatibilit√© avec expert.py original mais avec fonctionnalit√©s am√©lior√©es.
    Redirige vers ask_expert_enhanced_public avec toutes les am√©liorations.
    """
    logger.info("üîÑ [Expert Enhanced] Redirection vers endpoint public am√©lior√© pour compatibilit√©")
    
    # Appeler directement l'endpoint public am√©lior√©
    return await ask_expert_enhanced_public(request_data, request)

# =============================================================================
# ENDPOINT TOPICS
# =============================================================================

@router.get("/topics")
async def get_suggested_topics_enhanced(language: str = "fr"):
    """Get suggested topics - VERSION AM√âLIOR√âE"""
    try:
        return await expert_service.get_suggested_topics(language)
    except Exception as e:
        logger.error(f"‚ùå [Expert Enhanced] Erreur topics: {e}")
        raise HTTPException(status_code=500, detail="Erreur r√©cup√©ration topics")

# =============================================================================
# CONFIGURATION & LOGGING
# =============================================================================

logger.info("üöÄ [EXPERT MAIN] Endpoints principaux initialis√©s avec succ√®s!")
logger.info("üîß [EXPERT MAIN] ENDPOINTS DISPONIBLES:")
logger.info("   - POST /ask-enhanced (authentifi√© avec retraitement auto)")
logger.info("   - POST /ask-enhanced-public (public avec IA)")
logger.info("   - POST /feedback (feedback am√©lior√©)")
logger.info("   - POST /ask (compatible original)")
logger.info("   - POST /ask-public (compatible original public)")
logger.info("   - GET /topics (topics enrichis)")
