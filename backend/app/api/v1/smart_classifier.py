"""
smart_classifier_v3.py - CLASSIFIER INTELLIGENT AVEC IA OpenAI

üéØ AM√âLIORATIONS MAJEURES:
- ‚úÖ Int√©gration OpenAI pour analyse intelligente
- ‚úÖ Classification bas√©e sur l'intention r√©elle
- ‚úÖ Validation contextuelle intelligente
- ‚úÖ Fallback vers r√®gles si IA indisponible
- ‚úÖ Correction du bug "contexte utile"

Architecture hybride:
1. Analyse OpenAI pour comprendre l'intention
2. Validation des entit√©s fusionn√©es 
3. Calcul des donn√©es de poids
4. Fallback r√®gles hardcod√©es si n√©cessaire
"""

import logging
import json
import openai
from typing import Dict, Any, Optional, List, Union
from enum import Enum
from dataclasses import dataclass
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ResponseType(Enum):
    """Types de r√©ponse possibles"""
    PRECISE_ANSWER = "precise_answer"
    GENERAL_ANSWER = "general_answer" 
    NEEDS_CLARIFICATION = "needs_clarification"
    CONTEXTUAL_ANSWER = "contextual_answer"

@dataclass 
class ClassificationResult:
    """R√©sultat de classification enrichi avec analyse IA"""
    response_type: ResponseType
    confidence: float
    reasoning: str
    missing_entities: List[str] = None
    merged_entities: Dict[str, Any] = None
    weight_data: Dict[str, Any] = None
    ai_analysis: Dict[str, Any] = None  # üÜï NOUVEAU
    fallback_used: bool = False  # üÜï NOUVEAU

class EnhancedSmartClassifier:
    """Classifier intelligent avec IA OpenAI"""
    
    def __init__(self, openai_client=None, db_path: str = "conversations.db"):
        self.db_path = db_path
        self.openai_client = openai_client
        self.use_ai = openai_client is not None
        
        # Configuration IA
        self.ai_model = "gpt-4"  # ou "gpt-3.5-turbo" pour √©conomie
        self.max_tokens = 500
        
        logger.info(f"ü§ñ [Enhanced Classifier] IA disponible: {self.use_ai}")

    async def classify_question_with_ai(self, question: str, entities: Dict[str, Any], 
                                      conversation_context: Optional[Dict] = None,
                                      conversation_id: Optional[str] = None) -> ClassificationResult:
        """
        üÜï NOUVEAU: Classification intelligente avec OpenAI
        """
        try:
            # 1. Analyse IA si disponible
            if self.use_ai:
                ai_analysis = await self._analyze_with_openai(
                    question, entities, conversation_context
                )
                
                # 2. Fusionner contexte bas√© sur analyse IA
                merged_entities = self._merge_context_intelligently(
                    entities, conversation_context, ai_analysis
                )
                
                # 3. Validation finale avec IA
                final_classification = self._determine_final_classification(
                    ai_analysis, merged_entities
                )
                
                return final_classification
            
            # 4. Fallback vers r√®gles classiques
            else:
                logger.warning("‚ö†Ô∏è [AI] OpenAI indisponible - fallback r√®gles")
                return self._classify_with_rules(question, entities, conversation_context)
                
        except Exception as e:
            logger.error(f"‚ùå [AI Classification] Erreur: {e}")
            return self._classify_with_rules(question, entities, conversation_context)

    async def _analyze_with_openai(self, question: str, entities: Dict[str, Any], 
                                 context: Optional[Dict] = None) -> Dict[str, Any]:
        """Analyse la question avec OpenAI pour comprendre l'intention"""
        
        # Construire le prompt d'analyse
        analysis_prompt = self._build_analysis_prompt(question, entities, context)
        
        try:
            response = await self.openai_client.chat.completions.create(
                model=self.ai_model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Tu es un expert en √©levage avicole qui analyse les questions des utilisateurs pour d√©terminer le type de r√©ponse optimal."
                    },
                    {
                        "role": "user",
                        "content": analysis_prompt
                    }
                ],
                max_tokens=self.max_tokens,
                temperature=0.1  # R√©ponses coh√©rentes
            )
            
            analysis_text = response.choices[0].message.content
            
            # Parser la r√©ponse JSON
            try:
                analysis = json.loads(analysis_text)
                logger.info(f"‚úÖ [AI Analysis] Intention d√©tect√©e: {analysis.get('intention', 'unknown')}")
                return analysis
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è [AI] R√©ponse non-JSON, parsing manuel")
                return self._parse_analysis_manually(analysis_text)
                
        except Exception as e:
            logger.error(f"‚ùå [OpenAI] Erreur API: {e}")
            raise

    def _build_analysis_prompt(self, question: str, entities: Dict[str, Any], 
                             context: Optional[Dict] = None) -> str:
        """Construit le prompt d'analyse pour OpenAI"""
        
        context_info = ""
        if context:
            previous_q = context.get('previous_question', '')
            previous_e = context.get('previous_entities', {})
            context_info = f"""
CONTEXTE CONVERSATIONNEL:
- Question pr√©c√©dente: "{previous_q}"
- Entit√©s pr√©c√©dentes: {json.dumps(previous_e, ensure_ascii=False)}
"""

        prompt = f"""Analyse cette question d'√©levage avicole et d√©termine le type de r√©ponse optimal.

QUESTION ACTUELLE: "{question}"

ENTIT√âS D√âTECT√âES:
{json.dumps(entities, ensure_ascii=False)}

{context_info}

T√ÇCHE:
D√©termine si cette question n√©cessite:
1. PRECISE_ANSWER: Assez d'infos pour r√©ponse sp√©cifique (race + √¢ge/sexe)
2. CONTEXTUAL_ANSWER: Clarification qui compl√®te le contexte pr√©c√©dent  
3. GENERAL_ANSWER: Contexte suffisant pour conseil g√©n√©ral utile
4. NEEDS_CLARIFICATION: Information insuffisante

FOCUS SP√âCIAL:
- Si c'est une clarification courte apr√®s une question de poids (ex: "Ross 308 male" apr√®s "poids poulet 10j"), c'est CONTEXTUAL_ANSWER
- Pour les questions de poids/croissance, race + √¢ge = PRECISE_ANSWER
- √âviter NEEDS_CLARIFICATION sauf si vraiment impossible √† traiter

R√©ponds en JSON avec:
{{
    "intention": "question_performance|clarification|question_sante|question_generale",
    "classification_recommandee": "PRECISE_ANSWER|CONTEXTUAL_ANSWER|GENERAL_ANSWER|NEEDS_CLARIFICATION",
    "confidence": 0.0-1.0,
    "raisonnement": "explication courte",
    "entites_manquantes": ["liste", "des", "manquantes"],
    "contexte_suffisant": true|false,
    "peut_calculer_poids": true|false,
    "recommandation_fusion": "fuser_avec_contexte|utiliser_entites_actuelles|demander_clarification"
}}"""

        return prompt

    def _merge_context_intelligently(self, entities: Dict[str, Any], 
                                   context: Optional[Dict], 
                                   ai_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Fusionne le contexte bas√© sur l'analyse IA"""
        
        merged = entities.copy()
        
        # Si l'IA recommande la fusion
        if ai_analysis.get('recommandation_fusion') == 'fuser_avec_contexte' and context:
            previous_entities = context.get('previous_entities', {})
            
            # H√©riter intelligemment
            if not merged.get('age_days') and previous_entities.get('age_days'):
                merged['age_days'] = previous_entities['age_days']
                merged['age_inherited_from_context'] = True
                logger.info(f"üîó [AI Merge] √Çge h√©rit√©: {previous_entities['age_days']}j")
            
            if not merged.get('context_type') and previous_entities.get('weight_mentioned'):
                merged['context_type'] = 'performance'
                merged['context_inherited_from_weight_question'] = True
                logger.info("üîó [AI Merge] Contexte performance d√©tect√©")
        
        return merged

    def _determine_final_classification(self, ai_analysis: Dict[str, Any], 
                                      merged_entities: Dict[str, Any]) -> ClassificationResult:
        """D√©termine la classification finale bas√©e sur l'analyse IA"""
        
        recommended_type = ai_analysis.get('classification_recommandee', 'GENERAL_ANSWER')
        confidence = ai_analysis.get('confidence', 0.7)
        reasoning = ai_analysis.get('raisonnement', 'Analyse IA')
        
        # Convertir en ResponseType
        try:
            response_type = ResponseType(recommended_type.lower())
        except ValueError:
            logger.warning(f"‚ö†Ô∏è [AI] Type inconnu {recommended_type}, fallback GENERAL")
            response_type = ResponseType.GENERAL_ANSWER
        
        # Calculer les donn√©es de poids si recommand√©
        weight_data = {}
        if ai_analysis.get('peut_calculer_poids', False):
            weight_data = self._calculate_weight_data_enhanced(merged_entities)
        
        # Entit√©s manquantes sugg√©r√©es par l'IA
        missing_entities = ai_analysis.get('entites_manquantes', [])
        
        result = ClassificationResult(
            response_type=response_type,
            confidence=confidence,
            reasoning=f"IA: {reasoning}",
            missing_entities=missing_entities,
            merged_entities=merged_entities,
            weight_data=weight_data,
            ai_analysis=ai_analysis,
            fallback_used=False
        )
        
        logger.info(f"ü§ñ [AI Classification] {response_type.value} (conf: {confidence})")
        return result

    def _calculate_weight_data_enhanced(self, entities: Dict[str, Any]) -> Dict[str, Any]:
        """Version am√©lior√©e du calcul de poids avec plus de contexte"""
        
        breed = entities.get('breed_specific', '').lower().replace(' ', '_')
        age_days = entities.get('age_days')
        sex = entities.get('sex', 'mixed').lower()
        
        if not breed or not age_days:
            return {}
        
        # Normalisation sexe am√©lior√©e
        sex_mapping = {
            'm√¢le': 'male', 'male': 'male', 'coq': 'male',
            'femelle': 'female', 'female': 'female', 'poule': 'female',
            'mixte': 'mixed', 'mixed': 'mixed'
        }
        sex = sex_mapping.get(sex, 'mixed')
        
        try:
            # Import de la fonction de calcul existante
            from .intelligent_system_config import get_weight_range
            
            weight_range = get_weight_range(breed, age_days, sex)
            min_weight, max_weight = weight_range
            target_weight = (min_weight + max_weight) // 2
            
            # Seuils d'alerte plus pr√©cis
            alert_low = int(min_weight * 0.85)
            alert_high = int(max_weight * 1.15)
            critical_low = int(min_weight * 0.70)
            critical_high = int(max_weight * 1.30)
            
            weight_data = {
                "breed": breed.replace('_', ' ').title(),
                "age_days": age_days,
                "sex": sex,
                "weight_range": weight_range,
                "target_weight": target_weight,
                "alert_thresholds": {
                    "low": alert_low,
                    "high": alert_high,
                    "critical_low": critical_low,
                    "critical_high": critical_high
                },
                "data_source": "intelligent_system_config",
                "calculation_method": "enhanced_ai_driven",
                "confidence": 0.95,
                "context_used": {
                    "age_inherited": entities.get('age_inherited_from_context', False),
                    "performance_context": entities.get('context_inherited_from_weight_question', False)
                }
            }
            
            logger.info(f"üìä [Enhanced Weight] {breed} {sex} {age_days}j ‚Üí {min_weight}-{max_weight}g")
            return weight_data
            
        except Exception as e:
            logger.error(f"‚ùå [Enhanced Weight] Erreur: {e}")
            return {}

    def _classify_with_rules(self, question: str, entities: Dict[str, Any], 
                           context: Optional[Dict] = None) -> ClassificationResult:
        """Fallback avec r√®gles am√©lior√©es (version corrig√©e)"""
        
        logger.info("üîß [Fallback] Classification avec r√®gles am√©lior√©es")
        
        # üîß CORRECTION: D√©tection contextuelle am√©lior√©e
        if self._is_contextual_clarification(question, entities, context):
            merged_entities = self._merge_entities_simple(entities, context)
            
            # ‚úÖ CORRECTION: Validation plus permissive
            if self._has_sufficient_merged_info(merged_entities):
                weight_data = self._calculate_weight_data_enhanced(merged_entities)
                
                return ClassificationResult(
                    response_type=ResponseType.CONTEXTUAL_ANSWER,
                    confidence=0.85,
                    reasoning="Clarification contextuelle d√©tect√©e - entit√©s fusionn√©es suffisantes",
                    merged_entities=merged_entities,
                    weight_data=weight_data,
                    fallback_used=True
                )
        
        # R√®gles classiques am√©lior√©es
        if self._has_precise_info(entities):
            return ClassificationResult(
                ResponseType.PRECISE_ANSWER,
                confidence=0.9,
                reasoning="Informations pr√©cises suffisantes",
                weight_data=self._calculate_weight_data_enhanced(entities),
                fallback_used=True
            )
        
        elif self._has_useful_context_fixed(question, entities):  # ‚úÖ Version corrig√©e
            return ClassificationResult(
                ResponseType.GENERAL_ANSWER,
                confidence=0.8,
                reasoning="Contexte utile pour r√©ponse g√©n√©rale",
                missing_entities=self._identify_missing_for_precision(entities),
                fallback_used=True
            )
        
        else:
            return ClassificationResult(
                ResponseType.NEEDS_CLARIFICATION,
                confidence=0.6,
                reasoning="Informations insuffisantes",
                missing_entities=self._identify_critical_missing(question, entities),
                fallback_used=True
            )

    def _is_contextual_clarification(self, question: str, entities: Dict[str, Any], 
                                   context: Optional[Dict]) -> bool:
        """üîß Version am√©lior√©e de d√©tection des clarifications"""
        
        if not context or not context.get('previous_question'):
            return False
        
        # Question tr√®s courte avec race/sexe sp√©cifique
        if len(question.split()) <= 3:
            has_breed = entities.get('breed_specific') or entities.get('breed_generic')
            has_sex = entities.get('sex')
            if has_breed or has_sex:
                logger.info("üîó [Enhanced] Clarification courte d√©tect√©e")
                return True
        
        # Patterns typiques
        patterns = ['pour un', 'pour une', 'avec un', 'ross 308', 'cobb 500', 'm√¢le', 'femelle']
        if any(pattern in question.lower() for pattern in patterns):
            return True
        
        return False

    def _has_sufficient_merged_info(self, merged_entities: Dict[str, Any]) -> bool:
        """‚úÖ CORRECTION: Validation plus permissive pour contexte fusionn√©"""
        
        breed = merged_entities.get('breed_specific')
        age = merged_entities.get('age_days')
        sex = merged_entities.get('sex')
        context_type = merged_entities.get('context_type')
        
        # Combinaisons suffisantes
        checks = [
            breed and age and sex,  # Trio complet
            breed and age and context_type == 'performance',  # Race + √¢ge + contexte poids
            breed and sex and merged_entities.get('age_inherited_from_context'),  # Race + sexe + √¢ge h√©rit√©
        ]
        
        if any(checks):
            logger.info("‚úÖ [Sufficient Merged] Informations fusionn√©es suffisantes")
            return True
        
        logger.info("‚ùå [Sufficient Merged] Pas assez d'infos m√™me fusionn√©es")
        return False

    def _has_useful_context_fixed(self, question: str, entities: Dict[str, Any]) -> bool:
        """üîß CORRECTION: Version fix√©e qui d√©tecte mieux le contexte utile"""
        
        question_lower = question.lower()
        
        # Questions de poids avec √¢ge
        weight_keywords = ['poids', 'weight', 'gramme', 'kg', 'pes√©', 'peser', 'cible', 'croissance']
        has_weight_question = any(word in question_lower for word in weight_keywords)
        has_age = entities.get('age_days') or entities.get('age_weeks')
        
        if has_weight_question and has_age:
            logger.info("‚úÖ [Useful Fixed] Question poids + √¢ge d√©tect√©e")
            return True
        
        # Question avec race g√©n√©rique + √¢ge (utile m√™me sans sp√©cificit√©)
        has_breed = entities.get('breed_generic') or entities.get('breed_specific')
        if has_breed and has_age:
            logger.info("‚úÖ [Useful Fixed] Race + √¢ge d√©tect√©s")
            return True
        
        # Contexte h√©rit√©
        if entities.get('age_inherited_from_context') or entities.get('context_inherited_from_weight_question'):
            logger.info("‚úÖ [Useful Fixed] Contexte h√©rit√© d√©tect√©")
            return True
        
        return False

    # Autres m√©thodes utilitaires (reprises de l'ancien code mais simplifi√©es)
    def _merge_entities_simple(self, entities: Dict[str, Any], context: Optional[Dict]) -> Dict[str, Any]:
        """Fusion simple des entit√©s avec contexte"""
        merged = entities.copy()
        
        if context and context.get('previous_entities'):
            prev = context['previous_entities']
            
            if not merged.get('age_days') and prev.get('age_days'):
                merged['age_days'] = prev['age_days']
                merged['age_inherited_from_context'] = True
            
            if not merged.get('context_type') and prev.get('weight_mentioned'):
                merged['context_type'] = 'performance'
                merged['context_inherited_from_weight_question'] = True
        
        return merged

    def _has_precise_info(self, entities: Dict[str, Any]) -> bool:
        """Check pour informations pr√©cises"""
        breed = entities.get('breed_specific')
        age = entities.get('age_days')
        sex = entities.get('sex')
        
        return (breed and age and sex) or (breed and age)

    def _identify_missing_for_precision(self, entities: Dict[str, Any]) -> List[str]:
        """Identifie manquants pour pr√©cision"""
        missing = []
        if not entities.get('breed_specific'): missing.append('breed')
        if not entities.get('sex'): missing.append('sex')  
        if not entities.get('age_days'): missing.append('age')
        return missing

    def _identify_critical_missing(self, question: str, entities: Dict[str, Any]) -> List[str]:
        """Identifie manquants critiques"""
        return ['context', 'specifics'] if len(question.split()) < 4 else ['breed', 'age']

    def _parse_analysis_manually(self, text: str) -> Dict[str, Any]:
        """Parse manuel si JSON √©choue"""
        return {
            "intention": "question_generale",
            "classification_recommandee": "GENERAL_ANSWER",
            "confidence": 0.7,
            "raisonnement": "Parse manuel - r√©ponse IA non-structur√©e",
            "peut_calculer_poids": False,
            "recommandation_fusion": "utiliser_entites_actuelles"
        }

# =============================================================================
# EXEMPLE D'UTILISATION
# =============================================================================

async def demo_enhanced_classifier():
    """D√©mo du classifier am√©lior√©"""
    
    # Initialisation avec client OpenAI
    import openai
    client = openai.AsyncOpenAI(api_key="your-api-key")
    
    classifier = EnhancedSmartClassifier(openai_client=client)
    
    # Test conversation probl√©matique
    conversation_context = {
        "previous_question": "Quel est le poids cible pour un poulet au jour 10 ?",
        "previous_entities": {"age_days": 10, "weight_mentioned": True, "context_type": "performance"}
    }
    
    # Question clarification
    entities = {"breed_specific": "Ross 308", "sex": "male"}
    
    result = await classifier.classify_question_with_ai(
        "Ross 308 male", 
        entities, 
        conversation_context
    )
    
    print(f"Classification: {result.response_type.value}")
    print(f"Confiance: {result.confidence}")
    print(f"Donn√©es poids: {result.weight_data}")
    print(f"IA utilis√©e: {not result.fallback_used}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(demo_enhanced_classifier())