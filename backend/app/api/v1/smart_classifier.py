"""
smart_classifier.py - CLASSIFIER INTELLIGENT AVEC CONTEXTE CONVERSATIONNEL

üéØ AM√âLIORATIONS:
- ‚úÖ D√©tection des clarifications contextuelles
- ‚úÖ M√©moire conversationnelle
- ‚úÖ Logique avanc√©e pour combinaisons d'entit√©s
- ‚úÖ Support des conversations multi-tours
- ‚úÖ Interpolation automatique des donn√©es manquantes

Architecture:
- classify_question() : Point d'entr√©e unique avec contexte
- R√®gles hi√©rarchiques avanc√©es
- Support contexte conversationnel
- Pas de conflits entre syst√®mes
"""

import logging
import re
from typing import Dict, Any, Optional, List
from enum import Enum
from dataclasses import dataclass
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ResponseType(Enum):
    """Types de r√©ponse possibles"""
    PRECISE_ANSWER = "precise_answer"       # Assez d'infos pour r√©ponse pr√©cise
    GENERAL_ANSWER = "general_answer"       # R√©ponse g√©n√©rale + offre de pr√©cision  
    NEEDS_CLARIFICATION = "needs_clarification"  # Vraiment trop vague
    CONTEXTUAL_ANSWER = "contextual_answer"    # R√©ponse bas√©e sur contexte conversationnel

@dataclass
class ConversationContext:
    """Contexte d'une conversation"""
    previous_question: Optional[str] = None
    previous_entities: Optional[Dict[str, Any]] = None
    conversation_topic: Optional[str] = None  # performance, health, feeding
    established_breed: Optional[str] = None
    established_age: Optional[int] = None
    established_sex: Optional[str] = None
    last_interaction: Optional[datetime] = None
    
    def is_fresh(self, max_age_minutes: int = 10) -> bool:
        """V√©rifie si le contexte est encore frais"""
        if not self.last_interaction:
            return False
        return datetime.now() - self.last_interaction < timedelta(minutes=max_age_minutes)

class ClassificationResult:
    """R√©sultat de la classification"""
    def __init__(self, response_type: ResponseType, confidence: float, reasoning: str, 
                 missing_entities: list = None, merged_entities: Dict[str, Any] = None):
        self.response_type = response_type
        self.confidence = confidence
        self.reasoning = reasoning
        self.missing_entities = missing_entities or []
        self.merged_entities = merged_entities or {}

class SmartClassifier:
    """Classifier intelligent avec contexte conversationnel"""
    
    def __init__(self):
        self.confidence_thresholds = {
            "precise": 0.85,
            "general": 0.6,
            "clarification": 0.4
        }
        
        # Races sp√©cifiques reconnues
        self.specific_breeds = [
            'ross 308', 'cobb 500', 'hubbard', 'arbor acres',
            'isa brown', 'lohmann brown', 'hy-line', 'bovans',
            'shaver', 'hissex', 'novogen'
        ]
        
        # Races g√©n√©riques
        self.generic_breeds = ['ross', 'cobb', 'broiler', 'poulet', 'poule']
        
        # Indicateurs de clarification
        self.clarification_indicators = [
            'pour un', 'pour une', 'avec un', 'avec une', 'chez un', 'chez une',
            'ross 308', 'cobb 500', 'm√¢le', 'femelle', 'm√¢les', 'femelles'
        ]

    def classify_question(self, question: str, entities: Dict[str, Any], 
                         conversation_context: Optional[ConversationContext] = None,
                         is_clarification_response: bool = False) -> ClassificationResult:
        """
        POINT D'ENTR√âE UNIQUE - Classifie la question avec contexte conversationnel
        
        Args:
            question: Texte de la question
            entities: Entit√©s extraites de la question
            conversation_context: Contexte de la conversation pr√©c√©dente
            is_clarification_response: Indique si c'est une r√©ponse de clarification
            
        Returns:
            ClassificationResult avec le type de r√©ponse recommand√©
        """
        try:
            logger.info(f"üß† [Smart Classifier] Classification: '{question[:50]}...'")
            logger.info(f"üîç [Smart Classifier] Entit√©s: {entities}")
            
            # NOUVEAU: D√©tection des clarifications contextuelles
            if self._is_clarification_response(question, entities, conversation_context, is_clarification_response):
                merged_entities = self._merge_with_context(entities, conversation_context)
                logger.info(f"üîó [Contextual] Entit√©s fusionn√©es: {merged_entities}")
                
                if self._has_specific_info(merged_entities):
                    return ClassificationResult(
                        ResponseType.CONTEXTUAL_ANSWER,
                        confidence=0.9,
                        reasoning="Clarification d√©tect√©e - contexte fusionn√© pour r√©ponse pr√©cise",
                        merged_entities=merged_entities
                    )
            
            # R√®gle 1: PR√âCIS - Assez d'informations pour r√©ponse sp√©cifique
            if self._has_specific_info(entities):
                return ClassificationResult(
                    ResponseType.PRECISE_ANSWER,
                    confidence=0.9,
                    reasoning="Informations sp√©cifiques suffisantes (race + √¢ge/sexe)"
                )
            
            # R√®gle 2: G√âN√âRAL - Contexte suffisant pour r√©ponse utile
            elif self._has_useful_context(question, entities):
                missing = self._identify_missing_for_precision(entities)
                return ClassificationResult(
                    ResponseType.GENERAL_ANSWER,
                    confidence=0.8,
                    reasoning="Contexte suffisant pour r√©ponse g√©n√©rale utile",
                    missing_entities=missing
                )
            
            # R√®gle 3: CLARIFICATION - Vraiment trop vague
            else:
                missing = self._identify_critical_missing(question, entities)
                return ClassificationResult(
                    ResponseType.NEEDS_CLARIFICATION,
                    confidence=0.6,
                    reasoning="Information insuffisante pour r√©ponse utile",
                    missing_entities=missing
                )
                
        except Exception as e:
            logger.error(f"‚ùå [Smart Classifier] Erreur classification: {e}")
            # Fallback s√©curis√©
            return ClassificationResult(
                ResponseType.GENERAL_ANSWER,
                confidence=0.5,
                reasoning="Erreur de classification - fallback g√©n√©ral"
            )

    def _is_clarification_response(self, question: str, entities: Dict[str, Any], 
                                 context: Optional[ConversationContext], 
                                 is_clarification_flag: bool) -> bool:
        """NOUVEAU: D√©tecte si c'est une r√©ponse de clarification"""
        
        # Flag explicite
        if is_clarification_flag:
            return True
            
        # Pas de contexte
        if not context or not context.is_fresh():
            return False
            
        question_lower = question.lower()
        
        # Patterns de clarification
        clarification_patterns = [
            r'pour un\s+\w+',  # "pour un Ross 308"
            r'avec un\s+\w+',  # "avec un m√¢le"  
            r'chez\s+\w+',     # "chez Ross 308"
            r'^\w+\s+\w+$',    # "Ross 308" ou "cobb 500"
            r'^(m√¢le|femelle|m√¢les|femelles)$'  # Juste le sexe
        ]
        
        for pattern in clarification_patterns:
            if re.search(pattern, question_lower):
                logger.info(f"üîó [Clarification] Pattern d√©tect√©: {pattern}")
                return True
        
        # Question tr√®s courte apr√®s question complexe
        if len(question.split()) <= 3 and context.previous_question:
            if len(context.previous_question.split()) > 5:
                logger.info("üîó [Clarification] Question courte apr√®s question complexe")
                return True
        
        # Mots-cl√©s de clarification d√©tect√©s
        clarification_indicators = any(indicator in question_lower 
                                     for indicator in self.clarification_indicators)
        if clarification_indicators:
            logger.info("üîó [Clarification] Indicateurs d√©tect√©s")
            return True
            
        return False

    def _merge_with_context(self, current_entities: Dict[str, Any], 
                          context: Optional[ConversationContext]) -> Dict[str, Any]:
        """NOUVEAU: Fusionne les entit√©s actuelles avec le contexte conversationnel"""
        
        if not context:
            return current_entities
            
        merged = current_entities.copy()
        
        # H√©riter des entit√©s pr√©c√©dentes si manquantes
        if context.previous_entities:
            prev = context.previous_entities
            
            # √Çge du contexte pr√©c√©dent
            if not merged.get('age_days') and prev.get('age_days'):
                merged['age_days'] = prev['age_days']
                merged['age_context_inherited'] = True
                logger.info(f"üîó [Context] √Çge h√©rit√©: {prev['age_days']} jours")
            
            # Contexte de performance (poids, croissance)
            if not merged.get('context_type') and prev.get('weight_mentioned'):
                merged['context_type'] = 'performance'
                merged['weight_context_inherited'] = True
                logger.info("üîó [Context] Contexte performance h√©rit√©")
                
            # Topic conversationnel
            if not merged.get('context_type') and prev.get('context_type'):
                merged['context_type'] = prev['context_type']
                
        # Entit√©s √©tablies dans la conversation
        if context.established_breed and not merged.get('breed_specific'):
            merged['breed_specific'] = context.established_breed
            merged['breed_context_inherited'] = True
            
        if context.established_age and not merged.get('age_days'):
            merged['age_days'] = context.established_age
            merged['age_context_inherited'] = True
            
        if context.established_sex and not merged.get('sex'):
            merged['sex'] = context.established_sex
            merged['sex_context_inherited'] = True
            
        return merged

    def _has_specific_info(self, entities: Dict[str, Any]) -> bool:
        """D√©termine s'il y a assez d'infos pour une r√©ponse pr√©cise (am√©lior√©)"""
        
        breed_specific = entities.get('breed_specific')
        age = entities.get('age_days') or entities.get('age')
        sex = entities.get('sex')
        weight = entities.get('weight_grams')
        context_type = entities.get('context_type')
        
        # Combinaisons suffisantes pour r√©ponse pr√©cise
        if breed_specific and age and sex:
            logger.info("‚úÖ [Specific] Race sp√©cifique + √¢ge + sexe")
            return True
            
        if breed_specific and weight:
            logger.info("‚úÖ [Specific] Race sp√©cifique + poids")
            return True
            
        if breed_specific and age:
            logger.info("‚úÖ [Specific] Race sp√©cifique + √¢ge (suffisant)")
            return True
            
        # NOUVEAU: Contexte de performance avec race et √¢ge
        if breed_specific and context_type == 'performance':
            logger.info("‚úÖ [Specific] Race + contexte performance")
            return True
            
        # NOUVEAU: Race + sexe + contexte √¢ge h√©rit√©
        if breed_specific and sex and entities.get('age_context_inherited'):
            logger.info("‚úÖ [Specific] Race + sexe + √¢ge du contexte")
            return True
            
        return False

    def _has_useful_context(self, question: str, entities: Dict[str, Any]) -> bool:
        """D√©termine s'il y a assez de contexte pour une r√©ponse g√©n√©rale utile (am√©lior√©)"""
        
        question_lower = question.lower()
        
        # Questions de poids avec √¢ge
        weight_question = any(word in question_lower for word in 
                            ['poids', 'weight', 'gramme', 'kg', 'pes√©', 'peser', 'cible'])
        
        age_info = entities.get('age_days') or entities.get('age') or entities.get('age_weeks')
        
        if weight_question and age_info:
            logger.info("‚úÖ [Useful] Question poids + √¢ge")
            return True
        
        # Questions de croissance avec contexte
        growth_question = any(word in question_lower for word in 
                            ['croissance', 'grandir', 'd√©veloppement', 'taille'])
        
        if growth_question and age_info:
            logger.info("‚úÖ [Useful] Question croissance + √¢ge")
            return True
        
        # Questions de sant√© avec sympt√¥mes d√©crits
        health_question = any(word in question_lower for word in 
                            ['malade', 'sympt√¥me', 'probl√®me', 'mort', 'faible'])
        
        symptoms = entities.get('symptoms') or len([w for w in question_lower.split() 
                                                  if w in ['apathique', 'diarrh√©e', 'toux', 'boiterie']]) > 0
        
        if health_question and (symptoms or age_info):
            logger.info("‚úÖ [Useful] Question sant√© + contexte")
            return True
        
        # Questions d'alimentation avec stade
        feeding_question = any(word in question_lower for word in 
                             ['alimentation', 'nourrir', 'aliment', 'nutrition'])
        
        if feeding_question and age_info:
            logger.info("‚úÖ [Useful] Question alimentation + √¢ge")
            return True
        
        # NOUVEAU: Contexte h√©rit√© de performance
        if entities.get('weight_context_inherited') or entities.get('age_context_inherited'):
            logger.info("‚úÖ [Useful] Contexte performance h√©rit√©")
            return True
        
        logger.info("‚ùå [Useful] Pas assez de contexte utile")
        return False

    def _identify_missing_for_precision(self, entities: Dict[str, Any]) -> list:
        """Identifie ce qui manque pour une r√©ponse plus pr√©cise (am√©lior√©)"""
        missing = []
        
        if not entities.get('breed_specific'):
            missing.append('breed')
        
        if not entities.get('sex'):
            missing.append('sex')
        
        if not entities.get('age_days') and not entities.get('age'):
            missing.append('age')
        
        return missing

    def _identify_critical_missing(self, question: str, entities: Dict[str, Any]) -> list:
        """Identifie les informations critiques manquantes (am√©lior√©)"""
        missing = []
        question_lower = question.lower()
        
        # Pour questions de performance/poids
        if any(word in question_lower for word in ['poids', 'croissance', 'performance', 'cible']):
            if not entities.get('breed_specific') and not entities.get('breed_generic'):
                missing.append('breed')
            if not entities.get('age_days') and not entities.get('age'):
                missing.append('age')
        
        # Pour questions de sant√©
        elif any(word in question_lower for word in ['malade', 'probl√®me', 'sympt√¥me']):
            if not entities.get('symptoms') and len(question.split()) < 5:
                missing.append('symptoms')
            if not entities.get('age_days') and not entities.get('age'):
                missing.append('age')
        
        # Cas g√©n√©ral - question tr√®s vague
        elif len(question.split()) < 4:
            missing.extend(['context', 'specifics'])
        
        return missing

    def create_conversation_context(self, question: str, entities: Dict[str, Any], 
                                  previous_context: Optional[ConversationContext] = None) -> ConversationContext:
        """NOUVEAU: Cr√©e un contexte conversationnel pour la prochaine interaction"""
        
        context = ConversationContext()
        context.previous_question = question
        context.previous_entities = entities
        context.last_interaction = datetime.now()
        
        # D√©terminer le topic de conversation
        question_lower = question.lower()
        if any(word in question_lower for word in ['poids', 'croissance', 'performance']):
            context.conversation_topic = 'performance'
        elif any(word in question_lower for word in ['malade', 'sympt√¥me', 'sant√©']):
            context.conversation_topic = 'health'
        elif any(word in question_lower for word in ['alimentation', 'nourrir']):
            context.conversation_topic = 'feeding'
        
        # √âtablir des entit√©s persistantes
        if entities.get('breed_specific'):
            context.established_breed = entities['breed_specific']
        if entities.get('age_days'):
            context.established_age = entities['age_days']
        if entities.get('sex'):
            context.established_sex = entities['sex']
            
        # H√©riter du contexte pr√©c√©dent si disponible
        if previous_context and previous_context.is_fresh():
            if not context.established_breed and previous_context.established_breed:
                context.established_breed = previous_context.established_breed
            if not context.established_age and previous_context.established_age:
                context.established_age = previous_context.established_age
            if not context.established_sex and previous_context.established_sex:
                context.established_sex = previous_context.established_sex
        
        return context

    def get_classification_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de classification pour debugging"""
        return {
            "classifier_version": "2.0.0_contextual",
            "response_types": [t.value for t in ResponseType],
            "confidence_thresholds": self.confidence_thresholds,
            "supported_breeds_specific": len(self.specific_breeds),
            "supported_breeds_generic": len(self.generic_breeds),
            "clarification_indicators": len(self.clarification_indicators),
            "features": [
                "conversational_context",
                "clarification_detection", 
                "entity_inheritance",
                "contextual_merging"
            ]
        }

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def quick_classify(question: str, entities: Dict[str, Any] = None, 
                  context: Optional[ConversationContext] = None) -> str:
    """
    Classification rapide pour usage simple avec support du contexte
    
    Returns:
        String: 'precise', 'general', 'clarification', ou 'contextual'
    """
    if entities is None:
        entities = {}
    
    classifier = SmartClassifier()
    result = classifier.classify_question(question, entities, context)
    
    return {
        ResponseType.PRECISE_ANSWER: 'precise',
        ResponseType.GENERAL_ANSWER: 'general', 
        ResponseType.NEEDS_CLARIFICATION: 'clarification',
        ResponseType.CONTEXTUAL_ANSWER: 'contextual'
    }[result.response_type]

# =============================================================================
# TESTS INT√âGR√âS AVEC CONTEXTE
# =============================================================================

def test_classifier_with_context():
    """Tests du classifier avec contexte conversationnel"""
    classifier = SmartClassifier()
    
    # Simulation d'une conversation
    print("üß™ Test de conversation avec contexte:")
    print("=" * 50)
    
    # Question 1: Question g√©n√©rale
    q1 = "Quel est le poids cible d'un poulet de 12 jours ?"
    e1 = {'age_days': 12, 'weight_mentioned': True, 'context_type': 'performance'}
    result1 = classifier.classify_question(q1, e1)
    context1 = classifier.create_conversation_context(q1, e1)
    
    print(f"Q1: {q1}")
    print(f"‚Üí {result1.response_type.value} (confiance: {result1.confidence})")
    print(f"‚Üí Contexte √©tabli: √¢ge={context1.established_age}, topic={context1.conversation_topic}")
    print()
    
    # Question 2: Clarification (devrait √™tre d√©tect√©e)
    q2 = "Pour un Ross 308 male"
    e2 = {'breed_specific': 'Ross 308', 'sex': 'm√¢le'}
    result2 = classifier.classify_question(q2, e2, context1, is_clarification_response=True)
    
    print(f"Q2: {q2} (clarification)")
    print(f"‚Üí {result2.response_type.value} (confiance: {result2.confidence})")
    print(f"‚Üí Entit√©s fusionn√©es: {result2.merged_entities}")
    print(f"‚Üí Raisonnement: {result2.reasoning}")
    
    # V√©rification du succ√®s
    if result2.response_type == ResponseType.CONTEXTUAL_ANSWER:
        print("‚úÖ SUCCESS: Clarification d√©tect√©e et contexte fusionn√©!")
    else:
        print("‚ùå FAILED: Clarification non d√©tect√©e")

if __name__ == "__main__":
    test_classifier_with_context()