"""
ClarificationManager - Version corrigée avec questions plus spécifiques
CONSERVE: Structure originale + logique GPT + fallback
CORRIGE: Questions plus utiles et contextuelles pour l'aviculture
"""
from typing import List
from app.api.v1.utils.config import MAX_CLARIFICATION_ROUNDS
from app.api.v1.utils.openai_utils import safe_chat_completion

class ClarificationManager:
    """
    Generates clarification questions based on missing fields.
    Uses safe_chat_completion (GPT) with a rule-based fallback.
    CORRIGÉ: Questions plus spécifiques et utiles pour l'utilisateur.
    """
    def __init__(self, use_gpt: bool = True):
        self.use_gpt = use_gpt

    def generate(self, missing_fields: List[str], round_number: int = 1) -> List[str]:
        # ✅ CONSERVATION: Logique de limitation identique
        if round_number > MAX_CLARIFICATION_ROUNDS or not missing_fields:
            return []

        # ✅ CONSERVATION: GPT-based question formulation (amélioré)
        if self.use_gpt:
            # ✅ CORRIGÉ: Prompt plus contextualisé pour l'aviculture
            prompt = (
                f"Vous êtes un expert vétérinaire en aviculture. Un utilisateur pose une question "
                f"mais il manque ces informations : {missing_fields}. "
                "Posez 2 ou 3 questions courtes, précises et pratiques en français pour obtenir "
                "ces détails manquants. Utilisez un langage professionnel mais accessible."
            )
            try:
                resp = safe_chat_completion(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7,
                    max_tokens=150
                )
                content = resp.choices[0].message.content.strip()
                questions = [q.strip("-• \n") for q in content.split("\n") if q.strip()]
                if questions:
                    # ✅ AJOUTÉ: Limiter à 3 questions max
                    return questions[:3]
            except Exception:
                # ✅ CONSERVATION: Fallback en cas d'erreur GPT
                pass

        # ✅ CORRIGÉ: Rule-based fallback avec questions spécifiques aviculture
        questions: List[str] = []
        
        # Dictionnaire de questions spécialisées par champ
        field_questions = {
            "age_jours": "Quel est l'âge exact des volailles en jours ?",
            "breed": "Quelle est la souche génétique (Ross 308, Ross 708, Cobb 500, Hubbard, etc.) ?",
            "race": "Quelle est la souche génétique (Ross 308, Ross 708, Cobb 500, Hubbard, etc.) ?",
            "ferme": "Quel est le nom de la ferme ou du bâtiment d'élevage ?",
            "production_type": "S'agit-il de poulets de chair, pondeuses, reproducteurs ou autres ?",
            "sex_category": "Concernent-ils des mâles, femelles ou un lot mixte ?",
            "housing_type": "Quel est le type d'élevage (sol, cages, plein air, tunnel ventilé) ?",
            "site_type": "Dans quel type d'installation (bâtiment, couvoir, abattoir, etc.) ?",
            "activity": "Quelle activité est concernée (alimentation, vaccination, pesée, etc.) ?",
            "parameter": "Quel paramètre vous intéresse (poids, FCR, mortalité, consommation eau) ?",
            "numeric_value": "Quelle est la valeur numérique observée ou cible ?",
            "issue": "Quel problème spécifique observez-vous ?",
            "user_role": "Quel est votre rôle (éleveur, vétérinaire, technicien, nutritionniste) ?",
            "objective": "Quel est votre objectif (optimiser, diagnostiquer, prévenir, corriger) ?",
            "age_phase": "À quelle phase d'élevage (démarrage, croissance, finition) ?",
            "context": "Pouvez-vous donner plus de contexte sur la situation ?"
        }
        
        # ✅ CORRIGÉ: Générer questions spécifiques et limiter à 3
        for field in missing_fields[:3]:  # Max 3 questions
            if field in field_questions:
                questions.append(field_questions[field])
            else:
                # ✅ AMÉLIORATION: Question générique plus engageante
                questions.append(f"Pouvez-vous préciser l'information concernant : {field} ?")
        
        # ✅ AJOUTÉ: Fallback si aucune question générée
        if not questions:
            return [
                "Pouvez-vous donner plus de détails sur votre situation d'élevage ?",
                "Quel est l'objectif de votre question ?"
            ]
        
        return questions