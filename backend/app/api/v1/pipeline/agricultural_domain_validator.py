"""
app/api/v1/agricultural_domain_validator.py

Module sp√©cialis√© pour la validation des questions dans le domaine agricole.
Garantit que les questions sont li√©es √† l'√©levage, la sant√© animale et la nutrition.
Int√©gr√© avec le syst√®me de configuration Intelia.

CORRECTIONS APPORT√âES:
- Import logging corrig√© avec fallback
- Gestion d'erreurs renforc√©e pour les imports optionnels
- Validation des param√®tres d'entr√©e
- Thread safety pour l'instance singleton
- Gestion d'erreurs pour le logger de rejets
- Validation des types et valeurs par d√©faut
- Optimisation des performances
"""

import re
import logging
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
from datetime import datetime
import json
import os
import threading
from pathlib import Path

# Configuration du logging avec fallback
try:
    import logging.handlers
    LOGGING_HANDLERS_AVAILABLE = True
except ImportError:
    LOGGING_HANDLERS_AVAILABLE = False

# Import des settings Intelia avec gestion d'erreur robuste
try:
    from app.config.settings import settings
    SETTINGS_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ [AgriculturalValidator] Settings Intelia charg√©s avec succ√®s")
except ImportError as e:
    SETTINGS_AVAILABLE = False
    settings = None
    # Fallback logger configuration
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è [AgriculturalValidator] Settings Intelia non disponibles: {e}")
except Exception as e:
    SETTINGS_AVAILABLE = False
    settings = None
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå [AgriculturalValidator] Erreur lors du chargement des settings: {e}")

@dataclass
class ValidationResult:
    """R√©sultat de la validation d'une question agricole"""
    is_valid: bool
    confidence: float
    reason: Optional[str] = None
    suggested_topics: Optional[List[str]] = None
    detected_keywords: Optional[List[str]] = None
    rejected_keywords: Optional[List[str]] = None
    
    def __post_init__(self):
        """Validation des donn√©es apr√®s initialisation"""
        # Validation de la confiance
        if not isinstance(self.confidence, (int, float)):
            raise ValueError("confidence doit √™tre un nombre")
        
        if not 0 <= self.confidence <= 100:
            raise ValueError("confidence doit √™tre entre 0 et 100")
        
        # Initialisation des listes si None
        if self.suggested_topics is None:
            self.suggested_topics = []
        if self.detected_keywords is None:
            self.detected_keywords = []
        if self.rejected_keywords is None:
            self.rejected_keywords = []
    
    def to_dict(self) -> Dict:
        """Convertit en dictionnaire pour les logs"""
        return {
            "is_valid": self.is_valid,
            "confidence": round(self.confidence, 2),
            "reason": self.reason,
            "suggested_topics": self.suggested_topics,
            "detected_keywords": self.detected_keywords,
            "rejected_keywords": self.rejected_keywords
        }

class AgriculturalDomainValidator:
    """
    Validateur pour garantir que les questions concernent le domaine agricole.
    Int√©gr√© avec le syst√®me de configuration Intelia.
    Thread-safe singleton pattern.
    """
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        """Impl√©mentation singleton thread-safe"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        """Initialise le validateur avec la configuration Intelia"""
        
        # √âviter la r√©initialisation du singleton
        if hasattr(self, '_initialized'):
            return
        
        try:
            self._load_configuration()
            self._init_keywords()
            self._init_rejection_logger()
            self._initialized = True
            
            logger.info(f"üîß [AgriculturalValidator] Validation agricole: {'‚úÖ Activ√©e' if self.enabled else '‚ùå D√©sactiv√©e'}")
            logger.info(f"üîß [AgriculturalValidator] Seuil de confiance: {self.strictness}%")
            logger.info(f"üîß [AgriculturalValidator] Settings disponibles: {'‚úÖ Oui' if SETTINGS_AVAILABLE else '‚ùå Non'}")
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur lors de l'initialisation: {e}")
            # Configuration par d√©faut en cas d'erreur
            self._set_default_configuration()
            self._initialized = True

    def _load_configuration(self):
        """Charge la configuration depuis les settings ou variables d'environnement"""
        
        if SETTINGS_AVAILABLE and settings:
            try:
                self.enabled = getattr(settings, 'agricultural_validation_enabled', True)
                self.strictness = float(getattr(settings, 'agricultural_validation_strictness', 15.0))
                self.allow_override = getattr(settings, 'agricultural_validation_override_allowed', False)
                self.log_all_validations = getattr(settings, 'agricultural_validation_log_all', True)
                self.log_dir = getattr(settings, 'agricultural_validation_log_dir', 'logs')
                self.log_max_size = int(getattr(settings, 'agricultural_validation_log_max_size', 10485760))
                self.log_backup_count = int(getattr(settings, 'agricultural_validation_log_backup_count', 5))
                
                logger.info("‚úÖ [AgriculturalValidator] Configuration charg√©e depuis les settings Intelia")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [AgriculturalValidator] Erreur settings Intelia: {e}, utilisation fallback")
                self._load_environment_configuration()
        else:
            self._load_environment_configuration()
    
    def _load_environment_configuration(self):
        """Charge la configuration depuis les variables d'environnement"""
        try:
            self.enabled = os.getenv('ENABLE_AGRICULTURAL_VALIDATION', 'true').lower() == 'true'
            self.strictness = float(os.getenv('VALIDATION_STRICTNESS', '15.0'))
            self.allow_override = os.getenv('ALLOW_VALIDATION_OVERRIDE', 'false').lower() == 'true'
            self.log_all_validations = os.getenv('LOG_ALL_VALIDATIONS', 'true').lower() == 'true'
            self.log_dir = os.getenv('VALIDATION_LOGS_DIR', 'logs')
            self.log_max_size = int(os.getenv('VALIDATION_LOG_MAX_SIZE', '10485760'))
            self.log_backup_count = int(os.getenv('VALIDATION_LOG_BACKUP_COUNT', '5'))
            
            # Validation des valeurs
            if not 0 <= self.strictness <= 100:
                logger.warning(f"‚ö†Ô∏è Strictness invalide: {self.strictness}, utilisation valeur par d√©faut: 15.0")
                self.strictness = 15.0
            
            if self.log_max_size <= 0:
                logger.warning(f"‚ö†Ô∏è Taille log invalide: {self.log_max_size}, utilisation valeur par d√©faut")
                self.log_max_size = 10485760
            
            if self.log_backup_count < 0:
                logger.warning(f"‚ö†Ô∏è Nombre backups invalide: {self.log_backup_count}, utilisation valeur par d√©faut")
                self.log_backup_count = 5
                
            logger.info("‚úÖ [AgriculturalValidator] Configuration charg√©e depuis les variables d'environnement")
            
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur configuration environnement: {e}")
            self._set_default_configuration()
    
    def _set_default_configuration(self):
        """Configuration par d√©faut en cas d'erreur"""
        self.enabled = True
        self.strictness = 15.0
        self.allow_override = False
        self.log_all_validations = True
        self.log_dir = 'logs'
        self.log_max_size = 10485760
        self.log_backup_count = 5
        logger.info("‚úÖ [AgriculturalValidator] Configuration par d√©faut appliqu√©e")

    def _init_keywords(self):
        """Initialise tous les dictionnaires de mots-cl√©s"""
        
        self.agricultural_keywords = {
            "fr": [
                # === ANIMAUX D'√âLEVAGE ===
                "poulet", "poulets", "poule", "poules", "volaille", "volailles", "coq", "coqs",
                "poussin", "poussins", "≈ìuf", "≈ìufs", "oeuf", "oeufs", "aviculture", "aviaire",
                "porc", "porcs", "cochon", "cochons", "truie", "truies", "verrat", "verrats",
                "porcelet", "porcelets", "suid√©", "suid√©s", "porcin", "porcins", "porcherie",
                "vache", "vaches", "taureau", "taureaux", "veau", "veaux", "g√©nisse", "g√©nisses",
                "bovin", "bovins", "b≈ìuf", "b≈ìufs", "boeuf", "boeufs", "√©table", "√©tables",
                "mouton", "moutons", "brebis", "agneau", "agneaux", "ch√®vre", "ch√®vres",
                "chevreau", "chevreaux", "caprin", "caprins", "ovin", "ovins", "bergerie",
                "cheval", "chevaux", "jument", "juments", "poulain", "poulains", "√©quin",
                "√©quins", "√©quid√©", "√©quid√©s", "√©curie", "√©curies",
                
                # === RACES ET LIGN√âES SP√âCIALIS√âES ===
                "ross", "ross 308", "ross 708", "cobb", "cobb 500", "cobb 700", "hybride",
                "lign√©e", "lign√©es", "souche", "souches", "race", "races", "breed",
                "hubbard", "arbor acres", "isa", "lohmann", "brown", "white",
                
                # === SANT√â ANIMALE ===
                "v√©t√©rinaire", "v√©t√©rinaires", "vaccination", "vaccin", "vaccins", "maladie",
                "maladies", "pathologie", "pathologies", "mortalit√©", "mort", "morts", "d√©c√®s",
                "sympt√¥me", "sympt√¥mes", "diagnostic", "diagnostics", "diagnostique",
                "traitement", "traitements", "m√©dicament", "m√©dicaments", "antibiotique",
                "antibiotiques", "th√©rapie", "th√©rapies", "soin", "soins", "pr√©vention",
                "hygi√®ne", "d√©sinfection", "bios√©curit√©", "quarantaine", "parasite", "parasites",
                "virus", "bact√©rie", "bact√©ries", "infection", "infections", "√©pid√©mie",
                "√©pid√©mies", "enzootie", "enzooties", "zoonose", "zoonoses", "bien-√™tre",
                "stress", "souffrance", "coccidiose", "salmonelle", "gumboro", "newcastle",
                "bronchite", "laryngotrach√©ite", "marek", "leucose", "influenza",
                
                # === NUTRITION ANIMALE ===
                "nutrition", "alimentation", "aliment", "aliments", "nourriture", "ration",
                "rations", "r√©gime", "r√©gimes", "fourrage", "fourrages", "foin", "paille",
                "grain", "grains", "c√©r√©ale", "c√©r√©ales", "ma√Øs", "bl√©", "orge", "avoine",
                "soja", "tourteau", "tourteaux", "prot√©ine", "prot√©ines", "vitamine",
                "vitamines", "min√©ral", "min√©raux", "compl√©ment", "compl√©ments", "additif",
                "additifs", "eau", "abreuvoir", "abreuvoirs", "mangeoire", "mangeoires",
                "distributeur", "distributeurs", "silo", "silos", "conversion", "digestibilit√©",
                "app√©tabilit√©", "starter", "grower", "finisher", "pr√©mix", "concentr√©",
                
                # === √âLEVAGE ET PRODUCTION ===
                "√©levage", "elevage", "ferme", "fermes", "exploitation", "exploitations",
                "agricole", "agricoles", "agriculture", "production", "producteur",
                "producteurs", "√©leveur", "√©leveurs", "eleveur", "eleveurs", "agriculteur",
                "agriculteurs", "b√¢timent", "b√¢timents", "stabulation", "poulailler",
                "poulaillers", "voli√®re", "voli√®res", "nursery", "maternit√©", "croissance",
                "poids", "gain", "gains", "d√©veloppement", "performance", "performances",
                "reproduction", "gestation", "mise-bas", "sevrage", "lactation",
                "ins√©mination", "saillie", "saillies", "chaleurs", "≈ìstrus", "estrus",
                "cycle", "cycles", "batch", "bande", "bandes", "lot", "lots",
                
                # === ENVIRONNEMENT D'√âLEVAGE ===
                "temp√©rature", "temp√©ratures", "ventilation", "air", "humidit√©", "a√©ration",
                "chauffage", "refroidissement", "climat", "ambiance", "microclimat",
                "√©clairage", "lumi√®re", "photop√©riode", "obscurit√©", "densit√©", "espace",
                "surface", "logement", "h√©bergement", "liti√®re", "liti√®res", "paillage",
                "caillebotis", "sol", "sols", "barn", "b√¢timent ferm√©", "plein air",
                
                # === GESTION TECHNIQUE ===
                "protocole", "protocoles", "programme", "programmes", "plan", "plans",
                "conduite", "r√©gie", "management", "surveillance", "monitoring", "contr√¥le",
                "suivi", "observation", "analyse", "analyses", "mesure", "mesures",
                "indicateur", "indicateurs", "param√®tre", "param√®tres", "kpi", "optimisation",
                "am√©lioration", "correction", "ajustement", "rotation", "rotations",
                
                # === √âCONOMIE AGRICOLE ===
                "co√ªt", "co√ªts", "prix", "rentabilit√©", "marge", "marges", "b√©n√©fice",
                "b√©n√©fices", "investissement", "investissements", "amortissement", "charges",
                "produit", "produits", "chiffre", "√©conomie", "√©conomique", "financier",
                
                # === R√âGLEMENTATION ET QUALIT√â ===
                "norme", "normes", "standard", "standards", "certification", "certifications",
                "label", "labels", "qualit√©", "tra√ßabilit√©", "s√©curit√©", "haccp", "iso",
                "gmp", "brc", "ifs", "r√©glementation", "r√®glement",
                
                # === TERMES TECHNIQUES SP√âCIALIS√âS ===
                "zootechnie", "zootechnique", "zootechniques", "cuniculture", "apiculture",
                "pisciculture", "aquaculture", "√©thologie", "physiologie", "anatomie",
                "histologie", "immunologie", "endocrinologie", "pharmacologie",
                
                # === √âQUIPEMENTS ET MAT√âRIEL ===
                "√©quipement", "√©quipements", "mat√©riel", "machine", "machines", "tracteur",
                "√©pandeur", "m√©langeur", "broyeur", "distributeur automatique", "capteur",
                "capteurs", "sonde", "sondes", "thermom√®tre", "hygrom√®tre"
            ],
            
            "en": [
                # === LIVESTOCK ANIMALS ===
                "chicken", "chickens", "poultry", "broiler", "broilers", "layer", "layers",
                "rooster", "roosters", "hen", "hens", "chick", "chicks", "egg", "eggs",
                "aviculture", "avian", "pig", "pigs", "swine", "hog", "hogs", "sow", "sows",
                "boar", "boars", "piglet", "piglets", "pork", "cattle", "cow", "cows",
                "bull", "bulls", "calf", "calves", "heifer", "heifers", "beef", "dairy",
                "sheep", "ewe", "ewes", "lamb", "lambs", "goat", "goats", "kid", "kids",
                "horse", "horses", "mare", "mares", "stallion", "stallions", "foal", "foals",
                
                # === BREEDS AND LINES ===
                "ross", "ross 308", "ross 708", "cobb", "cobb 500", "cobb 700", "hybrid",
                "breed", "breeds", "strain", "strains", "line", "lines", "genetic",
                "hubbard", "arbor acres", "isa", "lohmann", "brown", "white",
                
                # === ANIMAL HEALTH ===
                "veterinary", "veterinarian", "vaccination", "vaccine", "vaccines", "disease",
                "diseases", "pathology", "pathologies", "mortality", "death", "deaths",
                "symptom", "symptoms", "diagnosis", "diagnostic", "treatment", "treatments",
                "medicine", "medicines", "antibiotic", "antibiotics", "therapy", "therapies",
                "care", "prevention", "hygiene", "disinfection", "biosecurity", "quarantine",
                "parasite", "parasites", "virus", "bacteria", "infection", "infections",
                "epidemic", "epidemics", "welfare", "stress", "coccidiosis", "salmonella",
                "gumboro", "newcastle", "bronchitis", "laryngotracheitis", "marek",
                
                # === ANIMAL NUTRITION ===
                "nutrition", "feeding", "feed", "feeds", "food", "ration", "rations",
                "diet", "diets", "forage", "forages", "hay", "straw", "grain", "grains",
                "cereal", "cereals", "corn", "wheat", "barley", "oats", "soybean", "soy",
                "meal", "protein", "proteins", "vitamin", "vitamins", "mineral", "minerals",
                "supplement", "supplements", "additive", "additives", "water", "drinker",
                "drinkers", "feeder", "feeders", "silo", "silos", "conversion", "digestibility",
                "palatability", "starter", "grower", "finisher", "premix", "concentrate",
                
                # === LIVESTOCK FARMING ===
                "livestock", "farming", "farm", "farms", "agricultural", "agriculture",
                "production", "producer", "producers", "farmer", "farmers", "building",
                "buildings", "housing", "barn", "barns", "nursery", "growth", "weight",
                "gain", "gains", "development", "performance", "reproduction", "gestation",
                "farrowing", "weaning", "lactation", "insemination", "breeding", "heat",
                "estrus", "cycle", "cycles", "batch", "batches", "flock", "flocks",
                
                # === ENVIRONMENT ===
                "temperature", "temperatures", "ventilation", "air", "humidity", "heating",
                "cooling", "climate", "environment", "lighting", "light", "photoperiod",
                "darkness", "density", "space", "surface", "bedding", "litter", "floor",
                "floors", "outdoor", "indoor", "free-range",
                
                # === TECHNICAL MANAGEMENT ===
                "protocol", "protocols", "program", "programs", "plan", "plans", "management",
                "monitoring", "control", "surveillance", "observation", "analysis", "measure",
                "measures", "indicator", "indicators", "parameter", "parameters", "kpi",
                "optimization", "improvement", "correction", "adjustment", "rotation",
                
                # === AGRICULTURAL ECONOMICS ===
                "cost", "costs", "price", "prices", "profitability", "margin", "margins",
                "profit", "profits", "investment", "investments", "economy", "economic",
                "financial",
                
                # === STANDARDS AND QUALITY ===
                "standard", "standards", "certification", "certifications", "label", "labels",
                "quality", "traceability", "safety", "haccp", "iso", "gmp", "brc", "ifs",
                "regulation", "regulations",
                
                # === SPECIALIZED TERMS ===
                "zootechnics", "animal science", "aquaculture", "ethology", "physiology",
                "anatomy", "histology", "immunology", "endocrinology", "pharmacology",
                
                # === EQUIPMENT ===
                "equipment", "machinery", "machine", "machines", "tractor", "spreader",
                "mixer", "grinder", "automatic feeder", "sensor", "sensors", "probe",
                "probes", "thermometer", "hygrometer"
            ],
            
            "es": [
                # === ANIMALES DE GRANJA ===
                "pollo", "pollos", "gallina", "gallinas", "gallo", "gallos", "pollito",
                "pollitos", "ave", "aves", "huevo", "huevos", "avicultura", "aviar",
                "cerdo", "cerdos", "cochino", "cochinos", "marrana", "marranas", "verraco",
                "verracos", "lech√≥n", "lechones", "porcino", "porcinos", "porqueriza",
                "vaca", "vacas", "toro", "toros", "ternero", "terneros", "novilla", "novillas",
                "bovino", "bovinos", "ganado", "establo", "establos", "oveja", "ovejas",
                "cordero", "corderos", "cabra", "cabras", "cabrito", "cabritos", "caprino",
                "caprinos", "ovino", "ovinos", "redil", "caballo", "caballos", "yegua",
                "yeguas", "potro", "potros", "equino", "equinos",
                
                # === RAZAS Y L√çNEAS ===
                "ross", "ross 308", "ross 708", "cobb", "cobb 500", "cobb 700", "h√≠brido",
                "l√≠nea", "l√≠neas", "cepa", "cepas", "raza", "razas", "hubbard", "arbor acres",
                "isa", "lohmann", "brown", "white",
                
                # === SALUD ANIMAL ===
                "veterinario", "veterinarios", "vacunaci√≥n", "vacuna", "vacunas", "enfermedad",
                "enfermedades", "patolog√≠a", "patolog√≠as", "mortalidad", "muerte", "muertes",
                "s√≠ntoma", "s√≠ntomas", "diagn√≥stico", "diagn√≥sticos", "tratamiento",
                "tratamientos", "medicamento", "medicamentos", "antibi√≥tico", "antibi√≥ticos",
                "terapia", "terapias", "cuidado", "cuidados", "prevenci√≥n", "higiene",
                "desinfecci√≥n", "bioseguridad", "cuarentena", "par√°sito", "par√°sitos",
                "virus", "bacteria", "bacterias", "infecci√≥n", "infecciones", "epidemia",
                "epidemias", "bienestar", "estr√©s", "coccidiosis", "salmonela", "gumboro",
                "newcastle", "bronquitis", "laringotraque√≠tis", "marek",
                
                # === NUTRICI√ìN ANIMAL ===
                "nutrici√≥n", "alimentaci√≥n", "alimento", "alimentos", "comida", "raci√≥n",
                "raciones", "dieta", "dietas", "forraje", "forrajes", "heno", "paja",
                "grano", "granos", "cereal", "cereales", "ma√≠z", "trigo", "cebada", "avena",
                "soja", "harina", "prote√≠na", "prote√≠nas", "vitamina", "vitaminas", "mineral",
                "minerales", "suplemento", "suplementos", "aditivo", "aditivos", "agua",
                "bebedero", "bebederos", "comedero", "comederos", "silo", "silos", "conversi√≥n",
                "digestibilidad", "palatabilidad", "iniciador", "crecimiento", "terminador",
                "premezcla", "concentrado",
                
                # === GANADER√çA Y PRODUCCI√ìN ===
                "ganader√≠a", "granja", "granjas", "explotaci√≥n", "explotaciones", "agr√≠cola",
                "agr√≠colas", "agricultura", "producci√≥n", "productor", "productores",
                "ganadero", "ganaderos", "agricultor", "agricultores", "edificio", "edificios",
                "alojamiento", "gallinero", "gallineros", "vivero", "crecimiento", "peso",
                "ganancia", "ganancias", "desarrollo", "rendimiento", "reproducci√≥n",
                "gestaci√≥n", "parto", "destete", "lactaci√≥n", "inseminaci√≥n", "monta",
                "celo", "ciclo", "ciclos", "lote", "lotes", "reba√±o", "reba√±os",
                
                # === AMBIENTE ===
                "temperatura", "temperaturas", "ventilaci√≥n", "aire", "humedad", "calefacci√≥n",
                "enfriamiento", "clima", "ambiente", "iluminaci√≥n", "luz", "fotoper√≠odo",
                "oscuridad", "densidad", "espacio", "superficie", "cama", "yacija", "suelo",
                "suelos", "aire libre", "interior",
                
                # === GESTI√ìN T√âCNICA ===
                "protocolo", "protocolos", "programa", "programas", "plan", "planes",
                "manejo", "gesti√≥n", "monitoreo", "control", "vigilancia", "observaci√≥n",
                "an√°lisis", "medida", "medidas", "indicador", "indicadores", "par√°metro",
                "par√°metros", "optimizaci√≥n", "mejora", "correcci√≥n", "ajuste", "rotaci√≥n",
                
                # === ECONOM√çA AGR√çCOLA ===
                "costo", "costos", "precio", "precios", "rentabilidad", "margen", "m√°rgenes",
                "beneficio", "beneficios", "inversi√≥n", "inversiones", "econom√≠a", "econ√≥mico",
                "financiero",
                
                # === EST√ÅNDARES Y CALIDAD ===
                "norma", "normas", "est√°ndar", "est√°ndares", "certificaci√≥n", "certificaciones",
                "etiqueta", "calidad", "trazabilidad", "seguridad", "haccp", "iso", "gmp",
                "brc", "ifs", "reglamento", "reglamentos",
                
                # === T√âRMINOS ESPECIALIZADOS ===
                "zootecnia", "ciencia animal", "acuicultura", "etolog√≠a", "fisiolog√≠a",
                "anatom√≠a", "histolog√≠a", "inmunolog√≠a", "endocrinolog√≠a", "farmacolog√≠a",
                
                # === EQUIPOS ===
                "equipo", "equipos", "maquinaria", "m√°quina", "m√°quinas", "tractor",
                "esparcidor", "mezclador", "molino", "alimentador autom√°tico", "sensor",
                "sensores", "sonda", "sondas", "term√≥metro", "higr√≥metro"
            ]
        }
        
        self.non_agricultural_keywords = {
            "fr": [
                "finance", "finances", "banque", "banques", "investissement", "investissements",
                "bourse", "action", "actions", "crypto", "cryptomonnaie", "bitcoin", "ethereum", 
                "trading", "trader", "beaut√©", "maquillage", "cosm√©tique", "cosm√©tiques", 
                "mode", "v√™tement", "v√™tements", "fashion", "style", "tendance", "cuisine", 
                "recette", "recettes", "restaurant", "restaurants", "gastronomie", "chef", 
                "cuisinier", "sport", "football", "tennis", "basketball", "athl√®te", "match", 
                "comp√©tition", "technologie", "informatique", "ordinateur", "ordinateurs", 
                "smartphone", "t√©l√©phone", "logiciel", "internet", "web", "site", "voyage", 
                "tourisme", "vacances", "h√¥tel", "destination", "politique", "√©lection", 
                "gouvernement", "d√©put√©", "pr√©sident", "m√©decine", "docteur", "h√¥pital", 
                "patient", "chirurgie", "humain", "humaine", "personne", "automobile", 
                "voiture", "moto", "transport", "carburant", "immobilier", "maison", 
                "appartement", "achat", "vente", "location", "cin√©ma", "film", "musique", 
                "concert", "art", "peinture", "litt√©rature", "livre", "√©ducation", "√©cole", 
                "universit√©", "√©tudiant", "juridique", "droit", "avocat", "tribunal"
            ],
            "en": [
                "finance", "finances", "bank", "banking", "investment", "investments", "stock", 
                "stocks", "crypto", "cryptocurrency", "bitcoin", "ethereum", "trading", "trader", 
                "beauty", "makeup", "cosmetic", "cosmetics", "fashion", "clothing", "style", 
                "trend", "cooking", "recipe", "recipes", "restaurant", "restaurants", "gastronomy", 
                "chef", "culinary", "sport", "sports", "football", "tennis", "basketball", 
                "athlete", "game", "games", "competition", "technology", "computer", "computers", 
                "smartphone", "phone", "software", "internet", "web", "website", "travel", 
                "tourism", "vacation", "hotel", "destination", "politics", "election", "government", 
                "deputy", "president", "medicine", "doctor", "hospital", "patient", "surgery", 
                "human", "person", "people", "automotive", "car", "motorcycle", "transport", 
                "fuel", "real estate", "house", "apartment", "purchase", "sale", "rental", 
                "cinema", "movie", "music", "concert", "art", "painting", "literature", "book", 
                "education", "school", "university", "student", "legal", "law", "lawyer", "court"
            ],
            "es": [
                "finanzas", "banco", "inversi√≥n", "bolsa", "acci√≥n", "acciones", "crypto", 
                "criptomoneda", "bitcoin", "ethereum", "trading", "comercio", "belleza", 
                "maquillaje", "cosm√©tico", "cosm√©tica", "moda", "ropa", "vestimenta", "estilo", 
                "tendencia", "cocina", "receta", "recetas", "restaurante", "restaurantes", 
                "gastronom√≠a", "chef", "cocinero", "deporte", "deportes", "f√∫tbol", "tenis", 
                "baloncesto", "atleta", "partido", "competici√≥n", "tecnolog√≠a", "computadora", 
                "ordenador", "smartphone", "tel√©fono", "software", "internet", "web", "sitio", 
                "viaje", "turismo", "vacaciones", "hotel", "destino", "pol√≠tica", "elecci√≥n", 
                "gobierno", "diputado", "presidente", "medicina", "doctor", "hospital", 
                "paciente", "cirug√≠a", "humano", "humana", "persona", "autom√≥vil", "coche", 
                "moto", "transporte", "combustible", "inmobiliario", "casa", "apartamento", 
                "compra", "venta", "alquiler", "cine", "pel√≠cula", "m√∫sica", "concierto", 
                "arte", "pintura", "literatura", "libro", "educaci√≥n", "escuela", "universidad", 
                "estudiante", "jur√≠dico", "derecho", "abogado", "tribunal"
            ]
        }
        
        self.suggested_topics = {
            "fr": [
                "Probl√®mes de croissance des poulets de chair (Ross 308, Cobb 500)",
                "Protocoles de vaccination pour volailles (Gumboro, Newcastle, Bronchite)",
                "Gestion de la temp√©rature optimale dans le poulailler (32¬∞C)",
                "Nutrition et programmes d'alimentation starter/grower/finisher",
                "Diagnostic de mortalit√© √©lev√©e en √©levage de volailles",
                "Optimisation des performances de production (indice de conversion)",
                "Pr√©vention des maladies aviaires (coccidiose, salmonellose)",
                "Conduite d'√©levage en b√¢timent ferm√© et ventilation"
            ],
            "en": [
                "Broiler chicken growth problems (Ross 308, Cobb 500)",
                "Poultry vaccination protocols (Gumboro, Newcastle, Bronchitis)",
                "Optimal temperature management in poultry houses (32¬∞C)",
                "Nutrition and feeding programs starter/grower/finisher",
                "High mortality diagnosis in poultry farming",
                "Production performance optimization (feed conversion ratio)",
                "Avian disease prevention (coccidiosis, salmonellosis)",
                "Intensive housing management and ventilation systems"
            ],
            "es": [
                "Problemas de crecimiento en pollos de engorde (Ross 308, Cobb 500)",
                "Protocolos de vacunaci√≥n para aves (Gumboro, Newcastle, Bronquitis)",
                "Gesti√≥n de temperatura √≥ptima en gallineros (32¬∞C)",
                "Nutrici√≥n y programas de alimentaci√≥n iniciador/crecimiento/terminador",
                "Diagn√≥stico de mortalidad alta en granjas av√≠colas",
                "Optimizaci√≥n del rendimiento productivo (√≠ndice de conversi√≥n)",
                "Prevenci√≥n de enfermedades aviares (coccidiosis, salmonelosis)",
                "Manejo en alojamiento intensivo y sistemas de ventilaci√≥n"
            ]
        }
        
        logger.info("‚úÖ [AgriculturalValidator] Mots-cl√©s initialis√©s avec succ√®s")

    def _init_rejection_logger(self):
        """Initialise le logger sp√©cialis√© pour les rejets avec gestion d'erreurs robuste"""
        
        self.rejection_logger = logging.getLogger("agricultural_validation_rejections")
        self.rejection_logger.setLevel(logging.INFO)
        
        # √âviter la duplication des handlers
        if self.rejection_logger.handlers:
            logger.info("‚úÖ [AgriculturalValidator] Logger rejets d√©j√† configur√©")
            return
        
        try:
            # Cr√©er le r√©pertoire de logs s'il n'existe pas
            log_dir_path = Path(self.log_dir)
            log_dir_path.mkdir(parents=True, exist_ok=True)
            
            log_file_path = log_dir_path / 'agricultural_rejections.log'
            
            # V√©rifier si les handlers rotatifs sont disponibles
            if LOGGING_HANDLERS_AVAILABLE:
                from logging.handlers import RotatingFileHandler
                
                rejection_handler = RotatingFileHandler(
                    str(log_file_path),
                    maxBytes=self.log_max_size,
                    backupCount=self.log_backup_count,
                    encoding='utf-8'
                )
            else:
                # Fallback vers FileHandler basique
                rejection_handler = logging.FileHandler(
                    str(log_file_path),
                    encoding='utf-8'
                )
                logger.warning("‚ö†Ô∏è [AgriculturalValidator] RotatingFileHandler non disponible, utilisation FileHandler")
            
            rejection_formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            rejection_handler.setFormatter(rejection_formatter)
            self.rejection_logger.addHandler(rejection_handler)
            
            logger.info(f"‚úÖ [AgriculturalValidator] Logger rejets configur√©: {log_file_path}")
            
        except (OSError, PermissionError) as e:
            logger.warning(f"‚ö†Ô∏è [AgriculturalValidator] Impossible de cr√©er le fichier de log rejets: {e}")
            logger.warning("‚ö†Ô∏è [AgriculturalValidator] Les rejets seront logg√©s dans le logger principal")
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur inattendue lors de la configuration du logger rejets: {e}")

    def validate_question(self, question: str, language: str = "fr", 
                         user_id: str = "unknown", request_ip: str = "unknown") -> ValidationResult:
        """
        Valide qu'une question concerne le domaine agricole
        
        Args:
            question: La question √† valider
            language: Langue de la question (fr, en, es)
            user_id: ID de l'utilisateur pour les logs
            request_ip: IP de la requ√™te pour les logs
            
        Returns:
            ValidationResult: R√©sultat de la validation avec d√©tails
            
        Raises:
            ValueError: Si les param√®tres d'entr√©e sont invalides
        """
        
        # Validation des param√®tres d'entr√©e
        if not isinstance(question, str):
            raise ValueError("question doit √™tre une cha√Æne de caract√®res")
        
        if not question.strip():
            return ValidationResult(
                is_valid=False,
                confidence=0.0,
                reason=self._get_rejection_message(language, "empty_question"),
                suggested_topics=self.suggested_topics.get(language, self.suggested_topics["fr"])
            )
        
        if not isinstance(language, str) or language not in ["fr", "en", "es"]:
            logger.warning(f"‚ö†Ô∏è [AgriculturalValidator] Langue invalide: {language}, utilisation FR par d√©faut")
            language = "fr"
        
        if not isinstance(user_id, str):
            user_id = str(user_id)
        
        if not isinstance(request_ip, str):
            request_ip = str(request_ip)
        
        # Si la validation est d√©sactiv√©e, accepter toutes les questions
        if not self.enabled:
            logger.info(f"üîß [AgriculturalValidator] Validation d√©sactiv√©e - question accept√©e")
            return ValidationResult(is_valid=True, confidence=100.0)
        
        # Normalisation de la question avec gestion d'erreur
        try:
            normalized_question = self._normalize_text(question)
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur normalisation: {e}")
            normalized_question = question.lower()
        
        validation_start = datetime.now()
        
        logger.info(f"üîç [AgriculturalValidator] Validation question: '{question[:50]}...' (langue: {language}, user: {user_id[:8]})")
        
        try:
            # Obtenir les mots-cl√©s pour la langue
            agri_keywords = self.agricultural_keywords.get(language, self.agricultural_keywords["fr"])
            non_agri_keywords = self.non_agricultural_keywords.get(language, self.non_agricultural_keywords["fr"])
            
            # D√©tecter les mots-cl√©s
            detected_agri = self._find_keywords(normalized_question, agri_keywords)
            detected_non_agri = self._find_keywords(normalized_question, non_agri_keywords)
            
            # Calcul du score de confiance
            confidence = self._calculate_confidence(
                normalized_question, 
                len(detected_agri), 
                len(detected_non_agri)
            )
            
            # Logs d√©taill√©s
            if self.log_all_validations:
                logger.info(f"‚úÖ [AgriculturalValidator] Mots-cl√©s agricoles d√©tect√©s ({len(detected_agri)}): {detected_agri[:5]}")
                logger.info(f"‚ùå [AgriculturalValidator] Mots-cl√©s non-agricoles d√©tect√©s ({len(detected_non_agri)}): {detected_non_agri[:5]}")
                logger.info(f"üìä [AgriculturalValidator] Score de confiance: {confidence:.1f}%")
            
            # === D√âCISION DE VALIDATION ===
            
            # Cas 1: D√©tection explicite de domaines non-agricoles
            if detected_non_agri and not detected_agri:
                result = ValidationResult(
                    is_valid=False,
                    confidence=0.0,
                    reason=self._get_rejection_message(language, "non_agricultural"),
                    suggested_topics=self.suggested_topics.get(language, self.suggested_topics["fr"]),
                    detected_keywords=[],
                    rejected_keywords=detected_non_agri
                )
                self._log_rejection(question, result, language, user_id, request_ip, "non_agricultural_domain")
                return result
            
            # Cas 2: Mots-cl√©s agricoles d√©tect√©s - validation r√©ussie
            if detected_agri:
                result = ValidationResult(
                    is_valid=True,
                    confidence=max(confidence, 50.0),  # Bonus pour mots-cl√©s explicites
                    detected_keywords=detected_agri
                )
                if self.log_all_validations:
                    logger.info(f"‚úÖ [AgriculturalValidator] Question valid√©e: {len(detected_agri)} mots-cl√©s agricoles")
                return result
            
            # Cas 3: Score de confiance insuffisant
            if confidence < self.strictness:
                result = ValidationResult(
                    is_valid=False,
                    confidence=confidence,
                    reason=self._get_rejection_message(language, "too_general"),
                    suggested_topics=self.suggested_topics.get(language, self.suggested_topics["fr"])
                )
                self._log_rejection(question, result, language, user_id, request_ip, "insufficient_confidence")
                return result
            
            # Cas 4: Accepter avec score minimal
            result = ValidationResult(
                is_valid=True,
                confidence=confidence
            )
            if self.log_all_validations:
                logger.info(f"‚úÖ [AgriculturalValidator] Question accept√©e: score confiance {confidence:.1f}%")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur lors de la validation: {e}")
            # En cas d'erreur, accepter la question par d√©faut si allowed_override est True
            if self.allow_override:
                logger.warning(f"‚ö†Ô∏è [AgriculturalValidator] Validation √©chou√©e, acceptation par d√©faut (override activ√©)")
                return ValidationResult(is_valid=True, confidence=50.0, reason="Validation failed, default accept")
            else:
                return ValidationResult(
                    is_valid=False, 
                    confidence=0.0, 
                    reason=self._get_rejection_message(language, "validation_error")
                )

    def _normalize_text(self, text: str) -> str:
        """Normalise le texte pour la comparaison (supprime accents, ponctuation)"""
        try:
            import unicodedata
            
            # Validation d'entr√©e
            if not isinstance(text, str):
                text = str(text)
            
            # Convertir en minuscules
            text = text.lower()
            
            # Supprimer les accents
            text = unicodedata.normalize('NFD', text)
            text = ''.join(c for c in text if unicodedata.category(c) != 'Mn')
            
            # Nettoyer la ponctuation et espaces multiples
            text = re.sub(r'[^\w\s]', ' ', text)
            text = re.sub(r'\s+', ' ', text)
            
            return text.strip()
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur normalisation texte: {e}")
            # Fallback simple
            return text.lower().strip() if isinstance(text, str) else str(text).lower().strip()

    def _find_keywords(self, text: str, keywords: List[str]) -> List[str]:
        """Trouve les mots-cl√©s pr√©sents dans le texte avec recherche flexible"""
        if not text or not keywords:
            return []
        
        found = []
        text_words = text.split()
        
        try:
            for keyword in keywords:
                if not isinstance(keyword, str):
                    continue
                    
                keyword_lower = keyword.lower()
                
                # Recherche exacte du mot-cl√©
                if keyword_lower in text:
                    found.append(keyword)
                    continue
                
                # Recherche de mots similaires (racines communes pour mots > 4 caract√®res)
                if len(keyword_lower) > 4:
                    keyword_root = keyword_lower[:4]
                    for word in text_words:
                        if len(word) > 4 and word.startswith(keyword_root):
                            found.append(keyword)
                            break
            
            return list(set(found))  # √âliminer les doublons
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur recherche mots-cl√©s: {e}")
            return []

    def _calculate_confidence(self, text: str, agri_count: int, non_agri_count: int) -> float:
        """Calcule un score de confiance bas√© sur les mots-cl√©s d√©tect√©s"""
        try:
            word_count = len(text.split()) if text else 0
            
            if word_count == 0:
                return 0.0
            
            # Score bas√© sur la proportion de mots agricoles
            agri_ratio = (agri_count / word_count) * 100
            
            # Bonus pour multiple mots-cl√©s agricoles
            agri_bonus = min(agri_count * 15, 60)  # Max 60% de bonus
            
            # P√©nalit√© pour les mots non-agricoles
            non_agri_penalty = min(non_agri_count * 25, 75)  # Max 75% de p√©nalit√©
            
            # Score final
            confidence = agri_ratio + agri_bonus - non_agri_penalty
            
            return max(0.0, min(100.0, confidence))
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur calcul confiance: {e}")
            return 0.0

    def _get_rejection_message(self, language: str, reason: str) -> str:
        """Retourne le message de rejet appropri√© selon la langue et la raison"""
        messages = {
            "fr": {
                "non_agricultural": "Je suis un expert dans le domaine avicole, donc je ne suis pas sp√©cialis√© dans la cryptomonnaie. Si vous avez des questions sur le domaine avicole, je serais ravi de vous aider.",
                "too_general": "Cette question semble trop g√©n√©rale ou ne contient pas assez d'√©l√©ments sp√©cifiques au domaine avicole. Pouvez-vous la reformuler en pr√©cisant l'aspect d'√©levage, de sant√© animale ou de nutrition qui vous int√©resse ?",
                "empty_question": "Veuillez poser une question concernant l'√©levage, la sant√© animale ou la nutrition.",
                "validation_error": "Une erreur s'est produite lors de la validation. Veuillez reformuler votre question concernant l'agriculture."
            },
            "en": {
                "non_agricultural": "I am an expert in the poultry field, so I am not specialized in cryptocurrency. If you have questions about the poultry field, I would be happy to help you.",
                "too_general": "This question seems too general or doesn't contain enough elements specific to the poultry domain. Could you rephrase it by specifying the livestock, animal health, or nutrition aspect you're interested in?",
                "empty_question": "Please ask a question about livestock, animal health, or nutrition.",
                "validation_error": "An error occurred during validation. Please rephrase your question about agriculture."
            },
            "es": {
                "non_agricultural": "Soy un experto en el campo av√≠cola, por lo que no me especializo en criptomonedas. Si tienes preguntas sobre el campo av√≠cola, estar√≠a encantado de ayudarte.",
                "too_general": "Esta pregunta parece demasiado general o no contiene suficientes elementos espec√≠ficos del dominio av√≠cola. ¬øPodr√≠a reformularla especificando el aspecto ganadero, de salud animal o nutrici√≥n que le interesa?",
                "empty_question": "Por favor, haga una pregunta sobre ganader√≠a, salud animal o nutrici√≥n.",
                "validation_error": "Se produjo un error durante la validaci√≥n. Por favor, reformule su pregunta sobre agricultura."
            }
        }
        
        return messages.get(language, messages["fr"]).get(reason, messages["fr"][reason])

    def _log_rejection(self, question: str, result: ValidationResult, language: str, 
                      user_id: str, request_ip: str, rejection_type: str):
        """Log d√©taill√© des questions rejet√©es pour analyse"""
        
        try:
            rejection_data = {
                "timestamp": datetime.now().isoformat(),
                "question": question[:500],  # Limiter la taille
                "question_length": len(question),
                "language": language,
                "user_id": user_id[:50],  # Limiter la taille
                "request_ip": request_ip[:45],  # IP v6 max
                "rejection_type": rejection_type,
                "confidence": round(result.confidence, 2),
                "reason": result.reason,
                "detected_keywords": result.detected_keywords[:10] if result.detected_keywords else [],  # Limiter
                "rejected_keywords": result.rejected_keywords[:10] if result.rejected_keywords else [],  # Limiter
                "suggested_topics_count": len(result.suggested_topics) if result.suggested_topics else 0,
                "settings_source": "intelia_settings" if SETTINGS_AVAILABLE else "environment_variables"
            }
            
            # Log structur√© pour analyse
            self.rejection_logger.info(json.dumps(rejection_data, ensure_ascii=False))
            
            # Log standard pour monitoring
            logger.warning(
                f"‚ùå [AgriculturalValidator] REJET - Type: {rejection_type} | "
                f"User: {user_id[:8]} | Question: '{question[:100]}...' | "
                f"Confiance: {result.confidence:.1f}% | Mots rejet√©s: {result.rejected_keywords[:3]}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur logging rejet: {e}")

    def get_stats(self) -> Dict:
        """Retourne les statistiques de validation pour monitoring"""
        try:
            return {
                "enabled": self.enabled,
                "strictness_threshold": self.strictness,
                "allow_override": self.allow_override,
                "settings_available": SETTINGS_AVAILABLE,
                "log_all_validations": self.log_all_validations,
                "log_directory": self.log_dir,
                "agricultural_keywords_count": {
                    lang: len(keywords) for lang, keywords in self.agricultural_keywords.items()
                },
                "non_agricultural_keywords_count": {
                    lang: len(keywords) for lang, keywords in self.non_agricultural_keywords.items()
                },
                "supported_languages": list(self.agricultural_keywords.keys()),
                "logging_handlers_available": LOGGING_HANDLERS_AVAILABLE,
                "instance_initialized": hasattr(self, '_initialized')
            }
        except Exception as e:
            logger.error(f"‚ùå [AgriculturalValidator] Erreur get_stats: {e}")
            return {"error": str(e)}

# ==================== INSTANCE GLOBALE ====================

# Instance singleton du validateur avec protection thread-safe
_validator_instance = None
_validator_lock = threading.Lock()

def get_agricultural_validator() -> AgriculturalDomainValidator:
    """Retourne l'instance singleton du validateur de mani√®re thread-safe"""
    global _validator_instance
    if _validator_instance is None:
        with _validator_lock:
            if _validator_instance is None:
                _validator_instance = AgriculturalDomainValidator()
    return _validator_instance

# Cr√©er l'instance au chargement du module
agricultural_validator = get_agricultural_validator()

# ==================== FONCTIONS UTILITAIRES ====================

def validate_agricultural_question(question: str, language: str = "fr", 
                                 user_id: str = "unknown", request_ip: str = "unknown") -> ValidationResult:
    """
    Fonction utilitaire pour valider les questions agricoles
    
    Args:
        question: La question √† valider
        language: Langue de la question
        user_id: ID utilisateur pour les logs
        request_ip: IP pour les logs
        
    Returns:
        ValidationResult: R√©sultat de la validation
        
    Raises:
        ValueError: Si les param√®tres sont invalides
    """
    try:
        validator = get_agricultural_validator()
        return validator.validate_question(question, language, user_id, request_ip)
    except Exception as e:
        logger.error(f"‚ùå [AgriculturalValidator] Erreur fonction utilitaire: {e}")
        # Retourner un r√©sultat d'erreur plut√¥t que de lever l'exception
        return ValidationResult(
            is_valid=False,
            confidence=0.0,
            reason=f"Erreur de validation: {str(e)}"
        )

def get_agricultural_validator_stats() -> Dict:
    """Retourne les statistiques du validateur"""
    try:
        validator = get_agricultural_validator()
        return validator.get_stats()
    except Exception as e:
        logger.error(f"‚ùå [AgriculturalValidator] Erreur stats: {e}")
        return {"error": str(e)}

def is_agricultural_validation_enabled() -> bool:
    """V√©rifie si la validation agricole est activ√©e"""
    try:
        validator = get_agricultural_validator()
        return validator.enabled
    except Exception as e:
        logger.error(f"‚ùå [AgriculturalValidator] Erreur v√©rification activation: {e}")
        return False

# ==================== LOGGING DE D√âMARRAGE ====================

try:
    logger.info("üåæ [AgriculturalDomainValidator] Module de validation agricole initialis√©")
    logger.info(f"üìä [AgriculturalDomainValidator] Statistiques: {get_agricultural_validator_stats()}")
except Exception as e:
    logger.error(f"‚ùå [AgriculturalDomainValidator] Erreur logging d√©marrage: {e}")
