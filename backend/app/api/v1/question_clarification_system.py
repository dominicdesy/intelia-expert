"""
app/api/v1/question_clarification_system.py - VERSION CORRIG√âE

CORRECTIONS MAJEURES:
1. D√©tection intelligente des informations d√©j√† pr√©sentes
2. Prompts plus pr√©cis pour √©viter les faux positifs
3. Validation des questions avant g√©n√©ration
4. Seuils d'activation plus stricts
"""

import os
import re
import json
import logging
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

# Import des settings Intelia
try:
    from app.config.settings import settings
    SETTINGS_AVAILABLE = True
except ImportError:
    SETTINGS_AVAILABLE = False
    settings = None

# Import OpenAI s√©curis√©
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    openai = None

logger = logging.getLogger(__name__)

@dataclass
class ClarificationResult:
    """R√©sultat de l'analyse de clarification"""
    needs_clarification: bool
    questions: Optional[List[str]] = None
    confidence_score: float = 0.0
    processing_time_ms: int = 0
    reason: Optional[str] = None
    model_used: Optional[str] = None
    detected_info: Optional[Dict[str, str]] = None  # ‚úÖ NOUVEAU: Info d√©tect√©e
    
    def to_dict(self) -> Dict:
        """Convertit en dictionnaire pour les logs"""
        return {
            "needs_clarification": self.needs_clarification,
            "questions": self.questions,
            "questions_count": len(self.questions) if self.questions else 0,
            "confidence_score": self.confidence_score,
            "processing_time_ms": self.processing_time_ms,
            "reason": self.reason,
            "model_used": self.model_used,
            "detected_info": self.detected_info
        }

class QuestionClarificationSystem:
    """
    Syst√®me de clarification intelligent CORRIG√â pour les questions agricoles.
    D√©tecte les informations d√©j√† pr√©sentes pour √©viter les questions inutiles.
    """
    
    def __init__(self):
        """Initialise le syst√®me avec la configuration Intelia CORRIG√âE"""
        
        # Configuration depuis les settings Intelia ou variables d'environnement
        if SETTINGS_AVAILABLE and settings:
            self.enabled = getattr(settings, 'clarification_system_enabled', True)
            self.model = getattr(settings, 'clarification_model', 'gpt-3.5-turbo')
            self.timeout = getattr(settings, 'clarification_timeout', 15)  # ‚úÖ Augment√©
            self.max_questions = getattr(settings, 'clarification_max_questions', 3)  # ‚úÖ R√©duit
            self.min_question_length = getattr(settings, 'clarification_min_length', 15)  # ‚úÖ Augment√©
            self.log_all_clarifications = getattr(settings, 'clarification_log_all', True)
            self.confidence_threshold = getattr(settings, 'clarification_confidence_threshold', 0.8)  # ‚úÖ Plus strict
        else:
            # Fallback configuration depuis .env - SEUILS PLUS STRICTS
            self.enabled = os.getenv('ENABLE_CLARIFICATION_SYSTEM', 'true').lower() == 'true'
            self.model = os.getenv('CLARIFICATION_MODEL', 'gpt-3.5-turbo')
            self.timeout = int(os.getenv('CLARIFICATION_TIMEOUT', '15'))  # ‚úÖ Plus long
            self.max_questions = int(os.getenv('CLARIFICATION_MAX_QUESTIONS', '3'))  # ‚úÖ Moins de questions
            self.min_question_length = int(os.getenv('CLARIFICATION_MIN_LENGTH', '15'))  # ‚úÖ Questions plus longues
            self.log_all_clarifications = os.getenv('LOG_ALL_CLARIFICATIONS', 'true').lower() == 'true'
            self.confidence_threshold = float(os.getenv('CLARIFICATION_CONFIDENCE_THRESHOLD', '0.8'))  # ‚úÖ Plus strict
        
        logger.info(f"üîß [ClarificationSystem] Clarification: {'‚úÖ Activ√©e' if self.enabled else '‚ùå D√©sactiv√©e'}")
        logger.info(f"üîß [ClarificationSystem] Mod√®le: {self.model}, Timeout: {self.timeout}s")
        logger.info(f"üîß [ClarificationSystem] Questions max: {self.max_questions}, Seuil: {self.confidence_threshold}")
        
        self._init_patterns()  # ‚úÖ NOUVEAU: Patterns de d√©tection
        self._init_prompts()
        self._init_clarification_logger()

    def _init_patterns(self):
        """‚úÖ NOUVEAU: Initialise les patterns de d√©tection d'informations"""
        
        # Patterns pour d√©tecter les informations d√©j√† pr√©sentes
        self.breed_patterns = {
            "fr": [
                r'ross\s*308', r'ross\s*708', r'ross\s*ap95', r'ross\s*pm3',
                r'cobb\s*500', r'cobb\s*700', r'cobb\s*sasso',
                r'hubbard\s*flex', r'hubbard\s*classic',
                r'arbor\s*acres', r'isa\s*15', r'red\s*bro',
                r'poulets?\s+ross', r'poulets?\s+cobb', r'poulets?\s+hubbard'
            ],
            "en": [
                r'ross\s*308', r'ross\s*708', r'ross\s*ap95', r'ross\s*pm3',
                r'cobb\s*500', r'cobb\s*700', r'cobb\s*sasso',
                r'hubbard\s*flex', r'hubbard\s*classic',
                r'arbor\s*acres', r'isa\s*15', r'red\s*bro',
                r'chickens?\s+ross', r'chickens?\s+cobb', r'broilers?\s+ross'
            ],
            "es": [
                r'ross\s*308', r'ross\s*708', r'ross\s*ap95', r'ross\s*pm3',
                r'cobb\s*500', r'cobb\s*700', r'cobb\s*sasso',
                r'hubbard\s*flex', r'hubbard\s*classic',
                r'arbor\s*acres', r'isa\s*15', r'red\s*bro',
                r'pollos?\s+ross', r'pollos?\s+cobb', r'pollos?\s+de\s+engorde'
            ]
        }
        
        self.age_patterns = {
            "fr": [
                r'(\d+)\s*jours?', r'(\d+)\s*semaines?', r'(\d+)\s*mois',
                r'jour\s*(\d+)', r'semaine\s*(\d+)', r'√¢g√©s?\s+de\s+(\d+)',
                r'(\d+)j', r'(\d+)sem', r'j(\d+)', r'(\d+)\s*j\b'
            ],
            "en": [
                r'(\d+)\s*days?', r'(\d+)\s*weeks?', r'(\d+)\s*months?',
                r'day\s*(\d+)', r'week\s*(\d+)', r'(\d+)\s*day\s*old',
                r'(\d+)d', r'(\d+)w', r'd(\d+)', r'(\d+)\s*d\b'
            ],
            "es": [
                r'(\d+)\s*d√≠as?', r'(\d+)\s*semanas?', r'(\d+)\s*meses?',
                r'd√≠a\s*(\d+)', r'semana\s*(\d+)', r'(\d+)\s*d√≠as?\s*de\s*edad',
                r'(\d+)d', r'(\d+)s', r'd(\d+)', r'(\d+)\s*d\b'
            ]
        }
        
        self.weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:kg|kilogram|gramm?es?|g|lbs?|pound)',
            r'p√®sent?\s+(\d+(?:\.\d+)?)', r'weigh\s+(\d+(?:\.\d+)?)', r'peso\s+(\d+(?:\.\d+)?)',
            r'(\d+(?:\.\d+)?)\s*g\b', r'(\d+(?:\.\d+)?)\s*kg\b'
        ]
        
        self.mortality_patterns = [
            r'mortalit√©\s+(?:de\s+)?(\d+(?:\.\d+)?)%?', r'mortality\s+(?:of\s+)?(\d+(?:\.\d+)?)%?',
            r'mortalidad\s+(?:del?\s+)?(\d+(?:\.\d+)?)%?', r'(\d+(?:\.\d+)?)%\s+mortalit[√©y]',
            r'morts?\s+(\d+)', r'dead\s+(\d+)', r'muertos?\s+(\d+)'
        ]
        
        self.temperature_patterns = [
            r'(\d+(?:\.\d+)?)\s*¬∞?c', r'(\d+(?:\.\d+)?)\s*¬∞?f', r'(\d+(?:\.\d+)?)\s*degr√©s?',
            r'temp√©rature\s+(?:de\s+)?(\d+)', r'temperature\s+(?:of\s+)?(\d+)',
            r'temperatura\s+(?:de\s+)?(\d+)'
        ]

    def _detect_existing_info(self, question: str, language: str) -> Dict[str, str]:
        """‚úÖ NOUVEAU: D√©tecte les informations d√©j√† pr√©sentes dans la question"""
        
        detected = {}
        question_lower = question.lower()
        
        # D√©tection de la race/lign√©e
        breed_patterns = self.breed_patterns.get(language, self.breed_patterns["fr"])
        for pattern in breed_patterns:
            match = re.search(pattern, question_lower, re.IGNORECASE)
            if match:
                detected["breed"] = match.group(0).strip()
                break
        
        # D√©tection de l'√¢ge
        age_patterns = self.age_patterns.get(language, self.age_patterns["fr"])
        for pattern in age_patterns:
            match = re.search(pattern, question_lower, re.IGNORECASE)
            if match:
                detected["age"] = match.group(0).strip()
                break
        
        # D√©tection du poids
        for pattern in self.weight_patterns:
            match = re.search(pattern, question_lower, re.IGNORECASE)
            if match:
                detected["weight"] = match.group(0).strip()
                break
        
        # D√©tection de la mortalit√©
        for pattern in self.mortality_patterns:
            match = re.search(pattern, question_lower, re.IGNORECASE)
            if match:
                detected["mortality"] = match.group(0).strip()
                break
        
        # D√©tection de la temp√©rature
        for pattern in self.temperature_patterns:
            match = re.search(pattern, question_lower, re.IGNORECASE)
            if match:
                detected["temperature"] = match.group(0).strip()
                break
        
        return detected

    def _init_prompts(self):
        """‚úÖ CORRIG√â: Prompts plus pr√©cis et intelligents"""
        
        self.clarification_prompts = {
            "fr": """Tu es un expert v√©t√©rinaire sp√©cialis√© en sant√© et nutrition animale pour poulets de chair.

Analyse cette question et les informations d√©j√† d√©tect√©es. D√©termine si elle manque d'informations CRITIQUES pour donner une r√©ponse pr√©cise.

Question: "{question}"
Informations d√©j√† pr√©sentes: {detected_info}

R√àGLES STRICTES:
1. Si la question contient D√âJ√Ä les informations principales (race/√¢ge/contexte), r√©ponds exactement: "CLEAR"
2. NE demande PAS d'informations d√©j√† pr√©sentes dans la question
3. Seulement si des informations VRAIMENT critiques manquent, pose 2-3 questions pr√©cises

EXEMPLES DE QUESTIONS D√âJ√Ä COMPL√àTES (r√©pondre "CLEAR"):
- "Mes poulets Ross 308 de 25 jours ont une mortalit√© de 3%, est-ce normal?"
- "Poids normal poulet Ross au jour 12?" (race + √¢ge = suffisant)
- "Temp√©rature optimale pour Ross 308 de 2 semaines?"
- "Mes Cobb 500 de 30 jours p√®sent 1.2kg, c'est bien?"

EXEMPLES DE QUESTIONS VRAIMENT VAGUES (clarifier):
- "Mes poulets ne grossissent pas" (manque: race ET √¢ge)
- "Probl√®me de croissance" (manque: race ET √¢ge ET sympt√¥mes)
- "Quelle temp√©rature?" (manque: √¢ge des poulets)

IMPORTANT: Si la race (Ross, Cobb, etc.) ET l'√¢ge sont pr√©sents, la question est g√©n√©ralement COMPL√àTE.

Si clarification vraiment n√©cessaire, pose seulement les questions manquantes:
- Quelle est la race/lign√©e de vos poulets ?
- Quel √¢ge ont-ils actuellement ?
- Quel est le probl√®me observ√© pr√©cis√©ment ?

Format de r√©ponse si clarification n√©cessaire:
- Question 1
- Question 2""",

            "en": """You are a veterinary expert specialized in animal health and nutrition for broiler chickens.

Analyze this question and the detected information. Determine if it lacks CRITICAL information to provide a precise answer.

Question: "{question}"
Information already present: {detected_info}

STRICT RULES:
1. If the question already contains main information (breed/age/context), answer exactly: "CLEAR"
2. DO NOT ask for information already present in the question
3. Only if REALLY critical information is missing, ask 2-3 precise questions

EXAMPLES OF ALREADY COMPLETE QUESTIONS (answer "CLEAR"):
- "My Ross 308 chickens at 25 days have 3% mortality, is this normal?"
- "Normal weight Ross chicken day 12?" (breed + age = sufficient)
- "Optimal temperature for Ross 308 at 2 weeks?"
- "My Cobb 500 at 30 days weigh 1.2kg, is this good?"

EXAMPLES OF REALLY VAGUE QUESTIONS (clarify):
- "My chickens aren't growing" (missing: breed AND age)
- "Growth problem" (missing: breed AND age AND symptoms)
- "What temperature?" (missing: chicken age)

IMPORTANT: If breed (Ross, Cobb, etc.) AND age are present, the question is generally COMPLETE.

If clarification really needed, ask only missing questions:
- What breed/line are your chickens?
- How old are they currently?
- What problem are you observing precisely?

Response format if clarification needed:
- Question 1
- Question 2""",

            "es": """Eres un experto veterinario especializado en salud y nutrici√≥n animal para pollos de engorde.

Analiza esta pregunta y la informaci√≥n detectada. Determina si carece de informaci√≥n CR√çTICA para dar una respuesta precisa.

Pregunta: "{question}"
Informaci√≥n ya presente: {detected_info}

REGLAS ESTRICTAS:
1. Si la pregunta ya contiene informaci√≥n principal (raza/edad/contexto), responde exactamente: "CLEAR"
2. NO pidas informaci√≥n ya presente en la pregunta
3. Solo si falta informaci√≥n REALMENTE cr√≠tica, haz 2-3 preguntas precisas

EJEMPLOS DE PREGUNTAS YA COMPLETAS (responder "CLEAR"):
- "Mis pollos Ross 308 de 25 d√≠as tienen 3% mortalidad, ¬øes normal?"
- "¬øPeso normal pollo Ross d√≠a 12?" (raza + edad = suficiente)
- "¬øTemperatura √≥ptima para Ross 308 de 2 semanas?"
- "Mis Cobb 500 de 30 d√≠as pesan 1.2kg, ¬øest√° bien?"

EJEMPLOS DE PREGUNTAS REALMENTE VAGAS (aclarar):
- "Mis pollos no crecen" (falta: raza Y edad)
- "Problema de crecimiento" (falta: raza Y edad Y s√≠ntomas)
- "¬øQu√© temperatura?" (falta: edad pollos)

IMPORTANTE: Si raza (Ross, Cobb, etc.) Y edad est√°n presentes, la pregunta es generalmente COMPLETA.

Si realmente necesita aclaraci√≥n, pregunta solo lo que falta:
- ¬øCu√°l es la raza/l√≠nea de sus pollos?
- ¬øQu√© edad tienen actualmente?
- ¬øQu√© problema observa precisamente?

Formato de respuesta si necesita aclaraci√≥n:
- Pregunta 1
- Pregunta 2"""
        }

    def _init_clarification_logger(self):
        """Initialise le logger sp√©cialis√© pour les clarifications"""
        self.clarification_logger = logging.getLogger("question_clarification")
        self.clarification_logger.setLevel(logging.INFO)
        
        # Handler pour fichier de clarifications si pas d√©j√† configur√©
        if not self.clarification_logger.handlers and self.log_all_clarifications:
            try:
                from logging.handlers import RotatingFileHandler
                
                # Utiliser le m√™me r√©pertoire que la validation agricole
                log_dir = os.getenv('VALIDATION_LOGS_DIR', 'logs')
                os.makedirs(log_dir, exist_ok=True)
                
                log_file_path = os.path.join(log_dir, 'question_clarifications.log')
                clarification_handler = RotatingFileHandler(
                    log_file_path,
                    maxBytes=int(os.getenv('VALIDATION_LOG_MAX_SIZE', '10485760')),
                    backupCount=int(os.getenv('VALIDATION_LOG_BACKUP_COUNT', '5'))
                )
                clarification_formatter = logging.Formatter(
                    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                )
                clarification_handler.setFormatter(clarification_formatter)
                self.clarification_logger.addHandler(clarification_handler)
                
                logger.info(f"‚úÖ [ClarificationSystem] Logger configur√©: {log_file_path}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [ClarificationSystem] Impossible de cr√©er le fichier de log: {e}")

    async def analyze_question(
        self, 
        question: str, 
        language: str = "fr",
        user_id: str = "unknown",
        conversation_id: str = None
    ) -> ClarificationResult:
        """
        ‚úÖ CORRIG√â: Analyse une question avec d√©tection intelligente
        """
        
        start_time = time.time()
        
        # V√©rification de l'activation du syst√®me
        if not self.enabled:
            logger.info(f"üîß [ClarificationSystem] Syst√®me d√©sactiv√© - question trait√©e normalement")
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=int((time.time() - start_time) * 1000),
                reason="system_disabled"
            )
        
        # Validation des entr√©es - SEUILS PLUS STRICTS
        if not question or len(question.strip()) < self.min_question_length:
            logger.info(f"‚ö†Ô∏è [ClarificationSystem] Question trop courte: {len(question)} caract√®res (min: {self.min_question_length})")
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=int((time.time() - start_time) * 1000),
                reason="question_too_short"
            )
        
        # ‚úÖ NOUVEAU: D√©tection intelligente des informations pr√©sentes
        detected_info = self._detect_existing_info(question, language)
        
        logger.info(f"üîç [ClarificationSystem] Analyse: '{question[:80]}...' (langue: {language})")
        logger.info(f"üìä [ClarificationSystem] Info d√©tect√©es: {detected_info}")
        
        # ‚úÖ NOUVEAU: Si informations critiques d√©j√† pr√©sentes, pas de clarification
        if detected_info.get("breed") and detected_info.get("age"):
            logger.info(f"‚úÖ [ClarificationSystem] Race + √¢ge d√©tect√©s - question compl√®te")
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=int((time.time() - start_time) * 1000),
                reason="sufficient_info_detected",
                detected_info=detected_info
            )
        
        # ‚úÖ NOUVEAU: Questions tr√®s sp√©cifiques consid√©r√©es comme compl√®tes
        specific_keywords = {
            "fr": ["poids normal", "temp√©rature optimale", "mortalit√© normale", "croissance normale"],
            "en": ["normal weight", "optimal temperature", "normal mortality", "normal growth"],
            "es": ["peso normal", "temperatura √≥ptima", "mortalidad normal", "crecimiento normal"]
        }
        
        question_lower = question.lower()
        keywords = specific_keywords.get(language, specific_keywords["fr"])
        
        if any(keyword in question_lower for keyword in keywords) and detected_info:
            logger.info(f"‚úÖ [ClarificationSystem] Question sp√©cifique avec contexte - compl√®te")
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=int((time.time() - start_time) * 1000),
                reason="specific_question_with_context",
                detected_info=detected_info
            )
        
        if not OPENAI_AVAILABLE or not openai:
            logger.warning(f"‚ö†Ô∏è [ClarificationSystem] OpenAI non disponible")
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=int((time.time() - start_time) * 1000),
                reason="openai_unavailable",
                detected_info=detected_info
            )
        
        try:
            # Configuration OpenAI
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key:
                logger.warning(f"‚ö†Ô∏è [ClarificationSystem] Cl√© API OpenAI manquante")
                return ClarificationResult(
                    needs_clarification=False,
                    processing_time_ms=int((time.time() - start_time) * 1000),
                    reason="openai_key_missing",
                    detected_info=detected_info
                )
            
            openai.api_key = api_key
            
            # ‚úÖ CORRIG√â: Prompt avec informations d√©tect√©es
            prompt_template = self.clarification_prompts.get(language.lower(), self.clarification_prompts["fr"])
            
            # Formater les informations d√©tect√©es pour le prompt
            detected_info_str = json.dumps(detected_info, ensure_ascii=False) if detected_info else "Aucune information sp√©cifique d√©tect√©e"
            
            user_prompt = prompt_template.format(
                question=question, 
                detected_info=detected_info_str
            )
            
            system_prompt = "Tu es un assistant intelligent qui d√©termine si une question n√©cessite des clarifications. Sois tr√®s conservateur - ne demande des clarifications que si vraiment n√©cessaire."
            
            # Appel √† OpenAI
            response = openai.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.1,  # Tr√®s faible pour coh√©rence
                max_tokens=300,  # ‚úÖ R√©duit pour r√©ponses plus courtes
                timeout=self.timeout
            )
            
            answer = response.choices[0].message.content.strip()
            processing_time_ms = int((time.time() - start_time) * 1000)
            
            logger.info(f"ü§ñ [ClarificationSystem] R√©ponse GPT: {answer[:100]}...")
            
            # Analyse de la r√©ponse
            if answer.upper().strip() in ["CLEAR", "CLEAR.", "CLEAR !"]:
                result = ClarificationResult(
                    needs_clarification=False,
                    processing_time_ms=processing_time_ms,
                    reason="question_clear_by_gpt",
                    model_used=self.model,
                    detected_info=detected_info
                )
                
                logger.info(f"‚úÖ [ClarificationSystem] Question claire selon GPT ({processing_time_ms}ms)")
                
                if self.log_all_clarifications:
                    await self._log_clarification_decision(
                        question, language, user_id, conversation_id, result
                    )
                
                return result
            
            # Extraire les questions de clarification
            clarification_questions = self._extract_questions(answer)
            
            # ‚úÖ NOUVEAU: Filtrer les questions qui demandent des infos d√©j√† pr√©sentes
            filtered_questions = self._filter_redundant_questions(clarification_questions, detected_info, language)
            
            if filtered_questions and len(filtered_questions) > 0:
                # Limiter le nombre de questions
                limited_questions = filtered_questions[:self.max_questions]
                
                result = ClarificationResult(
                    needs_clarification=True,
                    questions=limited_questions,
                    processing_time_ms=processing_time_ms,
                    reason="clarification_needed",
                    model_used=self.model,
                    confidence_score=self._calculate_confidence_score(question, limited_questions, detected_info),
                    detected_info=detected_info
                )
                
                logger.info(f"‚ùì [ClarificationSystem] {len(limited_questions)} questions g√©n√©r√©es ({processing_time_ms}ms)")
                logger.info(f"‚ùì [ClarificationSystem] Questions: {limited_questions}")
                
                if self.log_all_clarifications:
                    await self._log_clarification_decision(
                        question, language, user_id, conversation_id, result
                    )
                
                return result
            else:
                logger.info(f"‚úÖ [ClarificationSystem] Questions filtr√©es - informations suffisantes")
                return ClarificationResult(
                    needs_clarification=False,
                    processing_time_ms=processing_time_ms,
                    reason="questions_filtered_sufficient_info",
                    model_used=self.model,
                    detected_info=detected_info
                )
        
        except Exception as e:
            processing_time_ms = int((time.time() - start_time) * 1000)
            logger.error(f"‚ùå [ClarificationSystem] Erreur analyse: {e}")
            
            return ClarificationResult(
                needs_clarification=False,
                processing_time_ms=processing_time_ms,
                reason=f"error: {str(e)}",
                model_used=self.model,
                detected_info=detected_info
            )

    def _filter_redundant_questions(self, questions: List[str], detected_info: Dict[str, str], language: str) -> List[str]:
        """‚úÖ NOUVEAU: Filtre les questions qui demandent des informations d√©j√† pr√©sentes"""
        
        if not questions or not detected_info:
            return questions
        
        filtered = []
        
        # Mots-cl√©s pour identifier les types de questions
        breed_keywords = {
            "fr": ["race", "lign√©e", "souche", "vari√©t√©", "ross", "cobb", "hubbard"],
            "en": ["breed", "line", "strain", "variety", "ross", "cobb", "hubbard"],
            "es": ["raza", "l√≠nea", "cepa", "variedad", "ross", "cobb", "hubbard"]
        }
        
        age_keywords = {
            "fr": ["√¢ge", "√¢g√©", "jour", "semaine", "mois", "vieux"],
            "en": ["age", "old", "day", "week", "month"],
            "es": ["edad", "d√≠a", "semana", "mes", "viejo"]
        }
        
        weight_keywords = {
            "fr": ["poids", "p√®se", "kg", "gramme"],
            "en": ["weight", "weigh", "kg", "gram", "pound"],
            "es": ["peso", "pesa", "kg", "gramo"]
        }
        
        keywords_sets = {
            "breed": breed_keywords.get(language, breed_keywords["fr"]),
            "age": age_keywords.get(language, age_keywords["fr"]),
            "weight": weight_keywords.get(language, weight_keywords["fr"])
        }
        
        for question in questions:
            question_lower = question.lower()
            should_keep = True
            
            # V√©rifier si la question demande une info d√©j√† pr√©sente
            for info_type, keywords in keywords_sets.items():
                if info_type in detected_info:
                    if any(keyword in question_lower for keyword in keywords):
                        logger.info(f"üö´ [ClarificationSystem] Question filtr√©e (info pr√©sente): {question}")
                        should_keep = False
                        break
            
            if should_keep:
                filtered.append(question)
        
        return filtered

    def _extract_questions(self, answer: str) -> List[str]:
        """Extrait les questions de clarification de la r√©ponse GPT"""
        questions = []
        lines = answer.splitlines()
        
        for line in lines:
            line = line.strip()
            if line and len(line) > 10:  # ‚úÖ Augment√© de 5 √† 10
                # Nettoyer les puces et formatage
                cleaned_line = re.sub(r'^[-‚Ä¢*]\s*', '', line)
                cleaned_line = re.sub(r'^\d+\.\s*', '', cleaned_line)
                cleaned_line = cleaned_line.strip()
                
                # V√©rifier que c'est une vraie question
                if cleaned_line and len(cleaned_line) > 15 and cleaned_line not in questions:  # ‚úÖ Augment√©
                    # Ajouter un point d'interrogation si manquant
                    if not cleaned_line.endswith('?') and not cleaned_line.endswith(' ?'):
                        if any(word in cleaned_line.lower() for word in ['quel', 'quelle', 'combien', 'comment', 'what', 'how', 'which', 'cu√°l', 'c√≥mo', 'cu√°nto']):
                            cleaned_line += ' ?'
                    
                    questions.append(cleaned_line)
        
        return questions

    def _calculate_confidence_score(self, original_question: str, clarification_questions: List[str], detected_info: Dict[str, str]) -> float:
        """‚úÖ CORRIG√â: Calcule un score de confiance avec informations d√©tect√©es"""
        
        # Score de base bas√© sur le nombre de questions
        base_score = min(len(clarification_questions) * 20, 80)  # ‚úÖ R√©duit
        
        # Bonus pour informations d√©j√† d√©tect√©es (moins besoin de clarification)
        info_bonus = len(detected_info) * 15
        
        # Ajustement bas√© sur la longueur de la question originale
        if len(original_question) < 20:
            length_penalty = 10  # Questions tr√®s courtes
        elif len(original_question) < 40:
            length_penalty = 5
        else:
            length_penalty = 0  # Questions longues sont souvent plus d√©taill√©es
        
        # Score final (plus d'infos d√©tect√©es = moins besoin de clarification)
        final_score = max(base_score - info_bonus + length_penalty, 10.0)
        
        return min(final_score, 100.0)

    def format_clarification_response(
        self, 
        questions: List[str], 
        language: str, 
        original_question: str
    ) -> str:
        """Formate la r√©ponse de clarification de mani√®re conviviale"""
        
        intros = {
            "fr": "‚ùì Pour vous donner la meilleure r√©ponse possible, j'aurais besoin de quelques pr√©cisions :",
            "en": "‚ùì To give you the best possible answer, I would need some clarification:",
            "es": "‚ùì Para darle la mejor respuesta posible, necesitar√≠a algunas aclaraciones:"
        }
        
        outros = {
            "fr": "\n\nMerci de pr√©ciser ces √©l√©ments, cela m'aidera √† vous donner des conseils adapt√©s √† votre situation sp√©cifique ! üêî",
            "en": "\n\nPlease provide these details, it will help me give you advice tailored to your specific situation! üêî",
            "es": "\n\n¬°Por favor proporcione estos detalles, me ayudar√° a darle consejos adaptados a su situaci√≥n espec√≠fica! üêî"
        }
        
        intro = intros.get(language, intros["fr"])
        outro = outros.get(language, outros["fr"])
        
        # Formatage des questions avec puces
        formatted_questions = "\n".join([f"‚Ä¢ {q}" for q in questions])
        
        return f"{intro}\n\n{formatted_questions}{outro}"

    async def _log_clarification_decision(
        self,
        question: str,
        language: str,
        user_id: str,
        conversation_id: str,
        result: ClarificationResult
    ):
        """Log d√©taill√© des d√©cisions de clarification pour analyse"""
        
        clarification_data = {
            "timestamp": datetime.now().isoformat(),
            "conversation_id": conversation_id,
            "user_id": user_id,
            "question": question,
            "question_length": len(question),
            "language": language,
            "result": result.to_dict(),
            "system_config": {
                "enabled": self.enabled,
                "model": self.model,
                "max_questions": self.max_questions,
                "confidence_threshold": self.confidence_threshold,
                "min_question_length": self.min_question_length
            }
        }
        
        # Log structur√© pour analyse
        self.clarification_logger.info(json.dumps(clarification_data, ensure_ascii=False))
        
        # Log standard pour monitoring
        if result.needs_clarification:
            logger.info(
                f"‚ùì [ClarificationSystem] CLARIFICATION - "
                f"User: {user_id[:8]} | Questions: {len(result.questions)} | "
                f"Confiance: {result.confidence_score:.1f}% | "
                f"Temps: {result.processing_time_ms}ms | "
                f"Info d√©tect√©es: {len(result.detected_info or {})}"
            )
        else:
            logger.info(
                f"‚úÖ [ClarificationSystem] CLEAR - "
                f"User: {user_id[:8]} | Raison: {result.reason} | "
                f"Temps: {result.processing_time_ms}ms | "
                f"Info d√©tect√©es: {len(result.detected_info or {})}"
            )

    def get_stats(self) -> Dict:
        """Retourne les statistiques du syst√®me pour monitoring"""
        return {
            "enabled": self.enabled,
            "model": self.model,
            "timeout": self.timeout,
            "max_questions": self.max_questions,
            "min_question_length": self.min_question_length,
            "confidence_threshold": self.confidence_threshold,
            "log_all_clarifications": self.log_all_clarifications,
            "openai_available": OPENAI_AVAILABLE,
            "supported_languages": list(self.clarification_prompts.keys()),
            "settings_source": "intelia_settings" if SETTINGS_AVAILABLE else "environment_variables",
            "detection_enabled": True,
            "breed_patterns_count": sum(len(patterns) for patterns in self.breed_patterns.values()),
            "age_patterns_count": sum(len(patterns) for patterns in self.age_patterns.values())
        }

# ==================== INSTANCE GLOBALE ====================

# Instance singleton du syst√®me de clarification CORRIG√â
clarification_system = QuestionClarificationSystem()

# ==================== FONCTIONS UTILITAIRES ====================

async def analyze_question_for_clarification(
    question: str, 
    language: str = "fr",
    user_id: str = "unknown", 
    conversation_id: str = None
) -> ClarificationResult:
    """Fonction utilitaire pour analyser les questions - CORRIG√âE"""
    return await clarification_system.analyze_question(question, language, user_id, conversation_id)

def format_clarification_response(questions: List[str], language: str, original_question: str) -> str:
    """Formate la r√©ponse de clarification"""
    return clarification_system.format_clarification_response(questions, language, original_question)

def get_clarification_system_stats() -> Dict:
    """Retourne les statistiques du syst√®me"""
    return clarification_system.get_stats()

def is_clarification_system_enabled() -> bool:
    """V√©rifie si le syst√®me de clarification est activ√©"""
    return clarification_system.enabled

def build_enriched_question(original_question: str, clarification_answers: Dict[str, str], clarification_questions: List[str]) -> str:
    """Construit une question enrichie avec les r√©ponses de clarification"""
    enriched_question = original_question + "\n\nInformations suppl√©mentaires :"
    
    for index_str, answer in clarification_answers.items():
        if answer and answer.strip():
            try:
                index = int(index_str)
                if 0 <= index < len(clarification_questions):
                    question = clarification_questions[index]
                    enriched_question += f"\n- {question}: {answer.strip()}"
            except (ValueError, IndexError):
                continue
    
    return enriched_question

# ==================== LOGGING DE D√âMARRAGE ====================

logger.info("‚ùì [QuestionClarificationSystem] Module de clarification intelligent CORRIG√â initialis√©")
logger.info(f"üìä [QuestionClarificationSystem] Statistiques: {clarification_system.get_stats()}")
logger.info("‚úÖ [QuestionClarificationSystem] CORRECTIONS APPLIQU√âES:")
logger.info("   - D√©tection intelligente des informations pr√©sentes (race, √¢ge, poids, etc.)")
logger.info("   - Prompts plus pr√©cis pour √©viter les faux positifs")
logger.info("   - Filtrage des questions redondantes")
logger.info("   - Seuils plus stricts pour l'activation")
logger.info("   - Questions sp√©cifiques reconnues comme compl√®tes")