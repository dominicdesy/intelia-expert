"""
app/api/v1/expert_clarification_service.py - SERVICE D'AUTO-CLARIFICATION AM√âLIOR√â

üîß NOUVELLES FONCTIONNALIT√âS IMPL√âMENT√âES:
‚úÖ D√©tection automatique du sujet par GPT-4o-mini (√©conomique + pr√©cis)
‚úÖ S√©lection dynamique de templates (generic vs specific)
‚úÖ Adaptation selon le nombre d'entit√©s manquantes
‚úÖ Templates contextualis√©s pour une meilleure pertinence
‚úÖ Validation renforc√©e des questions g√©n√©r√©es
‚úÖ Fallback intelligent avec extraction de patterns malform√©s
‚úÖ Syst√®me de scoring qualit√© multicrit√®res
‚úÖ V√©rification de couverture compl√®te des entit√©s
‚úÖ Normalisation avanc√©e des questions
"""

import logging
import re
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime
import json

# Import s√©curis√© au niveau module pour √©viter les imports circulaires
try:
    from .expert_models import EnhancedExpertResponse, DynamicClarification
    from .openai_service import OpenAIService
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå Import error: {e}")
    # D√©finir des classes mock si n√©cessaire
    class EnhancedExpertResponse:
        pass
    class DynamicClarification:
        pass
    class OpenAIService:
        def __init__(self):
            pass

logger = logging.getLogger(__name__)

# =============================================================================
# PROMPT DE D√âTECTION AUTOMATIQUE DE SUJET AVEC GPT
# =============================================================================

TOPIC_DETECTION_PROMPT = {
    "fr": """Tu es un expert v√©t√©rinaire avicole. Analyse cette question et identifie le sujet principal en UN SEUL MOT fran√ßais.

Question: "{question}"

Choisis UNIQUEMENT parmi ces 7 sujets (r√©ponds par le mot exact):
- sant√© (maladie, mortalit√©, sympt√¥mes, diagnostic, traitement)
- nutrition (alimentation, eau, compl√©ments, ration, vitamines)
- croissance (poids, d√©veloppement, performance, GMQ, standards)
- reproduction (ponte, incubation, fertilit√©, couvaison, ≈ìufs)
- environnement (temp√©rature, ventilation, liti√®re, densit√©, b√¢timent)
- vaccination (protocole, programme, immunit√©, pr√©vention)
- g√©n√©ral (autre sujet ou question trop vague)

Retourne uniquement le mot choisi, sans explication.""",

    "en": """You are a poultry veterinary expert. Analyze this question and identify the main topic in ONE ENGLISH WORD.

Question: "{question}"

Choose ONLY from these 7 topics (respond with the exact word):
- health (disease, mortality, symptoms, diagnosis, treatment)
- nutrition (feeding, water, supplements, ration, vitamins)
- growth (weight, development, performance, ADG, standards)
- reproduction (laying, incubation, fertility, brooding, eggs)
- environment (temperature, ventilation, litter, density, housing)
- vaccination (protocol, program, immunity, prevention)
- general (other topic or too vague question)

Return only the chosen word, without explanation.""",

    "es": """Eres un experto veterinario av√≠cola. Analiza esta pregunta e identifica el tema principal en UNA SOLA PALABRA en espa√±ol.

Pregunta: "{question}"

Elige √öNICAMENTE entre estos 7 temas (responde con la palabra exacta):
- salud (enfermedad, mortalidad, s√≠ntomas, diagn√≥stico, tratamiento)
- nutrici√≥n (alimentaci√≥n, agua, suplementos, raci√≥n, vitaminas)
- crecimiento (peso, desarrollo, rendimiento, GMD, est√°ndares)
- reproducci√≥n (puesta, incubaci√≥n, fertilidad, empollado, huevos)
- ambiente (temperatura, ventilaci√≥n, cama, densidad, alojamiento)
- vacunaci√≥n (protocolo, programa, inmunidad, prevenci√≥n)
- general (otro tema o pregunta muy vaga)

Devuelve solo la palabra elegida, sin explicaci√≥n."""
}

# =============================================================================
# TEMPLATES DE CLARIFICATION DYNAMIQUES AM√âLIOR√âS
# =============================================================================

CLARIFICATION_TEMPLATES = {
    "generic": {
        "fr": """Tu es un expert v√©t√©rinaire sp√©cialis√© en volaille. L'utilisateur a pos√© une question qui manque de contexte important.

Question utilisateur: "{user_question}"
Contexte conversation: {conversation_context}
Entit√©s manquantes d√©tect√©es: {missing_entities}

G√©n√®re exactement 3-4 questions de clarification courtes et pr√©cises pour obtenir les informations manquantes. Les questions doivent √™tre:
- Sp√©cifiques au domaine aviaire
- Courtes (maximum 15 mots)
- Directes et pratiques
- En fran√ßais
- Chacune doit couvrir une entit√© manquante diff√©rente

Retourne uniquement un JSON avec la liste des questions:
{{"questions": ["question 1", "question 2", "question 3"]}}""",

        "en": """You are a veterinary expert specialized in poultry. The user asked a question that lacks important context.

User question: "{user_question}"
Conversation context: {conversation_context}
Missing entities detected: {missing_entities}

Generate exactly 3-4 short and precise clarification questions to obtain the missing information. Questions should be:
- Specific to poultry domain
- Short (maximum 15 words)
- Direct and practical
- In English
- Each should cover a different missing entity

Return only JSON with the list of questions:
{{"questions": ["question 1", "question 2", "question 3"]}}""",

        "es": """Eres un experto veterinario especializado en aves de corral. El usuario hizo una pregunta que carece de contexto importante.

Pregunta del usuario: "{user_question}"
Contexto de conversaci√≥n: {conversation_context}
Entidades faltantes detectadas: {missing_entities}

Genera exactamente 3-4 preguntas de aclaraci√≥n cortas y precisas para obtener la informaci√≥n faltante. Las preguntas deben ser:
- Espec√≠ficas al dominio av√≠cola
- Cortas (m√°ximo 15 palabras)
- Directas y pr√°cticas
- En espa√±ol
- Cada una debe cubrir una entidad faltante diferente

Devuelve solo JSON con la lista de preguntas:
{{"questions": ["pregunta 1", "pregunta 2", "pregunta 3"]}}"""
    },
    
    "specific": {
        "fr": """Tu es un expert v√©t√©rinaire sp√©cialis√© en volaille, particuli√®rement en {topic}.

Question utilisateur: "{user_question}"
Sujet d√©tect√©: {topic}
Contexte conversation: {conversation_context}
Informations sp√©cifiques manquantes: {missing_entities}

G√©n√®re exactement 2-3 questions de clarification tr√®s cibl√©es pour ce sujet sp√©cifique. Les questions doivent √™tre:
- Hyper-sp√©cialis√©es en {topic} aviaire
- Techniques et pr√©cises
- Courtes (maximum 12 mots)
- Orient√©es solution pratique
- En fran√ßais
- Essentielles pour donner un conseil expert en {topic}

Retourne uniquement un JSON avec la liste des questions:
{{"questions": ["question 1", "question 2"]}}""",

        "en": """You are a veterinary expert specialized in poultry, particularly in {topic}.

User question: "{user_question}"
Detected topic: {topic}
Conversation context: {conversation_context}
Specific missing information: {missing_entities}

Generate exactly 2-3 highly targeted clarification questions for this specific topic. Questions should be:
- Hyper-specialized in poultry {topic}
- Technical and precise
- Short (maximum 12 words)
- Solution-oriented practical
- In English
- Essential to provide expert {topic} advice

Return only JSON with the list of questions:
{{"questions": ["question 1", "question 2"]}}""",

        "es": """Eres un experto veterinario especializado en aves de corral, particularmente en {topic}.

Pregunta del usuario: "{user_question}"
Tema detectado: {topic}
Contexto de conversaci√≥n: {conversation_context}
Informaci√≥n espec√≠fica faltante: {missing_entities}

Genera exactamente 2-3 preguntas de aclaraci√≥n muy espec√≠ficas para este tema. Las preguntas deben ser:
- Hiper-especializadas en {topic} av√≠cola
- T√©cnicas y precisas
- Cortas (m√°ximo 12 palabras)
- Orientadas a soluci√≥n pr√°ctica
- En espa√±ol
- Esenciales para dar consejo experto en {topic}

Devuelve solo JSON con la lista de preguntas:
{{"questions": ["pregunta 1", "pregunta 2"]}}"""
    }
}

# =============================================================================
# FONCTION DE D√âTECTION AUTOMATIQUE AVEC GPT-4O-MINI
# =============================================================================

def detect_topic_with_gpt(user_question: str, language: str = "fr") -> str:
    """
    D√©tecte automatiquement le sujet de la question avec GPT-4o-mini (√©conomique + pr√©cis)
    
    Args:
        user_question: Question de l'utilisateur
        language: Langue de d√©tection
    
    Returns:
        str: Le sujet d√©tect√© ("sant√©", "nutrition", "croissance", etc.)
    """
    
    try:
        # Initialiser le service OpenAI
        openai_service = OpenAIService()
        
        # Pr√©parer le prompt de d√©tection selon la langue
        detection_prompt = TOPIC_DETECTION_PROMPT.get(language, TOPIC_DETECTION_PROMPT["fr"])
        prompt = detection_prompt.format(question=user_question)
        
        # Appeler GPT-4o-mini pour d√©tection (√©conomique et efficace)
        response = openai_service.generate_completion(
            prompt=prompt,
            max_tokens=10,  # Un seul mot attendu
            temperature=0.1,  # Tr√®s d√©terministe
            model="gpt-4o-mini"  # Mod√®le √©conomique mais performant
        )
        
        if response and response.strip():
            detected_topic = response.strip().lower()
            
            # Validation des sujets autoris√©s par langue
            valid_topics = {
                "fr": ["sant√©", "nutrition", "croissance", "reproduction", "environnement", "vaccination", "g√©n√©ral"],
                "en": ["health", "nutrition", "growth", "reproduction", "environment", "vaccination", "general"],
                "es": ["salud", "nutrici√≥n", "crecimiento", "reproducci√≥n", "ambiente", "vacunaci√≥n", "general"]
            }
            
            language_topics = valid_topics.get(language, valid_topics["fr"])
            
            if detected_topic in language_topics:
                logger.info(f"‚úÖ [GPT Topic Detection] Sujet d√©tect√©: {detected_topic}")
                return detected_topic
            else:
                logger.warning(f"‚ö†Ô∏è [GPT Topic Detection] Sujet invalide: {detected_topic} - fallback")
                return language_topics[-1]  # "g√©n√©ral" / "general"
        
    except Exception as e:
        logger.error(f"‚ùå [GPT Topic Detection] Erreur: {e}")
    
    # Fallback : d√©tection par mots-cl√©s si GPT √©choue
    return _detect_topic_fallback(user_question, language)

def _detect_topic_fallback(user_question: str, language: str = "fr") -> str:
    """D√©tection de sujet par mots-cl√©s en fallback si GPT √©choue"""
    
    try:
        question_lower = user_question.lower()
        
        # Mots-cl√©s √©tendus par sujet et langue
        topic_keywords = {
            "fr": {
                "sant√©": ["maladie", "mort", "mortalit√©", "sympt√¥me", "infection", "virus", "bact√©rie", 
                         "diagnostic", "soigner", "traitement", "antibiotique", "m√©dicament", "v√©t√©rinaire"],
                "nutrition": ["alimentation", "aliment", "eau", "boire", "manger", "ration", "compl√©ment", 
                             "prot√©ine", "√©nergie", "vitamines", "min√©raux", "calcium", "phosphore"],
                "croissance": ["poids", "p√®se", "croissance", "d√©veloppement", "performance", "gmq", "gain", 
                              "r√©f√©rence", "standard", "courbe", "objectif", "indice"],
                "reproduction": ["ponte", "≈ìuf", "incubation", "fertilit√©", "couvaison", "reproduction", 
                                "poussin", "√©closion", "reproducteur", "incubateur"],
                "environnement": ["temp√©rature", "ventilation", "liti√®re", "densit√©", "b√¢timent", "chauffage", 
                                 "humidit√©", "espace", "luminosit√©", "stress", "ambiance"],
                "vaccination": ["vaccin", "vaccination", "protocole", "immunit√©", "programme", "rappel", 
                               "protection", "anticorps", "immunisation", "pr√©vention"]
            },
            "en": {
                "health": ["disease", "death", "mortality", "symptom", "infection", "virus", "bacteria", 
                          "diagnosis", "treat", "treatment", "antibiotic", "medicine", "veterinary"],
                "nutrition": ["feed", "feeding", "water", "drink", "eat", "ration", "supplement", 
                             "protein", "energy", "vitamins", "minerals", "calcium", "phosphorus"],
                "growth": ["weight", "weigh", "growth", "development", "performance", "adg", "gain", 
                          "reference", "standard", "curve", "target", "index"],
                "reproduction": ["laying", "egg", "incubation", "fertility", "brooding", "reproduction", 
                                "chick", "hatching", "breeder", "incubator"],
                "environment": ["temperature", "ventilation", "litter", "density", "building", "heating", 
                               "humidity", "space", "lighting", "stress", "atmosphere"],
                "vaccination": ["vaccine", "vaccination", "protocol", "immunity", "program", "booster", 
                               "protection", "antibody", "immunization", "prevention"]
            },
            "es": {
                "salud": ["enfermedad", "muerte", "mortalidad", "s√≠ntoma", "infecci√≥n", "virus", "bacteria", 
                         "diagn√≥stico", "tratar", "tratamiento", "antibi√≥tico", "medicina", "veterinario"],
                "nutrici√≥n": ["alimento", "alimentaci√≥n", "agua", "beber", "comer", "raci√≥n", "suplemento", 
                             "prote√≠na", "energ√≠a", "vitaminas", "minerales", "calcio", "f√≥sforo"],
                "crecimiento": ["peso", "pesa", "crecimiento", "desarrollo", "rendimiento", "gmd", "ganancia", 
                               "referencia", "est√°ndar", "curva", "objetivo", "√≠ndice"],
                "reproducci√≥n": ["puesta", "huevo", "incubaci√≥n", "fertilidad", "empollado", "reproducci√≥n", 
                                "pollito", "eclosi√≥n", "reproductor", "incubadora"],
                "ambiente": ["temperatura", "ventilaci√≥n", "cama", "densidad", "edificio", "calefacci√≥n", 
                            "humedad", "espacio", "iluminaci√≥n", "estr√©s", "ambiente"],
                "vacunaci√≥n": ["vacuna", "vacunaci√≥n", "protocolo", "inmunidad", "programa", "refuerzo", 
                              "protecci√≥n", "anticuerpo", "inmunizaci√≥n", "prevenci√≥n"]
            }
        }
        
        language_keywords = topic_keywords.get(language, topic_keywords["fr"])
        
        # Compter les correspondances pour chaque sujet
        topic_scores = {}
        for topic, keywords in language_keywords.items():
            score = sum(1 for keyword in keywords if keyword in question_lower)
            if score > 0:
                topic_scores[topic] = score
        
        # Retourner le sujet avec le plus de correspondances
        if topic_scores:
            best_topic = max(topic_scores, key=topic_scores.get)
            logger.info(f"‚úÖ [Keyword Fallback] Sujet d√©tect√©: {best_topic} (score: {topic_scores[best_topic]})")
            return best_topic
        
    except Exception as e:
        logger.error(f"‚ùå [Topic Fallback] Erreur: {e}")
    
    # Fallback ultime
    fallback_topics = {"fr": "g√©n√©ral", "en": "general", "es": "general"}
    return fallback_topics.get(language, "g√©n√©ral")

# =============================================================================
# D√âTECTION D'ENTIT√âS MANQUANTES AM√âLIOR√âE
# =============================================================================

def detect_missing_entities(user_question: str, language: str = "fr") -> List[str]:
    """
    D√©tecte les entit√©s importantes manquantes dans la question avec patterns √©tendus
    
    Args:
        user_question: Question de l'utilisateur
        language: Langue pour les patterns
    
    Returns:
        List[str]: Liste des entit√©s manquantes
    """
    
    try:
        question_lower = user_question.lower()
        missing_entities = []
        
        # Patterns de d√©tection d'entit√©s √©tendus
        entity_patterns = {
            "fr": {
                "race": [
                    r'\b(ross\s*308|cobb\s*500|hubbard|arbor\s*acres)\b',
                    r'\brace\b', r'\bsouche\b', r'\blign√©e\b'
                ],
                "√¢ge": [
                    r'\d+\s*(?:jour|semaine|mois)s?',
                    r'\b√¢ge\b', r'\bvieux\b', r'\bjeune\b'
                ],
                "sexe": [
                    r'\b(m√¢le|femelle|coq|poule|mixte)s?\b',
                    r'\bsexe\b'
                ],
                "nombre": [
                    r'\d+\s*(?:poulet|volaille|animal|t√™te)s?',
                    r'\btroupeau\b', r'\blot\b', r'\beffectif\b'
                ],
                "sympt√¥mes": [
                    r'\bsympt√¥me\b', r'\bsigne\b', r'\bobserve\b',
                    r'\bcomportement\b', r'\bprobl√®me\b'
                ],
                "conditions": [
                    r'\btemp√©rature\b', r'\benvironnement\b', r'\bcondition\b',
                    r'\bambiance\b', r'\bventilation\b'
                ],
                "poids": [
                    r'\d+\s*(?:g|kg|gramme|kilo)s?',
                    r'\bpoids\b', r'\bp√®se\b', r'\blourd\b'
                ],
                "dur√©e": [
                    r'\bdepuis\b', r'\bpendant\b', r'\bdur√©e\b',
                    r'\bcombien\s+de\s+temps\b'
                ]
            },
            "en": {
                "breed": [
                    r'\b(ross\s*308|cobb\s*500|hubbard|arbor\s*acres)\b',
                    r'\bbreed\b', r'\bstrain\b', r'\bline\b'
                ],
                "age": [
                    r'\d+\s*(?:day|week|month)s?',
                    r'\bage\b', r'\bold\b', r'\byoung\b'
                ],
                "sex": [
                    r'\b(male|female|rooster|hen|mixed)\b',
                    r'\bsex\b', r'\bgender\b'
                ],
                "number": [
                    r'\d+\s*(?:chicken|bird|animal|head)s?',
                    r'\bflock\b', r'\bbatch\b', r'\bnumber\b'
                ],
                "symptoms": [
                    r'\bsymptom\b', r'\bsign\b', r'\bobserve\b',
                    r'\bbehavior\b', r'\bproblem\b'
                ],
                "conditions": [
                    r'\btemperature\b', r'\benvironment\b', r'\bcondition\b',
                    r'\batmosphere\b', r'\bventilation\b'
                ],
                "weight": [
                    r'\d+\s*(?:g|kg|gram|kilo)s?',
                    r'\bweight\b', r'\bweigh\b', r'\bheavy\b'
                ],
                "duration": [
                    r'\bsince\b', r'\bfor\b', r'\bduration\b',
                    r'\bhow\s+long\b'
                ]
            },
            "es": {
                "raza": [
                    r'\b(ross\s*308|cobb\s*500|hubbard|arbor\s*acres)\b',
                    r'\braza\b', r'\bcepa\b', r'\bl√≠nea\b'
                ],
                "edad": [
                    r'\d+\s*(?:d√≠a|semana|mes)s?',
                    r'\bedad\b', r'\bviejo\b', r'\bjoven\b'
                ],
                "sexo": [
                    r'\b(macho|hembra|gallo|gallina|mixto)s?\b',
                    r'\bsexo\b'
                ],
                "n√∫mero": [
                    r'\d+\s*(?:pollo|ave|animal|cabeza)s?',
                    r'\blote\b', r'\bgrupo\b', r'\bn√∫mero\b'
                ],
                "s√≠ntomas": [
                    r'\bs√≠ntoma\b', r'\bsigno\b', r'\bobserva\b',
                    r'\bcomportamiento\b', r'\bproblema\b'
                ],
                "condiciones": [
                    r'\btemperatura\b', r'\bambiente\b', r'\bcondici√≥n\b',
                    r'\batm√≥sfera\b', r'\bventilaci√≥n\b'
                ],
                "peso": [
                    r'\d+\s*(?:g|kg|gramo|kilo)s?',
                    r'\bpeso\b', r'\bpesa\b', r'\bpesado\b'
                ],
                "duraci√≥n": [
                    r'\bdesde\b', r'\bpor\b', r'\bduraci√≥n\b',
                    r'\bcu√°nto\s+tiempo\b'
                ]
            }
        }
        
        patterns = entity_patterns.get(language, entity_patterns["fr"])
        
        # V√©rifier chaque type d'entit√© avec patterns multiples
        for entity_type, regex_patterns in patterns.items():
            found = False
            for pattern in regex_patterns:
                try:
                    if re.search(pattern, question_lower, re.IGNORECASE):
                        found = True
                        break
                except re.error as e:
                    logger.warning(f"‚ö†Ô∏è [Entity Detection] Regex error: {e}")
                    continue
            
            if not found:
                missing_entities.append(entity_type)
        
        # Logging avec d√©tails
        logger.info(f"üîç [Entity Detection] Question: {user_question[:50]}...")
        logger.info(f"üîç [Entity Detection] Entit√©s manquantes: {missing_entities}")
        
        return missing_entities
        
    except Exception as e:
        logger.error(f"‚ùå [Entity Detection] Erreur: {e}")
        return ["contexte", "pr√©cisions"]  # Fallback s√©curis√©

# =============================================================================
# S√âLECTION DE TEMPLATE INTELLIGENTE
# =============================================================================

def select_clarification_prompt(user_question: str, missing_entities: List[str], 
                               context: str, language: str = "fr") -> str:
    """
    S√©lectionne dynamiquement le template de clarification appropri√©
    
    Args:
        user_question: Question de l'utilisateur
        missing_entities: Liste des entit√©s manquantes
        context: Contexte de la conversation
        language: Langue de r√©ponse
    
    Returns:
        str: Le prompt format√© pour GPT
    """
    
    try:
        # D√©tection automatique du sujet avec GPT-4o-mini
        topic = detect_topic_with_gpt(user_question, language)
        
        # Logique de s√©lection du template
        if len(missing_entities) > 3 or topic == "g√©n√©ral":
            # Template g√©n√©rique pour questions complexes ou vagues
            template_type = "generic"
            template = CLARIFICATION_TEMPLATES["generic"][language]
            
            prompt = template.format(
                user_question=user_question,
                conversation_context=context or "Aucun contexte pr√©c√©dent",
                missing_entities=", ".join(missing_entities) if missing_entities else "informations contextuelles"
            )
            
            logger.info(f"üìã [Template Selection] G√âN√âRIQUE s√©lectionn√© - {len(missing_entities)} entit√©s, sujet: {topic}")
            
        else:
            # Template sp√©cifique pour questions cibl√©es avec sujet identifi√©
            template_type = "specific"
            template = CLARIFICATION_TEMPLATES["specific"][language]
            
            prompt = template.format(
                user_question=user_question,
                topic=topic,
                conversation_context=context or "Aucun contexte pr√©c√©dent",
                missing_entities=", ".join(missing_entities) if missing_entities else "d√©tails techniques"
            )
            
            logger.info(f"üéØ [Template Selection] SP√âCIFIQUE s√©lectionn√© - Sujet: {topic}, {len(missing_entities)} entit√©s")
        
        return prompt
        
    except Exception as e:
        logger.error(f"‚ùå [Template Selection] Erreur: {e}")
        # Fallback vers template g√©n√©rique s√©curis√©
        fallback_template = CLARIFICATION_TEMPLATES["generic"][language]
        return fallback_template.format(
            user_question=user_question,
            conversation_context=context or "Aucun contexte",
            missing_entities=", ".join(missing_entities) if missing_entities else "informations contextuelles"
        )

# =============================================================================
# G√âN√âRATION ET VALIDATION AM√âLIOR√âES
# =============================================================================

def _generate_clarification_questions_with_dynamic_prompt(prompt: str, language: str = "fr") -> List[str]:
    """
    G√©n√®re questions avec le prompt dynamique s√©lectionn√© et gestion d'erreurs robuste
    
    Args:
        prompt: Prompt format√© pour GPT
        language: Langue de g√©n√©ration
    
    Returns:
        List[str]: Questions g√©n√©r√©es et valid√©es
    """
    
    try:
        # Initialiser le service OpenAI
        openai_service = OpenAIService()
        
        # Appeler GPT-4o avec le prompt s√©lectionn√©
        response = openai_service.generate_completion(
            prompt=prompt,
            max_tokens=400,  # Plus de tokens pour des r√©ponses compl√®tes
            temperature=0.3,  # √âquilibre cr√©ativit√©/d√©terminisme
            model="gpt-4o"  # Utiliser GPT-4o pour la qualit√© maximale
        )
        
        if response:
            # Tentative de parsing JSON propre
            try:
                response_clean = response.strip()
                response_data = json.loads(response_clean)
                questions = response_data.get("questions", [])
                
                if questions and isinstance(questions, list) and len(questions) > 0:
                    logger.info(f"‚úÖ [Dynamic Generation] {len(questions)} questions g√©n√©r√©es par GPT-4o")
                    return questions
                else:
                    logger.warning("‚ö†Ô∏è [Dynamic Generation] R√©ponse JSON valide mais vide")
                
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è [Dynamic Generation] JSON malform√©: {e}")
                logger.debug(f"R√©ponse GPT brute: {response}")
                
                # Tentative d'extraction de questions depuis r√©ponse malform√©e
                extracted_questions = _extract_questions_from_malformed_response(response, language)
                if extracted_questions:
                    logger.info(f"‚úÖ [Dynamic Generation] {len(extracted_questions)} questions extraites en mode d√©grad√©")
                    return extracted_questions
        
    except Exception as e:
        logger.error(f"‚ùå [Dynamic Generation] Erreur GPT: {e}")
    
    # Retourner liste vide pour d√©clencher fallback
    return []

def _extract_questions_from_malformed_response(response: str, language: str = "fr") -> List[str]:
    """
    Extrait intelligemment les questions d'une r√©ponse GPT malform√©e
    
    Args:
        response: R√©ponse GPT brute
        language: Langue pour les patterns
    
    Returns:
        List[str]: Questions extraites
    """
    
    try:
        # Patterns d'extraction selon la langue et format
        question_patterns = {
            "fr": [
                r'(?:^|\n)\s*(?:\d+[\.\)]\s*)?([^.!?\n]{5,}?\?)\s*(?:\n|$)',  # Questions num√©rot√©es
                r'(?:^|\n)\s*[‚Ä¢\-\*]\s*([^.!?\n]{5,}?\?)\s*(?:\n|$)',  # Questions avec puces
                r'"([^"]{5,}?\?)"',  # Questions entre guillemets
                r"'([^']{5,}?\?)'",  # Questions entre apostrophes
                r'(?:questions?[^\n]*:.*?)([A-Z][^.!?\n]{5,}?\?)',  # Questions apr√®s "questions:"
            ],
            "en": [
                r'(?:^|\n)\s*(?:\d+[\.\)]\s*)?([^.!?\n]{5,}?\?)\s*(?:\n|$)',
                r'(?:^|\n)\s*[‚Ä¢\-\*]\s*([^.!?\n]{5,}?\?)\s*(?:\n|$)',
                r'"([^"]{5,}?\?)"',
                r"'([^']{5,}?\?)'",
                r'(?:questions?[^\n]*:.*?)([A-Z][^.!?\n]{5,}?\?)',
            ],
            "es": [
                r'(?:^|\n)\s*(?:\d+[\.\)]\s*)?([^.!?\n]{5,}?\?)\s*(?:\n|$)',
                r'(?:^|\n)\s*[‚Ä¢\-\*]\s*([^.!?\n]{5,}?\?)\s*(?:\n|$)',
                r'"([^"]{5,}?\?)"',
                r"'([^']{5,}?\?)'",
                r'(?:preguntas?[^\n]*:.*?)([A-Z][^.!?\n]{5,}?\?)',
            ]
        }
        
        patterns = question_patterns.get(language, question_patterns["fr"])
        extracted_questions = []
        
        # Essayer chaque pattern dans l'ordre de priorit√©
        for pattern in patterns:
            try:
                matches = re.findall(pattern, response, re.MULTILINE | re.IGNORECASE)
                for match in matches:
                    question = match.strip()
                    # Validation qualit√© basique
                    if (len(question.split()) >= 4 and  # Au moins 4 mots
                        question not in extracted_questions and  # Pas de doublon
                        len(question) <= 150):  # Pas trop long
                        extracted_questions.append(question)
                        
                if extracted_questions:
                    break  # Arr√™ter au premier pattern qui fonctionne
                    
            except re.error as e:
                logger.error(f"‚ùå [Question Extraction] Erreur regex: {e}")
                continue
        
        # Limiter et d√©duplication finale
        unique_questions = []
        for q in extracted_questions[:4]:  # Max 4 questions
            if q not in unique_questions:
                unique_questions.append(q)
        
        return unique_questions
        
    except Exception as e:
        logger.error(f"‚ùå [Question Extraction] Erreur: {e}")
        return []

# =============================================================================
# VALIDATION MULTICRIT√àRES RENFORC√âE
# =============================================================================

def validate_dynamic_questions(questions: List[str], user_question: str = "", language: str = "fr", 
                              missing_entities: List[str] = None) -> Tuple[float, List[str]]:
    """
    Valide la qualit√© des questions g√©n√©r√©es avec syst√®me de scoring multicrit√®res renforc√©
    
    Args:
        questions: Liste des questions √† valider
        user_question: Question originale de l'utilisateur
        language: Langue pour les crit√®res de validation
        missing_entities: Entit√©s manquantes √† couvrir
    
    Returns:
        Tuple[float, List[str]]: (score_qualit√©_global, questions_valid√©es)
    """
    
    # Validation d'entr√©e stricte
    if not questions or not isinstance(questions, list):
        logger.warning("üîß [Question Validation Enhanced] Format invalide ou liste vide")
        return 0.0, []
    
    # Normaliser missing_entities
    if missing_entities is None:
        missing_entities = []
    
    logger.info(f"üîß [Question Validation Enhanced] D√©but validation - {len(questions)} questions, {len(missing_entities)} entit√©s manquantes")
    
    # Crit√®res de validation par langue avec patterns √©tendus
    quality_criteria = {
        "fr": {
            "min_words": 4,
            "max_length": 120,
            "avoid_words": ["exemple", "par exemple", "etc", "quelque chose", "g√©n√©ralement", "habituellement", "souvent", "parfois"],
            "generic_phrases": ["pouvez-vous pr√©ciser", "pourriez-vous dire", "voulez-vous expliquer", "est-ce que vous"],
            "required_pattern": r'\?$',  # Doit finir par un point d'interrogation
            "domain_words": ["race", "souche", "√¢ge", "poids", "temp√©rature", "sympt√¥me", "alimentation", "poulet", "volaille", "√©levage", "troupeau"],
            "normalization_patterns": [
                (r'\s+', ' '),  # Espaces multiples ‚Üí espace simple
                (r'\.+$', ''),  # Points finaux superflus
                (r'\s*\?\s*$', '?'),  # Normaliser point d'interrogation
                (r'^\s*-\s*', ''),  # Tirets en d√©but
                (r'^\s*\d+\.\s*', ''),  # Num√©rotation en d√©but
                (r'^\s*[‚Ä¢\-\*]\s*', '')  # Puces en d√©but
            ],
            "entity_keywords": {
                "race": ["race", "souche", "lign√©e", "ross", "cobb", "hubbard", "breed", "strain", "ligne g√©n√©tique"],
                "√¢ge": ["√¢ge", "jour", "semaine", "mois", "vieux", "jeune", "anciennet√©", "stade", "p√©riode"],
                "sexe": ["sexe", "m√¢le", "femelle", "coq", "poule", "mixte", "genre", "reproduction"],
                "poids": ["poids", "gramme", "kilo", "p√®se", "lourd", "masse", "pes√©e", "balance"],
                "sympt√¥mes": ["sympt√¥me", "signe", "maladie", "probl√®me", "observation", "comportement", "anomalie"],
                "conditions": ["temp√©rature", "condition", "environnement", "b√¢timent", "ambiance", "climat", "ventilation"],
                "nombre": ["nombre", "combien", "quantit√©", "troupeau", "lot", "effectif", "densit√©"],
                "dur√©e": ["depuis", "pendant", "dur√©e", "combien de temps", "chronologie", "temporalit√©"]
            }
        },
        "en": {
            "min_words": 4,
            "max_length": 120,
            "avoid_words": ["example", "for example", "etc", "something", "generally", "usually", "often", "sometimes"],
            "generic_phrases": ["could you specify", "can you tell", "would you explain", "do you"],
            "required_pattern": r'\?$',
            "domain_words": ["breed", "strain", "age", "weight", "temperature", "symptom", "feeding", "chicken", "poultry", "farming", "flock"],
            "normalization_patterns": [
                (r'\s+', ' '),
                (r'\.+$', ''),
                (r'\s*\?\s*$', '?'),
                (r'^\s*-\s*', ''),
                (r'^\s*\d+\.\s*', ''),
                (r'^\s*[‚Ä¢\-\*]\s*', '')
            ],
            "entity_keywords": {
                "breed": ["breed", "strain", "line", "ross", "cobb", "hubbard", "genetic line", "variety"],
                "age": ["age", "day", "week", "month", "old", "young", "stage", "period", "time"],
                "sex": ["sex", "male", "female", "rooster", "hen", "mixed", "gender", "breeding"],
                "weight": ["weight", "gram", "kilo", "weigh", "heavy", "mass", "weighing", "scale"],
                "symptoms": ["symptom", "sign", "disease", "problem", "observation", "behavior", "anomaly"],
                "conditions": ["temperature", "condition", "environment", "building", "atmosphere", "climate", "ventilation"],
                "number": ["number", "how many", "quantity", "flock", "batch", "density", "count"],
                "duration": ["since", "for", "duration", "how long", "chronology", "temporality"]
            }
        },
        "es": {
            "min_words": 4,
            "max_length": 120,
            "avoid_words": ["ejemplo", "por ejemplo", "etc", "algo", "generalmente", "usualmente", "a menudo", "a veces"],
            "generic_phrases": ["podr√≠a especificar", "puede decir", "querr√≠a explicar", "est√° usted"],
            "required_pattern": r'\?$',
            "domain_words": ["raza", "cepa", "edad", "peso", "temperatura", "s√≠ntoma", "alimentaci√≥n", "pollo", "ave", "cr√≠a", "lote"],
            "normalization_patterns": [
                (r'\s+', ' '),
                (r'\.+$', ''),
                (r'\s*\?\s*$', '?'),
                (r'^\s*-\s*', ''),
                (r'^\s*\d+\.\s*', ''),
                (r'^\s*[‚Ä¢\-\*]\s*', '')
            ],
            "entity_keywords": {
                "raza": ["raza", "cepa", "l√≠nea", "ross", "cobb", "hubbard", "l√≠nea gen√©tica", "variedad"],
                "edad": ["edad", "d√≠a", "semana", "mes", "viejo", "joven", "etapa", "per√≠odo", "tiempo"],
                "sexo": ["sexo", "macho", "hembra", "gallo", "gallina", "mixto", "g√©nero", "reproducci√≥n"],
                "peso": ["peso", "gramo", "kilo", "pesa", "pesado", "masa", "pesaje", "balanza"],
                "s√≠ntomas": ["s√≠ntoma", "signo", "enfermedad", "problema", "observaci√≥n", "comportamiento", "anomal√≠a"],
                "condiciones": ["temperatura", "condici√≥n", "ambiente", "edificio", "atm√≥sfera", "clima", "ventilaci√≥n"],
                "n√∫mero": ["n√∫mero", "cu√°ntos", "cantidad", "lote", "grupo", "densidad", "conteo"],
                "duraci√≥n": ["desde", "por", "duraci√≥n", "cu√°nto tiempo", "cronolog√≠a", "temporalidad"]
            }
        }
    }
    
    criteria = quality_criteria.get(language, quality_criteria["fr"])
    
    # √âTAPE 1: Nettoyage et normalisation avanc√©e
    def normalize_question(question: str) -> str:
        """Normalise une question selon les patterns d√©finis"""
        if not isinstance(question, str):
            return ""
        
        # Trim initial
        normalized = question.strip()
        
        # Appliquer les patterns de normalisation dans l'ordre
        for pattern, replacement in criteria["normalization_patterns"]:
            try:
                normalized = re.sub(pattern, replacement, normalized)
            except re.error as e:
                logger.warning(f"‚ö†Ô∏è [Normalization] Erreur pattern {pattern}: {e}")
                continue
        
        # Trim final et v√©rification
        normalized = normalized.strip()
        
        # S'assurer qu'elle finit par un point d'interrogation
        if normalized and not normalized.endswith('?'):
            normalized += '?'
        
        return normalized
    
    cleaned_questions = []
    seen_normalized = set()
    
    for i, question in enumerate(questions):
        try:
            if not isinstance(question, str):
                logger.debug(f"üîß [Normalization] Question {i} n'est pas une string: {type(question)}")
                continue
            
            # Normalisation compl√®te
            q_normalized = normalize_question(question)
            
            if not q_normalized or len(q_normalized) < 3:
                logger.debug(f"üîß [Normalization] Question {i} trop courte apr√®s normalisation")
                continue
            
            # V√©rification unicit√© (insensible √† la casse et espaces)
            q_comparison = re.sub(r'\s+', ' ', q_normalized.lower().strip())
            
            if q_comparison in seen_normalized:
                logger.debug(f"üîß [Normalization] Doublon d√©tect√©: {q_normalized}")
                continue
            
            # Filtrage de base
            word_count = len(q_normalized.split())
            if word_count < criteria["min_words"] or len(q_normalized) > criteria["max_length"]:
                logger.debug(f"üîß [Normalization] Question {i} hors limites: {word_count} mots, {len(q_normalized)} chars")
                continue
            
            # √âviter phrases trop g√©n√©riques
            q_lower = q_normalized.lower()
            if any(phrase in q_lower for phrase in criteria["generic_phrases"]):
                logger.debug(f"üîß [Normalization] Question {i} trop g√©n√©rique: {q_normalized}")
                continue
            
            seen_normalized.add(q_comparison)
            cleaned_questions.append(q_normalized)
            
        except Exception as e:
            logger.error(f"‚ùå [Normalization] Erreur question {i}: {e}")
            continue
    
    logger.info(f"üîß [Normalization] Apr√®s nettoyage: {len(cleaned_questions)}/{len(questions)} questions")
    
    # √âTAPE 2: Scoring multicrit√®res avec couverture d'entit√©s
    def calculate_entity_coverage(question: str, missing_entities: List[str]) -> Tuple[float, List[str]]:
        """Calcule la couverture des entit√©s manquantes par une question"""
        if not missing_entities:
            return 1.0, []  # Score parfait si pas d'entit√©s sp√©cifiques
        
        question_lower = question.lower()
        covered_entities = []
        
        for entity in missing_entities:
            entity_keywords = criteria["entity_keywords"].get(entity, [entity])
            if any(keyword in question_lower for keyword in entity_keywords):
                covered_entities.append(entity)
        
        coverage_score = len(covered_entities) / len(missing_entities) if missing_entities else 1.0
        return coverage_score, covered_entities
    
    scored_questions = []
    all_covered_entities = set()
    
    for question in cleaned_questions:
        try:
            score = 0.0
            question_lower = question.lower()
            
            # Crit√®re 1: Structure de question valide (20%)
            if re.search(criteria["required_pattern"], question):
                score += 0.20
            
            # Crit√®re 2: Absence de mots vagues (15%)
            if not any(word in question_lower for word in criteria["avoid_words"]):
                score += 0.15
            
            # Crit√®re 3: Pr√©sence de mots du domaine (20%)
            domain_word_count = sum(1 for word in criteria["domain_words"] if word in question_lower)
            if domain_word_count > 0:
                score += min(0.20, domain_word_count * 0.05)
            
            # Crit√®re 4: Couverture des entit√©s manquantes (35% - RENFORC√â)
            entity_coverage, covered_entities = calculate_entity_coverage(question, missing_entities)
            score += entity_coverage * 0.35
            
            # Tracking des entit√©s couvertes globalement
            all_covered_entities.update(covered_entities)
            
            # Crit√®re 5: Bonus qualit√© linguistique (10%)
            if (len(question.split()) >= 6 and  # Question d√©taill√©e
                any(char.isupper() for char in question) and  # Majuscules pr√©sentes
                not any(bad_word in question_lower for bad_word in ["quelque chose", "something", "algo"])):
                score += 0.10
            
            scored_questions.append((question, min(score, 1.0), covered_entities))
            
        except Exception as e:
            logger.error(f"‚ùå [Scoring] Erreur: {e}")
            continue
    
    # √âTAPE 3: V√©rification couverture globale des entit√©s
    uncovered_entities = set(missing_entities) - all_covered_entities
    coverage_penalty = 0.0
    
    if missing_entities and uncovered_entities:
        coverage_rate = len(all_covered_entities) / len(missing_entities)
        coverage_penalty = (1 - coverage_rate) * 0.3  # P√©nalit√© jusqu'√† 30%
        logger.warning(f"‚ö†Ô∏è [Entity Coverage] Entit√©s non couvertes: {uncovered_entities}")
        logger.info(f"üìä [Entity Coverage] Taux couverture: {coverage_rate:.2f} ({len(all_covered_entities)}/{len(missing_entities)})")
    else:
        logger.info(f"‚úÖ [Entity Coverage] Toutes les entit√©s couvertes: {all_covered_entities}")
    
    # √âTAPE 4: S√©lection et optimisation finale
    scored_questions.sort(key=lambda x: x[1], reverse=True)
    
    # Si couverture incompl√®te, prioriser questions couvrant entit√©s manquantes
    if uncovered_entities:
        logger.info("üîÑ [Optimization] R√©organisation pour maximiser couverture entit√©s")
        
        # S√©parer questions par couverture d'entit√©s non couvertes
        covering_uncovered = []
        others = []
        
        for question, score, covered in scored_questions:
            if any(entity in uncovered_entities for entity in covered):
                covering_uncovered.append((question, score, covered))
            else:
                others.append((question, score, covered))
        
        # Prioriser celles qui couvrent les entit√©s manquantes
        scored_questions = covering_uncovered + others
        logger.info(f"üîÑ [Optimization] {len(covering_uncovered)} questions prioritaires pour entit√©s manquantes")
    
    # Filtrer par seuil de qualit√© ajust√© selon couverture
    base_threshold = 0.55
    adjusted_threshold = max(0.35, base_threshold - coverage_penalty)  # Seuil plus souple si couverture partielle
    
    high_quality_questions = [(q, s, c) for q, s, c in scored_questions if s >= adjusted_threshold]
    
    # Limiter √† 4 questions maximum en optimisant la diversit√© d'entit√©s
    final_questions = []
    final_covered_entities = set()
    
    for question, score, covered in high_quality_questions:
        if len(final_questions) >= 4:
            break
        
        # Ajouter si apporte une nouvelle entit√© ou si moins de 2 questions
        brings_new_entity = any(entity not in final_covered_entities for entity in covered)
        if len(final_questions) < 2 or brings_new_entity:
            final_questions.append(question)
            final_covered_entities.update(covered)
    
    # Calculer score global avec p√©nalit√© de couverture
    if high_quality_questions:
        base_score = sum(score for _, score, _ in high_quality_questions[:len(final_questions)]) / len(final_questions)
        global_score = max(0.0, base_score - coverage_penalty)
    else:
        global_score = 0.0
    
    # Logging d√©taill√© des r√©sultats
    logger.info(f"‚úÖ [Validation Enhanced] "
               f"Score global: {global_score:.2f} (base: {base_score:.2f}, p√©nalit√©: {coverage_penalty:.2f}), "
               f"Questions finales: {len(final_questions)}/{len(questions)}")
    
    if missing_entities:
        logger.info(f"üìä [Entity Analysis] "
                   f"Entit√©s requises: {missing_entities}, "
                   f"Entit√©s couvertes: {list(final_covered_entities)}, "
                   f"Taux final: {len(final_covered_entities)/len(missing_entities):.2f}")
    
    if final_questions:
        for i, q in enumerate(final_questions, 1):
            logger.debug(f"  Question {i}: {q}")
    
    return global_score, final_questions

# =============================================================================
# FONCTION PRINCIPALE D'AUTO-CLARIFICATION
# =============================================================================

def auto_clarify_if_needed(question: str, conversation_context: str, language: str = "fr") -> Optional[Dict[str, Any]]:
    """
    Fonction centralis√©e pour l'auto-clarification avec s√©lection dynamique et validation renforc√©e
    
    Args:
        question: Question de l'utilisateur
        conversation_context: Contexte de la conversation
        language: Langue de traitement
    
    Returns:
        Dict si clarification n√©cessaire avec m√©tadonn√©es compl√®tes, None sinon
    """
    
    try:
        # Calculer score de compl√©tude de base
        completeness_score = _calculate_basic_completeness_score(question, conversation_context, language)
        
        logger.info(f"üîß [Auto Clarify] Score compl√©tude: {completeness_score:.2f}")
        
        # Seuil pour d√©clencher clarification (ajust√©)
        if completeness_score < 0.6:
            logger.info("üîß [Auto Clarify] Clarification n√©cessaire - g√©n√©ration questions")
            
            # D√©tecter entit√©s manquantes avec patterns √©tendus
            missing_entities = detect_missing_entities(question, language)
            
            # S√©lectionner le template appropri√© avec d√©tection GPT
            prompt = select_clarification_prompt(question, missing_entities, conversation_context, language)
            
            # Tenter g√©n√©ration dynamique avec template s√©lectionn√©
            questions = _generate_clarification_questions_with_dynamic_prompt(prompt, language)
            
            # Validation renforc√©e avec scoring multicrit√®res
            score, validated_questions = validate_dynamic_questions(questions, question, language, missing_entities)
            
            if score >= 0.55 and validated_questions:
                return {
                    "type": "clarification_needed",
                    "message": _get_clarification_intro_message(language),
                    "questions": validated_questions,
                    "completeness_score": completeness_score,
                    "generation_method": "dynamic_template_selection_validated",
                    "missing_entities": missing_entities,
                    "template_used": "specific" if len(missing_entities) <= 3 else "generic",
                    "validation_score": score,
                    "questions_filtered": len(questions) - len(validated_questions) if questions else 0,
                    "ai_topic_detection": True,
                    "processing_quality": "high"
                }
            else:
                logger.warning(f"üîß [Auto Clarify] Score validation insuffisant ({score:.2f}) - fallback")
                
                # Fallback avec questions statiques optimis√©es
                fallback_questions = _get_fallback_questions_by_type(question, language)
                fallback_score, validated_fallback = validate_dynamic_questions(
                    fallback_questions, question, language, missing_entities
                )
                
                if validated_fallback:
                    return {
                        "type": "clarification_needed", 
                        "message": _get_clarification_intro_message(language),
                        "questions": validated_fallback,
                        "completeness_score": completeness_score,
                        "generation_method": "fallback_with_validation",
                        "missing_entities": missing_entities,
                        "template_used": "fallback",
                        "validation_score": fallback_score,
                        "ai_topic_detection": False,
                        "processing_quality": "fallback"
                    }
                else:
                    logger.warning("üîß [Auto Clarify] M√™me le fallback a √©chou√©")
                
    except Exception as e:
        logger.error(f"‚ùå [Auto Clarify] Erreur g√©n√©ration questions: {e}")
    
    return None

def _calculate_basic_completeness_score(question: str, conversation_context: str, language: str = "fr") -> float:
    """Calcule un score de compl√©tude avec crit√®res √©tendus"""
    
    try:
        score = 0.0
        
        if not isinstance(question, str) or len(question.strip()) == 0:
            return 0.0
        
        question_clean = question.strip()
        question_lower = question_clean.lower()
        
        # Score de base selon la longueur (30%)
        question_length = len(question_clean)
        if question_length > 80:
            score += 0.30
        elif question_length > 40:
            score += 0.20
        elif question_length > 20:
            score += 0.10
        
        # Pr√©sence de race sp√©cifique (25%)
        specific_breeds = ["ross 308", "cobb 500", "hubbard", "arbor acres"]
        if any(breed in question_lower for breed in specific_breeds):
            score += 0.25
        elif any(word in question_lower for word in ["poulet", "chicken", "pollo", "volaille", "poultry", "ave"]):
            score += 0.10
        
        # Pr√©sence d'√¢ge pr√©cis (20%)
        age_patterns = [r'\d+\s*(?:jour|day|d√≠a)s?', r'\d+\s*(?:semaine|week|semana)s?']
        if any(re.search(pattern, question_lower) for pattern in age_patterns):
            score += 0.20
        
        # Pr√©sence de donn√©es num√©riques (10%)
        if re.search(r'\d+', question_clean):
            score += 0.10
        
        # Pr√©sence de contexte sp√©cialis√© (10%)
        specialized_terms = {
            "fr": ["sympt√¥me", "diagnostic", "protocole", "ration", "vaccination", "incubation"],
            "en": ["symptom", "diagnosis", "protocol", "ration", "vaccination", "incubation"],
            "es": ["s√≠ntoma", "diagn√≥stico", "protocolo", "raci√≥n", "vacunaci√≥n", "incubaci√≥n"]
        }
        
        terms = specialized_terms.get(language, specialized_terms["fr"])
        if any(term in question_lower for term in terms):
            score += 0.10
        
        # Contexte conversationnel disponible (5%)
        if conversation_context and isinstance(conversation_context, str) and len(conversation_context.strip()) > 30:
            score += 0.05
        
        return min(score, 1.0)
        
    except Exception as e:
        logger.error(f"‚ùå [Completeness Score] Erreur calcul: {e}")
        return 0.0

def _get_fallback_questions_by_type(question: str, language: str = "fr") -> List[str]:
    """Questions de fallback optimis√©es selon le type d√©tect√©"""
    
    try:
        if not isinstance(question, str):
            return []
        
        question_lower = question.lower()
        
        # D√©tection am√©lior√©e du type de question
        is_weight = any(word in question_lower for word in ["poids", "weight", "peso", "p√®se", "weigh", "pesa"])
        is_health = any(word in question_lower for word in ["maladie", "disease", "enfermedad", "mort", "death", "muerte", "sympt√¥me", "symptom", "s√≠ntoma"])
        is_growth = any(word in question_lower for word in ["croissance", "growth", "crecimiento", "d√©veloppement", "development", "desarrollo"])
        is_feeding = any(word in question_lower for word in ["alimentation", "feeding", "alimentaci√≥n", "nourriture", "food", "comida"])
        
        fallback_questions = {
            "fr": {
                "weight": [
                    "Quelle race ou souche sp√©cifique √©levez-vous (Ross 308, Cobb 500, etc.) ?",
                    "Quel √¢ge ont actuellement vos poulets (en jours pr√©cis) ?",
                    "S'agit-il de m√¢les, femelles, ou d'un troupeau mixte ?",
                    "Dans quelles conditions d'√©levage sont-ils (temp√©rature, densit√©) ?"
                ],
                "health": [
                    "Quelle race ou souche √©levez-vous ?",
                    "Quel √¢ge ont vos volailles actuellement ?",
                    "Quels sympt√¥mes sp√©cifiques observez-vous ?",
                    "Depuis combien de temps ces probl√®mes sont-ils apparus ?"
                ],
                "growth": [
                    "Quelle race ou souche sp√©cifique √©levez-vous ?",
                    "Quel √¢ge ont-ils actuellement en jours ?",
                    "Quelles sont les conditions d'√©levage actuelles ?",
                    "Quelle est leur alimentation actuelle ?"
                ],
                "feeding": [
                    "Quel √¢ge ont vos volailles ?",
                    "Quelle race ou souche √©levez-vous ?",
                    "Quel type d'aliment utilisez-vous actuellement ?",
                    "Quels sont vos objectifs de performance ?"
                ],
                "general": [
                    "Pouvez-vous pr√©ciser la race ou souche de vos volailles ?",
                    "Quel √¢ge ont actuellement vos animaux ?",
                    "Dans quel contexte d'√©levage vous trouvez-vous ?",
                    "Quel est votre objectif ou probl√®me principal ?"
                ]
            },
            "en": {
                "weight": [
                    "What specific breed or strain are you raising (Ross 308, Cobb 500, etc.)?",
                    "What is the current age of your chickens (in precise days)?",
                    "Are these males, females, or a mixed flock?",
                    "What are the current housing conditions (temperature, density)?"
                ],
                "health": [
                    "What breed or strain are you raising?",
                    "What is the current age of your poultry?",
                    "What specific symptoms are you observing?",
                    "How long have these problems been present?"
                ],
                "growth": [
                    "What specific breed or strain are you raising?",
                    "What is their current age in days?",
                    "What are the current housing conditions?",
                    "What is their current feeding program?"
                ],
                "feeding": [
                    "What age are your birds?",
                    "What breed or strain are you raising?",
                    "What type of feed are you currently using?",
                    "What are your performance objectives?"
                ],
                "general": [
                    "Could you specify the breed or strain of your poultry?",
                    "What age are your animals currently?",
                    "What farming context are you in?",
                    "What is your main objective or problem?"
                ]
            },
            "es": {
                "weight": [
                    "¬øQu√© raza o cepa espec√≠fica est√° criando (Ross 308, Cobb 500, etc.)?",
                    "¬øCu√°l es la edad actual de sus pollos (en d√≠as precisos)?",
                    "¬øSon machos, hembras, o un lote mixto?",
                    "¬øCu√°les son las condiciones actuales de alojamiento (temperatura, densidad)?"
                ],
                "health": [
                    "¬øQu√© raza o cepa est√° criando?",
                    "¬øCu√°l es la edad actual de sus aves?",
                    "¬øQu√© s√≠ntomas espec√≠ficos est√° observando?",
                    "¬øDesde cu√°ndo est√°n presentes estos problemas?"
                ],
                "growth": [
                    "¬øQu√© raza o cepa espec√≠fica est√° criando?",
                    "¬øCu√°l es su edad actual en d√≠as?",
                    "¬øCu√°les son las condiciones actuales de alojamiento?",
                    "¬øCu√°l es su programa de alimentaci√≥n actual?"
                ],
                 "feeding": [
                    "¬øQu√© edad tienen sus aves?",
                    "¬øQu√© raza o cepa est√° criando?",
                    "¬øQu√© tipo de alimento est√° usando actualmente?",
                    "¬øCu√°les son sus objetivos de rendimiento?"
                ],
                "general": [
                    "¬øPodr√≠a especificar la raza o cepa de sus aves?",
                    "¬øQu√© edad tienen actualmente sus animales?",
                    "¬øEn qu√© contexto de cr√≠a se encuentra?",
                    "¬øCu√°l es su objetivo o problema principal?"
                ]
            }
        }
        
        # D√©terminer le type de question et retourner les questions appropri√©es
        if is_weight:
            return fallback_questions[language]["weight"]
        elif is_health:
            return fallback_questions[language]["health"]
        elif is_growth:
            return fallback_questions[language]["growth"]
        elif is_feeding:
            return fallback_questions[language]["feeding"]
        else:
            return fallback_questions[language]["general"]
            
    except Exception as e:
        logger.error(f"‚ùå [Fallback Questions] Erreur: {e}")
        return [
            _get_clarification_intro_message(language),
            "Pouvez-vous pr√©ciser votre question ?",
            "Quel est le contexte exact ?",
            "Quelles informations manquent ?"
        ]

def _get_clarification_intro_message(language: str = "fr") -> str:
    """Messages d'introduction pour clarification selon la langue"""
    
    intro_messages = {
        "fr": "Pour vous donner une r√©ponse pr√©cise, j'ai besoin de quelques pr√©cisions :",
        "en": "To give you a precise answer, I need some clarifications:",
        "es": "Para darle una respuesta precisa, necesito algunas aclaraciones:"
    }
    
    return intro_messages.get(language, intro_messages["fr"])

# =============================================================================
# FONCTION DE TEST ET VALIDATION
# =============================================================================

def test_clarification_system():
    """Fonction de test pour v√©rifier le bon fonctionnement du syst√®me"""
    try:
        logger.info("üß™ [Test Clarification System] D√©but des tests")
        
        # Test d√©tection sujet
        test_questions = [
            "Mes poulets Ross 308 de 21 jours perdent du poids",
            "My laying hens stopped producing eggs",
            "Mis pollos est√°n enfermos"
        ]
        
        for question in test_questions:
            try:
                topic = detect_topic_with_gpt(question, "fr")
                logger.info(f"‚úÖ [Test] Question: '{question}' ‚Üí Sujet: {topic}")
            except Exception as e:
                logger.error(f"‚ùå [Test] Erreur: {e}")
        
        logger.info("üß™ [Test Clarification System] Tests termin√©s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå [Test Clarification System] Erreur: {e}")
        return False

# =============================================================================
# INITIALISATION ET EXPORT
# =============================================================================

# Test du syst√®me au chargement du module
if __name__ == "__main__":
    test_clarification_system()

logger.info("‚úÖ [Expert Clarification Service] Module charg√© avec succ√®s")
logger.info("üîß [Expert Clarification Service] Fonctions disponibles:")
logger.info("   - detect_topic_with_gpt()")
logger.info("   - detect_missing_entities()")
logger.info("   - select_clarification_prompt()")
logger.info("   - auto_clarify_if_needed()")
logger.info("   - validate_dynamic_questions()")

# Export des fonctions principales
__all__ = [
    'detect_topic_with_gpt',
    'detect_missing_entities', 
    'select_clarification_prompt',
    'auto_clarify_if_needed',
    'validate_dynamic_questions',
    'TOPIC_DETECTION_PROMPT',
    'CLARIFICATION_TEMPLATES'
]