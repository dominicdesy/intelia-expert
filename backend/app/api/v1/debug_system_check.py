#!/usr/bin/env python3
"""
local_diagnostic.py - DIAGNOSTIC LOCAL DEPUIS app/api/v1

üö® SCRIPT DE DIAGNOSTIC DEPUIS LE DOSSIER COURANT
V√©rifie les fichiers pr√©sents et leur contenu.
"""

import os
import sys

def check_files_present():
    """V√©rifie quels fichiers sont pr√©sents"""
    
    print("üìÅ === V√âRIFICATION FICHIERS PR√âSENTS ===")
    
    files_to_check = [
        "conversation_memory.py",
        "conversation_memory_enhanced.py", 
        "expert_services.py",
        "expert_integrations.py",
        "expert_utils.py"
    ]
    
    files_status = {}
    
    for filename in files_to_check:
        exists = os.path.exists(filename)
        if exists:
            size = os.path.getsize(filename)
            print(f"‚úÖ {filename} - {size} bytes")
            files_status[filename] = {"exists": True, "size": size}
        else:
            print(f"‚ùå {filename} - MANQUANT")
            files_status[filename] = {"exists": False, "size": 0}
    
    return files_status

def check_memory_file_content():
    """V√©rifie le contenu du fichier de m√©moire"""
    
    print("\nüß† === V√âRIFICATION CONTENU FICHIER M√âMOIRE ===")
    
    # V√©rifier conversation_memory.py
    if os.path.exists("conversation_memory.py"):
        print("üìÑ Analyse conversation_memory.py...")
        
        with open("conversation_memory.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        # V√©rifier les fonctions critiques
        critical_functions = [
            "find_original_question",
            "mark_question_for_clarification", 
            "IntelligentEntities",
            "get_conversation_memory_stats",
            "original_question_recovery"
        ]
        
        missing_functions = []
        for func in critical_functions:
            if func not in content:
                missing_functions.append(func)
        
        if missing_functions:
            print(f"‚ùå Fonctions manquantes dans conversation_memory.py: {missing_functions}")
            print("üö® PROBL√àME: Vous utilisez l'ANCIEN syst√®me de m√©moire")
            return False
        else:
            print("‚úÖ Toutes les fonctions critiques pr√©sentes dans conversation_memory.py")
            return True
    
    # V√©rifier conversation_memory_enhanced.py
    elif os.path.exists("conversation_memory_enhanced.py"):
        print("üìÑ conversation_memory_enhanced.py existe mais conversation_memory.py manque")
        print("üîß SOLUTION: Renommer conversation_memory_enhanced.py ‚Üí conversation_memory.py")
        return False
    
    else:
        print("‚ùå Aucun fichier de m√©moire trouv√©")
        return False

def check_expert_services_content():
    """V√©rifie le contenu d'expert_services.py"""
    
    print("\n‚öôÔ∏è === V√âRIFICATION CONTENU EXPERT SERVICES ===")
    
    if not os.path.exists("expert_services.py"):
        print("‚ùå expert_services.py manquant")
        return False
    
    with open("expert_services.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # V√©rifier les m√©thodes critiques ajout√©es
    critical_methods = [
        "_extract_age_from_original_question",
        "_build_complete_enriched_question",
        "_process_clarification_response_corrected",
        "age_info = self._extract_age_from_original_question"
    ]
    
    missing_methods = []
    for method in critical_methods:
        if method not in content:
            missing_methods.append(method)
    
    if missing_methods:
        print(f"‚ùå M√©thodes manquantes dans expert_services.py: {missing_methods}")
        print("üö® PROBL√àME: expert_services.py pas mis √† jour avec les corrections")
        return False
    else:
        print("‚úÖ Toutes les m√©thodes critiques pr√©sentes dans expert_services.py")
        return True

def check_integrations_imports():
    """V√©rifie les imports dans expert_integrations.py"""
    
    print("\nüîó === V√âRIFICATION IMPORTS INT√âGRATIONS ===")
    
    if not os.path.exists("expert_integrations.py"):
        print("‚ùå expert_integrations.py manquant")
        return False
    
    with open("expert_integrations.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # V√©rifier l'import de m√©moire
    if "from app.api.v1.conversation_memory_enhanced import" in content:
        print("‚ö†Ô∏è Import pointe vers conversation_memory_enhanced")
        if os.path.exists("conversation_memory_enhanced.py") and not os.path.exists("conversation_memory.py"):
            print("üîß SOLUTION: Renommer conversation_memory_enhanced.py ‚Üí conversation_memory.py")
            print("üîß OU: Changer l'import vers conversation_memory")
            return False
    elif "from app.api.v1.conversation_memory import" in content:
        print("‚úÖ Import pointe vers conversation_memory (correct)")
        return True
    else:
        print("‚ùå Import de m√©moire non trouv√© ou incorrect")
        return False

def provide_solutions(files_status, memory_ok, services_ok, integrations_ok):
    """Fournit les solutions bas√©es sur le diagnostic"""
    
    print("\nüîß === SOLUTIONS RECOMMAND√âES ===")
    
    if not memory_ok:
        if files_status.get("conversation_memory_enhanced.py", {}).get("exists", False):
            print("\nüí° SOLUTION M√âMOIRE:")
            print("   Ex√©cutez cette commande:")
            print("   mv conversation_memory_enhanced.py conversation_memory.py")
            print("   (Cela renomme le fichier enhanced vers le nom standard)")
        else:
            print("\n‚ùå PROBL√àME CRITIQUE: conversation_memory_enhanced.py manquant")
            print("   Vous devez cr√©er ce fichier avec le contenu de l'artifact")
    
    if not services_ok:
        print("\nüí° SOLUTION SERVICES:")
        print("   Remplacer expert_services.py par le contenu de l'artifact 'expert_services_fixed'")
    
    if not integrations_ok:
        print("\nüí° SOLUTION INT√âGRATIONS:")
        print("   V√©rifier que l'import dans expert_integrations.py pointe vers le bon fichier")

def main():
    """Fonction principale"""
    
    print("üîç === DIAGNOSTIC LOCAL SYST√àME CLARIFICATION ===")
    print(f"üìç Dossier courant: {os.getcwd()}")
    
    # V√©rifications
    files_status = check_files_present()
    memory_ok = check_memory_file_content() 
    services_ok = check_expert_services_content()
    integrations_ok = check_integrations_imports()
    
    print(f"\nüìã === R√âSUM√â DIAGNOSTIC ===")
    print(f"{'‚úÖ' if memory_ok else '‚ùå'} Syst√®me de M√©moire: {'OK' if memory_ok else 'PROBL√àME'}")
    print(f"{'‚úÖ' if services_ok else '‚ùå'} Services Expert: {'OK' if services_ok else 'PROBL√àME'}")
    print(f"{'‚úÖ' if integrations_ok else '‚ùå'} Int√©grations: {'OK' if integrations_ok else 'PROBL√àME'}")
    
    if memory_ok and services_ok and integrations_ok:
        print("\nüéâ TOUS LES COMPOSANTS SONT CORRECTS")
        print("ü§î Si le probl√®me persiste, il pourrait √™tre dans la logique de flux")
    else:
        provide_solutions(files_status, memory_ok, services_ok, integrations_ok)

if __name__ == "__main__":
    main()