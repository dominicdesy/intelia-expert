# app/prompts/prompt_templates.py
from __future__ import annotations
from typing import Dict

_TEMPLATES: Dict[str, str] = {
    "facts_only": (
        "Donne la valeur num√©rique en premier (unit√© SI), puis la plage et la source [Doc N]. "
        "Aucune digression."
    ),
    "calc": (
        "Pr√©sente le r√©sultat calcul√© (valeur + unit√©), liste 2 hypoth√®ses et indique comment affiner."
    ),
    "diagnostic_triage": (
        "Pose au maximum 3 questions pour pr√©ciser le cas, puis donne 3 causes probables et 3 actions imm√©diates s√ªres."
    ),
    
    # üÜï NOUVEAUX TEMPLATES CHAIN-OF-THOUGHT
    "cot_diagnostic": """Tu es un expert v√©t√©rinaire avicole. Utilise un raisonnement √©tape par √©tape pour analyser ce probl√®me complexe.

CONTEXTE: {context}
ENTIT√âS EXTRAITES: {entities}
QUESTION: {question}

Suis cette structure de raisonnement avec les balises indiqu√©es :

<thinking>
Analyse initiale du probl√®me :
- Quelle est vraiment la question pos√©e ?
- Quels sont les sympt√¥mes/signes critiques ?
- Y a-t-il des informations manquantes importantes ?
</thinking>

<factors>
Facteurs pertinents √† analyser :
- Facteur 1: [√¢ge/lign√©e/conditions d'√©levage et impact]
- Facteur 2: [environnement/alimentation et influence]  
- Facteur 3: [ant√©c√©dents/pratiques et corr√©lation]
</factors>

<analysis>
Analyse √©tape par √©tape :
1. [Premi√®re √©tape d'analyse diagnostique]
2. [Deuxi√®me √©tape - causes probables]
3. [Troisi√®me √©tape - diagnostic diff√©rentiel]
</analysis>

<reasoning>
Raisonnement logique :
- Pourquoi cette situation se produit-elle ?
- Quelles sont les causes les plus probables selon l'√¢ge/lign√©e ?
- Comment les diff√©rents facteurs interagissent-ils ?
</reasoning>

<recommendations>
Recommandations hi√©rarchis√©es :
1. URGENCE IMM√âDIATE: [action √† prendre dans les 2-4h]
2. COURT TERME: [actions 24-48h]  
3. PR√âVENTION: [mesures pr√©ventives long terme]
</recommendations>

<validation>
V√©rification de coh√©rence :
- Ces recommandations sont-elles r√©alistes pour {entities.get('species', 'cette esp√®ce')} ?
- Y a-t-il des contre-indications selon l'√¢ge/lign√©e ?
- Quels sont les indicateurs de succ√®s √† surveiller ?
</validation>

R√©ponse finale structur√©e pour l'utilisateur :""",

    "cot_optimization": """Tu es un expert en optimisation avicole. Analyse cette question d'optimisation avec un raisonnement structur√©.

CONTEXTE: {context}
ENTIT√âS EXTRAITES: {entities}
QUESTION: {question}

<thinking>
Compr√©hension de l'objectif d'optimisation :
- Quel est le param√®tre principal √† optimiser ?
- Quelles sont les contraintes identifi√©es ?
- Quel est le contexte √©conomique/technique ?
</thinking>

<current_analysis>
Analyse de la situation actuelle :
- Performance actuelle vs standards de r√©f√©rence
- √âcarts identifi√©s et leur magnitude
- Points forts √† pr√©server
</current_analysis>

<optimization_factors>
Facteurs d'optimisation par ordre d'impact :
1. NUTRITION: [impact potentiel et faisabilit√©]
2. ENVIRONNEMENT: [leviers disponibles et co√ªts]
3. G√âN√âTIQUE/MANAGEMENT: [changements possibles]
4. √âCONOMIQUE: [analyse co√ªt/b√©n√©fice]
</optimization_factors>

<strategy>
Strat√©gie d'optimisation progressive :
1. IMM√âDIAT (0-2 semaines): [actions sans investissement]
2. COURT TERME (1-2 mois): [ajustements techniques]
3. MOYEN TERME (3-6 mois): [optimisations structurelles]
</strategy>

<impact_prediction>
Pr√©dictions d'impact quantifi√©es :
- Am√©lioration attendue: [fourchette r√©aliste]
- D√©lai de retour sur investissement
- Risques et mesures d'att√©nuation
</impact_prediction>

Plan d'action optimal pour l'utilisateur :""",

    "cot_multifactor": """Tu es un consultant expert en aviculture. Traite cette question complexe multi-facteurs avec m√©thodologie structur√©e.

CONTEXTE: {context}
ENTIT√âS EXTRAITES: {entities}
QUESTION: {question}

<problem_decomposition>
D√©composition du probl√®me complexe :
- Sous-probl√®me 1: [identification et priorit√©]
- Sous-probl√®me 2: [interd√©pendances]
- Sous-probl√®me 3: [impacts crois√©s]
</problem_decomposition>

<factor_analysis>
Analyse des facteurs influents :
- Facteurs contr√¥lables: [liste et degr√© de contr√¥le]
- Facteurs externes: [influence et adaptation possible]
- Facteurs critiques: [seuils d'alerte et surveillance]
</factor_analysis>

<interconnections>
Analyse des interconnections :
- Comment les facteurs s'influencent mutuellement ?
- Quels sont les effets en cascade possibles ?
- O√π sont les points de levier maximum ?
</interconnections>

<solution_pathway>
Chemin de solution int√©gr√© :
1. DIAGNOSTIC: [√©tat des lieux complet]
2. PRIORISATION: [urgence vs impact]
3. PLAN D'ACTION: [s√©quencement optimal]
4. MONITORING: [indicateurs de suivi]
</solution_pathway>

<risk_mitigation>
Gestion des risques :
- Risques identifi√©s et probabilit√©
- Mesures pr√©ventives recommand√©es
- Plans de contingence si d√©rive
</risk_mitigation>

Solution int√©gr√©e pour l'utilisateur :""",

    "cot_economics": """Tu es un expert en √©conomie avicole. Analyse cette question √©conomique avec raisonnement financier structur√©.

CONTEXTE: {context}
ENTIT√âS EXTRAITES: {entities}
QUESTION: {question}

<economic_context>
Analyse du contexte √©conomique :
- Objectif financier principal identifi√©
- Contraintes budg√©taires et temporelles
- Variables √©conomiques cl√©s √† consid√©rer
</economic_context>

<cost_benefit_breakdown>
D√©composition co√ªts/b√©n√©fices :
- CO√õTS: [fixes, variables, cach√©s]
- REVENUS: [directs, indirects, potentiels]
- MARGES: [calcul et optimisation]
</cost_benefit_breakdown>

<scenario_analysis>
Analyse de sc√©narios :
1. SC√âNARIO CONSERVATEUR: [hypoth√®ses prudentes]
2. SC√âNARIO R√âALISTE: [conditions normales]
3. SC√âNARIO OPTIMISTE: [conditions favorables]
</scenario_analysis>

<optimization_levers>
Leviers d'optimisation √©conomique :
- R√©duction de co√ªts: [opportunit√©s identifi√©es]
- Am√©lioration revenus: [strat√©gies possibles]
- Efficacit√© op√©rationnelle: [gains de productivit√©]
</optimization_levers>

<financial_recommendation>
Recommandation financi√®re :
- Calcul ROI et d√©lai de retour
- Analyse de sensibilit√© aux variables cl√©s
- Plan de mise en ≈ìuvre financi√®re
</financial_recommendation>

Strat√©gie √©conomique optimale pour l'utilisateur :"""
}

def get_template(key: str) -> str:
    return _TEMPLATES.get(key, "R√©ponse concise et structur√©e.")

# üÜï NOUVELLES FONCTIONS POUR CHAIN-OF-THOUGHT

def get_cot_template_for_intent(intent: str) -> str:
    """
    Retourne le template CoT appropri√© selon l'intention d√©tect√©e
    """
    cot_mapping = {
        "Diagnostics": "cot_diagnostic",
        "HealthDiagnosis": "cot_diagnostic", 
        "OptimizationStrategy": "cot_optimization",
        "Economics": "cot_economics",
        "TroubleshootingMultiple": "cot_multifactor",
        "ProductionAnalysis": "cot_multifactor",
        "MultiFactor": "cot_multifactor"
    }
    
    template_key = cot_mapping.get(intent, "cot_multifactor")  # fallback g√©n√©rique
    return _TEMPLATES.get(template_key, _TEMPLATES["cot_multifactor"])

def build_cot_prompt(question: str, context: str, entities: dict, intent: str) -> str:
    """
    Construit un prompt CoT complet en utilisant le bon template
    """
    template = get_cot_template_for_intent(intent)
    
    return template.format(
        question=question,
        context=context,
        entities=entities
    )

def is_cot_suitable(intent: str, question: str) -> bool:
    """
    D√©termine si Chain-of-Thought est appropri√© pour cette intention/question
    """
    # Intentions complexes n√©cessitant CoT
    complex_intents = [
        "Diagnostics", "HealthDiagnosis", "OptimizationStrategy", 
        "Economics", "TroubleshootingMultiple", "ProductionAnalysis",
        "MultiFactor"
    ]
    
    # Mots-cl√©s indiquant complexit√©
    complex_keywords = [
        "optimiser", "am√©liorer", "probl√®me", "strat√©gie", "diagnostic",
        "plusieurs", "facteurs", "pourquoi", "comment", "analyse",
        "rentabilit√©", "efficacit√©", "recommandation", "causes"
    ]
    
    # Indicateurs de questions multi-√©tapes
    multi_step_indicators = [
        " et ", " puis ", " ensuite ", "d'abord", "enfin",
        "√©tapes", "proc√©dure", "protocole", "plan"
    ]
    
    return (
        intent in complex_intents or
        any(kw in question.lower() for kw in complex_keywords) or
        any(indicator in question.lower() for indicator in multi_step_indicators) or
        len(question.split()) > 15  # Questions longues souvent complexes
    )
