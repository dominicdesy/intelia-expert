"""
Intelia Expert - API Backend Principal
Version 3.4.0 - Version Finale avec Pr√©fixes Corrig√©s
Correction: Pr√©fixes doubl√©s r√©solus pour tous les routers
"""

import os
import sys
import time
import logging
import traceback
from typing import Optional, Dict, Any, List
from contextlib import asynccontextmanager
from datetime import datetime
import json

# FastAPI imports
from fastapi import FastAPI, HTTPException, Depends, Request, Response, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

# Pydantic models
from pydantic import BaseModel, Field

# Supabase
try:
    from supabase import create_client, Client
    import jwt
    SUPABASE_AVAILABLE = True
except ImportError:
    SUPABASE_AVAILABLE = False
    Client = None
    jwt = None

# Configuration du path
backend_dir = os.path.dirname(os.path.abspath(__file__))
if backend_dir not in sys.path:
    sys.path.insert(0, backend_dir)

# Environment
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# Configuration logging avec UTF-8
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# Force UTF-8 pour les logs
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')

# =============================================================================
# VARIABLES GLOBALES
# =============================================================================

rag_embedder: Optional[Any] = None
supabase: Optional[Client] = None
security = HTTPBearer()

# =============================================================================
# IMPORT DES ROUTERS AVEC GESTION D'ERREURS AM√âLIOR√âE
# =============================================================================

# Import logging router
try:
    from app.api.v1.logging import router as logging_router
    LOGGING_AVAILABLE = True
    logger.info("‚úÖ Module logging import√©")
except ImportError as e:
    LOGGING_AVAILABLE = False
    logging_router = None
    logger.warning(f"‚ö†Ô∏è Module logging non disponible: {e}")

# Import expert router
try:
    from app.api.v1.expert import router as expert_router
    EXPERT_ROUTER_AVAILABLE = True
    logger.info("‚úÖ Module expert import√©")
except ImportError as e:
    EXPERT_ROUTER_AVAILABLE = False
    expert_router = None
    logger.warning(f"‚ö†Ô∏è Module expert non disponible: {e}")

# Import auth router
try:
    from app.api.v1.auth import router as auth_router
    AUTH_ROUTER_AVAILABLE = True
    logger.info("‚úÖ Module auth import√©")
except ImportError as e:
    AUTH_ROUTER_AVAILABLE = False
    auth_router = None
    logger.warning(f"‚ö†Ô∏è Module auth non disponible: {e}")

# Import admin router
try:
    from app.api.v1.admin import router as admin_router
    ADMIN_ROUTER_AVAILABLE = True
    logger.info("‚úÖ Module admin import√©")
except ImportError as e:
    ADMIN_ROUTER_AVAILABLE = False
    admin_router = None
    logger.warning(f"‚ö†Ô∏è Module admin non disponible: {e}")

# Import health router
try:
    from app.api.v1.health import router as health_router
    HEALTH_ROUTER_AVAILABLE = True
    logger.info("‚úÖ Module health import√©")
except ImportError as e:
    HEALTH_ROUTER_AVAILABLE = False
    health_router = None
    logger.warning(f"‚ö†Ô∏è Module health non disponible: {e}")

# Import system router
try:
    from app.api.v1.system import router as system_router
    SYSTEM_ROUTER_AVAILABLE = True
    logger.info("‚úÖ Module system import√©")
except ImportError as e:
    SYSTEM_ROUTER_AVAILABLE = False
    system_router = None
    logger.warning(f"‚ö†Ô∏è Module system non disponible: {e}")

# =============================================================================
# MOD√àLES PYDANTIC AVEC SUPPORT UTF-8
# =============================================================================

class QuestionRequest(BaseModel):
    """Request model for expert questions with UTF-8 support"""
    text: str = Field(..., description="Question text (UTF-8 encoded)", min_length=1, max_length=2000)
    language: Optional[str] = Field("fr", description="Response language (fr, en, es)")
    context: Optional[str] = Field(None, description="Additional context")
    speed_mode: Optional[str] = Field("balanced", description="Speed mode: fast, balanced, quality")
    
    class Config:
        str_to_lower = False
        validate_assignment = True
        extra = "forbid"

class ExpertResponse(BaseModel):
    """Response model for expert answers with UTF-8 support"""
    question: str
    response: str
    mode: str
    note: Optional[str] = None
    sources: Optional[List[Dict[str, Any]]] = []
    config_source: str
    timestamp: str
    processing_time: float
    language: str
    
    class Config:
        json_encoders = {
            str: lambda v: v if isinstance(v, str) else str(v)
        }

class HealthResponse(BaseModel):
    """Health check response model"""
    status: str
    timestamp: str
    services: Dict[str, str]
    config: Dict[str, str]
    database_status: str
    rag_status: str

# =============================================================================
# CONFIGURATION MULTI-LANGUES AVEC SUPPORT UTF-8
# =============================================================================

LANGUAGE_PROMPTS = {
    "fr": {
        "system_base": """Tu es un expert v√©t√©rinaire sp√©cialis√© en sant√© et nutrition animale, particuli√®rement pour les poulets de chair Ross 308. Tu peux comprendre et r√©pondre aux questions avec des caract√®res sp√©ciaux fran√ßais (√©, √®, √†, √ß, etc.).""",
        "context_instruction": "Utilise les informations suivantes pour r√©pondre √† la question:",
        "response_instruction": "R√©ponds en fran√ßais de mani√®re pr√©cise et pratique, en te basant sur les documents fournis. N'h√©site pas √† utiliser les accents fran√ßais appropri√©s.",
        "fallback_instruction": "R√©ponds aux questions de mani√®re pr√©cise et pratique en fran√ßais avec les accents appropri√©s."
    },
    "en": {
        "system_base": """You are a veterinary expert specialized in animal health and nutrition, particularly for Ross 308 broiler chickens.""",
        "context_instruction": "Use the following information to answer the question:",
        "response_instruction": "Respond in English precisely and practically, based on the provided documents.",
        "fallback_instruction": "Answer questions precisely and practically in English."
    },
    "es": {
        "system_base": """Eres un experto veterinario especializado en salud y nutrici√≥n animal, particularmente para pollos de engorde Ross 308. Puedes entender y responder preguntas con caracteres especiales en espa√±ol (√±, ¬ø, ¬°, acentos, etc.).""",
        "context_instruction": "Utiliza la siguiente informaci√≥n para responder a la pregunta:",
        "response_instruction": "Responde en espa√±ol de manera precisa y pr√°ctica, bas√°ndote en los documentos proporcionados. Usa los caracteres especiales del espa√±ol cuando sea apropiado.",
        "fallback_instruction": "Responde a las preguntas de manera precisa y pr√°ctica en espa√±ol con los caracteres especiales apropiados."
    }
}

def get_language_prompt(language: str, prompt_type: str) -> str:
    """Get localized prompt for specified language and type with UTF-8 support."""
    lang = language.lower() if language else "fr"
    if lang not in LANGUAGE_PROMPTS:
        lang = "fr"
    return LANGUAGE_PROMPTS[lang].get(prompt_type, LANGUAGE_PROMPTS["fr"][prompt_type])

# =============================================================================
# INITIALISATION SUPABASE
# =============================================================================

def initialize_supabase():
    """Initialize Supabase client"""
    global supabase
    
    if not SUPABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è Biblioth√®ques Supabase non disponibles")
        return False
    
    try:
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_ANON_KEY')
        
        if not supabase_url or not supabase_key:
            logger.warning("‚ö†Ô∏è Credentials Supabase non trouv√©s")
            return False
        
        logger.info(f"üîó Connexion √† Supabase...")
        supabase = create_client(supabase_url, supabase_key)
        logger.info("‚úÖ Client Supabase cr√©√© avec succ√®s")
        return True
            
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation Supabase: {e}")
        return False

# =============================================================================
# INITIALISATION RAG
# =============================================================================

async def initialize_rag_system():
    """Initialize RAG system"""
    global rag_embedder
    
    logger.info("üîß Initialisation du syst√®me RAG...")
    
    try:
        from rag.embedder import FastRAGEmbedder
        logger.info("‚úÖ Module RAG embedder import√©")
        
        embedder = FastRAGEmbedder(
            api_key=os.getenv('OPENAI_API_KEY'),
            cache_embeddings=True,
            max_workers=2
        )
        logger.info("‚úÖ Instance RAG embedder cr√©√©e")
        
        # Recherche de l'index existant
        index_paths = [
            '/workspace/backend/rag_index',
            './rag_index', 
            '/tmp/rag_index',
            os.path.join(backend_dir, 'rag_index')
        ]
        
        index_loaded = False
        for index_path in index_paths:
            if os.path.exists(index_path):
                faiss_file = os.path.join(index_path, 'index.faiss')
                pkl_file = os.path.join(index_path, 'index.pkl')
                
                if os.path.exists(faiss_file) and os.path.exists(pkl_file):
                    logger.info(f"üìÅ Index trouv√© dans: {index_path}")
                    
                    if embedder.load_index(index_path):
                        logger.info(f"‚úÖ Index RAG charg√© depuis {index_path}")
                        index_loaded = True
                        break
        
        rag_embedder = embedder
        
        if index_loaded and embedder.has_search_engine():
            logger.info("‚úÖ Syst√®me RAG initialis√© avec recherche documentaire")
            return True
        else:
            logger.warning("‚ö†Ô∏è Syst√®me RAG initialis√© mais sans index valide")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation RAG: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

# =============================================================================
# TRAITEMENT DES QUESTIONS AVEC RAG ET SUPPORT UTF-8
# =============================================================================

async def process_question_with_rag(
    question: str, 
    user: Optional[Any] = None, 
    language: str = "fr",
    speed_mode: str = "balanced"
) -> Dict[str, Any]:
    """Process question using RAG system with UTF-8 support"""
    start_time = time.time()
    
    try:
        # Assurer l'encodage UTF-8 de la question
        if isinstance(question, str):
            question = question.encode('utf-8', errors='ignore').decode('utf-8')
        
        logger.info(f"üîç Traitement question UTF-8: {question[:50]}... (Lang: {language}, Mode: {speed_mode})")
        
        sources = []
        
        # Configuration selon le mode
        performance_config = {
            "fast": {"model": "gpt-3.5-turbo", "k": 2, "max_tokens": 300, "timeout": 8},
            "balanced": {"model": "gpt-3.5-turbo", "k": 3, "max_tokens": 500, "timeout": 12},
            "quality": {"model": "gpt-4o-mini", "k": 5, "max_tokens": 800, "timeout": 20}
        }
        
        config = performance_config.get(speed_mode, performance_config["balanced"])
        
        # Utiliser RAG si disponible
        if rag_embedder and rag_embedder.has_search_engine():
            logger.info(f"üîÑ Utilisation RAG avec recherche documentaire (k={config['k']})")
            
            try:
                search_results = rag_embedder.search(question, k=config["k"])
                logger.info(f"üîç Recherche termin√©e: {len(search_results)} r√©sultats")
                
                if search_results:
                    context_parts = []
                    sources = []
                    
                    for i, result in enumerate(search_results[:config["k"]]):
                        text = result['text']
                        if isinstance(text, str):
                            text = text.encode('utf-8', errors='ignore').decode('utf-8')
                        
                        context_chunk = text[:400] + "..." if len(text) > 400 else text
                        context_parts.append(f"Document {i+1}: {context_chunk}")
                        sources.append({
                            "index": result['index'],
                            "score": result['score'],
                            "preview": text[:150] + "..."
                        })
                    
                    context = "\n\n".join(context_parts)
                    
                    # Utiliser OpenAI avec contexte RAG
                    import openai
                    openai.api_key = os.getenv('OPENAI_API_KEY')
                    
                    system_base = get_language_prompt(language, "system_base")
                    context_instruction = get_language_prompt(language, "context_instruction")
                    response_instruction = get_language_prompt(language, "response_instruction")
                    
                    system_prompt = f"""{system_base}

{context_instruction}

{context}

{response_instruction}"""

                    response = openai.chat.completions.create(
                        model=config["model"],
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": question}
                        ],
                        temperature=0.7,
                        max_tokens=config["max_tokens"],
                        timeout=config["timeout"]
                    )
                    
                    answer = response.choices[0].message.content
                    if isinstance(answer, str):
                        answer = answer.encode('utf-8', errors='ignore').decode('utf-8')
                    
                    mode = "rag_enhanced"
                    note = f"R√©ponse bas√©e sur {len(search_results)} documents"
                    
                else:
                    logger.info("üîÑ Aucun document pertinent trouv√© - utilisation fallback")
                    answer, mode, note = await fallback_openai_response(question, language, config)
                    
            except Exception as search_error:
                logger.error(f"‚ùå Erreur recherche: {search_error}")
                answer, mode, note = await fallback_openai_response(question, language, config)
        else:
            logger.info("üîÑ Mode fallback - OpenAI direct")
            answer, mode, note = await fallback_openai_response(question, language, config)
        
        processing_time = time.time() - start_time
        
        return {
            "question": question,
            "response": answer,
            "mode": mode,
            "note": note,
            "sources": sources,
            "config_source": os.getenv('CONFIG_SOURCE', 'Environment Variables'),
            "timestamp": time.strftime('%Y-%m-%d %H:%M:%S'),
            "processing_time": round(processing_time, 2),
            "language": language
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur traitement question: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur de traitement: {str(e)}")

async def fallback_openai_response(question: str, language: str = "fr", config: dict = None) -> tuple:
    """Fallback response using OpenAI directly with UTF-8 support"""
    try:
        import openai
        
        if config is None:
            config = {"model": "gpt-3.5-turbo", "max_tokens": 500, "timeout": 12}
        
        openai.api_key = os.getenv('OPENAI_API_KEY')
        
        if isinstance(question, str):
            question = question.encode('utf-8', errors='ignore').decode('utf-8')
        
        system_base = get_language_prompt(language, "system_base")
        fallback_instruction = get_language_prompt(language, "fallback_instruction")
        
        system_prompt = f"{system_base}\n\n{fallback_instruction}"

        response = openai.chat.completions.create(
            model=config["model"],
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            temperature=0.7,
            max_tokens=config["max_tokens"],
            timeout=config["timeout"]
        )
        
        answer = response.choices[0].message.content
        if isinstance(answer, str):
            answer = answer.encode('utf-8', errors='ignore').decode('utf-8')
        
        mode = "fallback_openai"
        note = "R√©ponse sans recherche documentaire"
        
        return answer, mode, note
    
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur OpenAI fallback: {e}")
        
        fallback_responses = {
            "fr": "Je suis temporairement indisponible. Veuillez r√©essayer plus tard.",
            "en": "I am temporarily unavailable. Please try again later.",
            "es": "Estoy temporalmente no disponible. Int√©ntelo de nuevo m√°s tarde."
        }
        
        answer = fallback_responses.get(language, fallback_responses["fr"])
        mode = "static_fallback"
        note = "Service temporairement indisponible"
        
        return answer, mode, note

# =============================================================================
# FONCTIONS HELPER
# =============================================================================

def get_rag_status() -> str:
    """Get current RAG system status"""
    if not rag_embedder:
        return "not_available"
    elif rag_embedder.has_search_engine():
        return "optimized"
    else:
        return "fallback"

# =============================================================================
# GESTION DU CYCLE DE VIE
# =============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan management"""
    logger.info("üöÄ D√©marrage Intelia Expert API v3.4.0...")
    
    # Initialisation des services
    supabase_success = initialize_supabase()
    rag_success = await initialize_rag_system()
    
    # Exposer le RAG dans app.state pour les routers
    app.state.rag_embedder = rag_embedder
    app.state.process_question_with_rag = process_question_with_rag
    app.state.get_rag_status = get_rag_status
    
    # Logs de statut
    logger.info("‚úÖ Application cr√©√©e avec succ√®s")
    logger.info("üìä Support multi-langues: FR, EN, ES (UTF-8)")
    logger.info("‚ö° Modes de performance: fast, balanced, quality")
    logger.info(f"üóÑÔ∏è Base de donn√©es: {'Disponible' if supabase_success else 'Non disponible'}")
    logger.info(f"ü§ñ Modules RAG: {'Disponibles' if rag_embedder else 'Non disponibles'}")
    
    if rag_embedder and rag_embedder.has_search_engine():
        logger.info("üîç Syst√®me RAG: Optimis√© (avec recherche documentaire)")
    elif rag_embedder:
        logger.info("üîç Syst√®me RAG: Pr√™t (mode fallback)")
    else:
        logger.info("üîç Syst√®me RAG: Non disponible")
    
    # D√©tecter l'environnement de d√©ploiement
    deployment_env = "DigitalOcean" if "/workspace" in backend_dir else "Local"
    logger.info(f"üåê Environnement d√©tect√©: {deployment_env}")
    logger.info("üî§ Support UTF-8: Activ√© pour caract√®res sp√©ciaux FR/ES")
    logger.info("üîß Pr√©fixes routers: Correction doublons appliqu√©e")
    
    yield
    
    logger.info("üõë Arr√™t de Intelia Expert API...")

# =============================================================================
# APPLICATION FASTAPI AVEC SUPPORT UTF-8
# =============================================================================

app = FastAPI(
    title="Intelia Expert API",
    description="Assistant IA Expert pour la Sant√© et Nutrition Animale - Pr√©fixes Corrig√©s",
    version="3.4.0",
    docs_url="/docs",
    redoc_url="/redoc", 
    openapi_url="/openapi.json",
    root_path="/api",
    lifespan=lifespan
)

# =============================================================================
# MIDDLEWARE UTF-8 ET CORS
# =============================================================================

# Middleware pour forcer l'encodage UTF-8
@app.middleware("http")
async def force_utf8_middleware(request: Request, call_next):
    """Force UTF-8 encoding for all requests and responses"""
    
    if request.method == "POST":
        content_type = request.headers.get("content-type", "")
        if "application/json" in content_type:
            logger.info(f"üî§ Requ√™te JSON re√ßue - Content-Type: {content_type}")
    
    response = await call_next(request)
    
    if response.headers.get("content-type"):
        if "application/json" in response.headers.get("content-type"):
            response.headers["content-type"] = "application/json; charset=utf-8"
    
    response.headers["Accept-Charset"] = "utf-8"
    
    return response

# Configuration CORS avec Support UTF-8 Complet
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://expert.intelia.com",
        "https://expert-app-cngws.ondigitalocean.app",
        "http://localhost:3000",
        "http://localhost:8080"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*", "Content-Type", "Accept-Charset", "Accept-Encoding"],
)

# =============================================================================
# MONTAGE DES ROUTERS - CORRECTION PR√âFIXES DOUBL√âS
# =============================================================================

# CORRECTION CRITIQUE: Les fichiers routers ont leurs propres pr√©fixes internes
# Solution: Monter tous les routers avec prefix="/v1" seulement
# Les routers d√©finissent leurs sous-chemins: /expert, /auth, /admin, etc.

# Router expert - GARDE SON PR√âFIXE SP√âCIFIQUE (fonctionne d√©j√†)
if EXPERT_ROUTER_AVAILABLE and expert_router:
    try:
        app.include_router(expert_router, prefix="/v1/expert", tags=["Expert System"])
        logger.info("‚úÖ Router expert mont√© sur /v1/expert (endpoints: /v1/expert/*)")
        
        # Configurer les r√©f√©rences RAG pour le router expert
        if hasattr(expert_router, 'setup_rag_references'):
            expert_router.setup_rag_references(app)
            logger.info("‚úÖ R√©f√©rences RAG configur√©es pour router expert")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router expert: {e}")

# Router auth - CORRECTION PR√âFIXE DOUBL√â
if AUTH_ROUTER_AVAILABLE and auth_router:
    try:
        # AVANT: prefix="/v1/auth" + router="/auth" = /v1/auth/auth/* ‚ùå
        # APR√àS: prefix="/v1" + router="/auth" = /v1/auth/* ‚úÖ
        app.include_router(auth_router, prefix="/v1", tags=["Authentication"])
        logger.info("‚úÖ Router auth mont√© sur /v1 (endpoints: /v1/auth/*)")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router auth: {e}")

# Router admin - CORRECTION PR√âFIXE DOUBL√â  
if ADMIN_ROUTER_AVAILABLE and admin_router:
    try:
        # AVANT: prefix="/v1/admin" + router="/admin" = /v1/admin/admin/* ‚ùå
        # APR√àS: prefix="/v1" + router="/admin" = /v1/admin/* ‚úÖ
        app.include_router(admin_router, prefix="/v1", tags=["Administration"])
        logger.info("‚úÖ Router admin mont√© sur /v1 (endpoints: /v1/admin/*)")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router admin: {e}")

# Router health - CORRECTION PR√âFIXE DOUBL√â
if HEALTH_ROUTER_AVAILABLE and health_router:
    try:
        # AVANT: prefix="/v1/health" + router="/health" = /v1/health/health/* ‚ùå
        # APR√àS: prefix="/v1" + router="/health" = /v1/health/* ‚úÖ
        app.include_router(health_router, prefix="/v1", tags=["Health Monitoring"])
        logger.info("‚úÖ Router health mont√© sur /v1 (endpoints: /v1/health/*)")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router health: {e}")

# Router system - CORRECTION PR√âFIXE DOUBL√â CRITIQUE
if SYSTEM_ROUTER_AVAILABLE and system_router:
    try:
        # AVANT: prefix="/v1/system" + router="/system" = /v1/system/system/* ‚ùå
        # APR√àS: prefix="/v1" + router="/system" = /v1/system/* ‚úÖ
        app.include_router(system_router, prefix="/v1", tags=["System Monitoring"])
        logger.info("‚úÖ Router system mont√© sur /v1 (endpoints: /v1/system/*)")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router system: {e}")

# Router logging - CORRECTION PR√âFIXE DOUBL√â CRITIQUE
if LOGGING_AVAILABLE and logging_router:
    try:
        # AVANT: prefix="/v1/logging" + router="/logging" = /v1/logging/logging/* ‚ùå
        # APR√àS: prefix="/v1" + router="/logging" = /v1/logging/* ‚úÖ
        app.include_router(logging_router, prefix="/v1", tags=["Logging"])
        logger.info("‚úÖ Router logging mont√© sur /v1 (endpoints: /v1/logging/*)")
    except Exception as e:
        logger.error(f"‚ùå Erreur montage router logging: {e}")

# =============================================================================
# ENDPOINTS DE BASE AVEC SUPPORT UTF-8
# =============================================================================

@app.get("/", tags=["Root"])
async def root():
    """Endpoint racine avec URLs corrig√©es et status des routers"""
    return {
        "message": "Intelia Expert API v3.4.0 - Pr√©fixes Doubl√©s Corrig√©s",
        "status": "running",
        "environment": os.getenv('ENV', 'production'),
        "api_version": "3.4.0",
        "database": supabase is not None,
        "rag_system": get_rag_status(),
        "routers_mounted": {
            "expert": EXPERT_ROUTER_AVAILABLE,
            "auth": AUTH_ROUTER_AVAILABLE,
            "admin": ADMIN_ROUTER_AVAILABLE,
            "health": HEALTH_ROUTER_AVAILABLE,
            "system": SYSTEM_ROUTER_AVAILABLE,
            "logging": LOGGING_AVAILABLE
        },
        "supported_languages": ["fr", "en", "es"],
        "utf8_support": {
            "enabled": True,
            "french_accents": "√©, √®, √†, √ß, √π, etc.",
            "spanish_special": "√±, ¬ø, ¬°, acentos",
            "encoding": "UTF-8 forc√© sur toutes les requ√™tes/r√©ponses"
        },
        "available_endpoints": [
            # Expert System (pr√©fixe sp√©cial conserv√©)
            "/api/v1/expert/ask-public",
            "/api/v1/expert/topics",
            # Authentication (pr√©fixe corrig√©)
            "/api/v1/auth/login",
            "/api/v1/auth/profile", 
            "/api/v1/auth/logout",
            # Administration (pr√©fixe corrig√©)
            "/api/v1/admin/dashboard",
            "/api/v1/admin/users",
            "/api/v1/admin/analytics",
            # Health Monitoring (pr√©fixe corrig√©)
            "/api/v1/health/health",
            "/api/v1/health/detailed",
            # System Monitoring (pr√©fixe corrig√© - ENFIN ACCESSIBLE)
            "/api/v1/system/health",
            "/api/v1/system/metrics",
            "/api/v1/system/status",
            # Logging (pr√©fixe corrig√© - ENFIN ACCESSIBLE)
            "/api/v1/logging/analytics",
            "/api/v1/logging/health",
            # Documentation
            "/docs",
            "/debug/routers"
        ],
        "fixes_applied_v3_4": {
            "double_prefix_fix": "Correction /v1/system/system ‚Üí /v1/system",
            "router_mounting": "Tous routers mont√©s avec prefix='/v1' seulement",
            "expert_exception": "Expert garde /v1/expert car pas de doublon interne",
            "endpoints_now_accessible": [
                "/api/v1/system/health",
                "/api/v1/system/metrics", 
                "/api/v1/logging/analytics",
                "/api/v1/auth/login",
                "/api/v1/admin/dashboard"
            ]
        },
        "deployment_notes": {
            "platform": "DigitalOcean App Platform",
            "auto_prefix": "/api ajout√© automatiquement par DigitalOcean",
            "problem_solved": "Pr√©fixes doubl√©s r√©solus pour tous routers",
            "utf8_support": "Middleware UTF-8 actif pour caract√®res sp√©ciaux"
        }
    }

@app.get("/health", response_model=HealthResponse, tags=["Health"])
async def health_check():
    """Health check endpoint global - distinct du router health d√©taill√©"""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.utcnow().isoformat() + "Z",
        services={
            "api": "running",
            "database": "connected" if supabase else "disconnected",
            "rag_system": get_rag_status(),
            "utf8_support": "enabled",
            "routers": "all_mounted_with_fixed_prefixes"
        },
        config={
            "environment": os.getenv('ENV', 'production'),
            "deployment": "DigitalOcean App Platform",
            "encoding": "UTF-8",
            "version": "3.4.0",
            "fix_applied": "Double prefix correction"
        },
        database_status="connected" if supabase else "disconnected",
        rag_status=get_rag_status()
    )

# =============================================================================
# ENDPOINTS DE DEBUG AVEC UTF-8
# =============================================================================

@app.get("/debug/routers", tags=["Debug"])
async def debug_routers():
    """Debug endpoint pour voir les routers charg√©s avec pr√©fixes corrig√©s"""
    return {
        "routers_status": {
            "expert": EXPERT_ROUTER_AVAILABLE,
            "auth": AUTH_ROUTER_AVAILABLE,
            "admin": ADMIN_ROUTER_AVAILABLE,
            "health": HEALTH_ROUTER_AVAILABLE,
            "system": SYSTEM_ROUTER_AVAILABLE,
            "logging": LOGGING_AVAILABLE
        },
        "available_routes": [
            {
                "path": route.path,
                "methods": list(route.methods) if hasattr(route, 'methods') else ["GET"],
                "name": getattr(route, 'name', 'unnamed'),
                "tags": getattr(route, 'tags', [])
            } for route in app.routes
        ],
        "prefix_corrections_v3_4": {
            "problem": "Routers avaient des pr√©fixes internes qui doublaient",
            "example_before": "/v1/system (mount) + /system (router) = /v1/system/system",
            "example_after": "/v1 (mount) + /system (router) = /v1/system",
            "expert_exception": "Expert garde /v1/expert car pas de pr√©fixe interne /expert"
        },
        "corrected_endpoints": {
            "system": ["/api/v1/system/health", "/api/v1/system/metrics", "/api/v1/system/status"],
            "logging": ["/api/v1/logging/analytics", "/api/v1/logging/health"],
            "auth": ["/api/v1/auth/login", "/api/v1/auth/profile", "/api/v1/auth/logout"],
            "admin": ["/api/v1/admin/dashboard", "/api/v1/admin/users", "/api/v1/admin/analytics"],
            "health": ["/api/v1/health/health", "/api/v1/health/detailed"],
            "expert": ["/api/v1/expert/ask-public", "/api/v1/expert/topics"]
        },
        "digitalocean_mapping": {
            "fastapi_internal": "/v1/system/health",
            "digitalocean_external": "/api/v1/system/health",
            "note": "DigitalOcean ajoute automatiquement /api"
        },
        "utf8_status": {
            "middleware_active": True,
            "supported_chars": "Tous caract√®res UTF-8 support√©s",
            "test_chars": "√©√®√†√ß√π, √±¬ø¬°, etc."
        },
        "timestamp": datetime.now().isoformat(),
        "version": "3.4.0"
    }

@app.get("/debug/utf8", tags=["Debug"])
async def debug_utf8():
    """Debug endpoint sp√©cifique pour tester l'UTF-8"""
    return {
        "utf8_test": {
            "french": "Temp√©rature √©lev√©e √† 32¬∞C - probl√®me d√©tect√©",
            "spanish": "¬øCu√°l es la nutrici√≥n √≥ptima para pollos?",
            "special_chars": "√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂",
            "symbols": "¬∞C, %, ‚Ç¨, ¬£, ¬•",
            "encoding": "UTF-8"
        },
        "middleware_status": "Actif - Force UTF-8 sur toutes les r√©ponses",
        "headers_forced": {
            "content-type": "application/json; charset=utf-8",
            "accept-charset": "utf-8"
        },
        "test_passed": True,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/debug/structure", tags=["Debug"])
async def debug_structure():
    """Debug endpoint pour voir la structure du projet"""
    try:
        structure = {}
        
        # Lister les modules
        api_v1_path = os.path.join(backend_dir, "app", "api", "v1")
        if os.path.exists(api_v1_path):
            structure["api_v1_modules"] = [
                f for f in os.listdir(api_v1_path) 
                if f.endswith('.py') and not f.startswith('__')
            ]
        
        rag_path = os.path.join(backend_dir, "rag")
        if os.path.exists(rag_path):
            structure["rag_modules"] = [
                f for f in os.listdir(rag_path) 
                if f.endswith('.py') and not f.startswith('__')
            ]
        
        return {
            "project_structure": structure,
            "backend_dir": backend_dir,
            "deployment_environment": "DigitalOcean" if "/workspace" in backend_dir else "Local",
            "router_prefix_status": {
                "problem_identified": "Double pr√©fixes dans routers internes",
                "correction_applied": "Montage avec prefix='/v1' seulement",
                "result": "Endpoints maintenant accessibles aux bonnes URLs"
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {"error": str(e)}

@app.get("/debug/deployment", tags=["Debug"])
async def debug_deployment():
    """Debug endpoint sp√©cifique au d√©ploiement DigitalOcean"""
    return {
        "platform": "DigitalOcean App Platform",
        "backend_dir": backend_dir,
        "is_digitalocean": "/workspace" in backend_dir,
        "environment_vars": {
            "ENV": os.getenv('ENV', 'not_set'),
            "PORT": os.getenv('PORT', 'not_set'),
            "HOST": os.getenv('HOST', 'not_set'),
            "OPENAI_API_KEY": "set" if os.getenv('OPENAI_API_KEY') else "not_set",
            "SUPABASE_URL": "set" if os.getenv('SUPABASE_URL') else "not_set"
        },
        "fixes_applied_v3_4": {
            "critical_fix": "Double pr√©fixes routers corrig√©s",
            "routing_fix": "Montage uniforme avec prefix='/v1'",
            "utf8_fix": "Middleware UTF-8 pour caract√®res sp√©ciaux",
            "cors_fix": "Headers UTF-8 ajout√©s au CORS",
            "documentation_fix": "Tags ajout√©s pour organisation Swagger"
        },
        "routing_explanation": {
            "architecture_fixed": "Pr√©fixes doubl√©s √©limin√©s",
            "digitalocean_behavior": "Ajoute automatiquement /api √† toutes les routes",
            "final_result": "FastAPI /v1/system + DO /api = /api/v1/system ‚úÖ",
            "utf8_result": "Caract√®res sp√©ciaux FR/ES support√©s",
            "accessibility": "Tous endpoints maintenant accessibles"
        },
        "expected_improvements": {
            "system_endpoints": "Maintenant accessibles",
            "logging_endpoints": "Maintenant accessibles", 
            "auth_endpoints": "Maintenant accessibles",
            "admin_endpoints": "Maintenant accessibles",
            "score_improvement": "De 9/22 vers 18+/22 succ√®s attendus"
        },
        "timestamp": datetime.now().isoformat()
    }

# =============================================================================
# GESTIONNAIRES D'ERREURS AVEC SUPPORT UTF-8
# =============================================================================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire d'exceptions HTTP avec UTF-8"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url.path),
            "version": "3.4.0",
            "encoding": "utf-8"
        },
        headers={"content-type": "application/json; charset=utf-8"}
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'exceptions g√©n√©rales avec UTF-8"""
    logger.error(f"‚ùå Exception non g√©r√©e: {exc}")
    logger.error(f"Traceback: {traceback.format_exc()}")
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erreur interne du serveur",
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url.path),
            "version": "3.4.0",
            "encoding": "utf-8"
        },
        headers={"content-type": "application/json; charset=utf-8"}
    )

# =============================================================================
# POINT D'ENTR√âE PRINCIPAL
# =============================================================================

if __name__ == "__main__":
    import uvicorn
    
    port = int(os.getenv('PORT', 8080))
    host = os.getenv('HOST', '0.0.0.0')
    
    logger.info(f"üöÄ D√©marrage de Intelia Expert API sur {host}:{port}")
    logger.info(f"üìã Version: 3.4.0 - Pr√©fixes Doubl√©s Corrig√©s")
    logger.info(f"üåê URLs finales: /api/v1/* (pr√©fixes uniformis√©s)")
    logger.info(f"üî§ Support caract√®res sp√©ciaux: √©, √®, √±, ¬ø, etc.")
    logger.info(f"üîß Correction critique: Pr√©fixes doubl√©s r√©solus")
    logger.info(f"üìä Endpoints attendus maintenant accessibles")
    
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info"
    )